(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.varnajs = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var lodash = {exports: {}};

	/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	lodash.exports;

	(function (module, exports) {
	(function() {

		  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
		  var undefined$1;

		  /** Used as the semantic version number. */
		  var VERSION = '4.17.21';

		  /** Used as the size to enable large array optimizations. */
		  var LARGE_ARRAY_SIZE = 200;

		  /** Error message constants. */
		  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		      FUNC_ERROR_TEXT = 'Expected a function',
		      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

		  /** Used to stand-in for `undefined` hash values. */
		  var HASH_UNDEFINED = '__lodash_hash_undefined__';

		  /** Used as the maximum memoize cache size. */
		  var MAX_MEMOIZE_SIZE = 500;

		  /** Used as the internal argument placeholder. */
		  var PLACEHOLDER = '__lodash_placeholder__';

		  /** Used to compose bitmasks for cloning. */
		  var CLONE_DEEP_FLAG = 1,
		      CLONE_FLAT_FLAG = 2,
		      CLONE_SYMBOLS_FLAG = 4;

		  /** Used to compose bitmasks for value comparisons. */
		  var COMPARE_PARTIAL_FLAG = 1,
		      COMPARE_UNORDERED_FLAG = 2;

		  /** Used to compose bitmasks for function metadata. */
		  var WRAP_BIND_FLAG = 1,
		      WRAP_BIND_KEY_FLAG = 2,
		      WRAP_CURRY_BOUND_FLAG = 4,
		      WRAP_CURRY_FLAG = 8,
		      WRAP_CURRY_RIGHT_FLAG = 16,
		      WRAP_PARTIAL_FLAG = 32,
		      WRAP_PARTIAL_RIGHT_FLAG = 64,
		      WRAP_ARY_FLAG = 128,
		      WRAP_REARG_FLAG = 256,
		      WRAP_FLIP_FLAG = 512;

		  /** Used as default options for `_.truncate`. */
		  var DEFAULT_TRUNC_LENGTH = 30,
		      DEFAULT_TRUNC_OMISSION = '...';

		  /** Used to detect hot functions by number of calls within a span of milliseconds. */
		  var HOT_COUNT = 800,
		      HOT_SPAN = 16;

		  /** Used to indicate the type of lazy iteratees. */
		  var LAZY_FILTER_FLAG = 1,
		      LAZY_MAP_FLAG = 2,
		      LAZY_WHILE_FLAG = 3;

		  /** Used as references for various `Number` constants. */
		  var INFINITY = 1 / 0,
		      MAX_SAFE_INTEGER = 9007199254740991,
		      MAX_INTEGER = 1.7976931348623157e+308,
		      NAN = 0 / 0;

		  /** Used as references for the maximum length and index of an array. */
		  var MAX_ARRAY_LENGTH = 4294967295,
		      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

		  /** Used to associate wrap methods with their bit flags. */
		  var wrapFlags = [
		    ['ary', WRAP_ARY_FLAG],
		    ['bind', WRAP_BIND_FLAG],
		    ['bindKey', WRAP_BIND_KEY_FLAG],
		    ['curry', WRAP_CURRY_FLAG],
		    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
		    ['flip', WRAP_FLIP_FLAG],
		    ['partial', WRAP_PARTIAL_FLAG],
		    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
		    ['rearg', WRAP_REARG_FLAG]
		  ];

		  /** `Object#toString` result references. */
		  var argsTag = '[object Arguments]',
		      arrayTag = '[object Array]',
		      asyncTag = '[object AsyncFunction]',
		      boolTag = '[object Boolean]',
		      dateTag = '[object Date]',
		      domExcTag = '[object DOMException]',
		      errorTag = '[object Error]',
		      funcTag = '[object Function]',
		      genTag = '[object GeneratorFunction]',
		      mapTag = '[object Map]',
		      numberTag = '[object Number]',
		      nullTag = '[object Null]',
		      objectTag = '[object Object]',
		      promiseTag = '[object Promise]',
		      proxyTag = '[object Proxy]',
		      regexpTag = '[object RegExp]',
		      setTag = '[object Set]',
		      stringTag = '[object String]',
		      symbolTag = '[object Symbol]',
		      undefinedTag = '[object Undefined]',
		      weakMapTag = '[object WeakMap]',
		      weakSetTag = '[object WeakSet]';

		  var arrayBufferTag = '[object ArrayBuffer]',
		      dataViewTag = '[object DataView]',
		      float32Tag = '[object Float32Array]',
		      float64Tag = '[object Float64Array]',
		      int8Tag = '[object Int8Array]',
		      int16Tag = '[object Int16Array]',
		      int32Tag = '[object Int32Array]',
		      uint8Tag = '[object Uint8Array]',
		      uint8ClampedTag = '[object Uint8ClampedArray]',
		      uint16Tag = '[object Uint16Array]',
		      uint32Tag = '[object Uint32Array]';

		  /** Used to match empty string literals in compiled template source. */
		  var reEmptyStringLeading = /\b__p \+= '';/g,
		      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

		  /** Used to match HTML entities and HTML characters. */
		  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		      reUnescapedHtml = /[&<>"']/g,
		      reHasEscapedHtml = RegExp(reEscapedHtml.source),
		      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

		  /** Used to match template delimiters. */
		  var reEscape = /<%-([\s\S]+?)%>/g,
		      reEvaluate = /<%([\s\S]+?)%>/g,
		      reInterpolate = /<%=([\s\S]+?)%>/g;

		  /** Used to match property names within property paths. */
		  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		      reIsPlainProp = /^\w*$/,
		      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		  /**
		   * Used to match `RegExp`
		   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		   */
		  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		      reHasRegExpChar = RegExp(reRegExpChar.source);

		  /** Used to match leading whitespace. */
		  var reTrimStart = /^\s+/;

		  /** Used to match a single whitespace character. */
		  var reWhitespace = /\s/;

		  /** Used to match wrap detail comments. */
		  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		      reSplitDetails = /,? & /;

		  /** Used to match words composed of alphanumeric characters. */
		  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

		  /**
		   * Used to validate the `validate` option in `_.template` variable.
		   *
		   * Forbids characters which could potentially change the meaning of the function argument definition:
		   * - "()," (modification of function parameters)
		   * - "=" (default value)
		   * - "[]{}" (destructuring of function parameters)
		   * - "/" (beginning of a comment)
		   * - whitespace
		   */
		  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

		  /** Used to match backslashes in property paths. */
		  var reEscapeChar = /\\(\\)?/g;

		  /**
		   * Used to match
		   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		   */
		  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

		  /** Used to match `RegExp` flags from their coerced string values. */
		  var reFlags = /\w*$/;

		  /** Used to detect bad signed hexadecimal string values. */
		  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		  /** Used to detect binary string values. */
		  var reIsBinary = /^0b[01]+$/i;

		  /** Used to detect host constructors (Safari). */
		  var reIsHostCtor = /^\[object .+?Constructor\]$/;

		  /** Used to detect octal string values. */
		  var reIsOctal = /^0o[0-7]+$/i;

		  /** Used to detect unsigned integer values. */
		  var reIsUint = /^(?:0|[1-9]\d*)$/;

		  /** Used to match Latin Unicode letters (excluding mathematical operators). */
		  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

		  /** Used to ensure capturing order of template delimiters. */
		  var reNoMatch = /($^)/;

		  /** Used to match unescaped characters in compiled string literals. */
		  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

		  /** Used to compose unicode character classes. */
		  var rsAstralRange = '\\ud800-\\udfff',
		      rsComboMarksRange = '\\u0300-\\u036f',
		      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		      rsComboSymbolsRange = '\\u20d0-\\u20ff',
		      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		      rsDingbatRange = '\\u2700-\\u27bf',
		      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		      rsPunctuationRange = '\\u2000-\\u206f',
		      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		      rsVarRange = '\\ufe0e\\ufe0f',
		      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

		  /** Used to compose unicode capture groups. */
		  var rsApos = "['\u2019]",
		      rsAstral = '[' + rsAstralRange + ']',
		      rsBreak = '[' + rsBreakRange + ']',
		      rsCombo = '[' + rsComboRange + ']',
		      rsDigits = '\\d+',
		      rsDingbat = '[' + rsDingbatRange + ']',
		      rsLower = '[' + rsLowerRange + ']',
		      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		      rsFitz = '\\ud83c[\\udffb-\\udfff]',
		      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		      rsNonAstral = '[^' + rsAstralRange + ']',
		      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		      rsUpper = '[' + rsUpperRange + ']',
		      rsZWJ = '\\u200d';

		  /** Used to compose unicode regexes. */
		  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		      reOptMod = rsModifier + '?',
		      rsOptVar = '[' + rsVarRange + ']?',
		      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
		      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
		      rsSeq = rsOptVar + reOptMod + rsOptJoin,
		      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		  /** Used to match apostrophes. */
		  var reApos = RegExp(rsApos, 'g');

		  /**
		   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		   */
		  var reComboMark = RegExp(rsCombo, 'g');

		  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		  /** Used to match complex or compound words. */
		  var reUnicodeWord = RegExp([
		    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
		    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
		    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
		    rsUpper + '+' + rsOptContrUpper,
		    rsOrdUpper,
		    rsOrdLower,
		    rsDigits,
		    rsEmoji
		  ].join('|'), 'g');

		  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

		  /** Used to detect strings that need a more robust regexp to match words. */
		  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

		  /** Used to assign default `context` object properties. */
		  var contextProps = [
		    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
		    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
		    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
		    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
		    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
		  ];

		  /** Used to make template sourceURLs easier to identify. */
		  var templateCounter = -1;

		  /** Used to identify `toStringTag` values of typed arrays. */
		  var typedArrayTags = {};
		  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		  typedArrayTags[uint32Tag] = true;
		  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		  typedArrayTags[setTag] = typedArrayTags[stringTag] =
		  typedArrayTags[weakMapTag] = false;

		  /** Used to identify `toStringTag` values supported by `_.clone`. */
		  var cloneableTags = {};
		  cloneableTags[argsTag] = cloneableTags[arrayTag] =
		  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		  cloneableTags[boolTag] = cloneableTags[dateTag] =
		  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		  cloneableTags[int32Tag] = cloneableTags[mapTag] =
		  cloneableTags[numberTag] = cloneableTags[objectTag] =
		  cloneableTags[regexpTag] = cloneableTags[setTag] =
		  cloneableTags[stringTag] = cloneableTags[symbolTag] =
		  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		  cloneableTags[errorTag] = cloneableTags[funcTag] =
		  cloneableTags[weakMapTag] = false;

		  /** Used to map Latin Unicode letters to basic Latin letters. */
		  var deburredLetters = {
		    // Latin-1 Supplement block.
		    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		    '\xc7': 'C',  '\xe7': 'c',
		    '\xd0': 'D',  '\xf0': 'd',
		    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
		    '\xd1': 'N',  '\xf1': 'n',
		    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
		    '\xc6': 'Ae', '\xe6': 'ae',
		    '\xde': 'Th', '\xfe': 'th',
		    '\xdf': 'ss',
		    // Latin Extended-A block.
		    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
		    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
		    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		    '\u0134': 'J',  '\u0135': 'j',
		    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
		    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
		    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
		    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
		    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
		    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
		    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
		    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
		    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		    '\u0174': 'W',  '\u0175': 'w',
		    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
		    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
		    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
		    '\u0132': 'IJ', '\u0133': 'ij',
		    '\u0152': 'Oe', '\u0153': 'oe',
		    '\u0149': "'n", '\u017f': 's'
		  };

		  /** Used to map characters to HTML entities. */
		  var htmlEscapes = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#39;'
		  };

		  /** Used to map HTML entities to characters. */
		  var htmlUnescapes = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': "'"
		  };

		  /** Used to escape characters for inclusion in compiled string literals. */
		  var stringEscapes = {
		    '\\': '\\',
		    "'": "'",
		    '\n': 'n',
		    '\r': 'r',
		    '\u2028': 'u2028',
		    '\u2029': 'u2029'
		  };

		  /** Built-in method references without a dependency on `root`. */
		  var freeParseFloat = parseFloat,
		      freeParseInt = parseInt;

		  /** Detect free variable `global` from Node.js. */
		  var freeGlobal = typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1 && commonjsGlobal$1.Object === Object && commonjsGlobal$1;

		  /** Detect free variable `self`. */
		  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		  /** Used as a reference to the global object. */
		  var root = freeGlobal || freeSelf || Function('return this')();

		  /** Detect free variable `exports`. */
		  var freeExports = exports && !exports.nodeType && exports;

		  /** Detect free variable `module`. */
		  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		  /** Detect the popular CommonJS extension `module.exports`. */
		  var moduleExports = freeModule && freeModule.exports === freeExports;

		  /** Detect free variable `process` from Node.js. */
		  var freeProcess = moduleExports && freeGlobal.process;

		  /** Used to access faster Node.js helpers. */
		  var nodeUtil = (function() {
		    try {
		      // Use `util.types` for Node.js 10+.
		      var types = freeModule && freeModule.require && freeModule.require('util').types;

		      if (types) {
		        return types;
		      }

		      // Legacy `process.binding('util')` for Node.js < 10.
		      return freeProcess && freeProcess.binding && freeProcess.binding('util');
		    } catch (e) {}
		  }());

		  /* Node.js helper references. */
		  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		      nodeIsDate = nodeUtil && nodeUtil.isDate,
		      nodeIsMap = nodeUtil && nodeUtil.isMap,
		      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		      nodeIsSet = nodeUtil && nodeUtil.isSet,
		      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A faster alternative to `Function#apply`, this function invokes `func`
		   * with the `this` binding of `thisArg` and the arguments of `args`.
		   *
		   * @private
		   * @param {Function} func The function to invoke.
		   * @param {*} thisArg The `this` binding of `func`.
		   * @param {Array} args The arguments to invoke `func` with.
		   * @returns {*} Returns the result of `func`.
		   */
		  function apply(func, thisArg, args) {
		    switch (args.length) {
		      case 0: return func.call(thisArg);
		      case 1: return func.call(thisArg, args[0]);
		      case 2: return func.call(thisArg, args[0], args[1]);
		      case 3: return func.call(thisArg, args[0], args[1], args[2]);
		    }
		    return func.apply(thisArg, args);
		  }

		  /**
		   * A specialized version of `baseAggregator` for arrays.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} setter The function to set `accumulator` values.
		   * @param {Function} iteratee The iteratee to transform keys.
		   * @param {Object} accumulator The initial aggregated object.
		   * @returns {Function} Returns `accumulator`.
		   */
		  function arrayAggregator(array, setter, iteratee, accumulator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      var value = array[index];
		      setter(accumulator, value, iteratee(value), array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.forEach` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEach(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (iteratee(array[index], index, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.forEachRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEachRight(array, iteratee) {
		    var length = array == null ? 0 : array.length;

		    while (length--) {
		      if (iteratee(array[length], length, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.every` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if all elements pass the predicate check,
		   *  else `false`.
		   */
		  function arrayEvery(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (!predicate(array[index], index, array)) {
		        return false;
		      }
		    }
		    return true;
		  }

		  /**
		   * A specialized version of `_.filter` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {Array} Returns the new filtered array.
		   */
		  function arrayFilter(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (predicate(value, index, array)) {
		        result[resIndex++] = value;
		      }
		    }
		    return result;
		  }

		  /**
		   * A specialized version of `_.includes` for arrays without support for
		   * specifying an index to search from.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludes(array, value) {
		    var length = array == null ? 0 : array.length;
		    return !!length && baseIndexOf(array, value, 0) > -1;
		  }

		  /**
		   * This function is like `arrayIncludes` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludesWith(array, value, comparator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (comparator(value, array[index])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * A specialized version of `_.map` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the new mapped array.
		   */
		  function arrayMap(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        result = Array(length);

		    while (++index < length) {
		      result[index] = iteratee(array[index], index, array);
		    }
		    return result;
		  }

		  /**
		   * Appends the elements of `values` to `array`.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {Array} values The values to append.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayPush(array, values) {
		    var index = -1,
		        length = values.length,
		        offset = array.length;

		    while (++index < length) {
		      array[offset + index] = values[index];
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.reduce` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the first element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduce(array, iteratee, accumulator, initAccum) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    if (initAccum && length) {
		      accumulator = array[++index];
		    }
		    while (++index < length) {
		      accumulator = iteratee(accumulator, array[index], index, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.reduceRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the last element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		    var length = array == null ? 0 : array.length;
		    if (initAccum && length) {
		      accumulator = array[--length];
		    }
		    while (length--) {
		      accumulator = iteratee(accumulator, array[length], length, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.some` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if any element passes the predicate check,
		   *  else `false`.
		   */
		  function arraySome(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (predicate(array[index], index, array)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * Gets the size of an ASCII `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  var asciiSize = baseProperty('length');

		  /**
		   * Converts an ASCII `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function asciiToArray(string) {
		    return string.split('');
		  }

		  /**
		   * Splits an ASCII `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function asciiWords(string) {
		    return string.match(reAsciiWord) || [];
		  }

		  /**
		   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
		   * without support for iteratee shorthands, which iterates over `collection`
		   * using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the found element or its key, else `undefined`.
		   */
		  function baseFindKey(collection, predicate, eachFunc) {
		    var result;
		    eachFunc(collection, function(value, key, collection) {
		      if (predicate(value, key, collection)) {
		        result = key;
		        return false;
		      }
		    });
		    return result;
		  }

		  /**
		   * The base implementation of `_.findIndex` and `_.findLastIndex` without
		   * support for iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {number} fromIndex The index to search from.
		   * @param {boolean} [fromRight] Specify iterating from right to left.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseFindIndex(array, predicate, fromIndex, fromRight) {
		    var length = array.length,
		        index = fromIndex + (fromRight ? 1 : -1);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (predicate(array[index], index, array)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOf(array, value, fromIndex) {
		    return value === value
		      ? strictIndexOf(array, value, fromIndex)
		      : baseFindIndex(array, baseIsNaN, fromIndex);
		  }

		  /**
		   * This function is like `baseIndexOf` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOfWith(array, value, fromIndex, comparator) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (comparator(array[index], value)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.isNaN` without support for number objects.
		   *
		   * @private
		   * @param {*} value The value to check.
		   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		   */
		  function baseIsNaN(value) {
		    return value !== value;
		  }

		  /**
		   * The base implementation of `_.mean` and `_.meanBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the mean.
		   */
		  function baseMean(array, iteratee) {
		    var length = array == null ? 0 : array.length;
		    return length ? (baseSum(array, iteratee) / length) : NAN;
		  }

		  /**
		   * The base implementation of `_.property` without support for deep paths.
		   *
		   * @private
		   * @param {string} key The key of the property to get.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function baseProperty(key) {
		    return function(object) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.propertyOf` without support for deep paths.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function basePropertyOf(object) {
		    return function(key) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.reduce` and `_.reduceRight`, without support
		   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} accumulator The initial value.
		   * @param {boolean} initAccum Specify using the first or last element of
		   *  `collection` as the initial value.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the accumulated value.
		   */
		  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		    eachFunc(collection, function(value, index, collection) {
		      accumulator = initAccum
		        ? (initAccum = false, value)
		        : iteratee(accumulator, value, index, collection);
		    });
		    return accumulator;
		  }

		  /**
		   * The base implementation of `_.sortBy` which uses `comparer` to define the
		   * sort order of `array` and replaces criteria objects with their corresponding
		   * values.
		   *
		   * @private
		   * @param {Array} array The array to sort.
		   * @param {Function} comparer The function to define sort order.
		   * @returns {Array} Returns `array`.
		   */
		  function baseSortBy(array, comparer) {
		    var length = array.length;

		    array.sort(comparer);
		    while (length--) {
		      array[length] = array[length].value;
		    }
		    return array;
		  }

		  /**
		   * The base implementation of `_.sum` and `_.sumBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the sum.
		   */
		  function baseSum(array, iteratee) {
		    var result,
		        index = -1,
		        length = array.length;

		    while (++index < length) {
		      var current = iteratee(array[index]);
		      if (current !== undefined$1) {
		        result = result === undefined$1 ? current : (result + current);
		      }
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.times` without support for iteratee shorthands
		   * or max array length checks.
		   *
		   * @private
		   * @param {number} n The number of times to invoke `iteratee`.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the array of results.
		   */
		  function baseTimes(n, iteratee) {
		    var index = -1,
		        result = Array(n);

		    while (++index < n) {
		      result[index] = iteratee(index);
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		   * of key-value pairs for `object` corresponding to the property names of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the key-value pairs.
		   */
		  function baseToPairs(object, props) {
		    return arrayMap(props, function(key) {
		      return [key, object[key]];
		    });
		  }

		  /**
		   * The base implementation of `_.trim`.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} Returns the trimmed string.
		   */
		  function baseTrim(string) {
		    return string
		      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
		      : string;
		  }

		  /**
		   * The base implementation of `_.unary` without support for storing metadata.
		   *
		   * @private
		   * @param {Function} func The function to cap arguments for.
		   * @returns {Function} Returns the new capped function.
		   */
		  function baseUnary(func) {
		    return function(value) {
		      return func(value);
		    };
		  }

		  /**
		   * The base implementation of `_.values` and `_.valuesIn` which creates an
		   * array of `object` property values corresponding to the property names
		   * of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the array of property values.
		   */
		  function baseValues(object, props) {
		    return arrayMap(props, function(key) {
		      return object[key];
		    });
		  }

		  /**
		   * Checks if a `cache` value for `key` exists.
		   *
		   * @private
		   * @param {Object} cache The cache to query.
		   * @param {string} key The key of the entry to check.
		   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		   */
		  function cacheHas(cache, key) {
		    return cache.has(key);
		  }

		  /**
		   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the first unmatched string symbol.
		   */
		  function charsStartIndex(strSymbols, chrSymbols) {
		    var index = -1,
		        length = strSymbols.length;

		    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the last unmatched string symbol.
		   */
		  function charsEndIndex(strSymbols, chrSymbols) {
		    var index = strSymbols.length;

		    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Gets the number of `placeholder` occurrences in `array`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} placeholder The placeholder to search for.
		   * @returns {number} Returns the placeholder count.
		   */
		  function countHolders(array, placeholder) {
		    var length = array.length,
		        result = 0;

		    while (length--) {
		      if (array[length] === placeholder) {
		        ++result;
		      }
		    }
		    return result;
		  }

		  /**
		   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		   * letters to basic Latin letters.
		   *
		   * @private
		   * @param {string} letter The matched letter to deburr.
		   * @returns {string} Returns the deburred letter.
		   */
		  var deburrLetter = basePropertyOf(deburredLetters);

		  /**
		   * Used by `_.escape` to convert characters to HTML entities.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  var escapeHtmlChar = basePropertyOf(htmlEscapes);

		  /**
		   * Used by `_.template` to escape characters for inclusion in compiled string literals.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  function escapeStringChar(chr) {
		    return '\\' + stringEscapes[chr];
		  }

		  /**
		   * Gets the value at `key` of `object`.
		   *
		   * @private
		   * @param {Object} [object] The object to query.
		   * @param {string} key The key of the property to get.
		   * @returns {*} Returns the property value.
		   */
		  function getValue(object, key) {
		    return object == null ? undefined$1 : object[key];
		  }

		  /**
		   * Checks if `string` contains Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
		   */
		  function hasUnicode(string) {
		    return reHasUnicode.test(string);
		  }

		  /**
		   * Checks if `string` contains a word composed of Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a word is found, else `false`.
		   */
		  function hasUnicodeWord(string) {
		    return reHasUnicodeWord.test(string);
		  }

		  /**
		   * Converts `iterator` to an array.
		   *
		   * @private
		   * @param {Object} iterator The iterator to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function iteratorToArray(iterator) {
		    var data,
		        result = [];

		    while (!(data = iterator.next()).done) {
		      result.push(data.value);
		    }
		    return result;
		  }

		  /**
		   * Converts `map` to its key-value pairs.
		   *
		   * @private
		   * @param {Object} map The map to convert.
		   * @returns {Array} Returns the key-value pairs.
		   */
		  function mapToArray(map) {
		    var index = -1,
		        result = Array(map.size);

		    map.forEach(function(value, key) {
		      result[++index] = [key, value];
		    });
		    return result;
		  }

		  /**
		   * Creates a unary function that invokes `func` with its argument transformed.
		   *
		   * @private
		   * @param {Function} func The function to wrap.
		   * @param {Function} transform The argument transform.
		   * @returns {Function} Returns the new function.
		   */
		  function overArg(func, transform) {
		    return function(arg) {
		      return func(transform(arg));
		    };
		  }

		  /**
		   * Replaces all `placeholder` elements in `array` with an internal placeholder
		   * and returns an array of their indexes.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {*} placeholder The placeholder to replace.
		   * @returns {Array} Returns the new array of placeholder indexes.
		   */
		  function replaceHolders(array, placeholder) {
		    var index = -1,
		        length = array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (value === placeholder || value === PLACEHOLDER) {
		        array[index] = PLACEHOLDER;
		        result[resIndex++] = index;
		      }
		    }
		    return result;
		  }

		  /**
		   * Converts `set` to an array of its values.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the values.
		   */
		  function setToArray(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = value;
		    });
		    return result;
		  }

		  /**
		   * Converts `set` to its value-value pairs.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the value-value pairs.
		   */
		  function setToPairs(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = [value, value];
		    });
		    return result;
		  }

		  /**
		   * A specialized version of `_.indexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictIndexOf(array, value, fromIndex) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * A specialized version of `_.lastIndexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictLastIndexOf(array, value, fromIndex) {
		    var index = fromIndex + 1;
		    while (index--) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return index;
		  }

		  /**
		   * Gets the number of symbols in `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the string size.
		   */
		  function stringSize(string) {
		    return hasUnicode(string)
		      ? unicodeSize(string)
		      : asciiSize(string);
		  }

		  /**
		   * Converts `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function stringToArray(string) {
		    return hasUnicode(string)
		      ? unicodeToArray(string)
		      : asciiToArray(string);
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		   * character of `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the index of the last non-whitespace character.
		   */
		  function trimmedEndIndex(string) {
		    var index = string.length;

		    while (index-- && reWhitespace.test(string.charAt(index))) {}
		    return index;
		  }

		  /**
		   * Used by `_.unescape` to convert HTML entities to characters.
		   *
		   * @private
		   * @param {string} chr The matched character to unescape.
		   * @returns {string} Returns the unescaped character.
		   */
		  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

		  /**
		   * Gets the size of a Unicode `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  function unicodeSize(string) {
		    var result = reUnicode.lastIndex = 0;
		    while (reUnicode.test(string)) {
		      ++result;
		    }
		    return result;
		  }

		  /**
		   * Converts a Unicode `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function unicodeToArray(string) {
		    return string.match(reUnicode) || [];
		  }

		  /**
		   * Splits a Unicode `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function unicodeWords(string) {
		    return string.match(reUnicodeWord) || [];
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Create a new pristine `lodash` function using the `context` object.
		   *
		   * @static
		   * @memberOf _
		   * @since 1.1.0
		   * @category Util
		   * @param {Object} [context=root] The context object.
		   * @returns {Function} Returns a new `lodash` function.
		   * @example
		   *
		   * _.mixin({ 'foo': _.constant('foo') });
		   *
		   * var lodash = _.runInContext();
		   * lodash.mixin({ 'bar': lodash.constant('bar') });
		   *
		   * _.isFunction(_.foo);
		   * // => true
		   * _.isFunction(_.bar);
		   * // => false
		   *
		   * lodash.isFunction(lodash.foo);
		   * // => false
		   * lodash.isFunction(lodash.bar);
		   * // => true
		   *
		   * // Create a suped-up `defer` in Node.js.
		   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		   */
		  var runInContext = (function runInContext(context) {
		    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		    /** Built-in constructor references. */
		    var Array = context.Array,
		        Date = context.Date,
		        Error = context.Error,
		        Function = context.Function,
		        Math = context.Math,
		        Object = context.Object,
		        RegExp = context.RegExp,
		        String = context.String,
		        TypeError = context.TypeError;

		    /** Used for built-in method references. */
		    var arrayProto = Array.prototype,
		        funcProto = Function.prototype,
		        objectProto = Object.prototype;

		    /** Used to detect overreaching core-js shims. */
		    var coreJsData = context['__core-js_shared__'];

		    /** Used to resolve the decompiled source of functions. */
		    var funcToString = funcProto.toString;

		    /** Used to check objects for own properties. */
		    var hasOwnProperty = objectProto.hasOwnProperty;

		    /** Used to generate unique IDs. */
		    var idCounter = 0;

		    /** Used to detect methods masquerading as native. */
		    var maskSrcKey = (function() {
		      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		      return uid ? ('Symbol(src)_1.' + uid) : '';
		    }());

		    /**
		     * Used to resolve the
		     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		     * of values.
		     */
		    var nativeObjectToString = objectProto.toString;

		    /** Used to infer the `Object` constructor. */
		    var objectCtorString = funcToString.call(Object);

		    /** Used to restore the original `_` reference in `_.noConflict`. */
		    var oldDash = root._;

		    /** Used to detect if a method is native. */
		    var reIsNative = RegExp('^' +
		      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		    );

		    /** Built-in value references. */
		    var Buffer = moduleExports ? context.Buffer : undefined$1,
		        Symbol = context.Symbol,
		        Uint8Array = context.Uint8Array,
		        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
		        getPrototype = overArg(Object.getPrototypeOf, Object),
		        objectCreate = Object.create,
		        propertyIsEnumerable = objectProto.propertyIsEnumerable,
		        splice = arrayProto.splice,
		        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
		        symIterator = Symbol ? Symbol.iterator : undefined$1,
		        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

		    var defineProperty = (function() {
		      try {
		        var func = getNative(Object, 'defineProperty');
		        func({}, '', {});
		        return func;
		      } catch (e) {}
		    }());

		    /** Mocked built-ins. */
		    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
		        ctxNow = Date && Date.now !== root.Date.now && Date.now,
		        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		    /* Built-in method references for those with the same name as other `lodash` methods. */
		    var nativeCeil = Math.ceil,
		        nativeFloor = Math.floor,
		        nativeGetSymbols = Object.getOwnPropertySymbols,
		        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
		        nativeIsFinite = context.isFinite,
		        nativeJoin = arrayProto.join,
		        nativeKeys = overArg(Object.keys, Object),
		        nativeMax = Math.max,
		        nativeMin = Math.min,
		        nativeNow = Date.now,
		        nativeParseInt = context.parseInt,
		        nativeRandom = Math.random,
		        nativeReverse = arrayProto.reverse;

		    /* Built-in method references that are verified to be native. */
		    var DataView = getNative(context, 'DataView'),
		        Map = getNative(context, 'Map'),
		        Promise = getNative(context, 'Promise'),
		        Set = getNative(context, 'Set'),
		        WeakMap = getNative(context, 'WeakMap'),
		        nativeCreate = getNative(Object, 'create');

		    /** Used to store function metadata. */
		    var metaMap = WeakMap && new WeakMap;

		    /** Used to lookup unminified function names. */
		    var realNames = {};

		    /** Used to detect maps, sets, and weakmaps. */
		    var dataViewCtorString = toSource(DataView),
		        mapCtorString = toSource(Map),
		        promiseCtorString = toSource(Promise),
		        setCtorString = toSource(Set),
		        weakMapCtorString = toSource(WeakMap);

		    /** Used to convert symbols to primitives and strings. */
		    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
		        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
		        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` object which wraps `value` to enable implicit method
		     * chain sequences. Methods that operate on and return arrays, collections,
		     * and functions can be chained together. Methods that retrieve a single value
		     * or may return a primitive value will automatically end the chain sequence
		     * and return the unwrapped value. Otherwise, the value must be unwrapped
		     * with `_#value`.
		     *
		     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		     * enabled using `_.chain`.
		     *
		     * The execution of chained methods is lazy, that is, it's deferred until
		     * `_#value` is implicitly or explicitly called.
		     *
		     * Lazy evaluation allows several methods to support shortcut fusion.
		     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		     * the creation of intermediate arrays and can greatly reduce the number of
		     * iteratee executions. Sections of a chain sequence qualify for shortcut
		     * fusion if the section is applied to an array and iteratees accept only
		     * one argument. The heuristic for whether a section qualifies for shortcut
		     * fusion is subject to change.
		     *
		     * Chaining is supported in custom builds as long as the `_#value` method is
		     * directly or indirectly included in the build.
		     *
		     * In addition to lodash methods, wrappers have `Array` and `String` methods.
		     *
		     * The wrapper `Array` methods are:
		     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		     *
		     * The wrapper `String` methods are:
		     * `replace` and `split`
		     *
		     * The wrapper methods that support shortcut fusion are:
		     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		     *
		     * The chainable wrapper methods are:
		     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		     * `zipObject`, `zipObjectDeep`, and `zipWith`
		     *
		     * The wrapper methods that are **not** chainable by default are:
		     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		     * `upperFirst`, `value`, and `words`
		     *
		     * @name _
		     * @constructor
		     * @category Seq
		     * @param {*} value The value to wrap in a `lodash` instance.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2, 3]);
		     *
		     * // Returns an unwrapped value.
		     * wrapped.reduce(_.add);
		     * // => 6
		     *
		     * // Returns a wrapped value.
		     * var squares = wrapped.map(square);
		     *
		     * _.isArray(squares);
		     * // => false
		     *
		     * _.isArray(squares.value());
		     * // => true
		     */
		    function lodash(value) {
		      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
		        if (value instanceof LodashWrapper) {
		          return value;
		        }
		        if (hasOwnProperty.call(value, '__wrapped__')) {
		          return wrapperClone(value);
		        }
		      }
		      return new LodashWrapper(value);
		    }

		    /**
		     * The base implementation of `_.create` without support for assigning
		     * properties to the created object.
		     *
		     * @private
		     * @param {Object} proto The object to inherit from.
		     * @returns {Object} Returns the new object.
		     */
		    var baseCreate = (function() {
		      function object() {}
		      return function(proto) {
		        if (!isObject(proto)) {
		          return {};
		        }
		        if (objectCreate) {
		          return objectCreate(proto);
		        }
		        object.prototype = proto;
		        var result = new object;
		        object.prototype = undefined$1;
		        return result;
		      };
		    }());

		    /**
		     * The function whose prototype chain sequence wrappers inherit from.
		     *
		     * @private
		     */
		    function baseLodash() {
		      // No operation performed.
		    }

		    /**
		     * The base constructor for creating `lodash` wrapper objects.
		     *
		     * @private
		     * @param {*} value The value to wrap.
		     * @param {boolean} [chainAll] Enable explicit method chain sequences.
		     */
		    function LodashWrapper(value, chainAll) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__chain__ = !!chainAll;
		      this.__index__ = 0;
		      this.__values__ = undefined$1;
		    }

		    /**
		     * By default, the template delimiters used by lodash are like those in
		     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		     * following template settings to use alternative delimiters.
		     *
		     * @static
		     * @memberOf _
		     * @type {Object}
		     */
		    lodash.templateSettings = {

		      /**
		       * Used to detect `data` property values to be HTML-escaped.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'escape': reEscape,

		      /**
		       * Used to detect code to be evaluated.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'evaluate': reEvaluate,

		      /**
		       * Used to detect `data` property values to inject.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'interpolate': reInterpolate,

		      /**
		       * Used to reference the data object in the template text.
		       *
		       * @memberOf _.templateSettings
		       * @type {string}
		       */
		      'variable': '',

		      /**
		       * Used to import variables into the compiled template.
		       *
		       * @memberOf _.templateSettings
		       * @type {Object}
		       */
		      'imports': {

		        /**
		         * A reference to the `lodash` function.
		         *
		         * @memberOf _.templateSettings.imports
		         * @type {Function}
		         */
		        '_': lodash
		      }
		    };

		    // Ensure wrappers are instances of `baseLodash`.
		    lodash.prototype = baseLodash.prototype;
		    lodash.prototype.constructor = lodash;

		    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		    LodashWrapper.prototype.constructor = LodashWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		     *
		     * @private
		     * @constructor
		     * @param {*} value The value to wrap.
		     */
		    function LazyWrapper(value) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__dir__ = 1;
		      this.__filtered__ = false;
		      this.__iteratees__ = [];
		      this.__takeCount__ = MAX_ARRAY_LENGTH;
		      this.__views__ = [];
		    }

		    /**
		     * Creates a clone of the lazy wrapper object.
		     *
		     * @private
		     * @name clone
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the cloned `LazyWrapper` object.
		     */
		    function lazyClone() {
		      var result = new LazyWrapper(this.__wrapped__);
		      result.__actions__ = copyArray(this.__actions__);
		      result.__dir__ = this.__dir__;
		      result.__filtered__ = this.__filtered__;
		      result.__iteratees__ = copyArray(this.__iteratees__);
		      result.__takeCount__ = this.__takeCount__;
		      result.__views__ = copyArray(this.__views__);
		      return result;
		    }

		    /**
		     * Reverses the direction of lazy iteration.
		     *
		     * @private
		     * @name reverse
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the new reversed `LazyWrapper` object.
		     */
		    function lazyReverse() {
		      if (this.__filtered__) {
		        var result = new LazyWrapper(this);
		        result.__dir__ = -1;
		        result.__filtered__ = true;
		      } else {
		        result = this.clone();
		        result.__dir__ *= -1;
		      }
		      return result;
		    }

		    /**
		     * Extracts the unwrapped value from its lazy wrapper.
		     *
		     * @private
		     * @name value
		     * @memberOf LazyWrapper
		     * @returns {*} Returns the unwrapped value.
		     */
		    function lazyValue() {
		      var array = this.__wrapped__.value(),
		          dir = this.__dir__,
		          isArr = isArray(array),
		          isRight = dir < 0,
		          arrLength = isArr ? array.length : 0,
		          view = getView(0, arrLength, this.__views__),
		          start = view.start,
		          end = view.end,
		          length = end - start,
		          index = isRight ? end : (start - 1),
		          iteratees = this.__iteratees__,
		          iterLength = iteratees.length,
		          resIndex = 0,
		          takeCount = nativeMin(length, this.__takeCount__);

		      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
		        return baseWrapperValue(array, this.__actions__);
		      }
		      var result = [];

		      outer:
		      while (length-- && resIndex < takeCount) {
		        index += dir;

		        var iterIndex = -1,
		            value = array[index];

		        while (++iterIndex < iterLength) {
		          var data = iteratees[iterIndex],
		              iteratee = data.iteratee,
		              type = data.type,
		              computed = iteratee(value);

		          if (type == LAZY_MAP_FLAG) {
		            value = computed;
		          } else if (!computed) {
		            if (type == LAZY_FILTER_FLAG) {
		              continue outer;
		            } else {
		              break outer;
		            }
		          }
		        }
		        result[resIndex++] = value;
		      }
		      return result;
		    }

		    // Ensure `LazyWrapper` is an instance of `baseLodash`.
		    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		    LazyWrapper.prototype.constructor = LazyWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a hash object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Hash(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the hash.
		     *
		     * @private
		     * @name clear
		     * @memberOf Hash
		     */
		    function hashClear() {
		      this.__data__ = nativeCreate ? nativeCreate(null) : {};
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the hash.
		     *
		     * @private
		     * @name delete
		     * @memberOf Hash
		     * @param {Object} hash The hash to modify.
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function hashDelete(key) {
		      var result = this.has(key) && delete this.__data__[key];
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the hash value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Hash
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function hashGet(key) {
		      var data = this.__data__;
		      if (nativeCreate) {
		        var result = data[key];
		        return result === HASH_UNDEFINED ? undefined$1 : result;
		      }
		      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
		    }

		    /**
		     * Checks if a hash value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Hash
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function hashHas(key) {
		      var data = this.__data__;
		      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
		    }

		    /**
		     * Sets the hash `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Hash
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the hash instance.
		     */
		    function hashSet(key, value) {
		      var data = this.__data__;
		      this.size += this.has(key) ? 0 : 1;
		      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
		      return this;
		    }

		    // Add methods to `Hash`.
		    Hash.prototype.clear = hashClear;
		    Hash.prototype['delete'] = hashDelete;
		    Hash.prototype.get = hashGet;
		    Hash.prototype.has = hashHas;
		    Hash.prototype.set = hashSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an list cache object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function ListCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the list cache.
		     *
		     * @private
		     * @name clear
		     * @memberOf ListCache
		     */
		    function listCacheClear() {
		      this.__data__ = [];
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the list cache.
		     *
		     * @private
		     * @name delete
		     * @memberOf ListCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function listCacheDelete(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        return false;
		      }
		      var lastIndex = data.length - 1;
		      if (index == lastIndex) {
		        data.pop();
		      } else {
		        splice.call(data, index, 1);
		      }
		      --this.size;
		      return true;
		    }

		    /**
		     * Gets the list cache value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf ListCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function listCacheGet(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      return index < 0 ? undefined$1 : data[index][1];
		    }

		    /**
		     * Checks if a list cache value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf ListCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function listCacheHas(key) {
		      return assocIndexOf(this.__data__, key) > -1;
		    }

		    /**
		     * Sets the list cache `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf ListCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the list cache instance.
		     */
		    function listCacheSet(key, value) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        ++this.size;
		        data.push([key, value]);
		      } else {
		        data[index][1] = value;
		      }
		      return this;
		    }

		    // Add methods to `ListCache`.
		    ListCache.prototype.clear = listCacheClear;
		    ListCache.prototype['delete'] = listCacheDelete;
		    ListCache.prototype.get = listCacheGet;
		    ListCache.prototype.has = listCacheHas;
		    ListCache.prototype.set = listCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a map cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function MapCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the map.
		     *
		     * @private
		     * @name clear
		     * @memberOf MapCache
		     */
		    function mapCacheClear() {
		      this.size = 0;
		      this.__data__ = {
		        'hash': new Hash,
		        'map': new (Map || ListCache),
		        'string': new Hash
		      };
		    }

		    /**
		     * Removes `key` and its value from the map.
		     *
		     * @private
		     * @name delete
		     * @memberOf MapCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function mapCacheDelete(key) {
		      var result = getMapData(this, key)['delete'](key);
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the map value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf MapCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function mapCacheGet(key) {
		      return getMapData(this, key).get(key);
		    }

		    /**
		     * Checks if a map value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf MapCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function mapCacheHas(key) {
		      return getMapData(this, key).has(key);
		    }

		    /**
		     * Sets the map `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf MapCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the map cache instance.
		     */
		    function mapCacheSet(key, value) {
		      var data = getMapData(this, key),
		          size = data.size;

		      data.set(key, value);
		      this.size += data.size == size ? 0 : 1;
		      return this;
		    }

		    // Add methods to `MapCache`.
		    MapCache.prototype.clear = mapCacheClear;
		    MapCache.prototype['delete'] = mapCacheDelete;
		    MapCache.prototype.get = mapCacheGet;
		    MapCache.prototype.has = mapCacheHas;
		    MapCache.prototype.set = mapCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     *
		     * Creates an array cache object to store unique values.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [values] The values to cache.
		     */
		    function SetCache(values) {
		      var index = -1,
		          length = values == null ? 0 : values.length;

		      this.__data__ = new MapCache;
		      while (++index < length) {
		        this.add(values[index]);
		      }
		    }

		    /**
		     * Adds `value` to the array cache.
		     *
		     * @private
		     * @name add
		     * @memberOf SetCache
		     * @alias push
		     * @param {*} value The value to cache.
		     * @returns {Object} Returns the cache instance.
		     */
		    function setCacheAdd(value) {
		      this.__data__.set(value, HASH_UNDEFINED);
		      return this;
		    }

		    /**
		     * Checks if `value` is in the array cache.
		     *
		     * @private
		     * @name has
		     * @memberOf SetCache
		     * @param {*} value The value to search for.
		     * @returns {number} Returns `true` if `value` is found, else `false`.
		     */
		    function setCacheHas(value) {
		      return this.__data__.has(value);
		    }

		    // Add methods to `SetCache`.
		    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		    SetCache.prototype.has = setCacheHas;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a stack cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Stack(entries) {
		      var data = this.__data__ = new ListCache(entries);
		      this.size = data.size;
		    }

		    /**
		     * Removes all key-value entries from the stack.
		     *
		     * @private
		     * @name clear
		     * @memberOf Stack
		     */
		    function stackClear() {
		      this.__data__ = new ListCache;
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the stack.
		     *
		     * @private
		     * @name delete
		     * @memberOf Stack
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function stackDelete(key) {
		      var data = this.__data__,
		          result = data['delete'](key);

		      this.size = data.size;
		      return result;
		    }

		    /**
		     * Gets the stack value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Stack
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function stackGet(key) {
		      return this.__data__.get(key);
		    }

		    /**
		     * Checks if a stack value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Stack
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function stackHas(key) {
		      return this.__data__.has(key);
		    }

		    /**
		     * Sets the stack `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Stack
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the stack cache instance.
		     */
		    function stackSet(key, value) {
		      var data = this.__data__;
		      if (data instanceof ListCache) {
		        var pairs = data.__data__;
		        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		          pairs.push([key, value]);
		          this.size = ++data.size;
		          return this;
		        }
		        data = this.__data__ = new MapCache(pairs);
		      }
		      data.set(key, value);
		      this.size = data.size;
		      return this;
		    }

		    // Add methods to `Stack`.
		    Stack.prototype.clear = stackClear;
		    Stack.prototype['delete'] = stackDelete;
		    Stack.prototype.get = stackGet;
		    Stack.prototype.has = stackHas;
		    Stack.prototype.set = stackSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of the enumerable property names of the array-like `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @param {boolean} inherited Specify returning inherited property names.
		     * @returns {Array} Returns the array of property names.
		     */
		    function arrayLikeKeys(value, inherited) {
		      var isArr = isArray(value),
		          isArg = !isArr && isArguments(value),
		          isBuff = !isArr && !isArg && isBuffer(value),
		          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		          skipIndexes = isArr || isArg || isBuff || isType,
		          result = skipIndexes ? baseTimes(value.length, String) : [],
		          length = result.length;

		      for (var key in value) {
		        if ((inherited || hasOwnProperty.call(value, key)) &&
		            !(skipIndexes && (
		               // Safari 9 has enumerable `arguments.length` in strict mode.
		               key == 'length' ||
		               // Node.js 0.10 has enumerable non-index properties on buffers.
		               (isBuff && (key == 'offset' || key == 'parent')) ||
		               // PhantomJS 2 has enumerable non-index properties on typed arrays.
		               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		               // Skip index properties.
		               isIndex(key, length)
		            ))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `_.sample` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @returns {*} Returns the random element.
		     */
		    function arraySample(array) {
		      var length = array.length;
		      return length ? array[baseRandom(0, length - 1)] : undefined$1;
		    }

		    /**
		     * A specialized version of `_.sampleSize` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function arraySampleSize(array, n) {
		      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		    }

		    /**
		     * A specialized version of `_.shuffle` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function arrayShuffle(array) {
		      return shuffleSelf(copyArray(array));
		    }

		    /**
		     * This function is like `assignValue` except that it doesn't assign
		     * `undefined` values.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignMergeValue(object, key, value) {
		      if ((value !== undefined$1 && !eq(object[key], value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Assigns `value` to `key` of `object` if the existing value is not equivalent
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignValue(object, key, value) {
		      var objValue = object[key];
		      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Gets the index at which the `key` is found in `array` of key-value pairs.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {*} key The key to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     */
		    function assocIndexOf(array, key) {
		      var length = array.length;
		      while (length--) {
		        if (eq(array[length][0], key)) {
		          return length;
		        }
		      }
		      return -1;
		    }

		    /**
		     * Aggregates elements of `collection` on `accumulator` with keys transformed
		     * by `iteratee` and values set by `setter`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform keys.
		     * @param {Object} accumulator The initial aggregated object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseAggregator(collection, setter, iteratee, accumulator) {
		      baseEach(collection, function(value, key, collection) {
		        setter(accumulator, value, iteratee(value), collection);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.assign` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssign(object, source) {
		      return object && copyObject(source, keys(source), object);
		    }

		    /**
		     * The base implementation of `_.assignIn` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssignIn(object, source) {
		      return object && copyObject(source, keysIn(source), object);
		    }

		    /**
		     * The base implementation of `assignValue` and `assignMergeValue` without
		     * value checks.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function baseAssignValue(object, key, value) {
		      if (key == '__proto__' && defineProperty) {
		        defineProperty(object, key, {
		          'configurable': true,
		          'enumerable': true,
		          'value': value,
		          'writable': true
		        });
		      } else {
		        object[key] = value;
		      }
		    }

		    /**
		     * The base implementation of `_.at` without support for individual paths.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Array} Returns the picked elements.
		     */
		    function baseAt(object, paths) {
		      var index = -1,
		          length = paths.length,
		          result = Array(length),
		          skip = object == null;

		      while (++index < length) {
		        result[index] = skip ? undefined$1 : get(object, paths[index]);
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.clamp` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     */
		    function baseClamp(number, lower, upper) {
		      if (number === number) {
		        if (upper !== undefined$1) {
		          number = number <= upper ? number : upper;
		        }
		        if (lower !== undefined$1) {
		          number = number >= lower ? number : lower;
		        }
		      }
		      return number;
		    }

		    /**
		     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		     * traversed objects.
		     *
		     * @private
		     * @param {*} value The value to clone.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Deep clone
		     *  2 - Flatten inherited properties
		     *  4 - Clone symbols
		     * @param {Function} [customizer] The function to customize cloning.
		     * @param {string} [key] The key of `value`.
		     * @param {Object} [object] The parent object of `value`.
		     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		     * @returns {*} Returns the cloned value.
		     */
		    function baseClone(value, bitmask, customizer, key, object, stack) {
		      var result,
		          isDeep = bitmask & CLONE_DEEP_FLAG,
		          isFlat = bitmask & CLONE_FLAT_FLAG,
		          isFull = bitmask & CLONE_SYMBOLS_FLAG;

		      if (customizer) {
		        result = object ? customizer(value, key, object, stack) : customizer(value);
		      }
		      if (result !== undefined$1) {
		        return result;
		      }
		      if (!isObject(value)) {
		        return value;
		      }
		      var isArr = isArray(value);
		      if (isArr) {
		        result = initCloneArray(value);
		        if (!isDeep) {
		          return copyArray(value, result);
		        }
		      } else {
		        var tag = getTag(value),
		            isFunc = tag == funcTag || tag == genTag;

		        if (isBuffer(value)) {
		          return cloneBuffer(value, isDeep);
		        }
		        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		          result = (isFlat || isFunc) ? {} : initCloneObject(value);
		          if (!isDeep) {
		            return isFlat
		              ? copySymbolsIn(value, baseAssignIn(result, value))
		              : copySymbols(value, baseAssign(result, value));
		          }
		        } else {
		          if (!cloneableTags[tag]) {
		            return object ? value : {};
		          }
		          result = initCloneByTag(value, tag, isDeep);
		        }
		      }
		      // Check for circular references and return its corresponding clone.
		      stack || (stack = new Stack);
		      var stacked = stack.get(value);
		      if (stacked) {
		        return stacked;
		      }
		      stack.set(value, result);

		      if (isSet(value)) {
		        value.forEach(function(subValue) {
		          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		        });
		      } else if (isMap(value)) {
		        value.forEach(function(subValue, key) {
		          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		        });
		      }

		      var keysFunc = isFull
		        ? (isFlat ? getAllKeysIn : getAllKeys)
		        : (isFlat ? keysIn : keys);

		      var props = isArr ? undefined$1 : keysFunc(value);
		      arrayEach(props || value, function(subValue, key) {
		        if (props) {
		          key = subValue;
		          subValue = value[key];
		        }
		        // Recursively populate clone (susceptible to call stack limits).
		        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.conforms` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseConforms(source) {
		      var props = keys(source);
		      return function(object) {
		        return baseConformsTo(object, source, props);
		      };
		    }

		    /**
		     * The base implementation of `_.conformsTo` which accepts `props` to check.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     */
		    function baseConformsTo(object, source, props) {
		      var length = props.length;
		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (length--) {
		        var key = props[length],
		            predicate = source[key],
		            value = object[key];

		        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.delay` and `_.defer` which accepts `args`
		     * to provide to `func`.
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {Array} args The arguments to provide to `func`.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    function baseDelay(func, wait, args) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
		    }

		    /**
		     * The base implementation of methods like `_.difference` without support
		     * for excluding multiple arrays or iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Array} values The values to exclude.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     */
		    function baseDifference(array, values, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          isCommon = true,
		          length = array.length,
		          result = [],
		          valuesLength = values.length;

		      if (!length) {
		        return result;
		      }
		      if (iteratee) {
		        values = arrayMap(values, baseUnary(iteratee));
		      }
		      if (comparator) {
		        includes = arrayIncludesWith;
		        isCommon = false;
		      }
		      else if (values.length >= LARGE_ARRAY_SIZE) {
		        includes = cacheHas;
		        isCommon = false;
		        values = new SetCache(values);
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee == null ? value : iteratee(value);

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var valuesIndex = valuesLength;
		          while (valuesIndex--) {
		            if (values[valuesIndex] === computed) {
		              continue outer;
		            }
		          }
		          result.push(value);
		        }
		        else if (!includes(values, computed, comparator)) {
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.forEach` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEach = createBaseEach(baseForOwn);

		    /**
		     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEachRight = createBaseEach(baseForOwnRight, true);

		    /**
		     * The base implementation of `_.every` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`
		     */
		    function baseEvery(collection, predicate) {
		      var result = true;
		      baseEach(collection, function(value, index, collection) {
		        result = !!predicate(value, index, collection);
		        return result;
		      });
		      return result;
		    }

		    /**
		     * The base implementation of methods like `_.max` and `_.min` which accepts a
		     * `comparator` to determine the extremum value.
		     *
		     * @private
		     * @param {Array} array The array to iterate over.
		     * @param {Function} iteratee The iteratee invoked per iteration.
		     * @param {Function} comparator The comparator used to compare values.
		     * @returns {*} Returns the extremum value.
		     */
		    function baseExtremum(array, iteratee, comparator) {
		      var index = -1,
		          length = array.length;

		      while (++index < length) {
		        var value = array[index],
		            current = iteratee(value);

		        if (current != null && (computed === undefined$1
		              ? (current === current && !isSymbol(current))
		              : comparator(current, computed)
		            )) {
		          var computed = current,
		              result = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.fill` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     */
		    function baseFill(array, value, start, end) {
		      var length = array.length;

		      start = toInteger(start);
		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = (end === undefined$1 || end > length) ? length : toInteger(end);
		      if (end < 0) {
		        end += length;
		      }
		      end = start > end ? 0 : toLength(end);
		      while (start < end) {
		        array[start++] = value;
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.filter` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     */
		    function baseFilter(collection, predicate) {
		      var result = [];
		      baseEach(collection, function(value, index, collection) {
		        if (predicate(value, index, collection)) {
		          result.push(value);
		        }
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.flatten` with support for restricting flattening.
		     *
		     * @private
		     * @param {Array} array The array to flatten.
		     * @param {number} depth The maximum recursion depth.
		     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		     * @param {Array} [result=[]] The initial result value.
		     * @returns {Array} Returns the new flattened array.
		     */
		    function baseFlatten(array, depth, predicate, isStrict, result) {
		      var index = -1,
		          length = array.length;

		      predicate || (predicate = isFlattenable);
		      result || (result = []);

		      while (++index < length) {
		        var value = array[index];
		        if (depth > 0 && predicate(value)) {
		          if (depth > 1) {
		            // Recursively flatten arrays (susceptible to call stack limits).
		            baseFlatten(value, depth - 1, predicate, isStrict, result);
		          } else {
		            arrayPush(result, value);
		          }
		        } else if (!isStrict) {
		          result[result.length] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `baseForOwn` which iterates over `object`
		     * properties returned by `keysFunc` and invokes `iteratee` for each property.
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseFor = createBaseFor();

		    /**
		     * This function is like `baseFor` except that it iterates over properties
		     * in the opposite order.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseForRight = createBaseFor(true);

		    /**
		     * The base implementation of `_.forOwn` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwn(object, iteratee) {
		      return object && baseFor(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwnRight(object, iteratee) {
		      return object && baseForRight(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.functions` which creates an array of
		     * `object` function property names filtered from `props`.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Array} props The property names to filter.
		     * @returns {Array} Returns the function names.
		     */
		    function baseFunctions(object, props) {
		      return arrayFilter(props, function(key) {
		        return isFunction(object[key]);
		      });
		    }

		    /**
		     * The base implementation of `_.get` without support for default values.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseGet(object, path) {
		      path = castPath(path, object);

		      var index = 0,
		          length = path.length;

		      while (object != null && index < length) {
		        object = object[toKey(path[index++])];
		      }
		      return (index && index == length) ? object : undefined$1;
		    }

		    /**
		     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @param {Function} symbolsFunc The function to get the symbols of `object`.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		      var result = keysFunc(object);
		      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		    }

		    /**
		     * The base implementation of `getTag` without fallbacks for buggy environments.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    function baseGetTag(value) {
		      if (value == null) {
		        return value === undefined$1 ? undefinedTag : nullTag;
		      }
		      return (symToStringTag && symToStringTag in Object(value))
		        ? getRawTag(value)
		        : objectToString(value);
		    }

		    /**
		     * The base implementation of `_.gt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     */
		    function baseGt(value, other) {
		      return value > other;
		    }

		    /**
		     * The base implementation of `_.has` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHas(object, key) {
		      return object != null && hasOwnProperty.call(object, key);
		    }

		    /**
		     * The base implementation of `_.hasIn` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHasIn(object, key) {
		      return object != null && key in Object(object);
		    }

		    /**
		     * The base implementation of `_.inRange` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to check.
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     */
		    function baseInRange(number, start, end) {
		      return number >= nativeMin(start, end) && number < nativeMax(start, end);
		    }

		    /**
		     * The base implementation of methods like `_.intersection`, without support
		     * for iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of shared values.
		     */
		    function baseIntersection(arrays, iteratee, comparator) {
		      var includes = comparator ? arrayIncludesWith : arrayIncludes,
		          length = arrays[0].length,
		          othLength = arrays.length,
		          othIndex = othLength,
		          caches = Array(othLength),
		          maxLength = Infinity,
		          result = [];

		      while (othIndex--) {
		        var array = arrays[othIndex];
		        if (othIndex && iteratee) {
		          array = arrayMap(array, baseUnary(iteratee));
		        }
		        maxLength = nativeMin(array.length, maxLength);
		        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
		          ? new SetCache(othIndex && array)
		          : undefined$1;
		      }
		      array = arrays[0];

		      var index = -1,
		          seen = caches[0];

		      outer:
		      while (++index < length && result.length < maxLength) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (!(seen
		              ? cacheHas(seen, computed)
		              : includes(result, computed, comparator)
		            )) {
		          othIndex = othLength;
		          while (--othIndex) {
		            var cache = caches[othIndex];
		            if (!(cache
		                  ? cacheHas(cache, computed)
		                  : includes(arrays[othIndex], computed, comparator))
		                ) {
		              continue outer;
		            }
		          }
		          if (seen) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.invert` and `_.invertBy` which inverts
		     * `object` with values transformed by `iteratee` and set by `setter`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform values.
		     * @param {Object} accumulator The initial inverted object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseInverter(object, setter, iteratee, accumulator) {
		      baseForOwn(object, function(value, key, object) {
		        setter(accumulator, iteratee(value), key, object);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.invoke` without support for individual
		     * method arguments.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {Array} args The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     */
		    function baseInvoke(object, path, args) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      var func = object == null ? object : object[toKey(last(path))];
		      return func == null ? undefined$1 : apply(func, object, args);
		    }

		    /**
		     * The base implementation of `_.isArguments`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     */
		    function baseIsArguments(value) {
		      return isObjectLike(value) && baseGetTag(value) == argsTag;
		    }

		    /**
		     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     */
		    function baseIsArrayBuffer(value) {
		      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		    }

		    /**
		     * The base implementation of `_.isDate` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     */
		    function baseIsDate(value) {
		      return isObjectLike(value) && baseGetTag(value) == dateTag;
		    }

		    /**
		     * The base implementation of `_.isEqual` which supports partial comparisons
		     * and tracks traversed objects.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Unordered comparison
		     *  2 - Partial comparison
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     */
		    function baseIsEqual(value, other, bitmask, customizer, stack) {
		      if (value === other) {
		        return true;
		      }
		      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
		        return value !== value && other !== other;
		      }
		      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		    }

		    /**
		     * A specialized version of `baseIsEqual` for arrays and objects which performs
		     * deep comparisons and tracks traversed objects enabling objects with circular
		     * references to be compared.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		      var objIsArr = isArray(object),
		          othIsArr = isArray(other),
		          objTag = objIsArr ? arrayTag : getTag(object),
		          othTag = othIsArr ? arrayTag : getTag(other);

		      objTag = objTag == argsTag ? objectTag : objTag;
		      othTag = othTag == argsTag ? objectTag : othTag;

		      var objIsObj = objTag == objectTag,
		          othIsObj = othTag == objectTag,
		          isSameTag = objTag == othTag;

		      if (isSameTag && isBuffer(object)) {
		        if (!isBuffer(other)) {
		          return false;
		        }
		        objIsArr = true;
		        objIsObj = false;
		      }
		      if (isSameTag && !objIsObj) {
		        stack || (stack = new Stack);
		        return (objIsArr || isTypedArray(object))
		          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
		          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		      }
		      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		        if (objIsWrapped || othIsWrapped) {
		          var objUnwrapped = objIsWrapped ? object.value() : object,
		              othUnwrapped = othIsWrapped ? other.value() : other;

		          stack || (stack = new Stack);
		          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		        }
		      }
		      if (!isSameTag) {
		        return false;
		      }
		      stack || (stack = new Stack);
		      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		    }

		    /**
		     * The base implementation of `_.isMap` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     */
		    function baseIsMap(value) {
		      return isObjectLike(value) && getTag(value) == mapTag;
		    }

		    /**
		     * The base implementation of `_.isMatch` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Array} matchData The property names, values, and compare flags to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     */
		    function baseIsMatch(object, source, matchData, customizer) {
		      var index = matchData.length,
		          length = index,
		          noCustomizer = !customizer;

		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (index--) {
		        var data = matchData[index];
		        if ((noCustomizer && data[2])
		              ? data[1] !== object[data[0]]
		              : !(data[0] in object)
		            ) {
		          return false;
		        }
		      }
		      while (++index < length) {
		        data = matchData[index];
		        var key = data[0],
		            objValue = object[key],
		            srcValue = data[1];

		        if (noCustomizer && data[2]) {
		          if (objValue === undefined$1 && !(key in object)) {
		            return false;
		          }
		        } else {
		          var stack = new Stack;
		          if (customizer) {
		            var result = customizer(objValue, srcValue, key, object, source, stack);
		          }
		          if (!(result === undefined$1
		                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
		                : result
		              )) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.isNative` without bad shim checks.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     */
		    function baseIsNative(value) {
		      if (!isObject(value) || isMasked(value)) {
		        return false;
		      }
		      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		      return pattern.test(toSource(value));
		    }

		    /**
		     * The base implementation of `_.isRegExp` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     */
		    function baseIsRegExp(value) {
		      return isObjectLike(value) && baseGetTag(value) == regexpTag;
		    }

		    /**
		     * The base implementation of `_.isSet` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     */
		    function baseIsSet(value) {
		      return isObjectLike(value) && getTag(value) == setTag;
		    }

		    /**
		     * The base implementation of `_.isTypedArray` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     */
		    function baseIsTypedArray(value) {
		      return isObjectLike(value) &&
		        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		    }

		    /**
		     * The base implementation of `_.iteratee`.
		     *
		     * @private
		     * @param {*} [value=_.identity] The value to convert to an iteratee.
		     * @returns {Function} Returns the iteratee.
		     */
		    function baseIteratee(value) {
		      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		      if (typeof value == 'function') {
		        return value;
		      }
		      if (value == null) {
		        return identity;
		      }
		      if (typeof value == 'object') {
		        return isArray(value)
		          ? baseMatchesProperty(value[0], value[1])
		          : baseMatches(value);
		      }
		      return property(value);
		    }

		    /**
		     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeys(object) {
		      if (!isPrototype(object)) {
		        return nativeKeys(object);
		      }
		      var result = [];
		      for (var key in Object(object)) {
		        if (hasOwnProperty.call(object, key) && key != 'constructor') {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeysIn(object) {
		      if (!isObject(object)) {
		        return nativeKeysIn(object);
		      }
		      var isProto = isPrototype(object),
		          result = [];

		      for (var key in object) {
		        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.lt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     */
		    function baseLt(value, other) {
		      return value < other;
		    }

		    /**
		     * The base implementation of `_.map` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     */
		    function baseMap(collection, iteratee) {
		      var index = -1,
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value, key, collection) {
		        result[++index] = iteratee(value, key, collection);
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.matches` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatches(source) {
		      var matchData = getMatchData(source);
		      if (matchData.length == 1 && matchData[0][2]) {
		        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		      }
		      return function(object) {
		        return object === source || baseIsMatch(object, source, matchData);
		      };
		    }

		    /**
		     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		     *
		     * @private
		     * @param {string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatchesProperty(path, srcValue) {
		      if (isKey(path) && isStrictComparable(srcValue)) {
		        return matchesStrictComparable(toKey(path), srcValue);
		      }
		      return function(object) {
		        var objValue = get(object, path);
		        return (objValue === undefined$1 && objValue === srcValue)
		          ? hasIn(object, path)
		          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
		      };
		    }

		    /**
		     * The base implementation of `_.merge` without support for multiple sources.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} [customizer] The function to customize merged values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMerge(object, source, srcIndex, customizer, stack) {
		      if (object === source) {
		        return;
		      }
		      baseFor(source, function(srcValue, key) {
		        stack || (stack = new Stack);
		        if (isObject(srcValue)) {
		          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		        }
		        else {
		          var newValue = customizer
		            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		            : undefined$1;

		          if (newValue === undefined$1) {
		            newValue = srcValue;
		          }
		          assignMergeValue(object, key, newValue);
		        }
		      }, keysIn);
		    }

		    /**
		     * A specialized version of `baseMerge` for arrays and objects which performs
		     * deep merges and tracks traversed objects enabling objects with circular
		     * references to be merged.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {string} key The key of the value to merge.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} mergeFunc The function to merge values.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		      var objValue = safeGet(object, key),
		          srcValue = safeGet(source, key),
		          stacked = stack.get(srcValue);

		      if (stacked) {
		        assignMergeValue(object, key, stacked);
		        return;
		      }
		      var newValue = customizer
		        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		        : undefined$1;

		      var isCommon = newValue === undefined$1;

		      if (isCommon) {
		        var isArr = isArray(srcValue),
		            isBuff = !isArr && isBuffer(srcValue),
		            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		        newValue = srcValue;
		        if (isArr || isBuff || isTyped) {
		          if (isArray(objValue)) {
		            newValue = objValue;
		          }
		          else if (isArrayLikeObject(objValue)) {
		            newValue = copyArray(objValue);
		          }
		          else if (isBuff) {
		            isCommon = false;
		            newValue = cloneBuffer(srcValue, true);
		          }
		          else if (isTyped) {
		            isCommon = false;
		            newValue = cloneTypedArray(srcValue, true);
		          }
		          else {
		            newValue = [];
		          }
		        }
		        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		          newValue = objValue;
		          if (isArguments(objValue)) {
		            newValue = toPlainObject(objValue);
		          }
		          else if (!isObject(objValue) || isFunction(objValue)) {
		            newValue = initCloneObject(srcValue);
		          }
		        }
		        else {
		          isCommon = false;
		        }
		      }
		      if (isCommon) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, newValue);
		        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		        stack['delete'](srcValue);
		      }
		      assignMergeValue(object, key, newValue);
		    }

		    /**
		     * The base implementation of `_.nth` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {number} n The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     */
		    function baseNth(array, n) {
		      var length = array.length;
		      if (!length) {
		        return;
		      }
		      n += n < 0 ? length : 0;
		      return isIndex(n, length) ? array[n] : undefined$1;
		    }

		    /**
		     * The base implementation of `_.orderBy` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		     * @param {string[]} orders The sort orders of `iteratees`.
		     * @returns {Array} Returns the new sorted array.
		     */
		    function baseOrderBy(collection, iteratees, orders) {
		      if (iteratees.length) {
		        iteratees = arrayMap(iteratees, function(iteratee) {
		          if (isArray(iteratee)) {
		            return function(value) {
		              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
		            }
		          }
		          return iteratee;
		        });
		      } else {
		        iteratees = [identity];
		      }

		      var index = -1;
		      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

		      var result = baseMap(collection, function(value, key, collection) {
		        var criteria = arrayMap(iteratees, function(iteratee) {
		          return iteratee(value);
		        });
		        return { 'criteria': criteria, 'index': ++index, 'value': value };
		      });

		      return baseSortBy(result, function(object, other) {
		        return compareMultiple(object, other, orders);
		      });
		    }

		    /**
		     * The base implementation of `_.pick` without support for individual
		     * property identifiers.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Object} Returns the new object.
		     */
		    function basePick(object, paths) {
		      return basePickBy(object, paths, function(value, path) {
		        return hasIn(object, path);
		      });
		    }

		    /**
		     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @param {Function} predicate The function invoked per property.
		     * @returns {Object} Returns the new object.
		     */
		    function basePickBy(object, paths, predicate) {
		      var index = -1,
		          length = paths.length,
		          result = {};

		      while (++index < length) {
		        var path = paths[index],
		            value = baseGet(object, path);

		        if (predicate(value, path)) {
		          baseSet(result, castPath(path, object), value);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `baseProperty` which supports deep paths.
		     *
		     * @private
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     */
		    function basePropertyDeep(path) {
		      return function(object) {
		        return baseGet(object, path);
		      };
		    }

		    /**
		     * The base implementation of `_.pullAllBy` without support for iteratee
		     * shorthands.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAll(array, values, iteratee, comparator) {
		      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
		          index = -1,
		          length = values.length,
		          seen = array;

		      if (array === values) {
		        values = copyArray(values);
		      }
		      if (iteratee) {
		        seen = arrayMap(array, baseUnary(iteratee));
		      }
		      while (++index < length) {
		        var fromIndex = 0,
		            value = values[index],
		            computed = iteratee ? iteratee(value) : value;

		        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
		          if (seen !== array) {
		            splice.call(seen, fromIndex, 1);
		          }
		          splice.call(array, fromIndex, 1);
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.pullAt` without support for individual
		     * indexes or capturing the removed elements.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {number[]} indexes The indexes of elements to remove.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAt(array, indexes) {
		      var length = array ? indexes.length : 0,
		          lastIndex = length - 1;

		      while (length--) {
		        var index = indexes[length];
		        if (length == lastIndex || index !== previous) {
		          var previous = index;
		          if (isIndex(index)) {
		            splice.call(array, index, 1);
		          } else {
		            baseUnset(array, index);
		          }
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.random` without support for returning
		     * floating-point numbers.
		     *
		     * @private
		     * @param {number} lower The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the random number.
		     */
		    function baseRandom(lower, upper) {
		      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		    }

		    /**
		     * The base implementation of `_.range` and `_.rangeRight` which doesn't
		     * coerce arguments.
		     *
		     * @private
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} step The value to increment or decrement by.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the range of numbers.
		     */
		    function baseRange(start, end, step, fromRight) {
		      var index = -1,
		          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
		          result = Array(length);

		      while (length--) {
		        result[fromRight ? length : ++index] = start;
		        start += step;
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.repeat` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {string} string The string to repeat.
		     * @param {number} n The number of times to repeat the string.
		     * @returns {string} Returns the repeated string.
		     */
		    function baseRepeat(string, n) {
		      var result = '';
		      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
		        return result;
		      }
		      // Leverage the exponentiation by squaring algorithm for a faster repeat.
		      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
		      do {
		        if (n % 2) {
		          result += string;
		        }
		        n = nativeFloor(n / 2);
		        if (n) {
		          string += string;
		        }
		      } while (n);

		      return result;
		    }

		    /**
		     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     */
		    function baseRest(func, start) {
		      return setToString(overRest(func, start, identity), func + '');
		    }

		    /**
		     * The base implementation of `_.sample`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     */
		    function baseSample(collection) {
		      return arraySample(values(collection));
		    }

		    /**
		     * The base implementation of `_.sampleSize` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function baseSampleSize(collection, n) {
		      var array = values(collection);
		      return shuffleSelf(array, baseClamp(n, 0, array.length));
		    }

		    /**
		     * The base implementation of `_.set`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseSet(object, path, value, customizer) {
		      if (!isObject(object)) {
		        return object;
		      }
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          lastIndex = length - 1,
		          nested = object;

		      while (nested != null && ++index < length) {
		        var key = toKey(path[index]),
		            newValue = value;

		        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		          return object;
		        }

		        if (index != lastIndex) {
		          var objValue = nested[key];
		          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
		          if (newValue === undefined$1) {
		            newValue = isObject(objValue)
		              ? objValue
		              : (isIndex(path[index + 1]) ? [] : {});
		          }
		        }
		        assignValue(nested, key, newValue);
		        nested = nested[key];
		      }
		      return object;
		    }

		    /**
		     * The base implementation of `setData` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetData = !metaMap ? identity : function(func, data) {
		      metaMap.set(func, data);
		      return func;
		    };

		    /**
		     * The base implementation of `setToString` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetToString = !defineProperty ? identity : function(func, string) {
		      return defineProperty(func, 'toString', {
		        'configurable': true,
		        'enumerable': false,
		        'value': constant(string),
		        'writable': true
		      });
		    };

		    /**
		     * The base implementation of `_.shuffle`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function baseShuffle(collection) {
		      return shuffleSelf(values(collection));
		    }

		    /**
		     * The base implementation of `_.slice` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseSlice(array, start, end) {
		      var index = -1,
		          length = array.length;

		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = end > length ? length : end;
		      if (end < 0) {
		        end += length;
		      }
		      length = start > end ? 0 : ((end - start) >>> 0);
		      start >>>= 0;

		      var result = Array(length);
		      while (++index < length) {
		        result[index] = array[index + start];
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.some` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     */
		    function baseSome(collection, predicate) {
		      var result;

		      baseEach(collection, function(value, index, collection) {
		        result = predicate(value, index, collection);
		        return !result;
		      });
		      return !!result;
		    }

		    /**
		     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		     * performs a binary search of `array` to determine the index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndex(array, value, retHighest) {
		      var low = 0,
		          high = array == null ? low : array.length;

		      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
		        while (low < high) {
		          var mid = (low + high) >>> 1,
		              computed = array[mid];

		          if (computed !== null && !isSymbol(computed) &&
		              (retHighest ? (computed <= value) : (computed < value))) {
		            low = mid + 1;
		          } else {
		            high = mid;
		          }
		        }
		        return high;
		      }
		      return baseSortedIndexBy(array, value, identity, retHighest);
		    }

		    /**
		     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		     * which invokes `iteratee` for `value` and each element of `array` to compute
		     * their sort ranking. The iteratee is invoked with one argument; (value).
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} iteratee The iteratee invoked per element.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndexBy(array, value, iteratee, retHighest) {
		      var low = 0,
		          high = array == null ? 0 : array.length;
		      if (high === 0) {
		        return 0;
		      }

		      value = iteratee(value);
		      var valIsNaN = value !== value,
		          valIsNull = value === null,
		          valIsSymbol = isSymbol(value),
		          valIsUndefined = value === undefined$1;

		      while (low < high) {
		        var mid = nativeFloor((low + high) / 2),
		            computed = iteratee(array[mid]),
		            othIsDefined = computed !== undefined$1,
		            othIsNull = computed === null,
		            othIsReflexive = computed === computed,
		            othIsSymbol = isSymbol(computed);

		        if (valIsNaN) {
		          var setLow = retHighest || othIsReflexive;
		        } else if (valIsUndefined) {
		          setLow = othIsReflexive && (retHighest || othIsDefined);
		        } else if (valIsNull) {
		          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
		        } else if (valIsSymbol) {
		          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
		        } else if (othIsNull || othIsSymbol) {
		          setLow = false;
		        } else {
		          setLow = retHighest ? (computed <= value) : (computed < value);
		        }
		        if (setLow) {
		          low = mid + 1;
		        } else {
		          high = mid;
		        }
		      }
		      return nativeMin(high, MAX_ARRAY_INDEX);
		    }

		    /**
		     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		     * support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseSortedUniq(array, iteratee) {
		      var index = -1,
		          length = array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        if (!index || !eq(computed, seen)) {
		          var seen = computed;
		          result[resIndex++] = value === 0 ? 0 : value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.toNumber` which doesn't ensure correct
		     * conversions of binary, hexadecimal, or octal string values.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     */
		    function baseToNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      return +value;
		    }

		    /**
		     * The base implementation of `_.toString` which doesn't convert nullish
		     * values to empty strings.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {string} Returns the string.
		     */
		    function baseToString(value) {
		      // Exit early for strings to avoid a performance hit in some environments.
		      if (typeof value == 'string') {
		        return value;
		      }
		      if (isArray(value)) {
		        // Recursively convert values (susceptible to call stack limits).
		        return arrayMap(value, baseToString) + '';
		      }
		      if (isSymbol(value)) {
		        return symbolToString ? symbolToString.call(value) : '';
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseUniq(array, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          length = array.length,
		          isCommon = true,
		          result = [],
		          seen = result;

		      if (comparator) {
		        isCommon = false;
		        includes = arrayIncludesWith;
		      }
		      else if (length >= LARGE_ARRAY_SIZE) {
		        var set = iteratee ? null : createSet(array);
		        if (set) {
		          return setToArray(set);
		        }
		        isCommon = false;
		        includes = cacheHas;
		        seen = new SetCache;
		      }
		      else {
		        seen = iteratee ? [] : result;
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var seenIndex = seen.length;
		          while (seenIndex--) {
		            if (seen[seenIndex] === computed) {
		              continue outer;
		            }
		          }
		          if (iteratee) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		        else if (!includes(seen, computed, comparator)) {
		          if (seen !== result) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.unset`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The property path to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     */
		    function baseUnset(object, path) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      return object == null || delete object[toKey(last(path))];
		    }

		    /**
		     * The base implementation of `_.update`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to update.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseUpdate(object, path, updater, customizer) {
		      return baseSet(object, path, updater(baseGet(object, path)), customizer);
		    }

		    /**
		     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		     * without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {Function} predicate The function invoked per iteration.
		     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseWhile(array, predicate, isDrop, fromRight) {
		      var length = array.length,
		          index = fromRight ? length : -1;

		      while ((fromRight ? index-- : ++index < length) &&
		        predicate(array[index], index, array)) {}

		      return isDrop
		        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
		        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		    }

		    /**
		     * The base implementation of `wrapperValue` which returns the result of
		     * performing a sequence of actions on the unwrapped `value`, where each
		     * successive action is supplied the return value of the previous.
		     *
		     * @private
		     * @param {*} value The unwrapped value.
		     * @param {Array} actions Actions to perform to resolve the unwrapped value.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseWrapperValue(value, actions) {
		      var result = value;
		      if (result instanceof LazyWrapper) {
		        result = result.value();
		      }
		      return arrayReduce(actions, function(result, action) {
		        return action.func.apply(action.thisArg, arrayPush([result], action.args));
		      }, result);
		    }

		    /**
		     * The base implementation of methods like `_.xor`, without support for
		     * iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of values.
		     */
		    function baseXor(arrays, iteratee, comparator) {
		      var length = arrays.length;
		      if (length < 2) {
		        return length ? baseUniq(arrays[0]) : [];
		      }
		      var index = -1,
		          result = Array(length);

		      while (++index < length) {
		        var array = arrays[index],
		            othIndex = -1;

		        while (++othIndex < length) {
		          if (othIndex != index) {
		            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
		          }
		        }
		      }
		      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		    }

		    /**
		     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		     *
		     * @private
		     * @param {Array} props The property identifiers.
		     * @param {Array} values The property values.
		     * @param {Function} assignFunc The function to assign values.
		     * @returns {Object} Returns the new object.
		     */
		    function baseZipObject(props, values, assignFunc) {
		      var index = -1,
		          length = props.length,
		          valsLength = values.length,
		          result = {};

		      while (++index < length) {
		        var value = index < valsLength ? values[index] : undefined$1;
		        assignFunc(result, props[index], value);
		      }
		      return result;
		    }

		    /**
		     * Casts `value` to an empty array if it's not an array like object.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Array|Object} Returns the cast array-like object.
		     */
		    function castArrayLikeObject(value) {
		      return isArrayLikeObject(value) ? value : [];
		    }

		    /**
		     * Casts `value` to `identity` if it's not a function.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Function} Returns cast function.
		     */
		    function castFunction(value) {
		      return typeof value == 'function' ? value : identity;
		    }

		    /**
		     * Casts `value` to a path array if it's not one.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {Array} Returns the cast property path array.
		     */
		    function castPath(value, object) {
		      if (isArray(value)) {
		        return value;
		      }
		      return isKey(value, object) ? [value] : stringToPath(toString(value));
		    }

		    /**
		     * A `baseRest` alias which can be replaced with `identity` by module
		     * replacement plugins.
		     *
		     * @private
		     * @type {Function}
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    var castRest = baseRest;

		    /**
		     * Casts `array` to a slice if it's needed.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {number} start The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the cast slice.
		     */
		    function castSlice(array, start, end) {
		      var length = array.length;
		      end = end === undefined$1 ? length : end;
		      return (!start && end >= length) ? array : baseSlice(array, start, end);
		    }

		    /**
		     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		     *
		     * @private
		     * @param {number|Object} id The timer id or timeout object of the timer to clear.
		     */
		    var clearTimeout = ctxClearTimeout || function(id) {
		      return root.clearTimeout(id);
		    };

		    /**
		     * Creates a clone of  `buffer`.
		     *
		     * @private
		     * @param {Buffer} buffer The buffer to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Buffer} Returns the cloned buffer.
		     */
		    function cloneBuffer(buffer, isDeep) {
		      if (isDeep) {
		        return buffer.slice();
		      }
		      var length = buffer.length,
		          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		      buffer.copy(result);
		      return result;
		    }

		    /**
		     * Creates a clone of `arrayBuffer`.
		     *
		     * @private
		     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		     * @returns {ArrayBuffer} Returns the cloned array buffer.
		     */
		    function cloneArrayBuffer(arrayBuffer) {
		      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		      return result;
		    }

		    /**
		     * Creates a clone of `dataView`.
		     *
		     * @private
		     * @param {Object} dataView The data view to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned data view.
		     */
		    function cloneDataView(dataView, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		    }

		    /**
		     * Creates a clone of `regexp`.
		     *
		     * @private
		     * @param {Object} regexp The regexp to clone.
		     * @returns {Object} Returns the cloned regexp.
		     */
		    function cloneRegExp(regexp) {
		      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		      result.lastIndex = regexp.lastIndex;
		      return result;
		    }

		    /**
		     * Creates a clone of the `symbol` object.
		     *
		     * @private
		     * @param {Object} symbol The symbol object to clone.
		     * @returns {Object} Returns the cloned symbol object.
		     */
		    function cloneSymbol(symbol) {
		      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		    }

		    /**
		     * Creates a clone of `typedArray`.
		     *
		     * @private
		     * @param {Object} typedArray The typed array to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned typed array.
		     */
		    function cloneTypedArray(typedArray, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		    }

		    /**
		     * Compares values to sort them in ascending order.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {number} Returns the sort order indicator for `value`.
		     */
		    function compareAscending(value, other) {
		      if (value !== other) {
		        var valIsDefined = value !== undefined$1,
		            valIsNull = value === null,
		            valIsReflexive = value === value,
		            valIsSymbol = isSymbol(value);

		        var othIsDefined = other !== undefined$1,
		            othIsNull = other === null,
		            othIsReflexive = other === other,
		            othIsSymbol = isSymbol(other);

		        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
		            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
		            (valIsNull && othIsDefined && othIsReflexive) ||
		            (!valIsDefined && othIsReflexive) ||
		            !valIsReflexive) {
		          return 1;
		        }
		        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
		            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
		            (othIsNull && valIsDefined && valIsReflexive) ||
		            (!othIsDefined && valIsReflexive) ||
		            !othIsReflexive) {
		          return -1;
		        }
		      }
		      return 0;
		    }

		    /**
		     * Used by `_.orderBy` to compare multiple properties of a value to another
		     * and stable sort them.
		     *
		     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		     * specify an order of "desc" for descending or "asc" for ascending sort order
		     * of corresponding values.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {boolean[]|string[]} orders The order to sort by for each property.
		     * @returns {number} Returns the sort order indicator for `object`.
		     */
		    function compareMultiple(object, other, orders) {
		      var index = -1,
		          objCriteria = object.criteria,
		          othCriteria = other.criteria,
		          length = objCriteria.length,
		          ordersLength = orders.length;

		      while (++index < length) {
		        var result = compareAscending(objCriteria[index], othCriteria[index]);
		        if (result) {
		          if (index >= ordersLength) {
		            return result;
		          }
		          var order = orders[index];
		          return result * (order == 'desc' ? -1 : 1);
		        }
		      }
		      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
		      // that causes it, under certain circumstances, to provide the same value for
		      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
		      // for more details.
		      //
		      // This also ensures a stable sort in V8 and other engines.
		      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
		      return object.index - other.index;
		    }

		    /**
		     * Creates an array that is the composition of partially applied arguments,
		     * placeholders, and provided arguments into a single array of arguments.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to prepend to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgs(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersLength = holders.length,
		          leftIndex = -1,
		          leftLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(leftLength + rangeLength),
		          isUncurried = !isCurried;

		      while (++leftIndex < leftLength) {
		        result[leftIndex] = partials[leftIndex];
		      }
		      while (++argsIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[holders[argsIndex]] = args[argsIndex];
		        }
		      }
		      while (rangeLength--) {
		        result[leftIndex++] = args[argsIndex++];
		      }
		      return result;
		    }

		    /**
		     * This function is like `composeArgs` except that the arguments composition
		     * is tailored for `_.partialRight`.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to append to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgsRight(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersIndex = -1,
		          holdersLength = holders.length,
		          rightIndex = -1,
		          rightLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(rangeLength + rightLength),
		          isUncurried = !isCurried;

		      while (++argsIndex < rangeLength) {
		        result[argsIndex] = args[argsIndex];
		      }
		      var offset = argsIndex;
		      while (++rightIndex < rightLength) {
		        result[offset + rightIndex] = partials[rightIndex];
		      }
		      while (++holdersIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[offset + holders[holdersIndex]] = args[argsIndex++];
		        }
		      }
		      return result;
		    }

		    /**
		     * Copies the values of `source` to `array`.
		     *
		     * @private
		     * @param {Array} source The array to copy values from.
		     * @param {Array} [array=[]] The array to copy values to.
		     * @returns {Array} Returns `array`.
		     */
		    function copyArray(source, array) {
		      var index = -1,
		          length = source.length;

		      array || (array = Array(length));
		      while (++index < length) {
		        array[index] = source[index];
		      }
		      return array;
		    }

		    /**
		     * Copies properties of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy properties from.
		     * @param {Array} props The property identifiers to copy.
		     * @param {Object} [object={}] The object to copy properties to.
		     * @param {Function} [customizer] The function to customize copied values.
		     * @returns {Object} Returns `object`.
		     */
		    function copyObject(source, props, object, customizer) {
		      var isNew = !object;
		      object || (object = {});

		      var index = -1,
		          length = props.length;

		      while (++index < length) {
		        var key = props[index];

		        var newValue = customizer
		          ? customizer(object[key], source[key], key, object, source)
		          : undefined$1;

		        if (newValue === undefined$1) {
		          newValue = source[key];
		        }
		        if (isNew) {
		          baseAssignValue(object, key, newValue);
		        } else {
		          assignValue(object, key, newValue);
		        }
		      }
		      return object;
		    }

		    /**
		     * Copies own symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbols(source, object) {
		      return copyObject(source, getSymbols(source), object);
		    }

		    /**
		     * Copies own and inherited symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbolsIn(source, object) {
		      return copyObject(source, getSymbolsIn(source), object);
		    }

		    /**
		     * Creates a function like `_.groupBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} [initializer] The accumulator object initializer.
		     * @returns {Function} Returns the new aggregator function.
		     */
		    function createAggregator(setter, initializer) {
		      return function(collection, iteratee) {
		        var func = isArray(collection) ? arrayAggregator : baseAggregator,
		            accumulator = initializer ? initializer() : {};

		        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
		      };
		    }

		    /**
		     * Creates a function like `_.assign`.
		     *
		     * @private
		     * @param {Function} assigner The function to assign values.
		     * @returns {Function} Returns the new assigner function.
		     */
		    function createAssigner(assigner) {
		      return baseRest(function(object, sources) {
		        var index = -1,
		            length = sources.length,
		            customizer = length > 1 ? sources[length - 1] : undefined$1,
		            guard = length > 2 ? sources[2] : undefined$1;

		        customizer = (assigner.length > 3 && typeof customizer == 'function')
		          ? (length--, customizer)
		          : undefined$1;

		        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		          customizer = length < 3 ? undefined$1 : customizer;
		          length = 1;
		        }
		        object = Object(object);
		        while (++index < length) {
		          var source = sources[index];
		          if (source) {
		            assigner(object, source, index, customizer);
		          }
		        }
		        return object;
		      });
		    }

		    /**
		     * Creates a `baseEach` or `baseEachRight` function.
		     *
		     * @private
		     * @param {Function} eachFunc The function to iterate over a collection.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseEach(eachFunc, fromRight) {
		      return function(collection, iteratee) {
		        if (collection == null) {
		          return collection;
		        }
		        if (!isArrayLike(collection)) {
		          return eachFunc(collection, iteratee);
		        }
		        var length = collection.length,
		            index = fromRight ? length : -1,
		            iterable = Object(collection);

		        while ((fromRight ? index-- : ++index < length)) {
		          if (iteratee(iterable[index], index, iterable) === false) {
		            break;
		          }
		        }
		        return collection;
		      };
		    }

		    /**
		     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseFor(fromRight) {
		      return function(object, iteratee, keysFunc) {
		        var index = -1,
		            iterable = Object(object),
		            props = keysFunc(object),
		            length = props.length;

		        while (length--) {
		          var key = props[fromRight ? length : ++index];
		          if (iteratee(iterable[key], key, iterable) === false) {
		            break;
		          }
		        }
		        return object;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the optional `this`
		     * binding of `thisArg`.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createBind(func, bitmask, thisArg) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return fn.apply(isBind ? thisArg : this, arguments);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.lowerFirst`.
		     *
		     * @private
		     * @param {string} methodName The name of the `String` case method to use.
		     * @returns {Function} Returns the new case function.
		     */
		    function createCaseFirst(methodName) {
		      return function(string) {
		        string = toString(string);

		        var strSymbols = hasUnicode(string)
		          ? stringToArray(string)
		          : undefined$1;

		        var chr = strSymbols
		          ? strSymbols[0]
		          : string.charAt(0);

		        var trailing = strSymbols
		          ? castSlice(strSymbols, 1).join('')
		          : string.slice(1);

		        return chr[methodName]() + trailing;
		      };
		    }

		    /**
		     * Creates a function like `_.camelCase`.
		     *
		     * @private
		     * @param {Function} callback The function to combine each word.
		     * @returns {Function} Returns the new compounder function.
		     */
		    function createCompounder(callback) {
		      return function(string) {
		        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
		      };
		    }

		    /**
		     * Creates a function that produces an instance of `Ctor` regardless of
		     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		     *
		     * @private
		     * @param {Function} Ctor The constructor to wrap.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCtor(Ctor) {
		      return function() {
		        // Use a `switch` statement to work with class constructors. See
		        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
		        // for more details.
		        var args = arguments;
		        switch (args.length) {
		          case 0: return new Ctor;
		          case 1: return new Ctor(args[0]);
		          case 2: return new Ctor(args[0], args[1]);
		          case 3: return new Ctor(args[0], args[1], args[2]);
		          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
		          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
		          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
		          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
		        }
		        var thisBinding = baseCreate(Ctor.prototype),
		            result = Ctor.apply(thisBinding, args);

		        // Mimic the constructor's `return` behavior.
		        // See https://es5.github.io/#x13.2.2 for more details.
		        return isObject(result) ? result : thisBinding;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to enable currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {number} arity The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCurry(func, bitmask, arity) {
		      var Ctor = createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length,
		            placeholder = getHolder(wrapper);

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
		          ? []
		          : replaceHolders(args, placeholder);

		        length -= holders.length;
		        if (length < arity) {
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
		            args, holders, undefined$1, undefined$1, arity - length);
		        }
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return apply(fn, this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.find` or `_.findLast` function.
		     *
		     * @private
		     * @param {Function} findIndexFunc The function to find the collection index.
		     * @returns {Function} Returns the new find function.
		     */
		    function createFind(findIndexFunc) {
		      return function(collection, predicate, fromIndex) {
		        var iterable = Object(collection);
		        if (!isArrayLike(collection)) {
		          var iteratee = getIteratee(predicate, 3);
		          collection = keys(collection);
		          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
		        }
		        var index = findIndexFunc(collection, predicate, fromIndex);
		        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
		      };
		    }

		    /**
		     * Creates a `_.flow` or `_.flowRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new flow function.
		     */
		    function createFlow(fromRight) {
		      return flatRest(function(funcs) {
		        var length = funcs.length,
		            index = length,
		            prereq = LodashWrapper.prototype.thru;

		        if (fromRight) {
		          funcs.reverse();
		        }
		        while (index--) {
		          var func = funcs[index];
		          if (typeof func != 'function') {
		            throw new TypeError(FUNC_ERROR_TEXT);
		          }
		          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
		            var wrapper = new LodashWrapper([], true);
		          }
		        }
		        index = wrapper ? index : length;
		        while (++index < length) {
		          func = funcs[index];

		          var funcName = getFuncName(func),
		              data = funcName == 'wrapper' ? getData(func) : undefined$1;

		          if (data && isLaziable(data[0]) &&
		                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
		                !data[4].length && data[9] == 1
		              ) {
		            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
		          } else {
		            wrapper = (func.length == 1 && isLaziable(func))
		              ? wrapper[funcName]()
		              : wrapper.thru(func);
		          }
		        }
		        return function() {
		          var args = arguments,
		              value = args[0];

		          if (wrapper && args.length == 1 && isArray(value)) {
		            return wrapper.plant(value).value();
		          }
		          var index = 0,
		              result = length ? funcs[index].apply(this, args) : value;

		          while (++index < length) {
		            result = funcs[index].call(this, result);
		          }
		          return result;
		        };
		      });
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with optional `this`
		     * binding of `thisArg`, partial application, and currying.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [partialsRight] The arguments to append to those provided
		     *  to the new function.
		     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
		      var isAry = bitmask & WRAP_ARY_FLAG,
		          isBind = bitmask & WRAP_BIND_FLAG,
		          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
		          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
		          isFlip = bitmask & WRAP_FLIP_FLAG,
		          Ctor = isBindKey ? undefined$1 : createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length;

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        if (isCurried) {
		          var placeholder = getHolder(wrapper),
		              holdersCount = countHolders(args, placeholder);
		        }
		        if (partials) {
		          args = composeArgs(args, partials, holders, isCurried);
		        }
		        if (partialsRight) {
		          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
		        }
		        length -= holdersCount;
		        if (isCurried && length < arity) {
		          var newHolders = replaceHolders(args, placeholder);
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
		            args, newHolders, argPos, ary, arity - length
		          );
		        }
		        var thisBinding = isBind ? thisArg : this,
		            fn = isBindKey ? thisBinding[func] : func;

		        length = args.length;
		        if (argPos) {
		          args = reorder(args, argPos);
		        } else if (isFlip && length > 1) {
		          args.reverse();
		        }
		        if (isAry && ary < length) {
		          args.length = ary;
		        }
		        if (this && this !== root && this instanceof wrapper) {
		          fn = Ctor || createCtor(fn);
		        }
		        return fn.apply(thisBinding, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.invertBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} toIteratee The function to resolve iteratees.
		     * @returns {Function} Returns the new inverter function.
		     */
		    function createInverter(setter, toIteratee) {
		      return function(object, iteratee) {
		        return baseInverter(object, setter, toIteratee(iteratee), {});
		      };
		    }

		    /**
		     * Creates a function that performs a mathematical operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @param {number} [defaultValue] The value used for `undefined` arguments.
		     * @returns {Function} Returns the new mathematical operation function.
		     */
		    function createMathOperation(operator, defaultValue) {
		      return function(value, other) {
		        var result;
		        if (value === undefined$1 && other === undefined$1) {
		          return defaultValue;
		        }
		        if (value !== undefined$1) {
		          result = value;
		        }
		        if (other !== undefined$1) {
		          if (result === undefined$1) {
		            return other;
		          }
		          if (typeof value == 'string' || typeof other == 'string') {
		            value = baseToString(value);
		            other = baseToString(other);
		          } else {
		            value = baseToNumber(value);
		            other = baseToNumber(other);
		          }
		          result = operator(value, other);
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function like `_.over`.
		     *
		     * @private
		     * @param {Function} arrayFunc The function to iterate over iteratees.
		     * @returns {Function} Returns the new over function.
		     */
		    function createOver(arrayFunc) {
		      return flatRest(function(iteratees) {
		        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
		        return baseRest(function(args) {
		          var thisArg = this;
		          return arrayFunc(iteratees, function(iteratee) {
		            return apply(iteratee, thisArg, args);
		          });
		        });
		      });
		    }

		    /**
		     * Creates the padding for `string` based on `length`. The `chars` string
		     * is truncated if the number of characters exceeds `length`.
		     *
		     * @private
		     * @param {number} length The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padding for `string`.
		     */
		    function createPadding(length, chars) {
		      chars = chars === undefined$1 ? ' ' : baseToString(chars);

		      var charsLength = chars.length;
		      if (charsLength < 2) {
		        return charsLength ? baseRepeat(chars, length) : chars;
		      }
		      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
		      return hasUnicode(chars)
		        ? castSlice(stringToArray(result), 0, length).join('')
		        : result.slice(0, length);
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the `this` binding
		     * of `thisArg` and `partials` prepended to the arguments it receives.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {Array} partials The arguments to prepend to those provided to
		     *  the new function.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createPartial(func, bitmask, thisArg, partials) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var argsIndex = -1,
		            argsLength = arguments.length,
		            leftIndex = -1,
		            leftLength = partials.length,
		            args = Array(leftLength + argsLength),
		            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

		        while (++leftIndex < leftLength) {
		          args[leftIndex] = partials[leftIndex];
		        }
		        while (argsLength--) {
		          args[leftIndex++] = arguments[++argsIndex];
		        }
		        return apply(fn, isBind ? thisArg : this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.range` or `_.rangeRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new range function.
		     */
		    function createRange(fromRight) {
		      return function(start, end, step) {
		        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
		          end = step = undefined$1;
		        }
		        // Ensure the sign of `-0` is preserved.
		        start = toFinite(start);
		        if (end === undefined$1) {
		          end = start;
		          start = 0;
		        } else {
		          end = toFinite(end);
		        }
		        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
		        return baseRange(start, end, step, fromRight);
		      };
		    }

		    /**
		     * Creates a function that performs a relational operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @returns {Function} Returns the new relational operation function.
		     */
		    function createRelationalOperation(operator) {
		      return function(value, other) {
		        if (!(typeof value == 'string' && typeof other == 'string')) {
		          value = toNumber(value);
		          other = toNumber(other);
		        }
		        return operator(value, other);
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to continue currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {Function} wrapFunc The function to create the `func` wrapper.
		     * @param {*} placeholder The placeholder value.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
		      var isCurry = bitmask & WRAP_CURRY_FLAG,
		          newHolders = isCurry ? holders : undefined$1,
		          newHoldersRight = isCurry ? undefined$1 : holders,
		          newPartials = isCurry ? partials : undefined$1,
		          newPartialsRight = isCurry ? undefined$1 : partials;

		      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
		      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

		      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
		        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
		      }
		      var newData = [
		        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
		        newHoldersRight, argPos, ary, arity
		      ];

		      var result = wrapFunc.apply(undefined$1, newData);
		      if (isLaziable(func)) {
		        setData(result, newData);
		      }
		      result.placeholder = placeholder;
		      return setWrapToString(result, func, bitmask);
		    }

		    /**
		     * Creates a function like `_.round`.
		     *
		     * @private
		     * @param {string} methodName The name of the `Math` method to use when rounding.
		     * @returns {Function} Returns the new round function.
		     */
		    function createRound(methodName) {
		      var func = Math[methodName];
		      return function(number, precision) {
		        number = toNumber(number);
		        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
		        if (precision && nativeIsFinite(number)) {
		          // Shift with exponential notation to avoid floating-point issues.
		          // See [MDN](https://mdn.io/round#Examples) for more details.
		          var pair = (toString(number) + 'e').split('e'),
		              value = func(pair[0] + 'e' + (+pair[1] + precision));

		          pair = (toString(value) + 'e').split('e');
		          return +(pair[0] + 'e' + (+pair[1] - precision));
		        }
		        return func(number);
		      };
		    }

		    /**
		     * Creates a set object of `values`.
		     *
		     * @private
		     * @param {Array} values The values to add to the set.
		     * @returns {Object} Returns the new set.
		     */
		    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
		      return new Set(values);
		    };

		    /**
		     * Creates a `_.toPairs` or `_.toPairsIn` function.
		     *
		     * @private
		     * @param {Function} keysFunc The function to get the keys of a given object.
		     * @returns {Function} Returns the new pairs function.
		     */
		    function createToPairs(keysFunc) {
		      return function(object) {
		        var tag = getTag(object);
		        if (tag == mapTag) {
		          return mapToArray(object);
		        }
		        if (tag == setTag) {
		          return setToPairs(object);
		        }
		        return baseToPairs(object, keysFunc(object));
		      };
		    }

		    /**
		     * Creates a function that either curries or invokes `func` with optional
		     * `this` binding and partially applied arguments.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags.
		     *    1 - `_.bind`
		     *    2 - `_.bindKey`
		     *    4 - `_.curry` or `_.curryRight` of a bound function
		     *    8 - `_.curry`
		     *   16 - `_.curryRight`
		     *   32 - `_.partial`
		     *   64 - `_.partialRight`
		     *  128 - `_.rearg`
		     *  256 - `_.ary`
		     *  512 - `_.flip`
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to be partially applied.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
		      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
		      if (!isBindKey && typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var length = partials ? partials.length : 0;
		      if (!length) {
		        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
		        partials = holders = undefined$1;
		      }
		      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
		      arity = arity === undefined$1 ? arity : toInteger(arity);
		      length -= holders ? holders.length : 0;

		      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
		        var partialsRight = partials,
		            holdersRight = holders;

		        partials = holders = undefined$1;
		      }
		      var data = isBindKey ? undefined$1 : getData(func);

		      var newData = [
		        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
		        argPos, ary, arity
		      ];

		      if (data) {
		        mergeData(newData, data);
		      }
		      func = newData[0];
		      bitmask = newData[1];
		      thisArg = newData[2];
		      partials = newData[3];
		      holders = newData[4];
		      arity = newData[9] = newData[9] === undefined$1
		        ? (isBindKey ? 0 : func.length)
		        : nativeMax(newData[9] - length, 0);

		      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
		        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
		      }
		      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
		        var result = createBind(func, bitmask, thisArg);
		      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
		        result = createCurry(func, bitmask, arity);
		      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
		        result = createPartial(func, bitmask, thisArg, partials);
		      } else {
		        result = createHybrid.apply(undefined$1, newData);
		      }
		      var setter = data ? baseSetData : setData;
		      return setWrapToString(setter(result, newData), func, bitmask);
		    }

		    /**
		     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		     * of source objects to the destination object for all destination properties
		     * that resolve to `undefined`.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to assign.
		     * @param {Object} object The parent object of `objValue`.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsAssignIn(objValue, srcValue, key, object) {
		      if (objValue === undefined$1 ||
		          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		        return srcValue;
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		     * objects into destination objects that are passed thru.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to merge.
		     * @param {Object} object The parent object of `objValue`.
		     * @param {Object} source The parent object of `srcValue`.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
		      if (isObject(objValue) && isObject(srcValue)) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, objValue);
		        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
		        stack['delete'](srcValue);
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		     * objects.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {string} key The key of the property to inspect.
		     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		     */
		    function customOmitClone(value) {
		      return isPlainObject(value) ? undefined$1 : value;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for arrays with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Array} array The array to compare.
		     * @param {Array} other The other array to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `array` and `other` objects.
		     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		     */
		    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          arrLength = array.length,
		          othLength = other.length;

		      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		        return false;
		      }
		      // Check that cyclic values are equal.
		      var arrStacked = stack.get(array);
		      var othStacked = stack.get(other);
		      if (arrStacked && othStacked) {
		        return arrStacked == other && othStacked == array;
		      }
		      var index = -1,
		          result = true,
		          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

		      stack.set(array, other);
		      stack.set(other, array);

		      // Ignore non-index properties.
		      while (++index < arrLength) {
		        var arrValue = array[index],
		            othValue = other[index];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, arrValue, index, other, array, stack)
		            : customizer(arrValue, othValue, index, array, other, stack);
		        }
		        if (compared !== undefined$1) {
		          if (compared) {
		            continue;
		          }
		          result = false;
		          break;
		        }
		        // Recursively compare arrays (susceptible to call stack limits).
		        if (seen) {
		          if (!arraySome(other, function(othValue, othIndex) {
		                if (!cacheHas(seen, othIndex) &&
		                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		                  return seen.push(othIndex);
		                }
		              })) {
		            result = false;
		            break;
		          }
		        } else if (!(
		              arrValue === othValue ||
		                equalFunc(arrValue, othValue, bitmask, customizer, stack)
		            )) {
		          result = false;
		          break;
		        }
		      }
		      stack['delete'](array);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for comparing objects of
		     * the same `toStringTag`.
		     *
		     * **Note:** This function only supports comparing values with tags of
		     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {string} tag The `toStringTag` of the objects to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		      switch (tag) {
		        case dataViewTag:
		          if ((object.byteLength != other.byteLength) ||
		              (object.byteOffset != other.byteOffset)) {
		            return false;
		          }
		          object = object.buffer;
		          other = other.buffer;

		        case arrayBufferTag:
		          if ((object.byteLength != other.byteLength) ||
		              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		            return false;
		          }
		          return true;

		        case boolTag:
		        case dateTag:
		        case numberTag:
		          // Coerce booleans to `1` or `0` and dates to milliseconds.
		          // Invalid dates are coerced to `NaN`.
		          return eq(+object, +other);

		        case errorTag:
		          return object.name == other.name && object.message == other.message;

		        case regexpTag:
		        case stringTag:
		          // Coerce regexes to strings and treat strings, primitives and objects,
		          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		          // for more details.
		          return object == (other + '');

		        case mapTag:
		          var convert = mapToArray;

		        case setTag:
		          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		          convert || (convert = setToArray);

		          if (object.size != other.size && !isPartial) {
		            return false;
		          }
		          // Assume cyclic values are equal.
		          var stacked = stack.get(object);
		          if (stacked) {
		            return stacked == other;
		          }
		          bitmask |= COMPARE_UNORDERED_FLAG;

		          // Recursively compare objects (susceptible to call stack limits).
		          stack.set(object, other);
		          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		          stack['delete'](object);
		          return result;

		        case symbolTag:
		          if (symbolValueOf) {
		            return symbolValueOf.call(object) == symbolValueOf.call(other);
		          }
		      }
		      return false;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for objects with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          objProps = getAllKeys(object),
		          objLength = objProps.length,
		          othProps = getAllKeys(other),
		          othLength = othProps.length;

		      if (objLength != othLength && !isPartial) {
		        return false;
		      }
		      var index = objLength;
		      while (index--) {
		        var key = objProps[index];
		        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		          return false;
		        }
		      }
		      // Check that cyclic values are equal.
		      var objStacked = stack.get(object);
		      var othStacked = stack.get(other);
		      if (objStacked && othStacked) {
		        return objStacked == other && othStacked == object;
		      }
		      var result = true;
		      stack.set(object, other);
		      stack.set(other, object);

		      var skipCtor = isPartial;
		      while (++index < objLength) {
		        key = objProps[index];
		        var objValue = object[key],
		            othValue = other[key];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, objValue, key, other, object, stack)
		            : customizer(objValue, othValue, key, object, other, stack);
		        }
		        // Recursively compare objects (susceptible to call stack limits).
		        if (!(compared === undefined$1
		              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
		              : compared
		            )) {
		          result = false;
		          break;
		        }
		        skipCtor || (skipCtor = key == 'constructor');
		      }
		      if (result && !skipCtor) {
		        var objCtor = object.constructor,
		            othCtor = other.constructor;

		        // Non `Object` object instances with different constructors are not equal.
		        if (objCtor != othCtor &&
		            ('constructor' in object && 'constructor' in other) &&
		            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		          result = false;
		        }
		      }
		      stack['delete'](object);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseRest` which flattens the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    function flatRest(func) {
		      return setToString(overRest(func, undefined$1, flatten), func + '');
		    }

		    /**
		     * Creates an array of own enumerable property names and symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeys(object) {
		      return baseGetAllKeys(object, keys, getSymbols);
		    }

		    /**
		     * Creates an array of own and inherited enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeysIn(object) {
		      return baseGetAllKeys(object, keysIn, getSymbolsIn);
		    }

		    /**
		     * Gets metadata for `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {*} Returns the metadata for `func`.
		     */
		    var getData = !metaMap ? noop : function(func) {
		      return metaMap.get(func);
		    };

		    /**
		     * Gets the name of `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {string} Returns the function name.
		     */
		    function getFuncName(func) {
		      var result = (func.name + ''),
		          array = realNames[result],
		          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

		      while (length--) {
		        var data = array[length],
		            otherFunc = data.func;
		        if (otherFunc == null || otherFunc == func) {
		          return data.name;
		        }
		      }
		      return result;
		    }

		    /**
		     * Gets the argument placeholder value for `func`.
		     *
		     * @private
		     * @param {Function} func The function to inspect.
		     * @returns {*} Returns the placeholder value.
		     */
		    function getHolder(func) {
		      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
		      return object.placeholder;
		    }

		    /**
		     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		     * this function returns the custom method, otherwise it returns `baseIteratee`.
		     * If arguments are provided, the chosen function is invoked with them and
		     * its result is returned.
		     *
		     * @private
		     * @param {*} [value] The value to convert to an iteratee.
		     * @param {number} [arity] The arity of the created iteratee.
		     * @returns {Function} Returns the chosen function or its result.
		     */
		    function getIteratee() {
		      var result = lodash.iteratee || iteratee;
		      result = result === iteratee ? baseIteratee : result;
		      return arguments.length ? result(arguments[0], arguments[1]) : result;
		    }

		    /**
		     * Gets the data for `map`.
		     *
		     * @private
		     * @param {Object} map The map to query.
		     * @param {string} key The reference key.
		     * @returns {*} Returns the map data.
		     */
		    function getMapData(map, key) {
		      var data = map.__data__;
		      return isKeyable(key)
		        ? data[typeof key == 'string' ? 'string' : 'hash']
		        : data.map;
		    }

		    /**
		     * Gets the property names, values, and compare flags of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the match data of `object`.
		     */
		    function getMatchData(object) {
		      var result = keys(object),
		          length = result.length;

		      while (length--) {
		        var key = result[length],
		            value = object[key];

		        result[length] = [key, value, isStrictComparable(value)];
		      }
		      return result;
		    }

		    /**
		     * Gets the native function at `key` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the method to get.
		     * @returns {*} Returns the function if it's native, else `undefined`.
		     */
		    function getNative(object, key) {
		      var value = getValue(object, key);
		      return baseIsNative(value) ? value : undefined$1;
		    }

		    /**
		     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the raw `toStringTag`.
		     */
		    function getRawTag(value) {
		      var isOwn = hasOwnProperty.call(value, symToStringTag),
		          tag = value[symToStringTag];

		      try {
		        value[symToStringTag] = undefined$1;
		        var unmasked = true;
		      } catch (e) {}

		      var result = nativeObjectToString.call(value);
		      if (unmasked) {
		        if (isOwn) {
		          value[symToStringTag] = tag;
		        } else {
		          delete value[symToStringTag];
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates an array of the own enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		      if (object == null) {
		        return [];
		      }
		      object = Object(object);
		      return arrayFilter(nativeGetSymbols(object), function(symbol) {
		        return propertyIsEnumerable.call(object, symbol);
		      });
		    };

		    /**
		     * Creates an array of the own and inherited enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		      var result = [];
		      while (object) {
		        arrayPush(result, getSymbols(object));
		        object = getPrototype(object);
		      }
		      return result;
		    };

		    /**
		     * Gets the `toStringTag` of `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    var getTag = baseGetTag;

		    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		        (Map && getTag(new Map) != mapTag) ||
		        (Promise && getTag(Promise.resolve()) != promiseTag) ||
		        (Set && getTag(new Set) != setTag) ||
		        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		      getTag = function(value) {
		        var result = baseGetTag(value),
		            Ctor = result == objectTag ? value.constructor : undefined$1,
		            ctorString = Ctor ? toSource(Ctor) : '';

		        if (ctorString) {
		          switch (ctorString) {
		            case dataViewCtorString: return dataViewTag;
		            case mapCtorString: return mapTag;
		            case promiseCtorString: return promiseTag;
		            case setCtorString: return setTag;
		            case weakMapCtorString: return weakMapTag;
		          }
		        }
		        return result;
		      };
		    }

		    /**
		     * Gets the view, applying any `transforms` to the `start` and `end` positions.
		     *
		     * @private
		     * @param {number} start The start of the view.
		     * @param {number} end The end of the view.
		     * @param {Array} transforms The transformations to apply to the view.
		     * @returns {Object} Returns an object containing the `start` and `end`
		     *  positions of the view.
		     */
		    function getView(start, end, transforms) {
		      var index = -1,
		          length = transforms.length;

		      while (++index < length) {
		        var data = transforms[index],
		            size = data.size;

		        switch (data.type) {
		          case 'drop':      start += size; break;
		          case 'dropRight': end -= size; break;
		          case 'take':      end = nativeMin(end, start + size); break;
		          case 'takeRight': start = nativeMax(start, end - size); break;
		        }
		      }
		      return { 'start': start, 'end': end };
		    }

		    /**
		     * Extracts wrapper details from the `source` body comment.
		     *
		     * @private
		     * @param {string} source The source to inspect.
		     * @returns {Array} Returns the wrapper details.
		     */
		    function getWrapDetails(source) {
		      var match = source.match(reWrapDetails);
		      return match ? match[1].split(reSplitDetails) : [];
		    }

		    /**
		     * Checks if `path` exists on `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @param {Function} hasFunc The function to check properties.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     */
		    function hasPath(object, path, hasFunc) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          result = false;

		      while (++index < length) {
		        var key = toKey(path[index]);
		        if (!(result = object != null && hasFunc(object, key))) {
		          break;
		        }
		        object = object[key];
		      }
		      if (result || ++index != length) {
		        return result;
		      }
		      length = object == null ? 0 : object.length;
		      return !!length && isLength(length) && isIndex(key, length) &&
		        (isArray(object) || isArguments(object));
		    }

		    /**
		     * Initializes an array clone.
		     *
		     * @private
		     * @param {Array} array The array to clone.
		     * @returns {Array} Returns the initialized clone.
		     */
		    function initCloneArray(array) {
		      var length = array.length,
		          result = new array.constructor(length);

		      // Add properties assigned by `RegExp#exec`.
		      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		        result.index = array.index;
		        result.input = array.input;
		      }
		      return result;
		    }

		    /**
		     * Initializes an object clone.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneObject(object) {
		      return (typeof object.constructor == 'function' && !isPrototype(object))
		        ? baseCreate(getPrototype(object))
		        : {};
		    }

		    /**
		     * Initializes an object clone based on its `toStringTag`.
		     *
		     * **Note:** This function only supports cloning values with tags of
		     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @param {string} tag The `toStringTag` of the object to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneByTag(object, tag, isDeep) {
		      var Ctor = object.constructor;
		      switch (tag) {
		        case arrayBufferTag:
		          return cloneArrayBuffer(object);

		        case boolTag:
		        case dateTag:
		          return new Ctor(+object);

		        case dataViewTag:
		          return cloneDataView(object, isDeep);

		        case float32Tag: case float64Tag:
		        case int8Tag: case int16Tag: case int32Tag:
		        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		          return cloneTypedArray(object, isDeep);

		        case mapTag:
		          return new Ctor;

		        case numberTag:
		        case stringTag:
		          return new Ctor(object);

		        case regexpTag:
		          return cloneRegExp(object);

		        case setTag:
		          return new Ctor;

		        case symbolTag:
		          return cloneSymbol(object);
		      }
		    }

		    /**
		     * Inserts wrapper `details` in a comment at the top of the `source` body.
		     *
		     * @private
		     * @param {string} source The source to modify.
		     * @returns {Array} details The details to insert.
		     * @returns {string} Returns the modified source.
		     */
		    function insertWrapDetails(source, details) {
		      var length = details.length;
		      if (!length) {
		        return source;
		      }
		      var lastIndex = length - 1;
		      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
		      details = details.join(length > 2 ? ', ' : ' ');
		      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		    }

		    /**
		     * Checks if `value` is a flattenable `arguments` object or array.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		     */
		    function isFlattenable(value) {
		      return isArray(value) || isArguments(value) ||
		        !!(spreadableSymbol && value && value[spreadableSymbol]);
		    }

		    /**
		     * Checks if `value` is a valid array-like index.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		     */
		    function isIndex(value, length) {
		      var type = typeof value;
		      length = length == null ? MAX_SAFE_INTEGER : length;

		      return !!length &&
		        (type == 'number' ||
		          (type != 'symbol' && reIsUint.test(value))) &&
		            (value > -1 && value % 1 == 0 && value < length);
		    }

		    /**
		     * Checks if the given arguments are from an iteratee call.
		     *
		     * @private
		     * @param {*} value The potential iteratee value argument.
		     * @param {*} index The potential iteratee index or key argument.
		     * @param {*} object The potential iteratee object argument.
		     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		     *  else `false`.
		     */
		    function isIterateeCall(value, index, object) {
		      if (!isObject(object)) {
		        return false;
		      }
		      var type = typeof index;
		      if (type == 'number'
		            ? (isArrayLike(object) && isIndex(index, object.length))
		            : (type == 'string' && index in object)
		          ) {
		        return eq(object[index], value);
		      }
		      return false;
		    }

		    /**
		     * Checks if `value` is a property name and not a property path.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		     */
		    function isKey(value, object) {
		      if (isArray(value)) {
		        return false;
		      }
		      var type = typeof value;
		      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		          value == null || isSymbol(value)) {
		        return true;
		      }
		      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		        (object != null && value in Object(object));
		    }

		    /**
		     * Checks if `value` is suitable for use as unique object key.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		     */
		    function isKeyable(value) {
		      var type = typeof value;
		      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		        ? (value !== '__proto__')
		        : (value === null);
		    }

		    /**
		     * Checks if `func` has a lazy counterpart.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		     *  else `false`.
		     */
		    function isLaziable(func) {
		      var funcName = getFuncName(func),
		          other = lodash[funcName];

		      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
		        return false;
		      }
		      if (func === other) {
		        return true;
		      }
		      var data = getData(other);
		      return !!data && func === data[0];
		    }

		    /**
		     * Checks if `func` has its source masked.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		     */
		    function isMasked(func) {
		      return !!maskSrcKey && (maskSrcKey in func);
		    }

		    /**
		     * Checks if `func` is capable of being masked.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		     */
		    var isMaskable = coreJsData ? isFunction : stubFalse;

		    /**
		     * Checks if `value` is likely a prototype object.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		     */
		    function isPrototype(value) {
		      var Ctor = value && value.constructor,
		          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		      return value === proto;
		    }

		    /**
		     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` if suitable for strict
		     *  equality comparisons, else `false`.
		     */
		    function isStrictComparable(value) {
		      return value === value && !isObject(value);
		    }

		    /**
		     * A specialized version of `matchesProperty` for source values suitable
		     * for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {string} key The key of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function matchesStrictComparable(key, srcValue) {
		      return function(object) {
		        if (object == null) {
		          return false;
		        }
		        return object[key] === srcValue &&
		          (srcValue !== undefined$1 || (key in Object(object)));
		      };
		    }

		    /**
		     * A specialized version of `_.memoize` which clears the memoized function's
		     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		     *
		     * @private
		     * @param {Function} func The function to have its output memoized.
		     * @returns {Function} Returns the new memoized function.
		     */
		    function memoizeCapped(func) {
		      var result = memoize(func, function(key) {
		        if (cache.size === MAX_MEMOIZE_SIZE) {
		          cache.clear();
		        }
		        return key;
		      });

		      var cache = result.cache;
		      return result;
		    }

		    /**
		     * Merges the function metadata of `source` into `data`.
		     *
		     * Merging metadata reduces the number of wrappers used to invoke a function.
		     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		     * may be applied regardless of execution order. Methods like `_.ary` and
		     * `_.rearg` modify function arguments, making the order in which they are
		     * executed important, preventing the merging of metadata. However, we make
		     * an exception for a safe combined case where curried functions have `_.ary`
		     * and or `_.rearg` applied.
		     *
		     * @private
		     * @param {Array} data The destination metadata.
		     * @param {Array} source The source metadata.
		     * @returns {Array} Returns `data`.
		     */
		    function mergeData(data, source) {
		      var bitmask = data[1],
		          srcBitmask = source[1],
		          newBitmask = bitmask | srcBitmask,
		          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

		      var isCombo =
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
		        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

		      // Exit early if metadata can't be merged.
		      if (!(isCommon || isCombo)) {
		        return data;
		      }
		      // Use source `thisArg` if available.
		      if (srcBitmask & WRAP_BIND_FLAG) {
		        data[2] = source[2];
		        // Set when currying a bound function.
		        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
		      }
		      // Compose partial arguments.
		      var value = source[3];
		      if (value) {
		        var partials = data[3];
		        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
		        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
		      }
		      // Compose partial right arguments.
		      value = source[5];
		      if (value) {
		        partials = data[5];
		        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
		        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
		      }
		      // Use source `argPos` if available.
		      value = source[7];
		      if (value) {
		        data[7] = value;
		      }
		      // Use source `ary` if it's smaller.
		      if (srcBitmask & WRAP_ARY_FLAG) {
		        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
		      }
		      // Use source `arity` if one is not provided.
		      if (data[9] == null) {
		        data[9] = source[9];
		      }
		      // Use source `func` and merge bitmasks.
		      data[0] = source[0];
		      data[1] = newBitmask;

		      return data;
		    }

		    /**
		     * This function is like
		     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * except that it includes inherited enumerable properties.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function nativeKeysIn(object) {
		      var result = [];
		      if (object != null) {
		        for (var key in Object(object)) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a string using `Object.prototype.toString`.
		     *
		     * @private
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     */
		    function objectToString(value) {
		      return nativeObjectToString.call(value);
		    }

		    /**
		     * A specialized version of `baseRest` which transforms the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @param {Function} transform The rest array transform.
		     * @returns {Function} Returns the new function.
		     */
		    function overRest(func, start, transform) {
		      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
		      return function() {
		        var args = arguments,
		            index = -1,
		            length = nativeMax(args.length - start, 0),
		            array = Array(length);

		        while (++index < length) {
		          array[index] = args[start + index];
		        }
		        index = -1;
		        var otherArgs = Array(start + 1);
		        while (++index < start) {
		          otherArgs[index] = args[index];
		        }
		        otherArgs[start] = transform(array);
		        return apply(func, this, otherArgs);
		      };
		    }

		    /**
		     * Gets the parent value at `path` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array} path The path to get the parent value of.
		     * @returns {*} Returns the parent value.
		     */
		    function parent(object, path) {
		      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		    }

		    /**
		     * Reorder `array` according to the specified indexes where the element at
		     * the first index is assigned as the first element, the element at
		     * the second index is assigned as the second element, and so on.
		     *
		     * @private
		     * @param {Array} array The array to reorder.
		     * @param {Array} indexes The arranged array indexes.
		     * @returns {Array} Returns `array`.
		     */
		    function reorder(array, indexes) {
		      var arrLength = array.length,
		          length = nativeMin(indexes.length, arrLength),
		          oldArray = copyArray(array);

		      while (length--) {
		        var index = indexes[length];
		        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
		      }
		      return array;
		    }

		    /**
		     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the property to get.
		     * @returns {*} Returns the property value.
		     */
		    function safeGet(object, key) {
		      if (key === 'constructor' && typeof object[key] === 'function') {
		        return;
		      }

		      if (key == '__proto__') {
		        return;
		      }

		      return object[key];
		    }

		    /**
		     * Sets metadata for `func`.
		     *
		     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		     * period of time, it will trip its breaker and transition to an identity
		     * function to avoid garbage collection pauses in V8. See
		     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		     * for more details.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var setData = shortOut(baseSetData);

		    /**
		     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    var setTimeout = ctxSetTimeout || function(func, wait) {
		      return root.setTimeout(func, wait);
		    };

		    /**
		     * Sets the `toString` method of `func` to return `string`.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var setToString = shortOut(baseSetToString);

		    /**
		     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		     * with wrapper details in a comment at the top of the source body.
		     *
		     * @private
		     * @param {Function} wrapper The function to modify.
		     * @param {Function} reference The reference function.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Function} Returns `wrapper`.
		     */
		    function setWrapToString(wrapper, reference, bitmask) {
		      var source = (reference + '');
		      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		    }

		    /**
		     * Creates a function that'll short out and invoke `identity` instead
		     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		     * milliseconds.
		     *
		     * @private
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new shortable function.
		     */
		    function shortOut(func) {
		      var count = 0,
		          lastCalled = 0;

		      return function() {
		        var stamp = nativeNow(),
		            remaining = HOT_SPAN - (stamp - lastCalled);

		        lastCalled = stamp;
		        if (remaining > 0) {
		          if (++count >= HOT_COUNT) {
		            return arguments[0];
		          }
		        } else {
		          count = 0;
		        }
		        return func.apply(undefined$1, arguments);
		      };
		    }

		    /**
		     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @param {number} [size=array.length] The size of `array`.
		     * @returns {Array} Returns `array`.
		     */
		    function shuffleSelf(array, size) {
		      var index = -1,
		          length = array.length,
		          lastIndex = length - 1;

		      size = size === undefined$1 ? length : size;
		      while (++index < size) {
		        var rand = baseRandom(index, lastIndex),
		            value = array[rand];

		        array[rand] = array[index];
		        array[index] = value;
		      }
		      array.length = size;
		      return array;
		    }

		    /**
		     * Converts `string` to a property path array.
		     *
		     * @private
		     * @param {string} string The string to convert.
		     * @returns {Array} Returns the property path array.
		     */
		    var stringToPath = memoizeCapped(function(string) {
		      var result = [];
		      if (string.charCodeAt(0) === 46 /* . */) {
		        result.push('');
		      }
		      string.replace(rePropName, function(match, number, quote, subString) {
		        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		      });
		      return result;
		    });

		    /**
		     * Converts `value` to a string key if it's not a string or symbol.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {string|symbol} Returns the key.
		     */
		    function toKey(value) {
		      if (typeof value == 'string' || isSymbol(value)) {
		        return value;
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * Converts `func` to its source code.
		     *
		     * @private
		     * @param {Function} func The function to convert.
		     * @returns {string} Returns the source code.
		     */
		    function toSource(func) {
		      if (func != null) {
		        try {
		          return funcToString.call(func);
		        } catch (e) {}
		        try {
		          return (func + '');
		        } catch (e) {}
		      }
		      return '';
		    }

		    /**
		     * Updates wrapper `details` based on `bitmask` flags.
		     *
		     * @private
		     * @returns {Array} details The details to modify.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Array} Returns `details`.
		     */
		    function updateWrapDetails(details, bitmask) {
		      arrayEach(wrapFlags, function(pair) {
		        var value = '_.' + pair[0];
		        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
		          details.push(value);
		        }
		      });
		      return details.sort();
		    }

		    /**
		     * Creates a clone of `wrapper`.
		     *
		     * @private
		     * @param {Object} wrapper The wrapper to clone.
		     * @returns {Object} Returns the cloned wrapper.
		     */
		    function wrapperClone(wrapper) {
		      if (wrapper instanceof LazyWrapper) {
		        return wrapper.clone();
		      }
		      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
		      result.__actions__ = copyArray(wrapper.__actions__);
		      result.__index__  = wrapper.__index__;
		      result.__values__ = wrapper.__values__;
		      return result;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of elements split into groups the length of `size`.
		     * If `array` can't be split evenly, the final chunk will be the remaining
		     * elements.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to process.
		     * @param {number} [size=1] The length of each chunk
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the new array of chunks.
		     * @example
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 2);
		     * // => [['a', 'b'], ['c', 'd']]
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 3);
		     * // => [['a', 'b', 'c'], ['d']]
		     */
		    function chunk(array, size, guard) {
		      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
		        size = 1;
		      } else {
		        size = nativeMax(toInteger(size), 0);
		      }
		      var length = array == null ? 0 : array.length;
		      if (!length || size < 1) {
		        return [];
		      }
		      var index = 0,
		          resIndex = 0,
		          result = Array(nativeCeil(length / size));

		      while (index < length) {
		        result[resIndex++] = baseSlice(array, index, (index += size));
		      }
		      return result;
		    }

		    /**
		     * Creates an array with all falsey values removed. The values `false`, `null`,
		     * `0`, `""`, `undefined`, and `NaN` are falsey.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to compact.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.compact([0, 1, false, 2, '', 3]);
		     * // => [1, 2, 3]
		     */
		    function compact(array) {
		      var index = -1,
		          length = array == null ? 0 : array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index];
		        if (value) {
		          result[resIndex++] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates a new array concatenating `array` with any additional arrays
		     * and/or values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to concatenate.
		     * @param {...*} [values] The values to concatenate.
		     * @returns {Array} Returns the new concatenated array.
		     * @example
		     *
		     * var array = [1];
		     * var other = _.concat(array, 2, [3], [[4]]);
		     *
		     * console.log(other);
		     * // => [1, 2, 3, [4]]
		     *
		     * console.log(array);
		     * // => [1]
		     */
		    function concat() {
		      var length = arguments.length;
		      if (!length) {
		        return [];
		      }
		      var args = Array(length - 1),
		          array = arguments[0],
		          index = length;

		      while (index--) {
		        args[index - 1] = arguments[index];
		      }
		      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		    }

		    /**
		     * Creates an array of `array` values not included in the other given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * **Note:** Unlike `_.pullAll`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.without, _.xor
		     * @example
		     *
		     * _.difference([2, 1], [2, 3]);
		     * // => [1]
		     */
		    var difference = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `iteratee` which
		     * is invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var differenceBy = baseRest(function(array, values) {
		      var iteratee = last(values);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `comparator`
		     * which is invoked to compare elements of `array` to `values`. The order and
		     * references of result values are determined by the first array. The comparator
		     * is invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     *
		     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }]
		     */
		    var differenceWith = baseRest(function(array, values) {
		      var comparator = last(values);
		      if (isArrayLikeObject(comparator)) {
		        comparator = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.drop([1, 2, 3]);
		     * // => [2, 3]
		     *
		     * _.drop([1, 2, 3], 2);
		     * // => [3]
		     *
		     * _.drop([1, 2, 3], 5);
		     * // => []
		     *
		     * _.drop([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function drop(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.dropRight([1, 2, 3]);
		     * // => [1, 2]
		     *
		     * _.dropRight([1, 2, 3], 2);
		     * // => [1]
		     *
		     * _.dropRight([1, 2, 3], 5);
		     * // => []
		     *
		     * _.dropRight([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function dropRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the end.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.dropRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropRightWhile(users, ['active', false]);
		     * // => objects for ['barney']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropRightWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the beginning.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.dropWhile(users, function(o) { return !o.active; });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropWhile(users, ['active', false]);
		     * // => objects for ['pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true)
		        : [];
		    }

		    /**
		     * Fills elements of `array` with `value` from `start` up to, but not
		     * including, `end`.
		     *
		     * **Note:** This method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Array
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.fill(array, 'a');
		     * console.log(array);
		     * // => ['a', 'a', 'a']
		     *
		     * _.fill(Array(3), 2);
		     * // => [2, 2, 2]
		     *
		     * _.fill([4, 6, 8, 10], '*', 1, 3);
		     * // => [4, '*', '*', 10]
		     */
		    function fill(array, value, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
		        start = 0;
		        end = length;
		      }
		      return baseFill(array, value, start, end);
		    }

		    /**
		     * This method is like `_.find` except that it returns the index of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.findIndex(users, function(o) { return o.user == 'barney'; });
		     * // => 0
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findIndex(users, { 'user': 'fred', 'active': false });
		     * // => 1
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findIndex(users, ['active', false]);
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findIndex(users, 'active');
		     * // => 2
		     */
		    function findIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index);
		    }

		    /**
		     * This method is like `_.findIndex` except that it iterates over elements
		     * of `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		     * // => 2
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		     * // => 0
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastIndex(users, ['active', false]);
		     * // => 2
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastIndex(users, 'active');
		     * // => 0
		     */
		    function findLastIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length - 1;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = fromIndex < 0
		          ? nativeMax(length + index, 0)
		          : nativeMin(index, length - 1);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		    }

		    /**
		     * Flattens `array` a single level deep.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flatten([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, [3, [4]], 5]
		     */
		    function flatten(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, 1) : [];
		    }

		    /**
		     * Recursively flattens `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flattenDeep([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, 3, 4, 5]
		     */
		    function flattenDeep(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, INFINITY) : [];
		    }

		    /**
		     * Recursively flatten `array` up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * var array = [1, [2, [3, [4]], 5]];
		     *
		     * _.flattenDepth(array, 1);
		     * // => [1, 2, [3, [4]], 5]
		     *
		     * _.flattenDepth(array, 2);
		     * // => [1, 2, 3, [4], 5]
		     */
		    function flattenDepth(array, depth) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(array, depth);
		    }

		    /**
		     * The inverse of `_.toPairs`; this method returns an object composed
		     * from key-value `pairs`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} pairs The key-value pairs.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.fromPairs([['a', 1], ['b', 2]]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function fromPairs(pairs) {
		      var index = -1,
		          length = pairs == null ? 0 : pairs.length,
		          result = {};

		      while (++index < length) {
		        var pair = pairs[index];
		        result[pair[0]] = pair[1];
		      }
		      return result;
		    }

		    /**
		     * Gets the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias first
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the first element of `array`.
		     * @example
		     *
		     * _.head([1, 2, 3]);
		     * // => 1
		     *
		     * _.head([]);
		     * // => undefined
		     */
		    function head(array) {
		      return (array && array.length) ? array[0] : undefined$1;
		    }

		    /**
		     * Gets the index at which the first occurrence of `value` is found in `array`
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. If `fromIndex` is negative, it's used as the
		     * offset from the end of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.indexOf([1, 2, 1, 2], 2);
		     * // => 1
		     *
		     * // Search from the `fromIndex`.
		     * _.indexOf([1, 2, 1, 2], 2, 2);
		     * // => 3
		     */
		    function indexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseIndexOf(array, value, index);
		    }

		    /**
		     * Gets all but the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.initial([1, 2, 3]);
		     * // => [1, 2]
		     */
		    function initial(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 0, -1) : [];
		    }

		    /**
		     * Creates an array of unique values that are included in all given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersection([2, 1], [2, 3]);
		     * // => [2]
		     */
		    var intersection = baseRest(function(arrays) {
		      var mapped = arrayMap(arrays, castArrayLikeObject);
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped)
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `iteratee`
		     * which is invoked for each element of each `arrays` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [2.1]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }]
		     */
		    var intersectionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      if (iteratee === last(mapped)) {
		        iteratee = undefined$1;
		      } else {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `comparator`
		     * which is invoked to compare elements of `arrays`. The order and references
		     * of result values are determined by the first array. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.intersectionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }]
		     */
		    var intersectionWith = baseRest(function(arrays) {
		      var comparator = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      if (comparator) {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Converts all elements in `array` into a string separated by `separator`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to convert.
		     * @param {string} [separator=','] The element separator.
		     * @returns {string} Returns the joined string.
		     * @example
		     *
		     * _.join(['a', 'b', 'c'], '~');
		     * // => 'a~b~c'
		     */
		    function join(array, separator) {
		      return array == null ? '' : nativeJoin.call(array, separator);
		    }

		    /**
		     * Gets the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the last element of `array`.
		     * @example
		     *
		     * _.last([1, 2, 3]);
		     * // => 3
		     */
		    function last(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? array[length - 1] : undefined$1;
		    }

		    /**
		     * This method is like `_.indexOf` except that it iterates over elements of
		     * `array` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.lastIndexOf([1, 2, 1, 2], 2);
		     * // => 3
		     *
		     * // Search from the `fromIndex`.
		     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		     * // => 1
		     */
		    function lastIndexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
		      }
		      return value === value
		        ? strictLastIndexOf(array, value, index)
		        : baseFindIndex(array, baseIsNaN, index, true);
		    }

		    /**
		     * Gets the element at index `n` of `array`. If `n` is negative, the nth
		     * element from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.11.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=0] The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     *
		     * _.nth(array, 1);
		     * // => 'b'
		     *
		     * _.nth(array, -2);
		     * // => 'c';
		     */
		    function nth(array, n) {
		      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
		    }

		    /**
		     * Removes all given values from `array` using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		     * to remove elements from an array by predicate.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...*} [values] The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pull(array, 'a', 'c');
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    var pull = baseRest(pullAll);

		    /**
		     * This method is like `_.pull` except that it accepts an array of values to remove.
		     *
		     * **Note:** Unlike `_.difference`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pullAll(array, ['a', 'c']);
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    function pullAll(array, values) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values)
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `iteratee` which is
		     * invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The iteratee is invoked with one argument: (value).
		     *
		     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		     *
		     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		     * console.log(array);
		     * // => [{ 'x': 2 }]
		     */
		    function pullAllBy(array, values, iteratee) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, getIteratee(iteratee, 2))
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `comparator` which
		     * is invoked to compare elements of `array` to `values`. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		     *
		     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		     * console.log(array);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		     */
		    function pullAllWith(array, values, comparator) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, undefined$1, comparator)
		        : array;
		    }

		    /**
		     * Removes elements from `array` corresponding to `indexes` and returns an
		     * array of removed elements.
		     *
		     * **Note:** Unlike `_.at`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     * var pulled = _.pullAt(array, [1, 3]);
		     *
		     * console.log(array);
		     * // => ['a', 'c']
		     *
		     * console.log(pulled);
		     * // => ['b', 'd']
		     */
		    var pullAt = flatRest(function(array, indexes) {
		      var length = array == null ? 0 : array.length,
		          result = baseAt(array, indexes);

		      basePullAt(array, arrayMap(indexes, function(index) {
		        return isIndex(index, length) ? +index : index;
		      }).sort(compareAscending));

		      return result;
		    });

		    /**
		     * Removes all elements from `array` that `predicate` returns truthy for
		     * and returns an array of the removed elements. The predicate is invoked
		     * with three arguments: (value, index, array).
		     *
		     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		     * to pull elements from an array by value.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = [1, 2, 3, 4];
		     * var evens = _.remove(array, function(n) {
		     *   return n % 2 == 0;
		     * });
		     *
		     * console.log(array);
		     * // => [1, 3]
		     *
		     * console.log(evens);
		     * // => [2, 4]
		     */
		    function remove(array, predicate) {
		      var result = [];
		      if (!(array && array.length)) {
		        return result;
		      }
		      var index = -1,
		          indexes = [],
		          length = array.length;

		      predicate = getIteratee(predicate, 3);
		      while (++index < length) {
		        var value = array[index];
		        if (predicate(value, index, array)) {
		          result.push(value);
		          indexes.push(index);
		        }
		      }
		      basePullAt(array, indexes);
		      return result;
		    }

		    /**
		     * Reverses `array` so that the first element becomes the last, the second
		     * element becomes the second to last, and so on.
		     *
		     * **Note:** This method mutates `array` and is based on
		     * [`Array#reverse`](https://mdn.io/Array/reverse).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.reverse(array);
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function reverse(array) {
		      return array == null ? array : nativeReverse.call(array);
		    }

		    /**
		     * Creates a slice of `array` from `start` up to, but not including, `end`.
		     *
		     * **Note:** This method is used instead of
		     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		     * returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function slice(array, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
		        start = 0;
		        end = length;
		      }
		      else {
		        start = start == null ? 0 : toInteger(start);
		        end = end === undefined$1 ? length : toInteger(end);
		      }
		      return baseSlice(array, start, end);
		    }

		    /**
		     * Uses a binary search to determine the lowest index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedIndex([30, 50], 40);
		     * // => 1
		     */
		    function sortedIndex(array, value) {
		      return baseSortedIndex(array, value);
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 0
		     */
		    function sortedIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		    }

		    /**
		     * This method is like `_.indexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 1
		     */
		    function sortedIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value);
		        if (index < length && eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it returns the highest
		     * index at which `value` should be inserted into `array` in order to
		     * maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		     * // => 4
		     */
		    function sortedLastIndex(array, value) {
		      return baseSortedIndex(array, value, true);
		    }

		    /**
		     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 1
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 1
		     */
		    function sortedLastIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		    }

		    /**
		     * This method is like `_.lastIndexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 3
		     */
		    function sortedLastIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value, true) - 1;
		        if (eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.uniq` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniq([1, 1, 2]);
		     * // => [1, 2]
		     */
		    function sortedUniq(array) {
		      return (array && array.length)
		        ? baseSortedUniq(array)
		        : [];
		    }

		    /**
		     * This method is like `_.uniqBy` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		     * // => [1.1, 2.3]
		     */
		    function sortedUniqBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSortedUniq(array, getIteratee(iteratee, 2))
		        : [];
		    }

		    /**
		     * Gets all but the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.tail([1, 2, 3]);
		     * // => [2, 3]
		     */
		    function tail(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 1, length) : [];
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.take([1, 2, 3]);
		     * // => [1]
		     *
		     * _.take([1, 2, 3], 2);
		     * // => [1, 2]
		     *
		     * _.take([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.take([1, 2, 3], 0);
		     * // => []
		     */
		    function take(array, n, guard) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.takeRight([1, 2, 3]);
		     * // => [3]
		     *
		     * _.takeRight([1, 2, 3], 2);
		     * // => [2, 3]
		     *
		     * _.takeRight([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.takeRight([1, 2, 3], 0);
		     * // => []
		     */
		    function takeRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the end. Elements are
		     * taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.takeRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeRightWhile(users, ['active', false]);
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeRightWhile(users, 'active');
		     * // => []
		     */
		    function takeRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), false, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the beginning. Elements
		     * are taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.takeWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeWhile(users, ['active', false]);
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeWhile(users, 'active');
		     * // => []
		     */
		    function takeWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3))
		        : [];
		    }

		    /**
		     * Creates an array of unique values, in order, from all given arrays using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.union([2], [1, 2]);
		     * // => [2, 1]
		     */
		    var union = baseRest(function(arrays) {
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which uniqueness is computed. Result values are chosen from the first
		     * array in which the value occurs. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    var unionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `comparator` which
		     * is invoked to compare elements of `arrays`. Result values are chosen from
		     * the first array in which the value occurs. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.unionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var unionWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
		    });

		    /**
		     * Creates a duplicate-free version of an array, using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons, in which only the first occurrence of each element
		     * is kept. The order of result values is determined by the order they occur
		     * in the array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniq([2, 1, 2]);
		     * // => [2, 1]
		     */
		    function uniq(array) {
		      return (array && array.length) ? baseUniq(array) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * uniqueness is computed. The order of result values is determined by the
		     * order they occur in the array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    function uniqBy(array, iteratee) {
		      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `comparator` which
		     * is invoked to compare elements of `array`. The order of result values is
		     * determined by the order they occur in the array.The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.uniqWith(objects, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		     */
		    function uniqWith(array, comparator) {
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
		    }

		    /**
		     * This method is like `_.zip` except that it accepts an array of grouped
		     * elements and creates an array regrouping the elements to their pre-zip
		     * configuration.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.2.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     *
		     * _.unzip(zipped);
		     * // => [['a', 'b'], [1, 2], [true, false]]
		     */
		    function unzip(array) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var length = 0;
		      array = arrayFilter(array, function(group) {
		        if (isArrayLikeObject(group)) {
		          length = nativeMax(group.length, length);
		          return true;
		        }
		      });
		      return baseTimes(length, function(index) {
		        return arrayMap(array, baseProperty(index));
		      });
		    }

		    /**
		     * This method is like `_.unzip` except that it accepts `iteratee` to specify
		     * how regrouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  regrouped values.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		     * // => [[1, 10, 100], [2, 20, 200]]
		     *
		     * _.unzipWith(zipped, _.add);
		     * // => [3, 30, 300]
		     */
		    function unzipWith(array, iteratee) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var result = unzip(array);
		      if (iteratee == null) {
		        return result;
		      }
		      return arrayMap(result, function(group) {
		        return apply(iteratee, undefined$1, group);
		      });
		    }

		    /**
		     * Creates an array excluding all given values using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.pull`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...*} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.xor
		     * @example
		     *
		     * _.without([2, 1, 2, 3], 1, 2);
		     * // => [3]
		     */
		    var without = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, values)
		        : [];
		    });

		    /**
		     * Creates an array of unique values that is the
		     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		     * of the given arrays. The order of result values is determined by the order
		     * they occur in the arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.without
		     * @example
		     *
		     * _.xor([2, 1], [2, 3]);
		     * // => [1, 3]
		     */
		    var xor = baseRest(function(arrays) {
		      return baseXor(arrayFilter(arrays, isArrayLikeObject));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which by which they're compared. The order of result values is determined
		     * by the order they occur in the arrays. The iteratee is invoked with one
		     * argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2, 3.4]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var xorBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `comparator` which is
		     * invoked to compare elements of `arrays`. The order of result values is
		     * determined by the order they occur in the arrays. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.xorWith(objects, others, _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var xorWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
		    });

		    /**
		     * Creates an array of grouped elements, the first of which contains the
		     * first elements of the given arrays, the second of which contains the
		     * second elements of the given arrays, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     */
		    var zip = baseRest(unzip);

		    /**
		     * This method is like `_.fromPairs` except that it accepts two arrays,
		     * one of property identifiers and one of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.4.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObject(['a', 'b'], [1, 2]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function zipObject(props, values) {
		      return baseZipObject(props || [], values || [], assignValue);
		    }

		    /**
		     * This method is like `_.zipObject` except that it supports property paths.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		     */
		    function zipObjectDeep(props, values) {
		      return baseZipObject(props || [], values || [], baseSet);
		    }

		    /**
		     * This method is like `_.zip` except that it accepts `iteratee` to specify
		     * how grouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  grouped values.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		     *   return a + b + c;
		     * });
		     * // => [111, 222]
		     */
		    var zipWith = baseRest(function(arrays) {
		      var length = arrays.length,
		          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

		      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
		      return unzipWith(arrays, iteratee);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		     * chain sequences enabled. The result of such sequences must be unwrapped
		     * with `_#value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Seq
		     * @param {*} value The value to wrap.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36 },
		     *   { 'user': 'fred',    'age': 40 },
		     *   { 'user': 'pebbles', 'age': 1 }
		     * ];
		     *
		     * var youngest = _
		     *   .chain(users)
		     *   .sortBy('age')
		     *   .map(function(o) {
		     *     return o.user + ' is ' + o.age;
		     *   })
		     *   .head()
		     *   .value();
		     * // => 'pebbles is 1'
		     */
		    function chain(value) {
		      var result = lodash(value);
		      result.__chain__ = true;
		      return result;
		    }

		    /**
		     * This method invokes `interceptor` and returns `value`. The interceptor
		     * is invoked with one argument; (value). The purpose of this method is to
		     * "tap into" a method chain sequence in order to modify intermediate results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * _([1, 2, 3])
		     *  .tap(function(array) {
		     *    // Mutate input array.
		     *    array.pop();
		     *  })
		     *  .reverse()
		     *  .value();
		     * // => [2, 1]
		     */
		    function tap(value, interceptor) {
		      interceptor(value);
		      return value;
		    }

		    /**
		     * This method is like `_.tap` except that it returns the result of `interceptor`.
		     * The purpose of this method is to "pass thru" values replacing intermediate
		     * results in a method chain sequence.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns the result of `interceptor`.
		     * @example
		     *
		     * _('  abc  ')
		     *  .chain()
		     *  .trim()
		     *  .thru(function(value) {
		     *    return [value];
		     *  })
		     *  .value();
		     * // => ['abc']
		     */
		    function thru(value, interceptor) {
		      return interceptor(value);
		    }

		    /**
		     * This method is the wrapper version of `_.at`.
		     *
		     * @name at
		     * @memberOf _
		     * @since 1.0.0
		     * @category Seq
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _(object).at(['a[0].b.c', 'a[1]']).value();
		     * // => [3, 4]
		     */
		    var wrapperAt = flatRest(function(paths) {
		      var length = paths.length,
		          start = length ? paths[0] : 0,
		          value = this.__wrapped__,
		          interceptor = function(object) { return baseAt(object, paths); };

		      if (length > 1 || this.__actions__.length ||
		          !(value instanceof LazyWrapper) || !isIndex(start)) {
		        return this.thru(interceptor);
		      }
		      value = value.slice(start, +start + (length ? 1 : 0));
		      value.__actions__.push({
		        'func': thru,
		        'args': [interceptor],
		        'thisArg': undefined$1
		      });
		      return new LodashWrapper(value, this.__chain__).thru(function(array) {
		        if (length && !array.length) {
		          array.push(undefined$1);
		        }
		        return array;
		      });
		    });

		    /**
		     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		     *
		     * @name chain
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 40 }
		     * ];
		     *
		     * // A sequence without explicit chaining.
		     * _(users).head();
		     * // => { 'user': 'barney', 'age': 36 }
		     *
		     * // A sequence with explicit chaining.
		     * _(users)
		     *   .chain()
		     *   .head()
		     *   .pick('user')
		     *   .value();
		     * // => { 'user': 'barney' }
		     */
		    function wrapperChain() {
		      return chain(this);
		    }

		    /**
		     * Executes the chain sequence and returns the wrapped result.
		     *
		     * @name commit
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2];
		     * var wrapped = _(array).push(3);
		     *
		     * console.log(array);
		     * // => [1, 2]
		     *
		     * wrapped = wrapped.commit();
		     * console.log(array);
		     * // => [1, 2, 3]
		     *
		     * wrapped.last();
		     * // => 3
		     *
		     * console.log(array);
		     * // => [1, 2, 3]
		     */
		    function wrapperCommit() {
		      return new LodashWrapper(this.value(), this.__chain__);
		    }

		    /**
		     * Gets the next value on a wrapped object following the
		     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		     *
		     * @name next
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the next iterator value.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 1 }
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 2 }
		     *
		     * wrapped.next();
		     * // => { 'done': true, 'value': undefined }
		     */
		    function wrapperNext() {
		      if (this.__values__ === undefined$1) {
		        this.__values__ = toArray(this.value());
		      }
		      var done = this.__index__ >= this.__values__.length,
		          value = done ? undefined$1 : this.__values__[this.__index__++];

		      return { 'done': done, 'value': value };
		    }

		    /**
		     * Enables the wrapper to be iterable.
		     *
		     * @name Symbol.iterator
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the wrapper object.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped[Symbol.iterator]() === wrapped;
		     * // => true
		     *
		     * Array.from(wrapped);
		     * // => [1, 2]
		     */
		    function wrapperToIterator() {
		      return this;
		    }

		    /**
		     * Creates a clone of the chain sequence planting `value` as the wrapped value.
		     *
		     * @name plant
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @param {*} value The value to plant.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2]).map(square);
		     * var other = wrapped.plant([3, 4]);
		     *
		     * other.value();
		     * // => [9, 16]
		     *
		     * wrapped.value();
		     * // => [1, 4]
		     */
		    function wrapperPlant(value) {
		      var result,
		          parent = this;

		      while (parent instanceof baseLodash) {
		        var clone = wrapperClone(parent);
		        clone.__index__ = 0;
		        clone.__values__ = undefined$1;
		        if (result) {
		          previous.__wrapped__ = clone;
		        } else {
		          result = clone;
		        }
		        var previous = clone;
		        parent = parent.__wrapped__;
		      }
		      previous.__wrapped__ = value;
		      return result;
		    }

		    /**
		     * This method is the wrapper version of `_.reverse`.
		     *
		     * **Note:** This method mutates the wrapped array.
		     *
		     * @name reverse
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _(array).reverse().value()
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function wrapperReverse() {
		      var value = this.__wrapped__;
		      if (value instanceof LazyWrapper) {
		        var wrapped = value;
		        if (this.__actions__.length) {
		          wrapped = new LazyWrapper(this);
		        }
		        wrapped = wrapped.reverse();
		        wrapped.__actions__.push({
		          'func': thru,
		          'args': [reverse],
		          'thisArg': undefined$1
		        });
		        return new LodashWrapper(wrapped, this.__chain__);
		      }
		      return this.thru(reverse);
		    }

		    /**
		     * Executes the chain sequence to resolve the unwrapped value.
		     *
		     * @name value
		     * @memberOf _
		     * @since 0.1.0
		     * @alias toJSON, valueOf
		     * @category Seq
		     * @returns {*} Returns the resolved unwrapped value.
		     * @example
		     *
		     * _([1, 2, 3]).value();
		     * // => [1, 2, 3]
		     */
		    function wrapperValue() {
		      return baseWrapperValue(this.__wrapped__, this.__actions__);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the number of times the key was returned by `iteratee`. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.countBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': 1, '6': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.countBy(['one', 'two', 'three'], 'length');
		     * // => { '3': 2, '5': 1 }
		     */
		    var countBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        ++result[key];
		      } else {
		        baseAssignValue(result, key, 1);
		      }
		    });

		    /**
		     * Checks if `predicate` returns truthy for **all** elements of `collection`.
		     * Iteration is stopped once `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * **Note:** This method returns `true` for
		     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		     * elements of empty collections.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.every([true, 1, null, 'yes'], Boolean);
		     * // => false
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.every(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.every(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.every(users, 'active');
		     * // => false
		     */
		    function every(collection, predicate, guard) {
		      var func = isArray(collection) ? arrayEvery : baseEvery;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning an array of all elements
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * **Note:** Unlike `_.remove`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.reject
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * _.filter(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, { 'age': 36, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.filter(users, 'active');
		     * // => objects for ['barney']
		     *
		     * // Combining several predicates using `_.overEvery` or `_.overSome`.
		     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
		     * // => objects for ['fred', 'barney']
		     */
		    function filter(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning the first element
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': true },
		     *   { 'user': 'fred',    'age': 40, 'active': false },
		     *   { 'user': 'pebbles', 'age': 1,  'active': true }
		     * ];
		     *
		     * _.find(users, function(o) { return o.age < 40; });
		     * // => object for 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.find(users, { 'age': 1, 'active': true });
		     * // => object for 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.find(users, ['active', false]);
		     * // => object for 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.find(users, 'active');
		     * // => object for 'barney'
		     */
		    var find = createFind(findIndex);

		    /**
		     * This method is like `_.find` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=collection.length-1] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * _.findLast([1, 2, 3, 4], function(n) {
		     *   return n % 2 == 1;
		     * });
		     * // => 3
		     */
		    var findLast = createFind(findLastIndex);

		    /**
		     * Creates a flattened array of values by running each element in `collection`
		     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		     * with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [n, n];
		     * }
		     *
		     * _.flatMap([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMap(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), 1);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDeep([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMapDeep(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), INFINITY);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDepth([1, 2], duplicate, 2);
		     * // => [[1, 1], [2, 2]]
		     */
		    function flatMapDepth(collection, iteratee, depth) {
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(map(collection, iteratee), depth);
		    }

		    /**
		     * Iterates over elements of `collection` and invokes `iteratee` for each element.
		     * The iteratee is invoked with three arguments: (value, index|key, collection).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * **Note:** As with other "Collections" methods, objects with a "length"
		     * property are iterated like arrays. To avoid this behavior use `_.forIn`
		     * or `_.forOwn` for object iteration.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias each
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEachRight
		     * @example
		     *
		     * _.forEach([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `1` then `2`.
		     *
		     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forEach(collection, iteratee) {
		      var func = isArray(collection) ? arrayEach : baseEach;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forEach` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @alias eachRight
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEach
		     * @example
		     *
		     * _.forEachRight([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `2` then `1`.
		     */
		    function forEachRight(collection, iteratee) {
		      var func = isArray(collection) ? arrayEachRight : baseEachRight;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The order of grouped values
		     * is determined by the order they occur in `collection`. The corresponding
		     * value of each key is an array of elements responsible for generating the
		     * key. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': [4.2], '6': [6.1, 6.3] }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.groupBy(['one', 'two', 'three'], 'length');
		     * // => { '3': ['one', 'two'], '5': ['three'] }
		     */
		    var groupBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        result[key].push(value);
		      } else {
		        baseAssignValue(result, key, [value]);
		      }
		    });

		    /**
		     * Checks if `value` is in `collection`. If `collection` is a string, it's
		     * checked for a substring of `value`, otherwise
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * is used for equality comparisons. If `fromIndex` is negative, it's used as
		     * the offset from the end of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {boolean} Returns `true` if `value` is found, else `false`.
		     * @example
		     *
		     * _.includes([1, 2, 3], 1);
		     * // => true
		     *
		     * _.includes([1, 2, 3], 1, 2);
		     * // => false
		     *
		     * _.includes({ 'a': 1, 'b': 2 }, 1);
		     * // => true
		     *
		     * _.includes('abcd', 'bc');
		     * // => true
		     */
		    function includes(collection, value, fromIndex, guard) {
		      collection = isArrayLike(collection) ? collection : values(collection);
		      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

		      var length = collection.length;
		      if (fromIndex < 0) {
		        fromIndex = nativeMax(length + fromIndex, 0);
		      }
		      return isString(collection)
		        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
		        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		    }

		    /**
		     * Invokes the method at `path` of each element in `collection`, returning
		     * an array of the results of each invoked method. Any additional arguments
		     * are provided to each invoked method. If `path` is a function, it's invoked
		     * for, and `this` bound to, each element in `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array|Function|string} path The path of the method to invoke or
		     *  the function invoked per iteration.
		     * @param {...*} [args] The arguments to invoke each method with.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		     * // => [[1, 5, 7], [1, 2, 3]]
		     *
		     * _.invokeMap([123, 456], String.prototype.split, '');
		     * // => [['1', '2', '3'], ['4', '5', '6']]
		     */
		    var invokeMap = baseRest(function(collection, path, args) {
		      var index = -1,
		          isFunc = typeof path == 'function',
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value) {
		        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
		      });
		      return result;
		    });

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the last element responsible for generating the key. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * var array = [
		     *   { 'dir': 'left', 'code': 97 },
		     *   { 'dir': 'right', 'code': 100 }
		     * ];
		     *
		     * _.keyBy(array, function(o) {
		     *   return String.fromCharCode(o.code);
		     * });
		     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		     *
		     * _.keyBy(array, 'dir');
		     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		     */
		    var keyBy = createAggregator(function(result, value, key) {
		      baseAssignValue(result, key, value);
		    });

		    /**
		     * Creates an array of values by running each element in `collection` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		     *
		     * The guarded methods are:
		     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * _.map([4, 8], square);
		     * // => [16, 64]
		     *
		     * _.map({ 'a': 4, 'b': 8 }, square);
		     * // => [16, 64] (iteration order is not guaranteed)
		     *
		     * var users = [
		     *   { 'user': 'barney' },
		     *   { 'user': 'fred' }
		     * ];
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, 'user');
		     * // => ['barney', 'fred']
		     */
		    function map(collection, iteratee) {
		      var func = isArray(collection) ? arrayMap : baseMap;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.sortBy` except that it allows specifying the sort
		     * orders of the iteratees to sort by. If `orders` is unspecified, all values
		     * are sorted in ascending order. Otherwise, specify an order of "desc" for
		     * descending or "asc" for ascending sort order of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @param {string[]} [orders] The sort orders of `iteratees`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 34 },
		     *   { 'user': 'fred',   'age': 40 },
		     *   { 'user': 'barney', 'age': 36 }
		     * ];
		     *
		     * // Sort by `user` in ascending order and by `age` in descending order.
		     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		     */
		    function orderBy(collection, iteratees, orders, guard) {
		      if (collection == null) {
		        return [];
		      }
		      if (!isArray(iteratees)) {
		        iteratees = iteratees == null ? [] : [iteratees];
		      }
		      orders = guard ? undefined$1 : orders;
		      if (!isArray(orders)) {
		        orders = orders == null ? [] : [orders];
		      }
		      return baseOrderBy(collection, iteratees, orders);
		    }

		    /**
		     * Creates an array of elements split into two groups, the first of which
		     * contains elements `predicate` returns truthy for, the second of which
		     * contains elements `predicate` returns falsey for. The predicate is
		     * invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of grouped elements.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': false },
		     *   { 'user': 'fred',    'age': 40, 'active': true },
		     *   { 'user': 'pebbles', 'age': 1,  'active': false }
		     * ];
		     *
		     * _.partition(users, function(o) { return o.active; });
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.partition(users, { 'age': 1, 'active': false });
		     * // => objects for [['pebbles'], ['barney', 'fred']]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.partition(users, ['active', false]);
		     * // => objects for [['barney', 'pebbles'], ['fred']]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.partition(users, 'active');
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     */
		    var partition = createAggregator(function(result, value, key) {
		      result[key ? 0 : 1].push(value);
		    }, function() { return [[], []]; });

		    /**
		     * Reduces `collection` to a value which is the accumulated result of running
		     * each element in `collection` thru `iteratee`, where each successive
		     * invocation is supplied the return value of the previous. If `accumulator`
		     * is not given, the first element of `collection` is used as the initial
		     * value. The iteratee is invoked with four arguments:
		     * (accumulator, value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.reduce`, `_.reduceRight`, and `_.transform`.
		     *
		     * The guarded methods are:
		     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		     * and `sortBy`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduceRight
		     * @example
		     *
		     * _.reduce([1, 2], function(sum, n) {
		     *   return sum + n;
		     * }, 0);
		     * // => 3
		     *
		     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     *   return result;
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		     */
		    function reduce(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduce : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		    }

		    /**
		     * This method is like `_.reduce` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduce
		     * @example
		     *
		     * var array = [[0, 1], [2, 3], [4, 5]];
		     *
		     * _.reduceRight(array, function(flattened, other) {
		     *   return flattened.concat(other);
		     * }, []);
		     * // => [4, 5, 2, 3, 0, 1]
		     */
		    function reduceRight(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduceRight : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		    }

		    /**
		     * The opposite of `_.filter`; this method returns the elements of `collection`
		     * that `predicate` does **not** return truthy for.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.filter
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': true }
		     * ];
		     *
		     * _.reject(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.reject(users, { 'age': 40, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.reject(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.reject(users, 'active');
		     * // => objects for ['barney']
		     */
		    function reject(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, negate(getIteratee(predicate, 3)));
		    }

		    /**
		     * Gets a random element from `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     * @example
		     *
		     * _.sample([1, 2, 3, 4]);
		     * // => 2
		     */
		    function sample(collection) {
		      var func = isArray(collection) ? arraySample : baseSample;
		      return func(collection);
		    }

		    /**
		     * Gets `n` random elements at unique keys from `collection` up to the
		     * size of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} [n=1] The number of elements to sample.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the random elements.
		     * @example
		     *
		     * _.sampleSize([1, 2, 3], 2);
		     * // => [3, 1]
		     *
		     * _.sampleSize([1, 2, 3], 4);
		     * // => [2, 3, 1]
		     */
		    function sampleSize(collection, n, guard) {
		      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
		      return func(collection, n);
		    }

		    /**
		     * Creates an array of shuffled values, using a version of the
		     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     * @example
		     *
		     * _.shuffle([1, 2, 3, 4]);
		     * // => [4, 1, 3, 2]
		     */
		    function shuffle(collection) {
		      var func = isArray(collection) ? arrayShuffle : baseShuffle;
		      return func(collection);
		    }

		    /**
		     * Gets the size of `collection` by returning its length for array-like
		     * values or the number of own enumerable string keyed properties for objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @returns {number} Returns the collection size.
		     * @example
		     *
		     * _.size([1, 2, 3]);
		     * // => 3
		     *
		     * _.size({ 'a': 1, 'b': 2 });
		     * // => 2
		     *
		     * _.size('pebbles');
		     * // => 7
		     */
		    function size(collection) {
		      if (collection == null) {
		        return 0;
		      }
		      if (isArrayLike(collection)) {
		        return isString(collection) ? stringSize(collection) : collection.length;
		      }
		      var tag = getTag(collection);
		      if (tag == mapTag || tag == setTag) {
		        return collection.size;
		      }
		      return baseKeys(collection).length;
		    }

		    /**
		     * Checks if `predicate` returns truthy for **any** element of `collection`.
		     * Iteration is stopped once `predicate` returns truthy. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.some([null, 0, 'yes', false], Boolean);
		     * // => true
		     *
		     * var users = [
		     *   { 'user': 'barney', 'active': true },
		     *   { 'user': 'fred',   'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.some(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.some(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.some(users, 'active');
		     * // => true
		     */
		    function some(collection, predicate, guard) {
		      var func = isArray(collection) ? arraySome : baseSome;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Creates an array of elements, sorted in ascending order by the results of
		     * running each element in a collection thru each iteratee. This method
		     * performs a stable sort, that is, it preserves the original sort order of
		     * equal elements. The iteratees are invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 30 },
		     *   { 'user': 'barney', 'age': 34 }
		     * ];
		     *
		     * _.sortBy(users, [function(o) { return o.user; }]);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
		     *
		     * _.sortBy(users, ['user', 'age']);
		     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
		     */
		    var sortBy = baseRest(function(collection, iteratees) {
		      if (collection == null) {
		        return [];
		      }
		      var length = iteratees.length;
		      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
		        iteratees = [];
		      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
		        iteratees = [iteratees[0]];
		      }
		      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Gets the timestamp of the number of milliseconds that have elapsed since
		     * the Unix epoch (1 January 1970 00:00:00 UTC).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Date
		     * @returns {number} Returns the timestamp.
		     * @example
		     *
		     * _.defer(function(stamp) {
		     *   console.log(_.now() - stamp);
		     * }, _.now());
		     * // => Logs the number of milliseconds it took for the deferred invocation.
		     */
		    var now = ctxNow || function() {
		      return root.Date.now();
		    };

		    /*------------------------------------------------------------------------*/

		    /**
		     * The opposite of `_.before`; this method creates a function that invokes
		     * `func` once it's called `n` or more times.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {number} n The number of calls before `func` is invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var saves = ['profile', 'settings'];
		     *
		     * var done = _.after(saves.length, function() {
		     *   console.log('done saving!');
		     * });
		     *
		     * _.forEach(saves, function(type) {
		     *   asyncSave({ 'type': type, 'complete': done });
		     * });
		     * // => Logs 'done saving!' after the two async saves have completed.
		     */
		    function after(n, func) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n < 1) {
		          return func.apply(this, arguments);
		        }
		      };
		    }

		    /**
		     * Creates a function that invokes `func`, with up to `n` arguments,
		     * ignoring any additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @param {number} [n=func.length] The arity cap.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		     * // => [6, 8, 10]
		     */
		    function ary(func, n, guard) {
		      n = guard ? undefined$1 : n;
		      n = (func && n == null) ? func.length : n;
		      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
		    }

		    /**
		     * Creates a function that invokes `func`, with the `this` binding and arguments
		     * of the created function, while it's called less than `n` times. Subsequent
		     * calls to the created function return the result of the last `func` invocation.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {number} n The number of calls at which `func` is no longer invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * jQuery(element).on('click', _.before(5, addContactToList));
		     * // => Allows adding up to 4 contacts to the list.
		     */
		    function before(n, func) {
		      var result;
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n > 0) {
		          result = func.apply(this, arguments);
		        }
		        if (n <= 1) {
		          func = undefined$1;
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of `thisArg`
		     * and `partials` prepended to the arguments it receives.
		     *
		     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		     * property of bound functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to bind.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * function greet(greeting, punctuation) {
		     *   return greeting + ' ' + this.user + punctuation;
		     * }
		     *
		     * var object = { 'user': 'fred' };
		     *
		     * var bound = _.bind(greet, object, 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bind(greet, object, _, '!');
		     * bound('hi');
		     * // => 'hi fred!'
		     */
		    var bind = baseRest(function(func, thisArg, partials) {
		      var bitmask = WRAP_BIND_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bind));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(func, bitmask, thisArg, partials, holders);
		    });

		    /**
		     * Creates a function that invokes the method at `object[key]` with `partials`
		     * prepended to the arguments it receives.
		     *
		     * This method differs from `_.bind` by allowing bound functions to reference
		     * methods that may be redefined or don't yet exist. See
		     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		     * for more details.
		     *
		     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Function
		     * @param {Object} object The object to invoke the method on.
		     * @param {string} key The key of the method.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * var object = {
		     *   'user': 'fred',
		     *   'greet': function(greeting, punctuation) {
		     *     return greeting + ' ' + this.user + punctuation;
		     *   }
		     * };
		     *
		     * var bound = _.bindKey(object, 'greet', 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * object.greet = function(greeting, punctuation) {
		     *   return greeting + 'ya ' + this.user + punctuation;
		     * };
		     *
		     * bound('!');
		     * // => 'hiya fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bindKey(object, 'greet', _, '!');
		     * bound('hi');
		     * // => 'hiya fred!'
		     */
		    var bindKey = baseRest(function(object, key, partials) {
		      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bindKey));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(key, bitmask, object, partials, holders);
		    });

		    /**
		     * Creates a function that accepts arguments of `func` and either invokes
		     * `func` returning its result, if at least `arity` number of arguments have
		     * been provided, or returns a function that accepts the remaining `func`
		     * arguments, and so on. The arity of `func` may be specified if `func.length`
		     * is not sufficient.
		     *
		     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curry(abc);
		     *
		     * curried(1)(2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(1)(_, 3)(2);
		     * // => [1, 2, 3]
		     */
		    function curry(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curry.placeholder;
		      return result;
		    }

		    /**
		     * This method is like `_.curry` except that arguments are applied to `func`
		     * in the manner of `_.partialRight` instead of `_.partial`.
		     *
		     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curryRight(abc);
		     *
		     * curried(3)(2)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(2, 3)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(3)(1, _)(2);
		     * // => [1, 2, 3]
		     */
		    function curryRight(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curryRight.placeholder;
		      return result;
		    }

		    /**
		     * Creates a debounced function that delays invoking `func` until after `wait`
		     * milliseconds have elapsed since the last time the debounced function was
		     * invoked. The debounced function comes with a `cancel` method to cancel
		     * delayed `func` invocations and a `flush` method to immediately invoke them.
		     * Provide `options` to indicate whether `func` should be invoked on the
		     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		     * with the last arguments provided to the debounced function. Subsequent
		     * calls to the debounced function return the result of the last `func`
		     * invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the debounced function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.debounce` and `_.throttle`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to debounce.
		     * @param {number} [wait=0] The number of milliseconds to delay.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=false]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {number} [options.maxWait]
		     *  The maximum time `func` is allowed to be delayed before it's invoked.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new debounced function.
		     * @example
		     *
		     * // Avoid costly calculations while the window size is in flux.
		     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		     *
		     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		     * jQuery(element).on('click', _.debounce(sendMail, 300, {
		     *   'leading': true,
		     *   'trailing': false
		     * }));
		     *
		     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		     * var source = new EventSource('/stream');
		     * jQuery(source).on('message', debounced);
		     *
		     * // Cancel the trailing debounced invocation.
		     * jQuery(window).on('popstate', debounced.cancel);
		     */
		    function debounce(func, wait, options) {
		      var lastArgs,
		          lastThis,
		          maxWait,
		          result,
		          timerId,
		          lastCallTime,
		          lastInvokeTime = 0,
		          leading = false,
		          maxing = false,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      wait = toNumber(wait) || 0;
		      if (isObject(options)) {
		        leading = !!options.leading;
		        maxing = 'maxWait' in options;
		        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }

		      function invokeFunc(time) {
		        var args = lastArgs,
		            thisArg = lastThis;

		        lastArgs = lastThis = undefined$1;
		        lastInvokeTime = time;
		        result = func.apply(thisArg, args);
		        return result;
		      }

		      function leadingEdge(time) {
		        // Reset any `maxWait` timer.
		        lastInvokeTime = time;
		        // Start the timer for the trailing edge.
		        timerId = setTimeout(timerExpired, wait);
		        // Invoke the leading edge.
		        return leading ? invokeFunc(time) : result;
		      }

		      function remainingWait(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime,
		            timeWaiting = wait - timeSinceLastCall;

		        return maxing
		          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
		          : timeWaiting;
		      }

		      function shouldInvoke(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime;

		        // Either this is the first call, activity has stopped and we're at the
		        // trailing edge, the system time has gone backwards and we're treating
		        // it as the trailing edge, or we've hit the `maxWait` limit.
		        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
		          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
		      }

		      function timerExpired() {
		        var time = now();
		        if (shouldInvoke(time)) {
		          return trailingEdge(time);
		        }
		        // Restart the timer.
		        timerId = setTimeout(timerExpired, remainingWait(time));
		      }

		      function trailingEdge(time) {
		        timerId = undefined$1;

		        // Only invoke if we have `lastArgs` which means `func` has been
		        // debounced at least once.
		        if (trailing && lastArgs) {
		          return invokeFunc(time);
		        }
		        lastArgs = lastThis = undefined$1;
		        return result;
		      }

		      function cancel() {
		        if (timerId !== undefined$1) {
		          clearTimeout(timerId);
		        }
		        lastInvokeTime = 0;
		        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
		      }

		      function flush() {
		        return timerId === undefined$1 ? result : trailingEdge(now());
		      }

		      function debounced() {
		        var time = now(),
		            isInvoking = shouldInvoke(time);

		        lastArgs = arguments;
		        lastThis = this;
		        lastCallTime = time;

		        if (isInvoking) {
		          if (timerId === undefined$1) {
		            return leadingEdge(lastCallTime);
		          }
		          if (maxing) {
		            // Handle invocations in a tight loop.
		            clearTimeout(timerId);
		            timerId = setTimeout(timerExpired, wait);
		            return invokeFunc(lastCallTime);
		          }
		        }
		        if (timerId === undefined$1) {
		          timerId = setTimeout(timerExpired, wait);
		        }
		        return result;
		      }
		      debounced.cancel = cancel;
		      debounced.flush = flush;
		      return debounced;
		    }

		    /**
		     * Defers invoking the `func` until the current call stack has cleared. Any
		     * additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to defer.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.defer(function(text) {
		     *   console.log(text);
		     * }, 'deferred');
		     * // => Logs 'deferred' after one millisecond.
		     */
		    var defer = baseRest(function(func, args) {
		      return baseDelay(func, 1, args);
		    });

		    /**
		     * Invokes `func` after `wait` milliseconds. Any additional arguments are
		     * provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.delay(function(text) {
		     *   console.log(text);
		     * }, 1000, 'later');
		     * // => Logs 'later' after one second.
		     */
		    var delay = baseRest(function(func, wait, args) {
		      return baseDelay(func, toNumber(wait) || 0, args);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments reversed.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to flip arguments for.
		     * @returns {Function} Returns the new flipped function.
		     * @example
		     *
		     * var flipped = _.flip(function() {
		     *   return _.toArray(arguments);
		     * });
		     *
		     * flipped('a', 'b', 'c', 'd');
		     * // => ['d', 'c', 'b', 'a']
		     */
		    function flip(func) {
		      return createWrap(func, WRAP_FLIP_FLAG);
		    }

		    /**
		     * Creates a function that memoizes the result of `func`. If `resolver` is
		     * provided, it determines the cache key for storing the result based on the
		     * arguments provided to the memoized function. By default, the first argument
		     * provided to the memoized function is used as the map cache key. The `func`
		     * is invoked with the `this` binding of the memoized function.
		     *
		     * **Note:** The cache is exposed as the `cache` property on the memoized
		     * function. Its creation may be customized by replacing the `_.memoize.Cache`
		     * constructor with one whose instances implement the
		     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to have its output memoized.
		     * @param {Function} [resolver] The function to resolve the cache key.
		     * @returns {Function} Returns the new memoized function.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     * var other = { 'c': 3, 'd': 4 };
		     *
		     * var values = _.memoize(_.values);
		     * values(object);
		     * // => [1, 2]
		     *
		     * values(other);
		     * // => [3, 4]
		     *
		     * object.a = 2;
		     * values(object);
		     * // => [1, 2]
		     *
		     * // Modify the result cache.
		     * values.cache.set(object, ['a', 'b']);
		     * values(object);
		     * // => ['a', 'b']
		     *
		     * // Replace `_.memoize.Cache`.
		     * _.memoize.Cache = WeakMap;
		     */
		    function memoize(func, resolver) {
		      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var memoized = function() {
		        var args = arguments,
		            key = resolver ? resolver.apply(this, args) : args[0],
		            cache = memoized.cache;

		        if (cache.has(key)) {
		          return cache.get(key);
		        }
		        var result = func.apply(this, args);
		        memoized.cache = cache.set(key, result) || cache;
		        return result;
		      };
		      memoized.cache = new (memoize.Cache || MapCache);
		      return memoized;
		    }

		    // Expose `MapCache`.
		    memoize.Cache = MapCache;

		    /**
		     * Creates a function that negates the result of the predicate `func`. The
		     * `func` predicate is invoked with the `this` binding and arguments of the
		     * created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} predicate The predicate to negate.
		     * @returns {Function} Returns the new negated function.
		     * @example
		     *
		     * function isEven(n) {
		     *   return n % 2 == 0;
		     * }
		     *
		     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		     * // => [1, 3, 5]
		     */
		    function negate(predicate) {
		      if (typeof predicate != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return function() {
		        var args = arguments;
		        switch (args.length) {
		          case 0: return !predicate.call(this);
		          case 1: return !predicate.call(this, args[0]);
		          case 2: return !predicate.call(this, args[0], args[1]);
		          case 3: return !predicate.call(this, args[0], args[1], args[2]);
		        }
		        return !predicate.apply(this, args);
		      };
		    }

		    /**
		     * Creates a function that is restricted to invoking `func` once. Repeat calls
		     * to the function return the value of the first invocation. The `func` is
		     * invoked with the `this` binding and arguments of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var initialize = _.once(createApplication);
		     * initialize();
		     * initialize();
		     * // => `createApplication` is invoked once
		     */
		    function once(func) {
		      return before(2, func);
		    }

		    /**
		     * Creates a function that invokes `func` with its arguments transformed.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Function
		     * @param {Function} func The function to wrap.
		     * @param {...(Function|Function[])} [transforms=[_.identity]]
		     *  The argument transforms.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * function doubled(n) {
		     *   return n * 2;
		     * }
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var func = _.overArgs(function(x, y) {
		     *   return [x, y];
		     * }, [square, doubled]);
		     *
		     * func(9, 3);
		     * // => [81, 6]
		     *
		     * func(10, 5);
		     * // => [100, 10]
		     */
		    var overArgs = castRest(function(func, transforms) {
		      transforms = (transforms.length == 1 && isArray(transforms[0]))
		        ? arrayMap(transforms[0], baseUnary(getIteratee()))
		        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

		      var funcsLength = transforms.length;
		      return baseRest(function(args) {
		        var index = -1,
		            length = nativeMin(args.length, funcsLength);

		        while (++index < length) {
		          args[index] = transforms[index].call(this, args[index]);
		        }
		        return apply(func, this, args);
		      });
		    });

		    /**
		     * Creates a function that invokes `func` with `partials` prepended to the
		     * arguments it receives. This method is like `_.bind` except it does **not**
		     * alter the `this` binding.
		     *
		     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.2.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var sayHelloTo = _.partial(greet, 'hello');
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     *
		     * // Partially applied with placeholders.
		     * var greetFred = _.partial(greet, _, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     */
		    var partial = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partial));
		      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * This method is like `_.partial` except that partially applied arguments
		     * are appended to the arguments it receives.
		     *
		     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var greetFred = _.partialRight(greet, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     *
		     * // Partially applied with placeholders.
		     * var sayHelloTo = _.partialRight(greet, 'hello', _);
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     */
		    var partialRight = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partialRight));
		      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments arranged according
		     * to the specified `indexes` where the argument value at the first index is
		     * provided as the first argument, the argument value at the second index is
		     * provided as the second argument, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to rearrange arguments for.
		     * @param {...(number|number[])} indexes The arranged argument indexes.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var rearged = _.rearg(function(a, b, c) {
		     *   return [a, b, c];
		     * }, [2, 0, 1]);
		     *
		     * rearged('b', 'c', 'a')
		     * // => ['a', 'b', 'c']
		     */
		    var rearg = flatRest(function(func, indexes) {
		      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
		    });

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * created function and arguments from `start` and beyond provided as
		     * an array.
		     *
		     * **Note:** This method is based on the
		     * [rest parameter](https://mdn.io/rest_parameters).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.rest(function(what, names) {
		     *   return what + ' ' + _.initial(names).join(', ') +
		     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		     * });
		     *
		     * say('hello', 'fred', 'barney', 'pebbles');
		     * // => 'hello fred, barney, & pebbles'
		     */
		    function rest(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start === undefined$1 ? start : toInteger(start);
		      return baseRest(func, start);
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * create function and an array of arguments much like
		     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		     *
		     * **Note:** This method is based on the
		     * [spread operator](https://mdn.io/spread_operator).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Function
		     * @param {Function} func The function to spread arguments over.
		     * @param {number} [start=0] The start position of the spread.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.spread(function(who, what) {
		     *   return who + ' says ' + what;
		     * });
		     *
		     * say(['fred', 'hello']);
		     * // => 'fred says hello'
		     *
		     * var numbers = Promise.all([
		     *   Promise.resolve(40),
		     *   Promise.resolve(36)
		     * ]);
		     *
		     * numbers.then(_.spread(function(x, y) {
		     *   return x + y;
		     * }));
		     * // => a Promise of 76
		     */
		    function spread(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start == null ? 0 : nativeMax(toInteger(start), 0);
		      return baseRest(function(args) {
		        var array = args[start],
		            otherArgs = castSlice(args, 0, start);

		        if (array) {
		          arrayPush(otherArgs, array);
		        }
		        return apply(func, this, otherArgs);
		      });
		    }

		    /**
		     * Creates a throttled function that only invokes `func` at most once per
		     * every `wait` milliseconds. The throttled function comes with a `cancel`
		     * method to cancel delayed `func` invocations and a `flush` method to
		     * immediately invoke them. Provide `options` to indicate whether `func`
		     * should be invoked on the leading and/or trailing edge of the `wait`
		     * timeout. The `func` is invoked with the last arguments provided to the
		     * throttled function. Subsequent calls to the throttled function return the
		     * result of the last `func` invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the throttled function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.throttle` and `_.debounce`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to throttle.
		     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=true]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new throttled function.
		     * @example
		     *
		     * // Avoid excessively updating the position while scrolling.
		     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		     *
		     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		     * jQuery(element).on('click', throttled);
		     *
		     * // Cancel the trailing throttled invocation.
		     * jQuery(window).on('popstate', throttled.cancel);
		     */
		    function throttle(func, wait, options) {
		      var leading = true,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      if (isObject(options)) {
		        leading = 'leading' in options ? !!options.leading : leading;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }
		      return debounce(func, wait, {
		        'leading': leading,
		        'maxWait': wait,
		        'trailing': trailing
		      });
		    }

		    /**
		     * Creates a function that accepts up to one argument, ignoring any
		     * additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.unary(parseInt));
		     * // => [6, 8, 10]
		     */
		    function unary(func) {
		      return ary(func, 1);
		    }

		    /**
		     * Creates a function that provides `value` to `wrapper` as its first
		     * argument. Any additional arguments provided to the function are appended
		     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		     * binding of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {*} value The value to wrap.
		     * @param {Function} [wrapper=identity] The wrapper function.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var p = _.wrap(_.escape, function(func, text) {
		     *   return '<p>' + func(text) + '</p>';
		     * });
		     *
		     * p('fred, barney, & pebbles');
		     * // => '<p>fred, barney, &amp; pebbles</p>'
		     */
		    function wrap(value, wrapper) {
		      return partial(castFunction(wrapper), value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Casts `value` as an array if it's not one.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Lang
		     * @param {*} value The value to inspect.
		     * @returns {Array} Returns the cast array.
		     * @example
		     *
		     * _.castArray(1);
		     * // => [1]
		     *
		     * _.castArray({ 'a': 1 });
		     * // => [{ 'a': 1 }]
		     *
		     * _.castArray('abc');
		     * // => ['abc']
		     *
		     * _.castArray(null);
		     * // => [null]
		     *
		     * _.castArray(undefined);
		     * // => [undefined]
		     *
		     * _.castArray();
		     * // => []
		     *
		     * var array = [1, 2, 3];
		     * console.log(_.castArray(array) === array);
		     * // => true
		     */
		    function castArray() {
		      if (!arguments.length) {
		        return [];
		      }
		      var value = arguments[0];
		      return isArray(value) ? value : [value];
		    }

		    /**
		     * Creates a shallow clone of `value`.
		     *
		     * **Note:** This method is loosely based on the
		     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		     * and supports cloning arrays, array buffers, booleans, date objects, maps,
		     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		     * arrays. The own enumerable properties of `arguments` objects are cloned
		     * as plain objects. An empty object is returned for uncloneable values such
		     * as error objects, functions, DOM nodes, and WeakMaps.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeep
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var shallow = _.clone(objects);
		     * console.log(shallow[0] === objects[0]);
		     * // => true
		     */
		    function clone(value) {
		      return baseClone(value, CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.clone` except that it accepts `customizer` which
		     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		     * cloning is handled by the method instead. The `customizer` is invoked with
		     * up to four arguments; (value [, index|key, object, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeepWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(false);
		     *   }
		     * }
		     *
		     * var el = _.cloneWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 0
		     */
		    function cloneWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * This method is like `_.clone` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.clone
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var deep = _.cloneDeep(objects);
		     * console.log(deep[0] === objects[0]);
		     * // => false
		     */
		    function cloneDeep(value) {
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.cloneWith` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.cloneWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(true);
		     *   }
		     * }
		     *
		     * var el = _.cloneDeepWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 20
		     */
		    function cloneDeepWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * Checks if `object` conforms to `source` by invoking the predicate
		     * properties of `source` with the corresponding property values of `object`.
		     *
		     * **Note:** This method is equivalent to `_.conforms` when `source` is
		     * partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		     * // => true
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		     * // => false
		     */
		    function conformsTo(object, source) {
		      return source == null || baseConformsTo(object, source, keys(source));
		    }

		    /**
		     * Performs a
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * comparison between two values to determine if they are equivalent.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.eq(object, object);
		     * // => true
		     *
		     * _.eq(object, other);
		     * // => false
		     *
		     * _.eq('a', 'a');
		     * // => true
		     *
		     * _.eq('a', Object('a'));
		     * // => false
		     *
		     * _.eq(NaN, NaN);
		     * // => true
		     */
		    function eq(value, other) {
		      return value === other || (value !== value && other !== other);
		    }

		    /**
		     * Checks if `value` is greater than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     * @see _.lt
		     * @example
		     *
		     * _.gt(3, 1);
		     * // => true
		     *
		     * _.gt(3, 3);
		     * // => false
		     *
		     * _.gt(1, 3);
		     * // => false
		     */
		    var gt = createRelationalOperation(baseGt);

		    /**
		     * Checks if `value` is greater than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than or equal to
		     *  `other`, else `false`.
		     * @see _.lte
		     * @example
		     *
		     * _.gte(3, 1);
		     * // => true
		     *
		     * _.gte(3, 3);
		     * // => true
		     *
		     * _.gte(1, 3);
		     * // => false
		     */
		    var gte = createRelationalOperation(function(value, other) {
		      return value >= other;
		    });

		    /**
		     * Checks if `value` is likely an `arguments` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArguments(function() { return arguments; }());
		     * // => true
		     *
		     * _.isArguments([1, 2, 3]);
		     * // => false
		     */
		    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		        !propertyIsEnumerable.call(value, 'callee');
		    };

		    /**
		     * Checks if `value` is classified as an `Array` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		     * @example
		     *
		     * _.isArray([1, 2, 3]);
		     * // => true
		     *
		     * _.isArray(document.body.children);
		     * // => false
		     *
		     * _.isArray('abc');
		     * // => false
		     *
		     * _.isArray(_.noop);
		     * // => false
		     */
		    var isArray = Array.isArray;

		    /**
		     * Checks if `value` is classified as an `ArrayBuffer` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     * @example
		     *
		     * _.isArrayBuffer(new ArrayBuffer(2));
		     * // => true
		     *
		     * _.isArrayBuffer(new Array(2));
		     * // => false
		     */
		    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		    /**
		     * Checks if `value` is array-like. A value is considered array-like if it's
		     * not a function and has a `value.length` that's an integer greater than or
		     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		     * @example
		     *
		     * _.isArrayLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLike(document.body.children);
		     * // => true
		     *
		     * _.isArrayLike('abc');
		     * // => true
		     *
		     * _.isArrayLike(_.noop);
		     * // => false
		     */
		    function isArrayLike(value) {
		      return value != null && isLength(value.length) && !isFunction(value);
		    }

		    /**
		     * This method is like `_.isArrayLike` except that it also checks if `value`
		     * is an object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array-like object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArrayLikeObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLikeObject(document.body.children);
		     * // => true
		     *
		     * _.isArrayLikeObject('abc');
		     * // => false
		     *
		     * _.isArrayLikeObject(_.noop);
		     * // => false
		     */
		    function isArrayLikeObject(value) {
		      return isObjectLike(value) && isArrayLike(value);
		    }

		    /**
		     * Checks if `value` is classified as a boolean primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		     * @example
		     *
		     * _.isBoolean(false);
		     * // => true
		     *
		     * _.isBoolean(null);
		     * // => false
		     */
		    function isBoolean(value) {
		      return value === true || value === false ||
		        (isObjectLike(value) && baseGetTag(value) == boolTag);
		    }

		    /**
		     * Checks if `value` is a buffer.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		     * @example
		     *
		     * _.isBuffer(new Buffer(2));
		     * // => true
		     *
		     * _.isBuffer(new Uint8Array(2));
		     * // => false
		     */
		    var isBuffer = nativeIsBuffer || stubFalse;

		    /**
		     * Checks if `value` is classified as a `Date` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     * @example
		     *
		     * _.isDate(new Date);
		     * // => true
		     *
		     * _.isDate('Mon April 23 2012');
		     * // => false
		     */
		    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		    /**
		     * Checks if `value` is likely a DOM element.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		     * @example
		     *
		     * _.isElement(document.body);
		     * // => true
		     *
		     * _.isElement('<body>');
		     * // => false
		     */
		    function isElement(value) {
		      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		    }

		    /**
		     * Checks if `value` is an empty object, collection, map, or set.
		     *
		     * Objects are considered empty if they have no own enumerable string keyed
		     * properties.
		     *
		     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		     * jQuery-like collections are considered empty if they have a `length` of `0`.
		     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		     * @example
		     *
		     * _.isEmpty(null);
		     * // => true
		     *
		     * _.isEmpty(true);
		     * // => true
		     *
		     * _.isEmpty(1);
		     * // => true
		     *
		     * _.isEmpty([1, 2, 3]);
		     * // => false
		     *
		     * _.isEmpty({ 'a': 1 });
		     * // => false
		     */
		    function isEmpty(value) {
		      if (value == null) {
		        return true;
		      }
		      if (isArrayLike(value) &&
		          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		        return !value.length;
		      }
		      var tag = getTag(value);
		      if (tag == mapTag || tag == setTag) {
		        return !value.size;
		      }
		      if (isPrototype(value)) {
		        return !baseKeys(value).length;
		      }
		      for (var key in value) {
		        if (hasOwnProperty.call(value, key)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * Performs a deep comparison between two values to determine if they are
		     * equivalent.
		     *
		     * **Note:** This method supports comparing arrays, array buffers, booleans,
		     * date objects, error objects, maps, numbers, `Object` objects, regexes,
		     * sets, strings, symbols, and typed arrays. `Object` objects are compared
		     * by their own, not inherited, enumerable properties. Functions and DOM
		     * nodes are compared by strict equality, i.e. `===`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.isEqual(object, other);
		     * // => true
		     *
		     * object === other;
		     * // => false
		     */
		    function isEqual(value, other) {
		      return baseIsEqual(value, other);
		    }

		    /**
		     * This method is like `_.isEqual` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with up to
		     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, othValue) {
		     *   if (isGreeting(objValue) && isGreeting(othValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var array = ['hello', 'goodbye'];
		     * var other = ['hi', 'goodbye'];
		     *
		     * _.isEqualWith(array, other, customizer);
		     * // => true
		     */
		    function isEqualWith(value, other, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      var result = customizer ? customizer(value, other) : undefined$1;
		      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
		    }

		    /**
		     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		     * `SyntaxError`, `TypeError`, or `URIError` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		     * @example
		     *
		     * _.isError(new Error);
		     * // => true
		     *
		     * _.isError(Error);
		     * // => false
		     */
		    function isError(value) {
		      if (!isObjectLike(value)) {
		        return false;
		      }
		      var tag = baseGetTag(value);
		      return tag == errorTag || tag == domExcTag ||
		        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		    }

		    /**
		     * Checks if `value` is a finite primitive number.
		     *
		     * **Note:** This method is based on
		     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		     * @example
		     *
		     * _.isFinite(3);
		     * // => true
		     *
		     * _.isFinite(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isFinite(Infinity);
		     * // => false
		     *
		     * _.isFinite('3');
		     * // => false
		     */
		    function isFinite(value) {
		      return typeof value == 'number' && nativeIsFinite(value);
		    }

		    /**
		     * Checks if `value` is classified as a `Function` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		     * @example
		     *
		     * _.isFunction(_);
		     * // => true
		     *
		     * _.isFunction(/abc/);
		     * // => false
		     */
		    function isFunction(value) {
		      if (!isObject(value)) {
		        return false;
		      }
		      // The use of `Object#toString` avoids issues with the `typeof` operator
		      // in Safari 9 which returns 'object' for typed arrays and other constructors.
		      var tag = baseGetTag(value);
		      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		    }

		    /**
		     * Checks if `value` is an integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		     * @example
		     *
		     * _.isInteger(3);
		     * // => true
		     *
		     * _.isInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isInteger(Infinity);
		     * // => false
		     *
		     * _.isInteger('3');
		     * // => false
		     */
		    function isInteger(value) {
		      return typeof value == 'number' && value == toInteger(value);
		    }

		    /**
		     * Checks if `value` is a valid array-like length.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		     * @example
		     *
		     * _.isLength(3);
		     * // => true
		     *
		     * _.isLength(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isLength(Infinity);
		     * // => false
		     *
		     * _.isLength('3');
		     * // => false
		     */
		    function isLength(value) {
		      return typeof value == 'number' &&
		        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is the
		     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		     * @example
		     *
		     * _.isObject({});
		     * // => true
		     *
		     * _.isObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isObject(_.noop);
		     * // => true
		     *
		     * _.isObject(null);
		     * // => false
		     */
		    function isObject(value) {
		      var type = typeof value;
		      return value != null && (type == 'object' || type == 'function');
		    }

		    /**
		     * Checks if `value` is object-like. A value is object-like if it's not `null`
		     * and has a `typeof` result of "object".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		     * @example
		     *
		     * _.isObjectLike({});
		     * // => true
		     *
		     * _.isObjectLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isObjectLike(_.noop);
		     * // => false
		     *
		     * _.isObjectLike(null);
		     * // => false
		     */
		    function isObjectLike(value) {
		      return value != null && typeof value == 'object';
		    }

		    /**
		     * Checks if `value` is classified as a `Map` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     * @example
		     *
		     * _.isMap(new Map);
		     * // => true
		     *
		     * _.isMap(new WeakMap);
		     * // => false
		     */
		    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		    /**
		     * Performs a partial deep comparison between `object` and `source` to
		     * determine if `object` contains equivalent property values.
		     *
		     * **Note:** This method is equivalent to `_.matches` when `source` is
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.isMatch(object, { 'b': 2 });
		     * // => true
		     *
		     * _.isMatch(object, { 'b': 1 });
		     * // => false
		     */
		    function isMatch(object, source) {
		      return object === source || baseIsMatch(object, source, getMatchData(source));
		    }

		    /**
		     * This method is like `_.isMatch` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with five
		     * arguments: (objValue, srcValue, index|key, object, source).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var object = { 'greeting': 'hello' };
		     * var source = { 'greeting': 'hi' };
		     *
		     * _.isMatchWith(object, source, customizer);
		     * // => true
		     */
		    function isMatchWith(object, source, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseIsMatch(object, source, getMatchData(source), customizer);
		    }

		    /**
		     * Checks if `value` is `NaN`.
		     *
		     * **Note:** This method is based on
		     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		     * `undefined` and other non-number values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		     * @example
		     *
		     * _.isNaN(NaN);
		     * // => true
		     *
		     * _.isNaN(new Number(NaN));
		     * // => true
		     *
		     * isNaN(undefined);
		     * // => true
		     *
		     * _.isNaN(undefined);
		     * // => false
		     */
		    function isNaN(value) {
		      // An `NaN` primitive is the only value that is not equal to itself.
		      // Perform the `toStringTag` check first to avoid errors with some
		      // ActiveX objects in IE.
		      return isNumber(value) && value != +value;
		    }

		    /**
		     * Checks if `value` is a pristine native function.
		     *
		     * **Note:** This method can't reliably detect native functions in the presence
		     * of the core-js package because core-js circumvents this kind of detection.
		     * Despite multiple requests, the core-js maintainer has made it clear: any
		     * attempt to fix the detection will be obstructed. As a result, we're left
		     * with little choice but to throw an error. Unfortunately, this also affects
		     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		     * which rely on core-js.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     * @example
		     *
		     * _.isNative(Array.prototype.push);
		     * // => true
		     *
		     * _.isNative(_);
		     * // => false
		     */
		    function isNative(value) {
		      if (isMaskable(value)) {
		        throw new Error(CORE_ERROR_TEXT);
		      }
		      return baseIsNative(value);
		    }

		    /**
		     * Checks if `value` is `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		     * @example
		     *
		     * _.isNull(null);
		     * // => true
		     *
		     * _.isNull(void 0);
		     * // => false
		     */
		    function isNull(value) {
		      return value === null;
		    }

		    /**
		     * Checks if `value` is `null` or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		     * @example
		     *
		     * _.isNil(null);
		     * // => true
		     *
		     * _.isNil(void 0);
		     * // => true
		     *
		     * _.isNil(NaN);
		     * // => false
		     */
		    function isNil(value) {
		      return value == null;
		    }

		    /**
		     * Checks if `value` is classified as a `Number` primitive or object.
		     *
		     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		     * classified as numbers, use the `_.isFinite` method.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		     * @example
		     *
		     * _.isNumber(3);
		     * // => true
		     *
		     * _.isNumber(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isNumber(Infinity);
		     * // => true
		     *
		     * _.isNumber('3');
		     * // => false
		     */
		    function isNumber(value) {
		      return typeof value == 'number' ||
		        (isObjectLike(value) && baseGetTag(value) == numberTag);
		    }

		    /**
		     * Checks if `value` is a plain object, that is, an object created by the
		     * `Object` constructor or one with a `[[Prototype]]` of `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.8.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * _.isPlainObject(new Foo);
		     * // => false
		     *
		     * _.isPlainObject([1, 2, 3]);
		     * // => false
		     *
		     * _.isPlainObject({ 'x': 0, 'y': 0 });
		     * // => true
		     *
		     * _.isPlainObject(Object.create(null));
		     * // => true
		     */
		    function isPlainObject(value) {
		      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		        return false;
		      }
		      var proto = getPrototype(value);
		      if (proto === null) {
		        return true;
		      }
		      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		        funcToString.call(Ctor) == objectCtorString;
		    }

		    /**
		     * Checks if `value` is classified as a `RegExp` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     * @example
		     *
		     * _.isRegExp(/abc/);
		     * // => true
		     *
		     * _.isRegExp('/abc/');
		     * // => false
		     */
		    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		    /**
		     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		     * double precision number which isn't the result of a rounded unsafe integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		     * @example
		     *
		     * _.isSafeInteger(3);
		     * // => true
		     *
		     * _.isSafeInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isSafeInteger(Infinity);
		     * // => false
		     *
		     * _.isSafeInteger('3');
		     * // => false
		     */
		    function isSafeInteger(value) {
		      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is classified as a `Set` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     * @example
		     *
		     * _.isSet(new Set);
		     * // => true
		     *
		     * _.isSet(new WeakSet);
		     * // => false
		     */
		    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		    /**
		     * Checks if `value` is classified as a `String` primitive or object.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		     * @example
		     *
		     * _.isString('abc');
		     * // => true
		     *
		     * _.isString(1);
		     * // => false
		     */
		    function isString(value) {
		      return typeof value == 'string' ||
		        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		    }

		    /**
		     * Checks if `value` is classified as a `Symbol` primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		     * @example
		     *
		     * _.isSymbol(Symbol.iterator);
		     * // => true
		     *
		     * _.isSymbol('abc');
		     * // => false
		     */
		    function isSymbol(value) {
		      return typeof value == 'symbol' ||
		        (isObjectLike(value) && baseGetTag(value) == symbolTag);
		    }

		    /**
		     * Checks if `value` is classified as a typed array.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     * @example
		     *
		     * _.isTypedArray(new Uint8Array);
		     * // => true
		     *
		     * _.isTypedArray([]);
		     * // => false
		     */
		    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		    /**
		     * Checks if `value` is `undefined`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		     * @example
		     *
		     * _.isUndefined(void 0);
		     * // => true
		     *
		     * _.isUndefined(null);
		     * // => false
		     */
		    function isUndefined(value) {
		      return value === undefined$1;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakMap` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		     * @example
		     *
		     * _.isWeakMap(new WeakMap);
		     * // => true
		     *
		     * _.isWeakMap(new Map);
		     * // => false
		     */
		    function isWeakMap(value) {
		      return isObjectLike(value) && getTag(value) == weakMapTag;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakSet` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		     * @example
		     *
		     * _.isWeakSet(new WeakSet);
		     * // => true
		     *
		     * _.isWeakSet(new Set);
		     * // => false
		     */
		    function isWeakSet(value) {
		      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		    }

		    /**
		     * Checks if `value` is less than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     * @see _.gt
		     * @example
		     *
		     * _.lt(1, 3);
		     * // => true
		     *
		     * _.lt(3, 3);
		     * // => false
		     *
		     * _.lt(3, 1);
		     * // => false
		     */
		    var lt = createRelationalOperation(baseLt);

		    /**
		     * Checks if `value` is less than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than or equal to
		     *  `other`, else `false`.
		     * @see _.gte
		     * @example
		     *
		     * _.lte(1, 3);
		     * // => true
		     *
		     * _.lte(3, 3);
		     * // => true
		     *
		     * _.lte(3, 1);
		     * // => false
		     */
		    var lte = createRelationalOperation(function(value, other) {
		      return value <= other;
		    });

		    /**
		     * Converts `value` to an array.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the converted array.
		     * @example
		     *
		     * _.toArray({ 'a': 1, 'b': 2 });
		     * // => [1, 2]
		     *
		     * _.toArray('abc');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toArray(1);
		     * // => []
		     *
		     * _.toArray(null);
		     * // => []
		     */
		    function toArray(value) {
		      if (!value) {
		        return [];
		      }
		      if (isArrayLike(value)) {
		        return isString(value) ? stringToArray(value) : copyArray(value);
		      }
		      if (symIterator && value[symIterator]) {
		        return iteratorToArray(value[symIterator]());
		      }
		      var tag = getTag(value),
		          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

		      return func(value);
		    }

		    /**
		     * Converts `value` to a finite number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.12.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted number.
		     * @example
		     *
		     * _.toFinite(3.2);
		     * // => 3.2
		     *
		     * _.toFinite(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toFinite(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toFinite('3.2');
		     * // => 3.2
		     */
		    function toFinite(value) {
		      if (!value) {
		        return value === 0 ? value : 0;
		      }
		      value = toNumber(value);
		      if (value === INFINITY || value === -INFINITY) {
		        var sign = (value < 0 ? -1 : 1);
		        return sign * MAX_INTEGER;
		      }
		      return value === value ? value : 0;
		    }

		    /**
		     * Converts `value` to an integer.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toInteger(3.2);
		     * // => 3
		     *
		     * _.toInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toInteger(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toInteger('3.2');
		     * // => 3
		     */
		    function toInteger(value) {
		      var result = toFinite(value),
		          remainder = result % 1;

		      return result === result ? (remainder ? result - remainder : result) : 0;
		    }

		    /**
		     * Converts `value` to an integer suitable for use as the length of an
		     * array-like object.
		     *
		     * **Note:** This method is based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toLength(3.2);
		     * // => 3
		     *
		     * _.toLength(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toLength(Infinity);
		     * // => 4294967295
		     *
		     * _.toLength('3.2');
		     * // => 3
		     */
		    function toLength(value) {
		      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		    }

		    /**
		     * Converts `value` to a number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     * @example
		     *
		     * _.toNumber(3.2);
		     * // => 3.2
		     *
		     * _.toNumber(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toNumber(Infinity);
		     * // => Infinity
		     *
		     * _.toNumber('3.2');
		     * // => 3.2
		     */
		    function toNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      if (isObject(value)) {
		        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		        value = isObject(other) ? (other + '') : other;
		      }
		      if (typeof value != 'string') {
		        return value === 0 ? value : +value;
		      }
		      value = baseTrim(value);
		      var isBinary = reIsBinary.test(value);
		      return (isBinary || reIsOctal.test(value))
		        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
		        : (reIsBadHex.test(value) ? NAN : +value);
		    }

		    /**
		     * Converts `value` to a plain object flattening inherited enumerable string
		     * keyed properties of `value` to own properties of the plain object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Object} Returns the converted plain object.
		     * @example
		     *
		     * function Foo() {
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.assign({ 'a': 1 }, new Foo);
		     * // => { 'a': 1, 'b': 2 }
		     *
		     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		     * // => { 'a': 1, 'b': 2, 'c': 3 }
		     */
		    function toPlainObject(value) {
		      return copyObject(value, keysIn(value));
		    }

		    /**
		     * Converts `value` to a safe integer. A safe integer can be compared and
		     * represented correctly.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toSafeInteger(3.2);
		     * // => 3
		     *
		     * _.toSafeInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toSafeInteger(Infinity);
		     * // => 9007199254740991
		     *
		     * _.toSafeInteger('3.2');
		     * // => 3
		     */
		    function toSafeInteger(value) {
		      return value
		        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
		        : (value === 0 ? value : 0);
		    }

		    /**
		     * Converts `value` to a string. An empty string is returned for `null`
		     * and `undefined` values. The sign of `-0` is preserved.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.toString(null);
		     * // => ''
		     *
		     * _.toString(-0);
		     * // => '-0'
		     *
		     * _.toString([1, 2, 3]);
		     * // => '1,2,3'
		     */
		    function toString(value) {
		      return value == null ? '' : baseToString(value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Assigns own enumerable string keyed properties of source objects to the
		     * destination object. Source objects are applied from left to right.
		     * Subsequent sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object` and is loosely based on
		     * [`Object.assign`](https://mdn.io/Object/assign).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assignIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assign({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var assign = createAssigner(function(object, source) {
		      if (isPrototype(source) || isArrayLike(source)) {
		        copyObject(source, keys(source), object);
		        return;
		      }
		      for (var key in source) {
		        if (hasOwnProperty.call(source, key)) {
		          assignValue(object, key, source[key]);
		        }
		      }
		    });

		    /**
		     * This method is like `_.assign` except that it iterates over own and
		     * inherited source properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extend
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assign
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		     */
		    var assignIn = createAssigner(function(object, source) {
		      copyObject(source, keysIn(source), object);
		    });

		    /**
		     * This method is like `_.assignIn` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extendWith
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignInWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keysIn(source), object, customizer);
		    });

		    /**
		     * This method is like `_.assign` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignInWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keys(source), object, customizer);
		    });

		    /**
		     * Creates an array of values corresponding to `paths` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Array} Returns the picked values.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _.at(object, ['a[0].b.c', 'a[1]']);
		     * // => [3, 4]
		     */
		    var at = flatRest(baseAt);

		    /**
		     * Creates an object that inherits from the `prototype` object. If a
		     * `properties` object is given, its own enumerable string keyed properties
		     * are assigned to the created object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Object
		     * @param {Object} prototype The object to inherit from.
		     * @param {Object} [properties] The properties to assign to the object.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * function Shape() {
		     *   this.x = 0;
		     *   this.y = 0;
		     * }
		     *
		     * function Circle() {
		     *   Shape.call(this);
		     * }
		     *
		     * Circle.prototype = _.create(Shape.prototype, {
		     *   'constructor': Circle
		     * });
		     *
		     * var circle = new Circle;
		     * circle instanceof Circle;
		     * // => true
		     *
		     * circle instanceof Shape;
		     * // => true
		     */
		    function create(prototype, properties) {
		      var result = baseCreate(prototype);
		      return properties == null ? result : baseAssign(result, properties);
		    }

		    /**
		     * Assigns own and inherited enumerable string keyed properties of source
		     * objects to the destination object for all destination properties that
		     * resolve to `undefined`. Source objects are applied from left to right.
		     * Once a property is set, additional values of the same property are ignored.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaultsDeep
		     * @example
		     *
		     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var defaults = baseRest(function(object, sources) {
		      object = Object(object);

		      var index = -1;
		      var length = sources.length;
		      var guard = length > 2 ? sources[2] : undefined$1;

		      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		        length = 1;
		      }

		      while (++index < length) {
		        var source = sources[index];
		        var props = keysIn(source);
		        var propsIndex = -1;
		        var propsLength = props.length;

		        while (++propsIndex < propsLength) {
		          var key = props[propsIndex];
		          var value = object[key];

		          if (value === undefined$1 ||
		              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		            object[key] = source[key];
		          }
		        }
		      }

		      return object;
		    });

		    /**
		     * This method is like `_.defaults` except that it recursively assigns
		     * default properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaults
		     * @example
		     *
		     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		     * // => { 'a': { 'b': 2, 'c': 3 } }
		     */
		    var defaultsDeep = baseRest(function(args) {
		      args.push(undefined$1, customDefaultsMerge);
		      return apply(mergeWith, undefined$1, args);
		    });

		    /**
		     * This method is like `_.find` except that it returns the key of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findKey(users, function(o) { return o.age < 40; });
		     * // => 'barney' (iteration order is not guaranteed)
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findKey(users, { 'age': 1, 'active': true });
		     * // => 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findKey(users, 'active');
		     * // => 'barney'
		     */
		    function findKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		    }

		    /**
		     * This method is like `_.findKey` except that it iterates over elements of
		     * a collection in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findLastKey(users, function(o) { return o.age < 40; });
		     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastKey(users, { 'age': 36, 'active': true });
		     * // => 'barney'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastKey(users, 'active');
		     * // => 'pebbles'
		     */
		    function findLastKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		    }

		    /**
		     * Iterates over own and inherited enumerable string keyed properties of an
		     * object and invokes `iteratee` for each property. The iteratee is invoked
		     * with three arguments: (value, key, object). Iteratee functions may exit
		     * iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forInRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forIn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		     */
		    function forIn(object, iteratee) {
		      return object == null
		        ? object
		        : baseFor(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * This method is like `_.forIn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forInRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		     */
		    function forInRight(object, iteratee) {
		      return object == null
		        ? object
		        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * Iterates over own enumerable string keyed properties of an object and
		     * invokes `iteratee` for each property. The iteratee is invoked with three
		     * arguments: (value, key, object). Iteratee functions may exit iteration
		     * early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwnRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forOwn(object, iteratee) {
		      return object && baseForOwn(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forOwn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwnRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		     */
		    function forOwnRight(object, iteratee) {
		      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an array of function property names from own enumerable properties
		     * of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functionsIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functions(new Foo);
		     * // => ['a', 'b']
		     */
		    function functions(object) {
		      return object == null ? [] : baseFunctions(object, keys(object));
		    }

		    /**
		     * Creates an array of function property names from own and inherited
		     * enumerable properties of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functions
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functionsIn(new Foo);
		     * // => ['a', 'b', 'c']
		     */
		    function functionsIn(object) {
		      return object == null ? [] : baseFunctions(object, keysIn(object));
		    }

		    /**
		     * Gets the value at `path` of `object`. If the resolved value is
		     * `undefined`, the `defaultValue` is returned in its place.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.get(object, 'a[0].b.c');
		     * // => 3
		     *
		     * _.get(object, ['a', '0', 'b', 'c']);
		     * // => 3
		     *
		     * _.get(object, 'a.b.c', 'default');
		     * // => 'default'
		     */
		    function get(object, path, defaultValue) {
		      var result = object == null ? undefined$1 : baseGet(object, path);
		      return result === undefined$1 ? defaultValue : result;
		    }

		    /**
		     * Checks if `path` is a direct property of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = { 'a': { 'b': 2 } };
		     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.has(object, 'a');
		     * // => true
		     *
		     * _.has(object, 'a.b');
		     * // => true
		     *
		     * _.has(object, ['a', 'b']);
		     * // => true
		     *
		     * _.has(other, 'a');
		     * // => false
		     */
		    function has(object, path) {
		      return object != null && hasPath(object, path, baseHas);
		    }

		    /**
		     * Checks if `path` is a direct or inherited property of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.hasIn(object, 'a');
		     * // => true
		     *
		     * _.hasIn(object, 'a.b');
		     * // => true
		     *
		     * _.hasIn(object, ['a', 'b']);
		     * // => true
		     *
		     * _.hasIn(object, 'b');
		     * // => false
		     */
		    function hasIn(object, path) {
		      return object != null && hasPath(object, path, baseHasIn);
		    }

		    /**
		     * Creates an object composed of the inverted keys and values of `object`.
		     * If `object` contains duplicate values, subsequent values overwrite
		     * property assignments of previous values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invert(object);
		     * // => { '1': 'c', '2': 'b' }
		     */
		    var invert = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      result[value] = key;
		    }, constant(identity));

		    /**
		     * This method is like `_.invert` except that the inverted object is generated
		     * from the results of running each element of `object` thru `iteratee`. The
		     * corresponding inverted value of each inverted key is an array of keys
		     * responsible for generating the inverted value. The iteratee is invoked
		     * with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invertBy(object);
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     *
		     * _.invertBy(object, function(value) {
		     *   return 'group' + value;
		     * });
		     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		     */
		    var invertBy = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      if (hasOwnProperty.call(result, value)) {
		        result[value].push(key);
		      } else {
		        result[value] = [key];
		      }
		    }, getIteratee);

		    /**
		     * Invokes the method at `path` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		     *
		     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		     * // => [2, 3]
		     */
		    var invoke = baseRest(baseInvoke);

		    /**
		     * Creates an array of the own enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects. See the
		     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * for more details.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keys(new Foo);
		     * // => ['a', 'b'] (iteration order is not guaranteed)
		     *
		     * _.keys('hi');
		     * // => ['0', '1']
		     */
		    function keys(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		    }

		    /**
		     * Creates an array of the own and inherited enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keysIn(new Foo);
		     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		     */
		    function keysIn(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		    }

		    /**
		     * The opposite of `_.mapValues`; this method creates an object with the
		     * same values as `object` and keys generated by running each own enumerable
		     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		     * with three arguments: (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapValues
		     * @example
		     *
		     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   return key + value;
		     * });
		     * // => { 'a1': 1, 'b2': 2 }
		     */
		    function mapKeys(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, iteratee(value, key, object), value);
		      });
		      return result;
		    }

		    /**
		     * Creates an object with the same keys as `object` and values generated
		     * by running each own enumerable string keyed property of `object` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapKeys
		     * @example
		     *
		     * var users = {
		     *   'fred':    { 'user': 'fred',    'age': 40 },
		     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		     * };
		     *
		     * _.mapValues(users, function(o) { return o.age; });
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.mapValues(users, 'age');
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     */
		    function mapValues(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, key, iteratee(value, key, object));
		      });
		      return result;
		    }

		    /**
		     * This method is like `_.assign` except that it recursively merges own and
		     * inherited enumerable string keyed properties of source objects into the
		     * destination object. Source properties that resolve to `undefined` are
		     * skipped if a destination value exists. Array and plain object properties
		     * are merged recursively. Other objects and value types are overridden by
		     * assignment. Source objects are applied from left to right. Subsequent
		     * sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {
		     *   'a': [{ 'b': 2 }, { 'd': 4 }]
		     * };
		     *
		     * var other = {
		     *   'a': [{ 'c': 3 }, { 'e': 5 }]
		     * };
		     *
		     * _.merge(object, other);
		     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		     */
		    var merge = createAssigner(function(object, source, srcIndex) {
		      baseMerge(object, source, srcIndex);
		    });

		    /**
		     * This method is like `_.merge` except that it accepts `customizer` which
		     * is invoked to produce the merged values of the destination and source
		     * properties. If `customizer` returns `undefined`, merging is handled by the
		     * method instead. The `customizer` is invoked with six arguments:
		     * (objValue, srcValue, key, object, source, stack).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} customizer The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (_.isArray(objValue)) {
		     *     return objValue.concat(srcValue);
		     *   }
		     * }
		     *
		     * var object = { 'a': [1], 'b': [2] };
		     * var other = { 'a': [3], 'b': [4] };
		     *
		     * _.mergeWith(object, other, customizer);
		     * // => { 'a': [1, 3], 'b': [2, 4] }
		     */
		    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
		      baseMerge(object, source, srcIndex, customizer);
		    });

		    /**
		     * The opposite of `_.pick`; this method creates an object composed of the
		     * own and inherited enumerable property paths of `object` that are not omitted.
		     *
		     * **Note:** This method is considerably slower than `_.pick`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to omit.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omit(object, ['a', 'c']);
		     * // => { 'b': '2' }
		     */
		    var omit = flatRest(function(object, paths) {
		      var result = {};
		      if (object == null) {
		        return result;
		      }
		      var isDeep = false;
		      paths = arrayMap(paths, function(path) {
		        path = castPath(path, object);
		        isDeep || (isDeep = path.length > 1);
		        return path;
		      });
		      copyObject(object, getAllKeysIn(object), result);
		      if (isDeep) {
		        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		      }
		      var length = paths.length;
		      while (length--) {
		        baseUnset(result, paths[length]);
		      }
		      return result;
		    });

		    /**
		     * The opposite of `_.pickBy`; this method creates an object composed of
		     * the own and inherited enumerable string keyed properties of `object` that
		     * `predicate` doesn't return truthy for. The predicate is invoked with two
		     * arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omitBy(object, _.isNumber);
		     * // => { 'b': '2' }
		     */
		    function omitBy(object, predicate) {
		      return pickBy(object, negate(getIteratee(predicate)));
		    }

		    /**
		     * Creates an object composed of the picked `object` properties.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pick(object, ['a', 'c']);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var pick = flatRest(function(object, paths) {
		      return object == null ? {} : basePick(object, paths);
		    });

		    /**
		     * Creates an object composed of the `object` properties `predicate` returns
		     * truthy for. The predicate is invoked with two arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pickBy(object, _.isNumber);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    function pickBy(object, predicate) {
		      if (object == null) {
		        return {};
		      }
		      var props = arrayMap(getAllKeysIn(object), function(prop) {
		        return [prop];
		      });
		      predicate = getIteratee(predicate);
		      return basePickBy(object, props, function(value, path) {
		        return predicate(value, path[0]);
		      });
		    }

		    /**
		     * This method is like `_.get` except that if the resolved value is a
		     * function it's invoked with the `this` binding of its parent object and
		     * its result is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to resolve.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		     *
		     * _.result(object, 'a[0].b.c1');
		     * // => 3
		     *
		     * _.result(object, 'a[0].b.c2');
		     * // => 4
		     *
		     * _.result(object, 'a[0].b.c3', 'default');
		     * // => 'default'
		     *
		     * _.result(object, 'a[0].b.c3', _.constant('default'));
		     * // => 'default'
		     */
		    function result(object, path, defaultValue) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length;

		      // Ensure the loop is entered when path is empty.
		      if (!length) {
		        length = 1;
		        object = undefined$1;
		      }
		      while (++index < length) {
		        var value = object == null ? undefined$1 : object[toKey(path[index])];
		        if (value === undefined$1) {
		          index = length;
		          value = defaultValue;
		        }
		        object = isFunction(value) ? value.call(object) : value;
		      }
		      return object;
		    }

		    /**
		     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		     * it's created. Arrays are created for missing index properties while objects
		     * are created for all other missing properties. Use `_.setWith` to customize
		     * `path` creation.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.set(object, 'a[0].b.c', 4);
		     * console.log(object.a[0].b.c);
		     * // => 4
		     *
		     * _.set(object, ['x', '0', 'y', 'z'], 5);
		     * console.log(object.x[0].y.z);
		     * // => 5
		     */
		    function set(object, path, value) {
		      return object == null ? object : baseSet(object, path, value);
		    }

		    /**
		     * This method is like `_.set` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.setWith(object, '[0][1]', 'a', Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function setWith(object, path, value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseSet(object, path, value, customizer);
		    }

		    /**
		     * Creates an array of own enumerable string keyed-value pairs for `object`
		     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		     * entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entries
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairs(new Foo);
		     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		     */
		    var toPairs = createToPairs(keys);

		    /**
		     * Creates an array of own and inherited enumerable string keyed-value pairs
		     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		     * or set, its entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entriesIn
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairsIn(new Foo);
		     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		     */
		    var toPairsIn = createToPairs(keysIn);

		    /**
		     * An alternative to `_.reduce`; this method transforms `object` to a new
		     * `accumulator` object which is the result of running each of its own
		     * enumerable string keyed properties thru `iteratee`, with each invocation
		     * potentially mutating the `accumulator` object. If `accumulator` is not
		     * provided, a new object with the same `[[Prototype]]` will be used. The
		     * iteratee is invoked with four arguments: (accumulator, value, key, object).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The custom accumulator value.
		     * @returns {*} Returns the accumulated value.
		     * @example
		     *
		     * _.transform([2, 3, 4], function(result, n) {
		     *   result.push(n *= n);
		     *   return n % 2 == 0;
		     * }, []);
		     * // => [4, 9]
		     *
		     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     */
		    function transform(object, iteratee, accumulator) {
		      var isArr = isArray(object),
		          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

		      iteratee = getIteratee(iteratee, 4);
		      if (accumulator == null) {
		        var Ctor = object && object.constructor;
		        if (isArrLike) {
		          accumulator = isArr ? new Ctor : [];
		        }
		        else if (isObject(object)) {
		          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
		        }
		        else {
		          accumulator = {};
		        }
		      }
		      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
		        return iteratee(accumulator, value, index, object);
		      });
		      return accumulator;
		    }

		    /**
		     * Removes the property at `path` of `object`.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		     * _.unset(object, 'a[0].b.c');
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     *
		     * _.unset(object, ['a', '0', 'b', 'c']);
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     */
		    function unset(object, path) {
		      return object == null ? true : baseUnset(object, path);
		    }

		    /**
		     * This method is like `_.set` except that accepts `updater` to produce the
		     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		     * is invoked with one argument: (value).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		     * console.log(object.a[0].b.c);
		     * // => 9
		     *
		     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		     * console.log(object.x[0].y.z);
		     * // => 0
		     */
		    function update(object, path, updater) {
		      return object == null ? object : baseUpdate(object, path, castFunction(updater));
		    }

		    /**
		     * This method is like `_.update` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function updateWith(object, path, updater, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		    }

		    /**
		     * Creates an array of the own enumerable string keyed property values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.values(new Foo);
		     * // => [1, 2] (iteration order is not guaranteed)
		     *
		     * _.values('hi');
		     * // => ['h', 'i']
		     */
		    function values(object) {
		      return object == null ? [] : baseValues(object, keys(object));
		    }

		    /**
		     * Creates an array of the own and inherited enumerable string keyed property
		     * values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.valuesIn(new Foo);
		     * // => [1, 2, 3] (iteration order is not guaranteed)
		     */
		    function valuesIn(object) {
		      return object == null ? [] : baseValues(object, keysIn(object));
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Clamps `number` within the inclusive `lower` and `upper` bounds.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Number
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     * @example
		     *
		     * _.clamp(-10, -5, 5);
		     * // => -5
		     *
		     * _.clamp(10, -5, 5);
		     * // => 5
		     */
		    function clamp(number, lower, upper) {
		      if (upper === undefined$1) {
		        upper = lower;
		        lower = undefined$1;
		      }
		      if (upper !== undefined$1) {
		        upper = toNumber(upper);
		        upper = upper === upper ? upper : 0;
		      }
		      if (lower !== undefined$1) {
		        lower = toNumber(lower);
		        lower = lower === lower ? lower : 0;
		      }
		      return baseClamp(toNumber(number), lower, upper);
		    }

		    /**
		     * Checks if `n` is between `start` and up to, but not including, `end`. If
		     * `end` is not specified, it's set to `start` with `start` then set to `0`.
		     * If `start` is greater than `end` the params are swapped to support
		     * negative ranges.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.3.0
		     * @category Number
		     * @param {number} number The number to check.
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     * @see _.range, _.rangeRight
		     * @example
		     *
		     * _.inRange(3, 2, 4);
		     * // => true
		     *
		     * _.inRange(4, 8);
		     * // => true
		     *
		     * _.inRange(4, 2);
		     * // => false
		     *
		     * _.inRange(2, 2);
		     * // => false
		     *
		     * _.inRange(1.2, 2);
		     * // => true
		     *
		     * _.inRange(5.2, 4);
		     * // => false
		     *
		     * _.inRange(-3, -2, -6);
		     * // => true
		     */
		    function inRange(number, start, end) {
		      start = toFinite(start);
		      if (end === undefined$1) {
		        end = start;
		        start = 0;
		      } else {
		        end = toFinite(end);
		      }
		      number = toNumber(number);
		      return baseInRange(number, start, end);
		    }

		    /**
		     * Produces a random number between the inclusive `lower` and `upper` bounds.
		     * If only one argument is provided a number between `0` and the given number
		     * is returned. If `floating` is `true`, or either `lower` or `upper` are
		     * floats, a floating-point number is returned instead of an integer.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Number
		     * @param {number} [lower=0] The lower bound.
		     * @param {number} [upper=1] The upper bound.
		     * @param {boolean} [floating] Specify returning a floating-point number.
		     * @returns {number} Returns the random number.
		     * @example
		     *
		     * _.random(0, 5);
		     * // => an integer between 0 and 5
		     *
		     * _.random(5);
		     * // => also an integer between 0 and 5
		     *
		     * _.random(5, true);
		     * // => a floating-point number between 0 and 5
		     *
		     * _.random(1.2, 5.2);
		     * // => a floating-point number between 1.2 and 5.2
		     */
		    function random(lower, upper, floating) {
		      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
		        upper = floating = undefined$1;
		      }
		      if (floating === undefined$1) {
		        if (typeof upper == 'boolean') {
		          floating = upper;
		          upper = undefined$1;
		        }
		        else if (typeof lower == 'boolean') {
		          floating = lower;
		          lower = undefined$1;
		        }
		      }
		      if (lower === undefined$1 && upper === undefined$1) {
		        lower = 0;
		        upper = 1;
		      }
		      else {
		        lower = toFinite(lower);
		        if (upper === undefined$1) {
		          upper = lower;
		          lower = 0;
		        } else {
		          upper = toFinite(upper);
		        }
		      }
		      if (lower > upper) {
		        var temp = lower;
		        lower = upper;
		        upper = temp;
		      }
		      if (floating || lower % 1 || upper % 1) {
		        var rand = nativeRandom();
		        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
		      }
		      return baseRandom(lower, upper);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the camel cased string.
		     * @example
		     *
		     * _.camelCase('Foo Bar');
		     * // => 'fooBar'
		     *
		     * _.camelCase('--foo-bar--');
		     * // => 'fooBar'
		     *
		     * _.camelCase('__FOO_BAR__');
		     * // => 'fooBar'
		     */
		    var camelCase = createCompounder(function(result, word, index) {
		      word = word.toLowerCase();
		      return result + (index ? capitalize(word) : word);
		    });

		    /**
		     * Converts the first character of `string` to upper case and the remaining
		     * to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to capitalize.
		     * @returns {string} Returns the capitalized string.
		     * @example
		     *
		     * _.capitalize('FRED');
		     * // => 'Fred'
		     */
		    function capitalize(string) {
		      return upperFirst(toString(string).toLowerCase());
		    }

		    /**
		     * Deburrs `string` by converting
		     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		     * letters to basic Latin letters and removing
		     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to deburr.
		     * @returns {string} Returns the deburred string.
		     * @example
		     *
		     * _.deburr('déjà vu');
		     * // => 'deja vu'
		     */
		    function deburr(string) {
		      string = toString(string);
		      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		    }

		    /**
		     * Checks if `string` ends with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=string.length] The position to search up to.
		     * @returns {boolean} Returns `true` if `string` ends with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.endsWith('abc', 'c');
		     * // => true
		     *
		     * _.endsWith('abc', 'b');
		     * // => false
		     *
		     * _.endsWith('abc', 'b', 2);
		     * // => true
		     */
		    function endsWith(string, target, position) {
		      string = toString(string);
		      target = baseToString(target);

		      var length = string.length;
		      position = position === undefined$1
		        ? length
		        : baseClamp(toInteger(position), 0, length);

		      var end = position;
		      position -= target.length;
		      return position >= 0 && string.slice(position, end) == target;
		    }

		    /**
		     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		     * corresponding HTML entities.
		     *
		     * **Note:** No other characters are escaped. To escape additional
		     * characters use a third-party library like [_he_](https://mths.be/he).
		     *
		     * Though the ">" character is escaped for symmetry, characters like
		     * ">" and "/" don't need escaping in HTML and have no special meaning
		     * unless they're part of a tag or unquoted attribute value. See
		     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		     * (under "semi-related fun fact") for more details.
		     *
		     * When working with HTML you should always
		     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		     * XSS vectors.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escape('fred, barney, & pebbles');
		     * // => 'fred, barney, &amp; pebbles'
		     */
		    function escape(string) {
		      string = toString(string);
		      return (string && reHasUnescapedHtml.test(string))
		        ? string.replace(reUnescapedHtml, escapeHtmlChar)
		        : string;
		    }

		    /**
		     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escapeRegExp('[lodash](https://lodash.com/)');
		     * // => '\[lodash\]\(https://lodash\.com/\)'
		     */
		    function escapeRegExp(string) {
		      string = toString(string);
		      return (string && reHasRegExpChar.test(string))
		        ? string.replace(reRegExpChar, '\\$&')
		        : string;
		    }

		    /**
		     * Converts `string` to
		     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the kebab cased string.
		     * @example
		     *
		     * _.kebabCase('Foo Bar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('fooBar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('__FOO_BAR__');
		     * // => 'foo-bar'
		     */
		    var kebabCase = createCompounder(function(result, word, index) {
		      return result + (index ? '-' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts `string`, as space separated words, to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.lowerCase('--Foo-Bar--');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('fooBar');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('__FOO_BAR__');
		     * // => 'foo bar'
		     */
		    var lowerCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts the first character of `string` to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.lowerFirst('Fred');
		     * // => 'fred'
		     *
		     * _.lowerFirst('FRED');
		     * // => 'fRED'
		     */
		    var lowerFirst = createCaseFirst('toLowerCase');

		    /**
		     * Pads `string` on the left and right sides if it's shorter than `length`.
		     * Padding characters are truncated if they can't be evenly divided by `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.pad('abc', 8);
		     * // => '  abc   '
		     *
		     * _.pad('abc', 8, '_-');
		     * // => '_-abc_-_'
		     *
		     * _.pad('abc', 3);
		     * // => 'abc'
		     */
		    function pad(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      if (!length || strLength >= length) {
		        return string;
		      }
		      var mid = (length - strLength) / 2;
		      return (
		        createPadding(nativeFloor(mid), chars) +
		        string +
		        createPadding(nativeCeil(mid), chars)
		      );
		    }

		    /**
		     * Pads `string` on the right side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padEnd('abc', 6);
		     * // => 'abc   '
		     *
		     * _.padEnd('abc', 6, '_-');
		     * // => 'abc_-_'
		     *
		     * _.padEnd('abc', 3);
		     * // => 'abc'
		     */
		    function padEnd(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (string + createPadding(length - strLength, chars))
		        : string;
		    }

		    /**
		     * Pads `string` on the left side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padStart('abc', 6);
		     * // => '   abc'
		     *
		     * _.padStart('abc', 6, '_-');
		     * // => '_-_abc'
		     *
		     * _.padStart('abc', 3);
		     * // => 'abc'
		     */
		    function padStart(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (createPadding(length - strLength, chars) + string)
		        : string;
		    }

		    /**
		     * Converts `string` to an integer of the specified radix. If `radix` is
		     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		     * hexadecimal, in which case a `radix` of `16` is used.
		     *
		     * **Note:** This method aligns with the
		     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category String
		     * @param {string} string The string to convert.
		     * @param {number} [radix=10] The radix to interpret `value` by.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.parseInt('08');
		     * // => 8
		     *
		     * _.map(['6', '08', '10'], _.parseInt);
		     * // => [6, 8, 10]
		     */
		    function parseInt(string, radix, guard) {
		      if (guard || radix == null) {
		        radix = 0;
		      } else if (radix) {
		        radix = +radix;
		      }
		      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		    }

		    /**
		     * Repeats the given string `n` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to repeat.
		     * @param {number} [n=1] The number of times to repeat the string.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the repeated string.
		     * @example
		     *
		     * _.repeat('*', 3);
		     * // => '***'
		     *
		     * _.repeat('abc', 2);
		     * // => 'abcabc'
		     *
		     * _.repeat('abc', 0);
		     * // => ''
		     */
		    function repeat(string, n, guard) {
		      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      return baseRepeat(toString(string), n);
		    }

		    /**
		     * Replaces matches for `pattern` in `string` with `replacement`.
		     *
		     * **Note:** This method is based on
		     * [`String#replace`](https://mdn.io/String/replace).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to modify.
		     * @param {RegExp|string} pattern The pattern to replace.
		     * @param {Function|string} replacement The match replacement.
		     * @returns {string} Returns the modified string.
		     * @example
		     *
		     * _.replace('Hi Fred', 'Fred', 'Barney');
		     * // => 'Hi Barney'
		     */
		    function replace() {
		      var args = arguments,
		          string = toString(args[0]);

		      return args.length < 3 ? string : string.replace(args[1], args[2]);
		    }

		    /**
		     * Converts `string` to
		     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the snake cased string.
		     * @example
		     *
		     * _.snakeCase('Foo Bar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('fooBar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('--FOO-BAR--');
		     * // => 'foo_bar'
		     */
		    var snakeCase = createCompounder(function(result, word, index) {
		      return result + (index ? '_' : '') + word.toLowerCase();
		    });

		    /**
		     * Splits `string` by `separator`.
		     *
		     * **Note:** This method is based on
		     * [`String#split`](https://mdn.io/String/split).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to split.
		     * @param {RegExp|string} separator The separator pattern to split by.
		     * @param {number} [limit] The length to truncate results to.
		     * @returns {Array} Returns the string segments.
		     * @example
		     *
		     * _.split('a-b-c', '-', 2);
		     * // => ['a', 'b']
		     */
		    function split(string, separator, limit) {
		      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
		        separator = limit = undefined$1;
		      }
		      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
		      if (!limit) {
		        return [];
		      }
		      string = toString(string);
		      if (string && (
		            typeof separator == 'string' ||
		            (separator != null && !isRegExp(separator))
		          )) {
		        separator = baseToString(separator);
		        if (!separator && hasUnicode(string)) {
		          return castSlice(stringToArray(string), 0, limit);
		        }
		      }
		      return string.split(separator, limit);
		    }

		    /**
		     * Converts `string` to
		     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.1.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the start cased string.
		     * @example
		     *
		     * _.startCase('--foo-bar--');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('fooBar');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('__FOO_BAR__');
		     * // => 'FOO BAR'
		     */
		    var startCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + upperFirst(word);
		    });

		    /**
		     * Checks if `string` starts with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=0] The position to search from.
		     * @returns {boolean} Returns `true` if `string` starts with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.startsWith('abc', 'a');
		     * // => true
		     *
		     * _.startsWith('abc', 'b');
		     * // => false
		     *
		     * _.startsWith('abc', 'b', 1);
		     * // => true
		     */
		    function startsWith(string, target, position) {
		      string = toString(string);
		      position = position == null
		        ? 0
		        : baseClamp(toInteger(position), 0, string.length);

		      target = baseToString(target);
		      return string.slice(position, position + target.length) == target;
		    }

		    /**
		     * Creates a compiled template function that can interpolate data properties
		     * in "interpolate" delimiters, HTML-escape interpolated data properties in
		     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		     * properties may be accessed as free variables in the template. If a setting
		     * object is given, it takes precedence over `_.templateSettings` values.
		     *
		     * **Note:** In the development build `_.template` utilizes
		     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		     * for easier debugging.
		     *
		     * For more information on precompiling templates see
		     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		     *
		     * For more information on Chrome extension sandboxes see
		     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The template string.
		     * @param {Object} [options={}] The options object.
		     * @param {RegExp} [options.escape=_.templateSettings.escape]
		     *  The HTML "escape" delimiter.
		     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		     *  The "evaluate" delimiter.
		     * @param {Object} [options.imports=_.templateSettings.imports]
		     *  An object to import into the template as free variables.
		     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		     *  The "interpolate" delimiter.
		     * @param {string} [options.sourceURL='lodash.templateSources[n]']
		     *  The sourceURL of the compiled template.
		     * @param {string} [options.variable='obj']
		     *  The data object variable name.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the compiled template function.
		     * @example
		     *
		     * // Use the "interpolate" delimiter to create a compiled template.
		     * var compiled = _.template('hello <%= user %>!');
		     * compiled({ 'user': 'fred' });
		     * // => 'hello fred!'
		     *
		     * // Use the HTML "escape" delimiter to escape data property values.
		     * var compiled = _.template('<b><%- value %></b>');
		     * compiled({ 'value': '<script>' });
		     * // => '<b>&lt;script&gt;</b>'
		     *
		     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the internal `print` function in "evaluate" delimiters.
		     * var compiled = _.template('<% print("hello " + user); %>!');
		     * compiled({ 'user': 'barney' });
		     * // => 'hello barney!'
		     *
		     * // Use the ES template literal delimiter as an "interpolate" delimiter.
		     * // Disable support by replacing the "interpolate" delimiter.
		     * var compiled = _.template('hello ${ user }!');
		     * compiled({ 'user': 'pebbles' });
		     * // => 'hello pebbles!'
		     *
		     * // Use backslashes to treat delimiters as plain text.
		     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		     * compiled({ 'value': 'ignored' });
		     * // => '<%- value %>'
		     *
		     * // Use the `imports` option to import `jQuery` as `jq`.
		     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		     * compiled(data);
		     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		     *
		     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		     * compiled.source;
		     * // => function(data) {
		     * //   var __t, __p = '';
		     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		     * //   return __p;
		     * // }
		     *
		     * // Use custom template delimiters.
		     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		     * var compiled = _.template('hello {{ user }}!');
		     * compiled({ 'user': 'mustache' });
		     * // => 'hello mustache!'
		     *
		     * // Use the `source` property to inline compiled templates for meaningful
		     * // line numbers in error messages and stack traces.
		     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		     *   var JST = {\
		     *     "main": ' + _.template(mainText).source + '\
		     *   };\
		     * ');
		     */
		    function template(string, options, guard) {
		      // Based on John Resig's `tmpl` implementation
		      // (http://ejohn.org/blog/javascript-micro-templating/)
		      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
		      var settings = lodash.templateSettings;

		      if (guard && isIterateeCall(string, options, guard)) {
		        options = undefined$1;
		      }
		      string = toString(string);
		      options = assignInWith({}, options, settings, customDefaultsAssignIn);

		      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
		          importsKeys = keys(imports),
		          importsValues = baseValues(imports, importsKeys);

		      var isEscaping,
		          isEvaluating,
		          index = 0,
		          interpolate = options.interpolate || reNoMatch,
		          source = "__p += '";

		      // Compile the regexp to match each delimiter.
		      var reDelimiters = RegExp(
		        (options.escape || reNoMatch).source + '|' +
		        interpolate.source + '|' +
		        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
		        (options.evaluate || reNoMatch).source + '|$'
		      , 'g');

		      // Use a sourceURL for easier debugging.
		      // The sourceURL gets injected into the source that's eval-ed, so be careful
		      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
		      // and escape the comment, thus injecting code that gets evaled.
		      var sourceURL = '//# sourceURL=' +
		        (hasOwnProperty.call(options, 'sourceURL')
		          ? (options.sourceURL + '').replace(/\s/g, ' ')
		          : ('lodash.templateSources[' + (++templateCounter) + ']')
		        ) + '\n';

		      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
		        interpolateValue || (interpolateValue = esTemplateValue);

		        // Escape characters that can't be included in string literals.
		        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

		        // Replace delimiters with snippets.
		        if (escapeValue) {
		          isEscaping = true;
		          source += "' +\n__e(" + escapeValue + ") +\n'";
		        }
		        if (evaluateValue) {
		          isEvaluating = true;
		          source += "';\n" + evaluateValue + ";\n__p += '";
		        }
		        if (interpolateValue) {
		          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
		        }
		        index = offset + match.length;

		        // The JS engine embedded in Adobe products needs `match` returned in
		        // order to produce the correct `offset` value.
		        return match;
		      });

		      source += "';\n";

		      // If `variable` is not specified wrap a with-statement around the generated
		      // code to add the data object to the top of the scope chain.
		      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
		      if (!variable) {
		        source = 'with (obj) {\n' + source + '\n}\n';
		      }
		      // Throw an error if a forbidden character was found in `variable`, to prevent
		      // potential command injection attacks.
		      else if (reForbiddenIdentifierChars.test(variable)) {
		        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
		      }

		      // Cleanup code by stripping empty strings.
		      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
		        .replace(reEmptyStringMiddle, '$1')
		        .replace(reEmptyStringTrailing, '$1;');

		      // Frame code as the function body.
		      source = 'function(' + (variable || 'obj') + ') {\n' +
		        (variable
		          ? ''
		          : 'obj || (obj = {});\n'
		        ) +
		        "var __t, __p = ''" +
		        (isEscaping
		           ? ', __e = _.escape'
		           : ''
		        ) +
		        (isEvaluating
		          ? ', __j = Array.prototype.join;\n' +
		            "function print() { __p += __j.call(arguments, '') }\n"
		          : ';\n'
		        ) +
		        source +
		        'return __p\n}';

		      var result = attempt(function() {
		        return Function(importsKeys, sourceURL + 'return ' + source)
		          .apply(undefined$1, importsValues);
		      });

		      // Provide the compiled function's source by its `toString` method or
		      // the `source` property as a convenience for inlining compiled templates.
		      result.source = source;
		      if (isError(result)) {
		        throw result;
		      }
		      return result;
		    }

		    /**
		     * Converts `string`, as a whole, to lower case just like
		     * [String#toLowerCase](https://mdn.io/toLowerCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.toLower('--Foo-Bar--');
		     * // => '--foo-bar--'
		     *
		     * _.toLower('fooBar');
		     * // => 'foobar'
		     *
		     * _.toLower('__FOO_BAR__');
		     * // => '__foo_bar__'
		     */
		    function toLower(value) {
		      return toString(value).toLowerCase();
		    }

		    /**
		     * Converts `string`, as a whole, to upper case just like
		     * [String#toUpperCase](https://mdn.io/toUpperCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.toUpper('--foo-bar--');
		     * // => '--FOO-BAR--'
		     *
		     * _.toUpper('fooBar');
		     * // => 'FOOBAR'
		     *
		     * _.toUpper('__foo_bar__');
		     * // => '__FOO_BAR__'
		     */
		    function toUpper(value) {
		      return toString(value).toUpperCase();
		    }

		    /**
		     * Removes leading and trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trim('  abc  ');
		     * // => 'abc'
		     *
		     * _.trim('-_-abc-_-', '_-');
		     * // => 'abc'
		     *
		     * _.map(['  foo  ', '  bar  '], _.trim);
		     * // => ['foo', 'bar']
		     */
		    function trim(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return baseTrim(string);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          chrSymbols = stringToArray(chars),
		          start = charsStartIndex(strSymbols, chrSymbols),
		          end = charsEndIndex(strSymbols, chrSymbols) + 1;

		      return castSlice(strSymbols, start, end).join('');
		    }

		    /**
		     * Removes trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimEnd('  abc  ');
		     * // => '  abc'
		     *
		     * _.trimEnd('-_-abc-_-', '_-');
		     * // => '-_-abc'
		     */
		    function trimEnd(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.slice(0, trimmedEndIndex(string) + 1);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

		      return castSlice(strSymbols, 0, end).join('');
		    }

		    /**
		     * Removes leading whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimStart('  abc  ');
		     * // => 'abc  '
		     *
		     * _.trimStart('-_-abc-_-', '_-');
		     * // => 'abc-_-'
		     */
		    function trimStart(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.replace(reTrimStart, '');
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          start = charsStartIndex(strSymbols, stringToArray(chars));

		      return castSlice(strSymbols, start).join('');
		    }

		    /**
		     * Truncates `string` if it's longer than the given maximum string length.
		     * The last characters of the truncated string are replaced with the omission
		     * string which defaults to "...".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to truncate.
		     * @param {Object} [options={}] The options object.
		     * @param {number} [options.length=30] The maximum string length.
		     * @param {string} [options.omission='...'] The string to indicate text is omitted.
		     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		     * @returns {string} Returns the truncated string.
		     * @example
		     *
		     * _.truncate('hi-diddly-ho there, neighborino');
		     * // => 'hi-diddly-ho there, neighbo...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': ' '
		     * });
		     * // => 'hi-diddly-ho there,...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': /,? +/
		     * });
		     * // => 'hi-diddly-ho there...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'omission': ' [...]'
		     * });
		     * // => 'hi-diddly-ho there, neig [...]'
		     */
		    function truncate(string, options) {
		      var length = DEFAULT_TRUNC_LENGTH,
		          omission = DEFAULT_TRUNC_OMISSION;

		      if (isObject(options)) {
		        var separator = 'separator' in options ? options.separator : separator;
		        length = 'length' in options ? toInteger(options.length) : length;
		        omission = 'omission' in options ? baseToString(options.omission) : omission;
		      }
		      string = toString(string);

		      var strLength = string.length;
		      if (hasUnicode(string)) {
		        var strSymbols = stringToArray(string);
		        strLength = strSymbols.length;
		      }
		      if (length >= strLength) {
		        return string;
		      }
		      var end = length - stringSize(omission);
		      if (end < 1) {
		        return omission;
		      }
		      var result = strSymbols
		        ? castSlice(strSymbols, 0, end).join('')
		        : string.slice(0, end);

		      if (separator === undefined$1) {
		        return result + omission;
		      }
		      if (strSymbols) {
		        end += (result.length - end);
		      }
		      if (isRegExp(separator)) {
		        if (string.slice(end).search(separator)) {
		          var match,
		              substring = result;

		          if (!separator.global) {
		            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
		          }
		          separator.lastIndex = 0;
		          while ((match = separator.exec(substring))) {
		            var newEnd = match.index;
		          }
		          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
		        }
		      } else if (string.indexOf(baseToString(separator), end) != end) {
		        var index = result.lastIndexOf(separator);
		        if (index > -1) {
		          result = result.slice(0, index);
		        }
		      }
		      return result + omission;
		    }

		    /**
		     * The inverse of `_.escape`; this method converts the HTML entities
		     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		     * their corresponding characters.
		     *
		     * **Note:** No other HTML entities are unescaped. To unescape additional
		     * HTML entities use a third-party library like [_he_](https://mths.be/he).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.6.0
		     * @category String
		     * @param {string} [string=''] The string to unescape.
		     * @returns {string} Returns the unescaped string.
		     * @example
		     *
		     * _.unescape('fred, barney, &amp; pebbles');
		     * // => 'fred, barney, & pebbles'
		     */
		    function unescape(string) {
		      string = toString(string);
		      return (string && reHasEscapedHtml.test(string))
		        ? string.replace(reEscapedHtml, unescapeHtmlChar)
		        : string;
		    }

		    /**
		     * Converts `string`, as space separated words, to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.upperCase('--foo-bar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('fooBar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('__foo_bar__');
		     * // => 'FOO BAR'
		     */
		    var upperCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toUpperCase();
		    });

		    /**
		     * Converts the first character of `string` to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.upperFirst('fred');
		     * // => 'Fred'
		     *
		     * _.upperFirst('FRED');
		     * // => 'FRED'
		     */
		    var upperFirst = createCaseFirst('toUpperCase');

		    /**
		     * Splits `string` into an array of its words.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {RegExp|string} [pattern] The pattern to match words.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the words of `string`.
		     * @example
		     *
		     * _.words('fred, barney, & pebbles');
		     * // => ['fred', 'barney', 'pebbles']
		     *
		     * _.words('fred, barney, & pebbles', /[^, ]+/g);
		     * // => ['fred', 'barney', '&', 'pebbles']
		     */
		    function words(string, pattern, guard) {
		      string = toString(string);
		      pattern = guard ? undefined$1 : pattern;

		      if (pattern === undefined$1) {
		        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
		      }
		      return string.match(pattern) || [];
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Attempts to invoke `func`, returning either the result or the caught error
		     * object. Any additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Function} func The function to attempt.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {*} Returns the `func` result or error object.
		     * @example
		     *
		     * // Avoid throwing errors for invalid selectors.
		     * var elements = _.attempt(function(selector) {
		     *   return document.querySelectorAll(selector);
		     * }, '>_>');
		     *
		     * if (_.isError(elements)) {
		     *   elements = [];
		     * }
		     */
		    var attempt = baseRest(function(func, args) {
		      try {
		        return apply(func, undefined$1, args);
		      } catch (e) {
		        return isError(e) ? e : new Error(e);
		      }
		    });

		    /**
		     * Binds methods of an object to the object itself, overwriting the existing
		     * method.
		     *
		     * **Note:** This method doesn't set the "length" property of bound functions.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Object} object The object to bind and assign the bound methods to.
		     * @param {...(string|string[])} methodNames The object method names to bind.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var view = {
		     *   'label': 'docs',
		     *   'click': function() {
		     *     console.log('clicked ' + this.label);
		     *   }
		     * };
		     *
		     * _.bindAll(view, ['click']);
		     * jQuery(element).on('click', view.click);
		     * // => Logs 'clicked docs' when clicked.
		     */
		    var bindAll = flatRest(function(object, methodNames) {
		      arrayEach(methodNames, function(key) {
		        key = toKey(key);
		        baseAssignValue(object, key, bind(object[key], object));
		      });
		      return object;
		    });

		    /**
		     * Creates a function that iterates over `pairs` and invokes the corresponding
		     * function of the first predicate to return truthy. The predicate-function
		     * pairs are invoked with the `this` binding and arguments of the created
		     * function.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Array} pairs The predicate-function pairs.
		     * @returns {Function} Returns the new composite function.
		     * @example
		     *
		     * var func = _.cond([
		     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		     *   [_.stubTrue,                      _.constant('no match')]
		     * ]);
		     *
		     * func({ 'a': 1, 'b': 2 });
		     * // => 'matches A'
		     *
		     * func({ 'a': 0, 'b': 1 });
		     * // => 'matches B'
		     *
		     * func({ 'a': '1', 'b': '2' });
		     * // => 'no match'
		     */
		    function cond(pairs) {
		      var length = pairs == null ? 0 : pairs.length,
		          toIteratee = getIteratee();

		      pairs = !length ? [] : arrayMap(pairs, function(pair) {
		        if (typeof pair[1] != 'function') {
		          throw new TypeError(FUNC_ERROR_TEXT);
		        }
		        return [toIteratee(pair[0]), pair[1]];
		      });

		      return baseRest(function(args) {
		        var index = -1;
		        while (++index < length) {
		          var pair = pairs[index];
		          if (apply(pair[0], this, args)) {
		            return apply(pair[1], this, args);
		          }
		        }
		      });
		    }

		    /**
		     * Creates a function that invokes the predicate properties of `source` with
		     * the corresponding property values of a given object, returning `true` if
		     * all predicates return truthy, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.conformsTo` with
		     * `source` partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 2, 'b': 1 },
		     *   { 'a': 1, 'b': 2 }
		     * ];
		     *
		     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		     * // => [{ 'a': 1, 'b': 2 }]
		     */
		    function conforms(source) {
		      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that returns `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {*} value The value to return from the new function.
		     * @returns {Function} Returns the new constant function.
		     * @example
		     *
		     * var objects = _.times(2, _.constant({ 'a': 1 }));
		     *
		     * console.log(objects);
		     * // => [{ 'a': 1 }, { 'a': 1 }]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => true
		     */
		    function constant(value) {
		      return function() {
		        return value;
		      };
		    }

		    /**
		     * Checks `value` to determine whether a default value should be returned in
		     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		     * or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Util
		     * @param {*} value The value to check.
		     * @param {*} defaultValue The default value.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * _.defaultTo(1, 10);
		     * // => 1
		     *
		     * _.defaultTo(undefined, 10);
		     * // => 10
		     */
		    function defaultTo(value, defaultValue) {
		      return (value == null || value !== value) ? defaultValue : value;
		    }

		    /**
		     * Creates a function that returns the result of invoking the given functions
		     * with the `this` binding of the created function, where each successive
		     * invocation is supplied the return value of the previous.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flowRight
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flow([_.add, square]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flow = createFlow();

		    /**
		     * This method is like `_.flow` except that it creates a function that
		     * invokes the given functions from right to left.
		     *
		     * @static
		     * @since 3.0.0
		     * @memberOf _
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flow
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flowRight([square, _.add]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flowRight = createFlow(true);

		    /**
		     * This method returns the first argument it receives.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {*} value Any value.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     *
		     * console.log(_.identity(object) === object);
		     * // => true
		     */
		    function identity(value) {
		      return value;
		    }

		    /**
		     * Creates a function that invokes `func` with the arguments of the created
		     * function. If `func` is a property name, the created function returns the
		     * property value for a given element. If `func` is an array or object, the
		     * created function returns `true` for elements that contain the equivalent
		     * source properties, otherwise it returns `false`.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Util
		     * @param {*} [func=_.identity] The value to convert to a callback.
		     * @returns {Function} Returns the callback.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, _.iteratee(['user', 'fred']));
		     * // => [{ 'user': 'fred', 'age': 40 }]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, _.iteratee('user'));
		     * // => ['barney', 'fred']
		     *
		     * // Create custom iteratee shorthands.
		     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		     *     return func.test(string);
		     *   };
		     * });
		     *
		     * _.filter(['abc', 'def'], /ef/);
		     * // => ['def']
		     */
		    function iteratee(func) {
		      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between a given
		     * object and `source`, returning `true` if the given object has equivalent
		     * property values, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.isMatch` with `source`
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matches(source) {
		      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between the
		     * value at `path` of a given object to `srcValue`, returning `true` if the
		     * object value is equivalent, else `false`.
		     *
		     * **Note:** Partial comparisons will match empty array and empty object
		     * `srcValue` values against any array or object value, respectively. See
		     * `_.isEqual` for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.find(objects, _.matchesProperty('a', 4));
		     * // => { 'a': 4, 'b': 5, 'c': 6 }
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matchesProperty(path, srcValue) {
		      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that invokes the method at `path` of a given object.
		     * Any additional arguments are provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': _.constant(2) } },
		     *   { 'a': { 'b': _.constant(1) } }
		     * ];
		     *
		     * _.map(objects, _.method('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(objects, _.method(['a', 'b']));
		     * // => [2, 1]
		     */
		    var method = baseRest(function(path, args) {
		      return function(object) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * The opposite of `_.method`; this method creates a function that invokes
		     * the method at a given path of `object`. Any additional arguments are
		     * provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var array = _.times(3, _.constant),
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		     * // => [2, 0]
		     */
		    var methodOf = baseRest(function(object, args) {
		      return function(path) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * Adds all own enumerable string keyed function properties of a source
		     * object to the destination object. If `object` is a function, then methods
		     * are added to its prototype as well.
		     *
		     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		     * avoid conflicts caused by modifying the original.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Function|Object} [object=lodash] The destination object.
		     * @param {Object} source The object of functions to add.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		     * @returns {Function|Object} Returns `object`.
		     * @example
		     *
		     * function vowels(string) {
		     *   return _.filter(string, function(v) {
		     *     return /[aeiou]/i.test(v);
		     *   });
		     * }
		     *
		     * _.mixin({ 'vowels': vowels });
		     * _.vowels('fred');
		     * // => ['e']
		     *
		     * _('fred').vowels().value();
		     * // => ['e']
		     *
		     * _.mixin({ 'vowels': vowels }, { 'chain': false });
		     * _('fred').vowels();
		     * // => ['e']
		     */
		    function mixin(object, source, options) {
		      var props = keys(source),
		          methodNames = baseFunctions(source, props);

		      if (options == null &&
		          !(isObject(source) && (methodNames.length || !props.length))) {
		        options = source;
		        source = object;
		        object = this;
		        methodNames = baseFunctions(source, keys(source));
		      }
		      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
		          isFunc = isFunction(object);

		      arrayEach(methodNames, function(methodName) {
		        var func = source[methodName];
		        object[methodName] = func;
		        if (isFunc) {
		          object.prototype[methodName] = function() {
		            var chainAll = this.__chain__;
		            if (chain || chainAll) {
		              var result = object(this.__wrapped__),
		                  actions = result.__actions__ = copyArray(this.__actions__);

		              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
		              result.__chain__ = chainAll;
		              return result;
		            }
		            return func.apply(object, arrayPush([this.value()], arguments));
		          };
		        }
		      });

		      return object;
		    }

		    /**
		     * Reverts the `_` variable to its previous value and returns a reference to
		     * the `lodash` function.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @returns {Function} Returns the `lodash` function.
		     * @example
		     *
		     * var lodash = _.noConflict();
		     */
		    function noConflict() {
		      if (root._ === this) {
		        root._ = oldDash;
		      }
		      return this;
		    }

		    /**
		     * This method returns `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Util
		     * @example
		     *
		     * _.times(2, _.noop);
		     * // => [undefined, undefined]
		     */
		    function noop() {
		      // No operation performed.
		    }

		    /**
		     * Creates a function that gets the argument at index `n`. If `n` is negative,
		     * the nth argument from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [n=0] The index of the argument to return.
		     * @returns {Function} Returns the new pass-thru function.
		     * @example
		     *
		     * var func = _.nthArg(1);
		     * func('a', 'b', 'c', 'd');
		     * // => 'b'
		     *
		     * var func = _.nthArg(-2);
		     * func('a', 'b', 'c', 'd');
		     * // => 'c'
		     */
		    function nthArg(n) {
		      n = toInteger(n);
		      return baseRest(function(args) {
		        return baseNth(args, n);
		      });
		    }

		    /**
		     * Creates a function that invokes `iteratees` with the arguments it receives
		     * and returns their results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to invoke.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.over([Math.max, Math.min]);
		     *
		     * func(1, 2, 3, 4);
		     * // => [4, 1]
		     */
		    var over = createOver(arrayMap);

		    /**
		     * Creates a function that checks if **all** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overEvery([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => false
		     *
		     * func(NaN);
		     * // => false
		     */
		    var overEvery = createOver(arrayEvery);

		    /**
		     * Creates a function that checks if **any** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overSome([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => true
		     *
		     * func(NaN);
		     * // => false
		     *
		     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
		     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
		     */
		    var overSome = createOver(arraySome);

		    /**
		     * Creates a function that returns the value at `path` of a given object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': 2 } },
		     *   { 'a': { 'b': 1 } }
		     * ];
		     *
		     * _.map(objects, _.property('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		     * // => [1, 2]
		     */
		    function property(path) {
		      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		    }

		    /**
		     * The opposite of `_.property`; this method creates a function that returns
		     * the value at a given path of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var array = [0, 1, 2],
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		     * // => [2, 0]
		     */
		    function propertyOf(object) {
		      return function(path) {
		        return object == null ? undefined$1 : baseGet(object, path);
		      };
		    }

		    /**
		     * Creates an array of numbers (positive and/or negative) progressing from
		     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		     * `start` is specified without an `end` or `step`. If `end` is not specified,
		     * it's set to `start` with `start` then set to `0`.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.rangeRight
		     * @example
		     *
		     * _.range(4);
		     * // => [0, 1, 2, 3]
		     *
		     * _.range(-4);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 5);
		     * // => [1, 2, 3, 4]
		     *
		     * _.range(0, 20, 5);
		     * // => [0, 5, 10, 15]
		     *
		     * _.range(0, -4, -1);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.range(0);
		     * // => []
		     */
		    var range = createRange();

		    /**
		     * This method is like `_.range` except that it populates values in
		     * descending order.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.range
		     * @example
		     *
		     * _.rangeRight(4);
		     * // => [3, 2, 1, 0]
		     *
		     * _.rangeRight(-4);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 5);
		     * // => [4, 3, 2, 1]
		     *
		     * _.rangeRight(0, 20, 5);
		     * // => [15, 10, 5, 0]
		     *
		     * _.rangeRight(0, -4, -1);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.rangeRight(0);
		     * // => []
		     */
		    var rangeRight = createRange(true);

		    /**
		     * This method returns a new empty array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Array} Returns the new empty array.
		     * @example
		     *
		     * var arrays = _.times(2, _.stubArray);
		     *
		     * console.log(arrays);
		     * // => [[], []]
		     *
		     * console.log(arrays[0] === arrays[1]);
		     * // => false
		     */
		    function stubArray() {
		      return [];
		    }

		    /**
		     * This method returns `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `false`.
		     * @example
		     *
		     * _.times(2, _.stubFalse);
		     * // => [false, false]
		     */
		    function stubFalse() {
		      return false;
		    }

		    /**
		     * This method returns a new empty object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Object} Returns the new empty object.
		     * @example
		     *
		     * var objects = _.times(2, _.stubObject);
		     *
		     * console.log(objects);
		     * // => [{}, {}]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => false
		     */
		    function stubObject() {
		      return {};
		    }

		    /**
		     * This method returns an empty string.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {string} Returns the empty string.
		     * @example
		     *
		     * _.times(2, _.stubString);
		     * // => ['', '']
		     */
		    function stubString() {
		      return '';
		    }

		    /**
		     * This method returns `true`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `true`.
		     * @example
		     *
		     * _.times(2, _.stubTrue);
		     * // => [true, true]
		     */
		    function stubTrue() {
		      return true;
		    }

		    /**
		     * Invokes the iteratee `n` times, returning an array of the results of
		     * each invocation. The iteratee is invoked with one argument; (index).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} n The number of times to invoke `iteratee`.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.times(3, String);
		     * // => ['0', '1', '2']
		     *
		     *  _.times(4, _.constant(0));
		     * // => [0, 0, 0, 0]
		     */
		    function times(n, iteratee) {
		      n = toInteger(n);
		      if (n < 1 || n > MAX_SAFE_INTEGER) {
		        return [];
		      }
		      var index = MAX_ARRAY_LENGTH,
		          length = nativeMin(n, MAX_ARRAY_LENGTH);

		      iteratee = getIteratee(iteratee);
		      n -= MAX_ARRAY_LENGTH;

		      var result = baseTimes(length, iteratee);
		      while (++index < n) {
		        iteratee(index);
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a property path array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the new property path array.
		     * @example
		     *
		     * _.toPath('a.b.c');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toPath('a[0].b.c');
		     * // => ['a', '0', 'b', 'c']
		     */
		    function toPath(value) {
		      if (isArray(value)) {
		        return arrayMap(value, toKey);
		      }
		      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		    }

		    /**
		     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {string} [prefix=''] The value to prefix the ID with.
		     * @returns {string} Returns the unique ID.
		     * @example
		     *
		     * _.uniqueId('contact_');
		     * // => 'contact_104'
		     *
		     * _.uniqueId();
		     * // => '105'
		     */
		    function uniqueId(prefix) {
		      var id = ++idCounter;
		      return toString(prefix) + id;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Adds two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {number} augend The first number in an addition.
		     * @param {number} addend The second number in an addition.
		     * @returns {number} Returns the total.
		     * @example
		     *
		     * _.add(6, 4);
		     * // => 10
		     */
		    var add = createMathOperation(function(augend, addend) {
		      return augend + addend;
		    }, 0);

		    /**
		     * Computes `number` rounded up to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round up.
		     * @param {number} [precision=0] The precision to round up to.
		     * @returns {number} Returns the rounded up number.
		     * @example
		     *
		     * _.ceil(4.006);
		     * // => 5
		     *
		     * _.ceil(6.004, 2);
		     * // => 6.01
		     *
		     * _.ceil(6040, -2);
		     * // => 6100
		     */
		    var ceil = createRound('ceil');

		    /**
		     * Divide two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} dividend The first number in a division.
		     * @param {number} divisor The second number in a division.
		     * @returns {number} Returns the quotient.
		     * @example
		     *
		     * _.divide(6, 4);
		     * // => 1.5
		     */
		    var divide = createMathOperation(function(dividend, divisor) {
		      return dividend / divisor;
		    }, 1);

		    /**
		     * Computes `number` rounded down to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round down.
		     * @param {number} [precision=0] The precision to round down to.
		     * @returns {number} Returns the rounded down number.
		     * @example
		     *
		     * _.floor(4.006);
		     * // => 4
		     *
		     * _.floor(0.046, 2);
		     * // => 0.04
		     *
		     * _.floor(4060, -2);
		     * // => 4000
		     */
		    var floor = createRound('floor');

		    /**
		     * Computes the maximum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * _.max([4, 2, 8, 6]);
		     * // => 8
		     *
		     * _.max([]);
		     * // => undefined
		     */
		    function max(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseGt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.max` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.maxBy(objects, function(o) { return o.n; });
		     * // => { 'n': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.maxBy(objects, 'n');
		     * // => { 'n': 2 }
		     */
		    function maxBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
		        : undefined$1;
		    }

		    /**
		     * Computes the mean of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * _.mean([4, 2, 8, 6]);
		     * // => 5
		     */
		    function mean(array) {
		      return baseMean(array, identity);
		    }

		    /**
		     * This method is like `_.mean` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be averaged.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.meanBy(objects, function(o) { return o.n; });
		     * // => 5
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.meanBy(objects, 'n');
		     * // => 5
		     */
		    function meanBy(array, iteratee) {
		      return baseMean(array, getIteratee(iteratee, 2));
		    }

		    /**
		     * Computes the minimum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * _.min([4, 2, 8, 6]);
		     * // => 2
		     *
		     * _.min([]);
		     * // => undefined
		     */
		    function min(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseLt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.min` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.minBy(objects, function(o) { return o.n; });
		     * // => { 'n': 1 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.minBy(objects, 'n');
		     * // => { 'n': 1 }
		     */
		    function minBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
		        : undefined$1;
		    }

		    /**
		     * Multiply two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} multiplier The first number in a multiplication.
		     * @param {number} multiplicand The second number in a multiplication.
		     * @returns {number} Returns the product.
		     * @example
		     *
		     * _.multiply(6, 4);
		     * // => 24
		     */
		    var multiply = createMathOperation(function(multiplier, multiplicand) {
		      return multiplier * multiplicand;
		    }, 1);

		    /**
		     * Computes `number` rounded to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round.
		     * @param {number} [precision=0] The precision to round to.
		     * @returns {number} Returns the rounded number.
		     * @example
		     *
		     * _.round(4.006);
		     * // => 4
		     *
		     * _.round(4.006, 2);
		     * // => 4.01
		     *
		     * _.round(4060, -2);
		     * // => 4100
		     */
		    var round = createRound('round');

		    /**
		     * Subtract two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {number} minuend The first number in a subtraction.
		     * @param {number} subtrahend The second number in a subtraction.
		     * @returns {number} Returns the difference.
		     * @example
		     *
		     * _.subtract(6, 4);
		     * // => 2
		     */
		    var subtract = createMathOperation(function(minuend, subtrahend) {
		      return minuend - subtrahend;
		    }, 0);

		    /**
		     * Computes the sum of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * _.sum([4, 2, 8, 6]);
		     * // => 20
		     */
		    function sum(array) {
		      return (array && array.length)
		        ? baseSum(array, identity)
		        : 0;
		    }

		    /**
		     * This method is like `_.sum` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be summed.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.sumBy(objects, function(o) { return o.n; });
		     * // => 20
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sumBy(objects, 'n');
		     * // => 20
		     */
		    function sumBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSum(array, getIteratee(iteratee, 2))
		        : 0;
		    }

		    /*------------------------------------------------------------------------*/

		    // Add methods that return wrapped values in chain sequences.
		    lodash.after = after;
		    lodash.ary = ary;
		    lodash.assign = assign;
		    lodash.assignIn = assignIn;
		    lodash.assignInWith = assignInWith;
		    lodash.assignWith = assignWith;
		    lodash.at = at;
		    lodash.before = before;
		    lodash.bind = bind;
		    lodash.bindAll = bindAll;
		    lodash.bindKey = bindKey;
		    lodash.castArray = castArray;
		    lodash.chain = chain;
		    lodash.chunk = chunk;
		    lodash.compact = compact;
		    lodash.concat = concat;
		    lodash.cond = cond;
		    lodash.conforms = conforms;
		    lodash.constant = constant;
		    lodash.countBy = countBy;
		    lodash.create = create;
		    lodash.curry = curry;
		    lodash.curryRight = curryRight;
		    lodash.debounce = debounce;
		    lodash.defaults = defaults;
		    lodash.defaultsDeep = defaultsDeep;
		    lodash.defer = defer;
		    lodash.delay = delay;
		    lodash.difference = difference;
		    lodash.differenceBy = differenceBy;
		    lodash.differenceWith = differenceWith;
		    lodash.drop = drop;
		    lodash.dropRight = dropRight;
		    lodash.dropRightWhile = dropRightWhile;
		    lodash.dropWhile = dropWhile;
		    lodash.fill = fill;
		    lodash.filter = filter;
		    lodash.flatMap = flatMap;
		    lodash.flatMapDeep = flatMapDeep;
		    lodash.flatMapDepth = flatMapDepth;
		    lodash.flatten = flatten;
		    lodash.flattenDeep = flattenDeep;
		    lodash.flattenDepth = flattenDepth;
		    lodash.flip = flip;
		    lodash.flow = flow;
		    lodash.flowRight = flowRight;
		    lodash.fromPairs = fromPairs;
		    lodash.functions = functions;
		    lodash.functionsIn = functionsIn;
		    lodash.groupBy = groupBy;
		    lodash.initial = initial;
		    lodash.intersection = intersection;
		    lodash.intersectionBy = intersectionBy;
		    lodash.intersectionWith = intersectionWith;
		    lodash.invert = invert;
		    lodash.invertBy = invertBy;
		    lodash.invokeMap = invokeMap;
		    lodash.iteratee = iteratee;
		    lodash.keyBy = keyBy;
		    lodash.keys = keys;
		    lodash.keysIn = keysIn;
		    lodash.map = map;
		    lodash.mapKeys = mapKeys;
		    lodash.mapValues = mapValues;
		    lodash.matches = matches;
		    lodash.matchesProperty = matchesProperty;
		    lodash.memoize = memoize;
		    lodash.merge = merge;
		    lodash.mergeWith = mergeWith;
		    lodash.method = method;
		    lodash.methodOf = methodOf;
		    lodash.mixin = mixin;
		    lodash.negate = negate;
		    lodash.nthArg = nthArg;
		    lodash.omit = omit;
		    lodash.omitBy = omitBy;
		    lodash.once = once;
		    lodash.orderBy = orderBy;
		    lodash.over = over;
		    lodash.overArgs = overArgs;
		    lodash.overEvery = overEvery;
		    lodash.overSome = overSome;
		    lodash.partial = partial;
		    lodash.partialRight = partialRight;
		    lodash.partition = partition;
		    lodash.pick = pick;
		    lodash.pickBy = pickBy;
		    lodash.property = property;
		    lodash.propertyOf = propertyOf;
		    lodash.pull = pull;
		    lodash.pullAll = pullAll;
		    lodash.pullAllBy = pullAllBy;
		    lodash.pullAllWith = pullAllWith;
		    lodash.pullAt = pullAt;
		    lodash.range = range;
		    lodash.rangeRight = rangeRight;
		    lodash.rearg = rearg;
		    lodash.reject = reject;
		    lodash.remove = remove;
		    lodash.rest = rest;
		    lodash.reverse = reverse;
		    lodash.sampleSize = sampleSize;
		    lodash.set = set;
		    lodash.setWith = setWith;
		    lodash.shuffle = shuffle;
		    lodash.slice = slice;
		    lodash.sortBy = sortBy;
		    lodash.sortedUniq = sortedUniq;
		    lodash.sortedUniqBy = sortedUniqBy;
		    lodash.split = split;
		    lodash.spread = spread;
		    lodash.tail = tail;
		    lodash.take = take;
		    lodash.takeRight = takeRight;
		    lodash.takeRightWhile = takeRightWhile;
		    lodash.takeWhile = takeWhile;
		    lodash.tap = tap;
		    lodash.throttle = throttle;
		    lodash.thru = thru;
		    lodash.toArray = toArray;
		    lodash.toPairs = toPairs;
		    lodash.toPairsIn = toPairsIn;
		    lodash.toPath = toPath;
		    lodash.toPlainObject = toPlainObject;
		    lodash.transform = transform;
		    lodash.unary = unary;
		    lodash.union = union;
		    lodash.unionBy = unionBy;
		    lodash.unionWith = unionWith;
		    lodash.uniq = uniq;
		    lodash.uniqBy = uniqBy;
		    lodash.uniqWith = uniqWith;
		    lodash.unset = unset;
		    lodash.unzip = unzip;
		    lodash.unzipWith = unzipWith;
		    lodash.update = update;
		    lodash.updateWith = updateWith;
		    lodash.values = values;
		    lodash.valuesIn = valuesIn;
		    lodash.without = without;
		    lodash.words = words;
		    lodash.wrap = wrap;
		    lodash.xor = xor;
		    lodash.xorBy = xorBy;
		    lodash.xorWith = xorWith;
		    lodash.zip = zip;
		    lodash.zipObject = zipObject;
		    lodash.zipObjectDeep = zipObjectDeep;
		    lodash.zipWith = zipWith;

		    // Add aliases.
		    lodash.entries = toPairs;
		    lodash.entriesIn = toPairsIn;
		    lodash.extend = assignIn;
		    lodash.extendWith = assignInWith;

		    // Add methods to `lodash.prototype`.
		    mixin(lodash, lodash);

		    /*------------------------------------------------------------------------*/

		    // Add methods that return unwrapped values in chain sequences.
		    lodash.add = add;
		    lodash.attempt = attempt;
		    lodash.camelCase = camelCase;
		    lodash.capitalize = capitalize;
		    lodash.ceil = ceil;
		    lodash.clamp = clamp;
		    lodash.clone = clone;
		    lodash.cloneDeep = cloneDeep;
		    lodash.cloneDeepWith = cloneDeepWith;
		    lodash.cloneWith = cloneWith;
		    lodash.conformsTo = conformsTo;
		    lodash.deburr = deburr;
		    lodash.defaultTo = defaultTo;
		    lodash.divide = divide;
		    lodash.endsWith = endsWith;
		    lodash.eq = eq;
		    lodash.escape = escape;
		    lodash.escapeRegExp = escapeRegExp;
		    lodash.every = every;
		    lodash.find = find;
		    lodash.findIndex = findIndex;
		    lodash.findKey = findKey;
		    lodash.findLast = findLast;
		    lodash.findLastIndex = findLastIndex;
		    lodash.findLastKey = findLastKey;
		    lodash.floor = floor;
		    lodash.forEach = forEach;
		    lodash.forEachRight = forEachRight;
		    lodash.forIn = forIn;
		    lodash.forInRight = forInRight;
		    lodash.forOwn = forOwn;
		    lodash.forOwnRight = forOwnRight;
		    lodash.get = get;
		    lodash.gt = gt;
		    lodash.gte = gte;
		    lodash.has = has;
		    lodash.hasIn = hasIn;
		    lodash.head = head;
		    lodash.identity = identity;
		    lodash.includes = includes;
		    lodash.indexOf = indexOf;
		    lodash.inRange = inRange;
		    lodash.invoke = invoke;
		    lodash.isArguments = isArguments;
		    lodash.isArray = isArray;
		    lodash.isArrayBuffer = isArrayBuffer;
		    lodash.isArrayLike = isArrayLike;
		    lodash.isArrayLikeObject = isArrayLikeObject;
		    lodash.isBoolean = isBoolean;
		    lodash.isBuffer = isBuffer;
		    lodash.isDate = isDate;
		    lodash.isElement = isElement;
		    lodash.isEmpty = isEmpty;
		    lodash.isEqual = isEqual;
		    lodash.isEqualWith = isEqualWith;
		    lodash.isError = isError;
		    lodash.isFinite = isFinite;
		    lodash.isFunction = isFunction;
		    lodash.isInteger = isInteger;
		    lodash.isLength = isLength;
		    lodash.isMap = isMap;
		    lodash.isMatch = isMatch;
		    lodash.isMatchWith = isMatchWith;
		    lodash.isNaN = isNaN;
		    lodash.isNative = isNative;
		    lodash.isNil = isNil;
		    lodash.isNull = isNull;
		    lodash.isNumber = isNumber;
		    lodash.isObject = isObject;
		    lodash.isObjectLike = isObjectLike;
		    lodash.isPlainObject = isPlainObject;
		    lodash.isRegExp = isRegExp;
		    lodash.isSafeInteger = isSafeInteger;
		    lodash.isSet = isSet;
		    lodash.isString = isString;
		    lodash.isSymbol = isSymbol;
		    lodash.isTypedArray = isTypedArray;
		    lodash.isUndefined = isUndefined;
		    lodash.isWeakMap = isWeakMap;
		    lodash.isWeakSet = isWeakSet;
		    lodash.join = join;
		    lodash.kebabCase = kebabCase;
		    lodash.last = last;
		    lodash.lastIndexOf = lastIndexOf;
		    lodash.lowerCase = lowerCase;
		    lodash.lowerFirst = lowerFirst;
		    lodash.lt = lt;
		    lodash.lte = lte;
		    lodash.max = max;
		    lodash.maxBy = maxBy;
		    lodash.mean = mean;
		    lodash.meanBy = meanBy;
		    lodash.min = min;
		    lodash.minBy = minBy;
		    lodash.stubArray = stubArray;
		    lodash.stubFalse = stubFalse;
		    lodash.stubObject = stubObject;
		    lodash.stubString = stubString;
		    lodash.stubTrue = stubTrue;
		    lodash.multiply = multiply;
		    lodash.nth = nth;
		    lodash.noConflict = noConflict;
		    lodash.noop = noop;
		    lodash.now = now;
		    lodash.pad = pad;
		    lodash.padEnd = padEnd;
		    lodash.padStart = padStart;
		    lodash.parseInt = parseInt;
		    lodash.random = random;
		    lodash.reduce = reduce;
		    lodash.reduceRight = reduceRight;
		    lodash.repeat = repeat;
		    lodash.replace = replace;
		    lodash.result = result;
		    lodash.round = round;
		    lodash.runInContext = runInContext;
		    lodash.sample = sample;
		    lodash.size = size;
		    lodash.snakeCase = snakeCase;
		    lodash.some = some;
		    lodash.sortedIndex = sortedIndex;
		    lodash.sortedIndexBy = sortedIndexBy;
		    lodash.sortedIndexOf = sortedIndexOf;
		    lodash.sortedLastIndex = sortedLastIndex;
		    lodash.sortedLastIndexBy = sortedLastIndexBy;
		    lodash.sortedLastIndexOf = sortedLastIndexOf;
		    lodash.startCase = startCase;
		    lodash.startsWith = startsWith;
		    lodash.subtract = subtract;
		    lodash.sum = sum;
		    lodash.sumBy = sumBy;
		    lodash.template = template;
		    lodash.times = times;
		    lodash.toFinite = toFinite;
		    lodash.toInteger = toInteger;
		    lodash.toLength = toLength;
		    lodash.toLower = toLower;
		    lodash.toNumber = toNumber;
		    lodash.toSafeInteger = toSafeInteger;
		    lodash.toString = toString;
		    lodash.toUpper = toUpper;
		    lodash.trim = trim;
		    lodash.trimEnd = trimEnd;
		    lodash.trimStart = trimStart;
		    lodash.truncate = truncate;
		    lodash.unescape = unescape;
		    lodash.uniqueId = uniqueId;
		    lodash.upperCase = upperCase;
		    lodash.upperFirst = upperFirst;

		    // Add aliases.
		    lodash.each = forEach;
		    lodash.eachRight = forEachRight;
		    lodash.first = head;

		    mixin(lodash, (function() {
		      var source = {};
		      baseForOwn(lodash, function(func, methodName) {
		        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
		          source[methodName] = func;
		        }
		      });
		      return source;
		    }()), { 'chain': false });

		    /*------------------------------------------------------------------------*/

		    /**
		     * The semantic version number.
		     *
		     * @static
		     * @memberOf _
		     * @type {string}
		     */
		    lodash.VERSION = VERSION;

		    // Assign default placeholders.
		    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
		      lodash[methodName].placeholder = lodash;
		    });

		    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		    arrayEach(['drop', 'take'], function(methodName, index) {
		      LazyWrapper.prototype[methodName] = function(n) {
		        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

		        var result = (this.__filtered__ && !index)
		          ? new LazyWrapper(this)
		          : this.clone();

		        if (result.__filtered__) {
		          result.__takeCount__ = nativeMin(n, result.__takeCount__);
		        } else {
		          result.__views__.push({
		            'size': nativeMin(n, MAX_ARRAY_LENGTH),
		            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
		          });
		        }
		        return result;
		      };

		      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
		        return this.reverse()[methodName](n).reverse();
		      };
		    });

		    // Add `LazyWrapper` methods that accept an `iteratee` value.
		    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
		      var type = index + 1,
		          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

		      LazyWrapper.prototype[methodName] = function(iteratee) {
		        var result = this.clone();
		        result.__iteratees__.push({
		          'iteratee': getIteratee(iteratee, 3),
		          'type': type
		        });
		        result.__filtered__ = result.__filtered__ || isFilter;
		        return result;
		      };
		    });

		    // Add `LazyWrapper` methods for `_.head` and `_.last`.
		    arrayEach(['head', 'last'], function(methodName, index) {
		      var takeName = 'take' + (index ? 'Right' : '');

		      LazyWrapper.prototype[methodName] = function() {
		        return this[takeName](1).value()[0];
		      };
		    });

		    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		    arrayEach(['initial', 'tail'], function(methodName, index) {
		      var dropName = 'drop' + (index ? '' : 'Right');

		      LazyWrapper.prototype[methodName] = function() {
		        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
		      };
		    });

		    LazyWrapper.prototype.compact = function() {
		      return this.filter(identity);
		    };

		    LazyWrapper.prototype.find = function(predicate) {
		      return this.filter(predicate).head();
		    };

		    LazyWrapper.prototype.findLast = function(predicate) {
		      return this.reverse().find(predicate);
		    };

		    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
		      if (typeof path == 'function') {
		        return new LazyWrapper(this);
		      }
		      return this.map(function(value) {
		        return baseInvoke(value, path, args);
		      });
		    });

		    LazyWrapper.prototype.reject = function(predicate) {
		      return this.filter(negate(getIteratee(predicate)));
		    };

		    LazyWrapper.prototype.slice = function(start, end) {
		      start = toInteger(start);

		      var result = this;
		      if (result.__filtered__ && (start > 0 || end < 0)) {
		        return new LazyWrapper(result);
		      }
		      if (start < 0) {
		        result = result.takeRight(-start);
		      } else if (start) {
		        result = result.drop(start);
		      }
		      if (end !== undefined$1) {
		        end = toInteger(end);
		        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
		      }
		      return result;
		    };

		    LazyWrapper.prototype.takeRightWhile = function(predicate) {
		      return this.reverse().takeWhile(predicate).reverse();
		    };

		    LazyWrapper.prototype.toArray = function() {
		      return this.take(MAX_ARRAY_LENGTH);
		    };

		    // Add `LazyWrapper` methods to `lodash.prototype`.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
		          isTaker = /^(?:head|last)$/.test(methodName),
		          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
		          retUnwrapped = isTaker || /^find/.test(methodName);

		      if (!lodashFunc) {
		        return;
		      }
		      lodash.prototype[methodName] = function() {
		        var value = this.__wrapped__,
		            args = isTaker ? [1] : arguments,
		            isLazy = value instanceof LazyWrapper,
		            iteratee = args[0],
		            useLazy = isLazy || isArray(value);

		        var interceptor = function(value) {
		          var result = lodashFunc.apply(lodash, arrayPush([value], args));
		          return (isTaker && chainAll) ? result[0] : result;
		        };

		        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
		          // Avoid lazy use if the iteratee has a "length" value other than `1`.
		          isLazy = useLazy = false;
		        }
		        var chainAll = this.__chain__,
		            isHybrid = !!this.__actions__.length,
		            isUnwrapped = retUnwrapped && !chainAll,
		            onlyLazy = isLazy && !isHybrid;

		        if (!retUnwrapped && useLazy) {
		          value = onlyLazy ? value : new LazyWrapper(this);
		          var result = func.apply(value, args);
		          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
		          return new LodashWrapper(result, chainAll);
		        }
		        if (isUnwrapped && onlyLazy) {
		          return func.apply(this, args);
		        }
		        result = this.thru(interceptor);
		        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
		      };
		    });

		    // Add `Array` methods to `lodash.prototype`.
		    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
		      var func = arrayProto[methodName],
		          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
		          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

		      lodash.prototype[methodName] = function() {
		        var args = arguments;
		        if (retUnwrapped && !this.__chain__) {
		          var value = this.value();
		          return func.apply(isArray(value) ? value : [], args);
		        }
		        return this[chainName](function(value) {
		          return func.apply(isArray(value) ? value : [], args);
		        });
		      };
		    });

		    // Map minified method names to their real names.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var lodashFunc = lodash[methodName];
		      if (lodashFunc) {
		        var key = lodashFunc.name + '';
		        if (!hasOwnProperty.call(realNames, key)) {
		          realNames[key] = [];
		        }
		        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
		      }
		    });

		    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
		      'name': 'wrapper',
		      'func': undefined$1
		    }];

		    // Add methods to `LazyWrapper`.
		    LazyWrapper.prototype.clone = lazyClone;
		    LazyWrapper.prototype.reverse = lazyReverse;
		    LazyWrapper.prototype.value = lazyValue;

		    // Add chain sequence methods to the `lodash` wrapper.
		    lodash.prototype.at = wrapperAt;
		    lodash.prototype.chain = wrapperChain;
		    lodash.prototype.commit = wrapperCommit;
		    lodash.prototype.next = wrapperNext;
		    lodash.prototype.plant = wrapperPlant;
		    lodash.prototype.reverse = wrapperReverse;
		    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		    // Add lazy aliases.
		    lodash.prototype.first = lodash.prototype.head;

		    if (symIterator) {
		      lodash.prototype[symIterator] = wrapperToIterator;
		    }
		    return lodash;
		  });

		  /*--------------------------------------------------------------------------*/

		  // Export lodash.
		  var _ = runInContext();

		  // Some AMD build optimizers, like r.js, check for condition patterns like:
		  if (freeModule) {
		    // Export for Node.js.
		    (freeModule.exports = _)._ = _;
		    // Export for CommonJS support.
		    freeExports._ = _;
		  }
		  else {
		    // Export to the global object.
		    root._ = _;
		  }
		}.call(commonjsGlobal$1)); 
	} (lodash, lodash.exports));

	var lodashExports = lodash.exports;
	var _ = /*@__PURE__*/getDefaultExportFromCjs(lodashExports);

	// import {BASEPAIR_COLOR_DEFAULT, BASEPAIR_THICKNESS_DEFAULT} from "./config";

	// Here we list all possible label in lower case for each edge
	const WatsonCrick_List = ['w', 'wc', 'watson'];
	const Hoogsteen_List = ['h', 'hoogsteen'];
	const Sugar_List = ['s', 'sugar'];
	const EDGE = Object.freeze({
	  WC: 'W',
	  S: 'S',
	  H: 'H'
	});

	// Here we list all possible stericity in lower case
	const Cis_List = ['c', 'cis'];
	const Trans_List = ['t', 'trans'];
	const STERICITY = Object.freeze({
	  C: 'c',
	  T: 't'
	});

	/**
	 * Convert edge label to edge type
	 * @param {string} label - edge label
	 */
	function parseEdge(label) {
	  let label2 = label.toLowerCase();
	  if (WatsonCrick_List.indexOf(label2) > -1) {
	    return EDGE.WC;
	  } else if (Hoogsteen_List.indexOf(label2) > -1) {
	    return EDGE.H;
	  } else if (Sugar_List.indexOf(label2) > -1) {
	    return EDGE.S;
	  } else {
	    throw new Error(`${label} is not a valid edge label`);
	  }
	}

	/**
	 * Convert stericity label to stericity type
	 * @param {string} label - stericity label
	 */
	function parseStericity(label) {
	  let label2 = label.toLowerCase();
	  if (Cis_List.indexOf(label2) > -1) {
	    return STERICITY.C;
	  } else if (Trans_List.indexOf(label2) > -1) {
	    return STERICITY.T;
	  } else {
	    throw new Error(`${label} is not a valid stericity label`);
	  }
	}

	/**
	 * ModelBP represents a basepair
	 */
	class ModelBP {
	  partner5;
	  partner3;
	  edge5 = EDGE.WC;
	  edge3 = EDGE.WC;
	  stericity = STERICITY.C;
	  // Flag to not put in planar layout
	  noplanar = false;
	  // Style
	  // thickness = BASEPAIR_THICKNESS_DEFAULT;
	  // color = BASEPAIR_COLOR_DEFAULT;
	  thickness = null;
	  color = null;
	  constructor(part5, part3, opt = {}) {
	    this.partner5 = part5;
	    this.partner3 = part3;
	    if ("edge5" in opt) {
	      this.edge5 = parseEdge(opt.edge5);
	    }
	    if ("edge3" in opt) {
	      this.edge3 = parseEdge(opt.edge3);
	    }
	    if ("stericity" in opt) {
	      this.stericity = parseStericity(opt.stericity);
	    }
	    if ("noplaner" in opt) {
	      this.noplansar = Boolean(opt.noplanar);
	    }
	    if ("thickness" in opt) {
	      this.thickness = parseFloat(opt.thickness);
	    }
	    if ("color" in opt) {
	      this.color = String(opt.color);
	    }
	  }

	  /**
	   * Set color and thickness of basepair
	   * @param {Object} opt - basepair style in {color: xxx, thickness: yyy}. xxx should be a string and yyy is a float
	   */
	  setStyle(opt = {}) {
	    if ("color" in opt && opt.color !== null && _.isString(opt.color)) {
	      this.color = opt.color;
	    }
	    if ("thickness" in opt && opt.thickness !== null) {
	      this.thickness = parseFloat(opt.thickness);
	    }
	  }
	  getType() {
	    return `${this.stericity}${this.edge5}${this.edge3}`;
	  }

	  /**
	   * Return basepair as cytoscape edge element
	   */
	  toCyElement() {
	    let el = {
	      "data": {
	        "source": this.partner5.ind,
	        "target": this.partner3.ind,
	        "label": this.getType()
	      },
	      "classes": ["basepair"]
	    };
	    let style = {};
	    if (this.color !== null) {
	      style["line-color"] = this.color;
	    }
	    if (this.thickness !== null) {
	      style.width = this.thickness;
	    }
	    if (!_.isEmpty(style)) {
	      el.style = style;
	    }
	    return el;
	  }
	}

	class ModelBackbone {
	  type = "custom";
	  color = null;
	  thickness = null;
	  style = null;
	  constructor(opt = {}) {
	    Object.assign(this, opt);
	  }
	  getType() {
	    return this.type;
	  }
	}
	const DefaultBackbone = Object.freeze(new ModelBackbone({
	  type: "default"
	}));
	const DiscontinuousBackbone = Object.freeze(new ModelBackbone({
	  type: "discontinuous"
	}));
	Object.freeze(new ModelBackbone({
	  type: "missing"
	}));

	/**
	 * ModelBase represents one base in RNA
	 * @class
	 * @constructor
	 * @public
	 * @property {int} ind - index of base in baseList
	 * @property {int} baseNum - base number to show
	 * @property {string} c - Character (nucleobase) of base
	 * @property {ModelBase} partner - index of canonical bp partner, -1 means unpaired
	 * @property {bool|null} nested - true if basepair is nested
	 */
	class ModelBase {
	  bp = null;
	  nested = null;
	  coords = {
	    x: null,
	    y: null
	  };
	  center = {
	    x: null,
	    y: null
	  };
	  style = null;
	  bacbone = DefaultBackbone;
	  classes = [];
	  constructor(ind, bn, label) {
	    this.ind = ind;
	    this.realInd = bn;
	    this.c = label;
	  }

	  /**
	   * Set planar basepair
	   * @param {ModelBP} mbp - planar basepair
	   */
	  setBP(mbp) {
	    this.bp = mbp;
	  }
	  getBP() {
	    return this.bp;
	  }
	  getPartner() {
	    if (this.bp === null) {
	      return null;
	    } else {
	      if (this.bp.partner5 == this) {
	        return this.bp.partner3.ind;
	      } else {
	        return this.bp.partner5.ind;
	      }
	    }
	  }
	  getPartnerInd() {
	    let ind = this.getPartner();
	    if (ind === null) {
	      return -1;
	    }
	    return ind;
	  }
	  setBaseNum(bn) {
	    this.realInd = bn;
	  }
	  getBaseNum() {
	    return this.realInd;
	  }
	  setCoords(coords) {
	    this.coords.x = coords.x;
	    this.coords.y = coords.y;
	  }
	  getCoords(coords) {
	    return {
	      x: this.coords.x,
	      y: this.coords.y
	    };
	  }
	  setStyle(style) {
	    this.style = style;
	  }
	  getStyle() {
	    return this.style;
	  }
	  setBackbone(backbone) {
	    this.backbone = backbone;
	  }
	  getBackbone(backbone) {
	    return this.backbone;
	  }
	  getBackboneiType(backbone) {
	    return this.backbone.getType();
	  }
	  addCustomClass(inst) {
	    this.classes.push(inst);
	  }
	}

	/**
	 * Class object for base style
	 * @class
	 * @constructor
	 * @public
	 * @property {string} baseNameColor        - color of base name (default: rgb(64, 64, 64))
	 * @property {string} baseInnerColor       - color to fill base (default: rgb(242, 242, 242))
	 * @property {string} baseOutlineColor     - color of base border (default: rgb(91, 91, 91))
	 * @property {float}  baseOutlineThickness - base border thickness (default: 1.5)
	 * @property {string} baseNumColor         - color of base number (default: rgb(64, 64, 64))
	 */
	class ModelBaseStyle {
	  id = null;
	  baseNameColor = null;
	  baseInnerColor = null;
	  baseOutlineColor = null;
	  baseOutlineThickness = null;
	  baseNumColor = null;
	  constructor(opt = {}) {
	    Object.assign(this, opt);
	  }

	  /**
	   * Set style id
	   */
	  setId(id) {
	    this.id = id;
	  }

	  /**
	   * Return style id
	   */
	  getId() {
	    return this.id;
	  }

	  /**
	   * Return in cytoscape style format
	   * @param {string} selector - cytoscape selector
	   */
	  toCyStyle(selector) {
	    let style = {
	      node: {},
	      label: {}
	    };
	    // For base node
	    let tmp = {};
	    if (this.baseInnerColor !== null) {
	      tmp["background-color"] = this.baseInnerColor;
	    }
	    if (this.baseOutlineThickness !== null) {
	      tmp["border-width"] = this.baseOutlineThickness;
	    }
	    if (this.baseOutlineColor !== null) {
	      tmp["border-color"] = this.baseOutlineColor;
	    }
	    if (!_.isEmpty(tmp)) {
	      style.node = {
	        "selector": `${selector}`,
	        "style": tmp
	      };
	    }

	    // For base label
	    if (this.baseNameColor !== null) {
	      style.label = {
	        "selector": `${selector}[label]`,
	        "style": {
	          "color": this.baseNameColor
	        }
	      };
	    }
	    return style;
	  }

	  /**
	   * Similar to toCyStyle, but return non empty styles in a list
	   * @param {string} selector - cytoscape selector
	   */
	  toCyStyleInList(selector) {
	    let lst = Object.values(this.toCyStyle(selector));
	    return _.filter(lst, s => !_.isEmpty(s));
	  }
	}

	/*
	 * Style configuration
	 */

	/**
	 * Enum for RNA base layout
	 * @property {string} LINE - linear layout
	 * @property {string} CIRCLE - circular layout
	 * @property {string} RADIATE - radiate layout
	 * @property {string} NAVIEW - NAView layout
	 * @property {string} TURTLE - RNAturtle layout (Wiegreffe et al. 2018)
	 * @property {string} PUZZLER - RNApuzzler layout (Wiegreffe et al. 2018)
	 * @readonly
	 */
	const Layouts = Object.freeze({
	  LINE: 'line',
	  CIRCLE: 'circle',
	  RADIATE: 'radiate',
	  NAVIEW: 'naview',
	  TURTLE: 'turtle',
	  PUZZLER: 'puzzler'
	});

	/** Default base label color */
	const BASE_NAME_COLOR_DEFAULT = "rgb(64, 64, 64)";
	/** Default inner base color */
	const BASE_INNER_COLOR_DEFAULT = "rgb(242, 242, 242)";
	/** Default base outline color */
	const BASE_OUTLINE_COLOR_DEFAULT = "rgb(91, 91, 91)";
	/** Default base outline thickness */
	const BASE_OUTLINE_THICKNESS_DEFAULT = 1.5;
	/** Default base number color */
	const BASE_NUMBER_COLOR_DEFAULT = "rgb(64, 64, 64)";
	/** Default basepair color */
	const BASEPAIR_COLOR_DEFAULT = "blue";
	/** Default basepair thickness */
	const BASEPAIR_THICKNESS_DEFAULT = 1;

	/**
	 * VARNAConfig defines the style of drawing
	 * @class
	 * @public
	 * @property {string} layout - base layout (default: Layouts.RADIATE)
	 * @property {int} spaceBetweenBases - multiplier for base spacing
	 * @property {int} bpDistance - distance between paired bases (length of canonical basepair)
	 * @property {int} backboneLoop - backbone distance within a loop (radiate, turtle, puzzler)
	 * @property {int} backboneMultiLoop - backbone distance within a multiloop for radiate layout
	 * @property {string} baseNameColor - color of base name, i.e. nucleotide (default: rgb(64, 64, 64))
	 * @property {string} baseInnerColor - color to fill base (default: rgb(242, 242, 242))
	 * @property {string} baseOutlineColor - color of base border (default: rgb(91, 91, 91))
	 * @property {float} baseOutlineThickness - base border thickness (default: 1.5)
	 * @property {string} baseNumColor - color of base number (default: rgb(64, 64, 64))
	 * @property {int} baseNumPeriod - base number period. Non positive value means hiding base number (default: 10)
	 * @property {string} backboneColor - color of backbone (default: rgb(91, 91, 91))
	 * @property {int} backboneThickness - backbone thickness (default: 1)
	 * @property {string} bpColor - basepair color (default: blue)
	 * @property {int} bpThickness - basepair thickness (default: 1)
	 * @property {bool} bpLowerPlane - draw basepair in lower plane in linear layout (default: false)
	 * @property {bool} drawBases - base visibility (default: true)
	 * @property {bool} drawBacbone - backbone visibility (default: true)
	 * @property {Puzzler} puzzler - puzzler setting
	 */
	class VARNAConfig {
	  // Layout related
	  layout = Layouts.RADIATE;
	  spaceBetweenBases = 1;
	  bpDistance = 65;
	  backboneLoop = 40;
	  backboneMultiLoop = 35;

	  // Base label
	  baseNameColor = BASE_NAME_COLOR_DEFAULT;
	  // Inner base
	  baseInnerColor = BASE_INNER_COLOR_DEFAULT;
	  // Base Outline
	  baseOutlineColor = BASE_OUTLINE_COLOR_DEFAULT;
	  baseOutlineThickness = BASE_OUTLINE_THICKNESS_DEFAULT;
	  // Base number
	  baseNumColor = BASE_NUMBER_COLOR_DEFAULT;
	  baseNumPeriod = 10;
	  // Backbone
	  backboneColor = "rgb(91, 91, 91)";
	  backboneThickness = 1;
	  // (Canonical) basepair
	  bpColor = BASEPAIR_COLOR_DEFAULT;
	  bpThickness = BASEPAIR_THICKNESS_DEFAULT;
	  bpLowerPlane = false;

	  // Visibility 
	  drawBases = true;
	  drawBackbone = true;
	  // RNApuzzler config
	  puzzler = new Puzzler();

	  // TODO: Check invalid argument
	  constructor(opt = {}) {
	    Object.assign(this, opt);
	  }
	  set(opt = {}) {
	    Object.assign(this, opt);
	  }

	  /**
	   * Create general cytoscape style for bases
	   * @param {string} selector - base selector (default: "node")
	   */
	  baseCyStyle(selector = "node") {
	    let style = {
	      "selector": `${selector}`,
	      "style": {
	        "width": 20,
	        "height": 20,
	        "background-color": this.baseInnerColor,
	        "border-width": this.baseOutlineThickness,
	        "border-color": this.baseOutlineColor,
	        "visibility": this.drawBases ? "visible" : "hidden"
	      }
	    };
	    return style;
	  }

	  /**
	   * Create general cytoscape style for base names
	   * @param {string} selector - base name selector (default: "node[label]")
	   */
	  baseNameCyStyle(selector = "node[label]") {
	    let style = {
	      "selector": `${selector}`,
	      "style": {
	        "label": "data(label)",
	        "text-valign": "center",
	        "text-halign": "center",
	        "color": this.baseNameColor
	      }
	    };
	    return style;
	  }

	  /**
	   * Create general cytoscape style for backbone
	   * @param {string} selector - backbone selector (default: "edge.backbone")
	   */
	  backboneCyStyle(selector = "edge.bacbone") {
	    let style = {
	      "selector": `${selector}`,
	      "style": {
	        "line-color": this.backboneColor,
	        "width": this.backboneThickness,
	        "visibility": this.drawBackbone ? "visible" : "hidden"
	      }
	    };
	    return style;
	  }

	  /**
	   * Create general cytoscape style forbasepair 
	   * @param {string} selector - basepair selector (default: "edge.basepair")
	   */
	  bpCyStyle(selector = "edge.bacbone") {
	    let style = {
	      "selector": `${selector}`,
	      "style": {
	        "line-color": this.bpColor,
	        "width": this.bpThickness
	      }
	    };
	    return style;
	  }
	}

	/**
	 * Special configuration for RNApuzzler
	 * @class
	 * @public
	 * @property {bool} checkExteriorIntersections - flag for no interaction with exterior loop (default: true)
	 * @property {bool} checkSiblingIntersections - flag for no interaction with sibling loops default: true)
	 * @property {bool} checkAncestorIntersections - flag for no interaction with ancestor loops (default: true)
	 * @property {bool} optimize - flag to optimize layout (default: true)
	 */
	class Puzzler {
	  // drawing behavior
	  drawArcs = 1;

	  // intersection resolution behavior
	  checkExteriorIntersections = true;
	  checkSiblingIntersections = true;
	  checkAncestorIntersections = true;
	  optimize = true;

	  // import behavior - unused for now
	  config = null;

	  // other stuff
	  filename = null;
	  numberOfChangesAppliedToConfig = 0;
	  psNumber = 0;
	  maximumNumberOfConfigChangesAllowed = null;
	  constructor(opt = {}) {
	    Object.assign(this, opt);
	  }
	}

	// Modified from drawrnajs and VARNA

	let drawRadiate = function (baseList, varnaCfg) {
	  //This function calculates the coordinates for each nucleotide
	  //according to the radiate layout
	  var coords = [];
	  var centers = [];
	  var angles = [];
	  let dirAngle = -1;
	  let spaceBetweenBases = varnaCfg.spaceBetweenBases;
	  for (let i = 0; i < baseList.length; i++) {
	    coords[i] = {
	      x: 0,
	      y: 0
	    };
	    centers[i] = {
	      x: 0,
	      y: 0
	    };
	  }
	  // TODO: Flat exteriorloop
	  // Currently we ignore flat exteriorloop
	  drawLoop(0, baseList.length - 1, 0, 0, dirAngle, coords, centers, angles, baseList, varnaCfg);
	  for (let i = 0; i < coords.length; i++) {
	    coords[i].x *= spaceBetweenBases;
	    coords[i].y *= spaceBetweenBases;
	  }
	  return coords;
	};
	let drawLoop = function (i, j, x, y, dirAngle, coords, centers, angles, baseList, varnaCfg) {
	  //Calculates loop coordinates
	  if (i > j) {
	    return;
	  }
	  let BASE_PAIR_DISTANCE = varnaCfg.bpDistance;
	  let LOOP_DISTANCE = varnaCfg.backboneLoop;
	  let MULTILOOP_DISTANCE = varnaCfg.backboneMultiLoop;
	  let straightBulges = true;
	  // BasePaired
	  if (baseList[i].getPartnerInd() == j) {
	    let normalAngle = Math.PI / 2.0;
	    centers[i] = {
	      x: x,
	      y: y
	    };
	    centers[j] = {
	      x: x,
	      y: y
	    };
	    coords[i].x = x + BASE_PAIR_DISTANCE * Math.cos(dirAngle - normalAngle) / 2.0;
	    coords[i].y = y + BASE_PAIR_DISTANCE * Math.sin(dirAngle - normalAngle) / 2.0;
	    coords[j].x = x + BASE_PAIR_DISTANCE * Math.cos(dirAngle + normalAngle) / 2.0;
	    coords[j].y = y + BASE_PAIR_DISTANCE * Math.sin(dirAngle + normalAngle) / 2.0;
	    drawLoop(i + 1, j - 1, x + LOOP_DISTANCE * Math.cos(dirAngle), y + LOOP_DISTANCE * Math.sin(dirAngle), dirAngle, coords, centers, angles, baseList, varnaCfg);
	  } else {
	    // Multiloop
	    let k = i;
	    let basesMultiLoop = [];
	    let helices = [];
	    let l;
	    while (k <= j) {
	      l = baseList[k].getPartnerInd();
	      if (l > k) {
	        basesMultiLoop.push(k);
	        basesMultiLoop.push(l);
	        helices.push(k);
	        k = l + 1;
	      } else {
	        basesMultiLoop.push(k);
	        k++;
	      }
	    }
	    let mlSize = basesMultiLoop.length + 2;
	    let numHelices = helices.length + 1;
	    let totalLength = MULTILOOP_DISTANCE * (mlSize - numHelices) + BASE_PAIR_DISTANCE * numHelices;
	    let multiLoopRadius;
	    let angleIncrementML;
	    let angleIncrementBP;
	    if (mlSize > 3) {
	      multiLoopRadius = determineRadius(numHelices, mlSize - numHelices, totalLength / (2.0 * Math.PI), BASE_PAIR_DISTANCE, MULTILOOP_DISTANCE);
	      angleIncrementML = -2.0 * Math.asin(MULTILOOP_DISTANCE / (2.0 * multiLoopRadius));
	      angleIncrementBP = -2.0 * Math.asin(BASE_PAIR_DISTANCE / (2.0 * multiLoopRadius));
	    } else {
	      multiLoopRadius = 35.0;
	      angleIncrementBP = -2.0 * Math.asin(BASE_PAIR_DISTANCE / (2.0 * multiLoopRadius));
	      angleIncrementML = (-2.0 * Math.PI - angleIncrementBP) / 2.0;
	    }
	    let centerDist = Math.sqrt(Math.max(Math.pow(multiLoopRadius, 2) - Math.pow(BASE_PAIR_DISTANCE / 2.0, 2), 0.0)) - LOOP_DISTANCE;
	    let mlCenter = {
	      x: x + centerDist * Math.cos(dirAngle),
	      y: y + centerDist * Math.sin(dirAngle)
	    };
	    // Base directing angle for (multi|hairpin) loop, from the center's
	    // perspective
	    let baseAngle = dirAngle
	    // U-turn
	    + Math.PI
	    // Account for already drawn supporting base-pair
	    + 0.5 * angleIncrementBP
	    // Base cannot be paired twice, so next base is at
	    // "unpaired base distance"
	    + 1.0 * angleIncrementML;
	    let currUnpaired = [];
	    let currInterval = {
	      el1: 0,
	      el2: baseAngle - 1.0 * angleIncrementML
	    };
	    let intervals = [];
	    for (k = basesMultiLoop.length - 1; k >= 0; k--) {
	      l = basesMultiLoop[k];
	      centers[l] = mlCenter;
	      let isPaired = baseList[l].getPartnerInd() != -1;
	      let isPaired3 = isPaired && baseList[l].getPartnerInd() < l;
	      let isPaired5 = isPaired && !isPaired3;
	      if (isPaired3) {
	        if (numHelices == 2 && straightBulges) {
	          baseAngle = dirAngle - angleIncrementBP / 2.;
	        } else {
	          baseAngle = correctHysteresis(baseAngle + angleIncrementBP / 2.) - angleIncrementBP / 2.;
	        }
	        currInterval.el1 = baseAngle;
	        intervals.push({
	          el1: currUnpaired,
	          el2: currInterval
	        });
	        currInterval = {
	          el1: -1.0,
	          el2: -1.0
	        };
	        currUnpaired = [];
	      } else if (isPaired5) {
	        currInterval.el2 = baseAngle;
	      } else {
	        currUnpaired.push(l);
	      }
	      angles[l] = baseAngle;
	      if (isPaired3) {
	        baseAngle += angleIncrementBP;
	      } else {
	        baseAngle += angleIncrementML;
	      }
	    }
	    currInterval.el1 = dirAngle - Math.PI - 0.5 * angleIncrementBP;
	    intervals.push({
	      el1: currUnpaired,
	      el2: currInterval
	    });
	    for (let z = 0; z < intervals.length; z++) {
	      let mina = intervals[z].el2.el1;
	      let maxa = normalizeAngle(intervals[z].el2.el2, mina);
	      for (let n = 0; n < intervals[z].el1.length; n++) {
	        let ratio = (1. + n) / (1. + intervals[z].el1.length);
	        let b = intervals[z].el1[n];
	        angles[b] = mina + (1. - ratio) * (maxa - mina);
	      }
	    }
	    for (k = basesMultiLoop.length - 1; k >= 0; k--) {
	      l = basesMultiLoop[k];
	      coords[l].x = mlCenter.x + multiLoopRadius * Math.cos(angles[l]);
	      coords[l].y = mlCenter.y + multiLoopRadius * Math.sin(angles[l]);
	    }
	    let newAngle;
	    let m, n;
	    for (k = 0; k < helices.length; k++) {
	      m = helices[k];
	      n = baseList[m].getPartnerInd();
	      newAngle = (angles[m] + angles[n]) / 2.0;
	      drawLoop(m + 1, n - 1, LOOP_DISTANCE * Math.cos(newAngle) + (coords[m].x + coords[n].x) / 2.0, LOOP_DISTANCE * Math.sin(newAngle) + (coords[m].y + coords[n].y) / 2.0, newAngle, coords, centers, angles, baseList, varnaCfg);
	    }
	  }
	};
	let determineRadius = function (nbHel, nbUnpaired, startRadius, bpdist, multidist) {
	  let xmin = bpdist / 2.0;
	  let xmax = 3.0 * multidist + 1;
	  let x = (xmin + xmax) / 2.0;
	  let y = 10000.0;
	  let ymin = -1000.0;
	  let ymax = 1000.0;
	  let numIt = 0;
	  let precision = 0.00001;
	  while (Math.abs(y) > precision && numIt < 10000) {
	    x = (xmin + xmax) / 2.0;
	    y = objFun(nbHel, nbUnpaired, x, bpdist, multidist);
	    ymin = objFun(nbHel, nbUnpaired, xmax, bpdist, multidist);
	    ymax = objFun(nbHel, nbUnpaired, xmin, bpdist, multidist);
	    if (ymin > 0.0) {
	      xmax = xmax + (xmax - xmin);
	    } else if (y <= 0.0 && ymax > 0.0) {
	      xmax = x;
	    } else if (y >= 0.0 && ymin < 0.0) {
	      xmin = x;
	    } else if (ymax < 0.0) {
	      xmin = Math.max(xmin - (x - xmin), Math.max(bpdist / 2.0, multidist / 2.0));
	      xmax = x;
	    }
	    numIt++;
	  }
	  return x;
	};
	function objFun(n1, n2, r, bpdist, multidist) {
	  return n1 * 2.0 * Math.asin(bpdist / (2.0 * r)) + n2 * 2.0 * Math.asin(multidist / (2.0 * r)) - 2.0 * Math.PI;
	}
	function correctHysteresis(angle) {
	  let hystAttr = [0.0, Math.PI / 4.0, Math.PI / 2.0, 3.0 * Math.PI / 4.0, Math.PI, 5.0 * Math.PI / 4.0, 3.0 * Math.PI / 2.0, 7.0 * Math.PI / 4.0];
	  let result = normalizeAngleSec(angle);
	  for (let i = 0; i < hystAttr.length; i++) {
	    let att = hystAttr[i];
	    if (Math.abs(normalizeAngle(att - result, -Math.PI)) < 0.15) {
	      result = att;
	    }
	  }
	  return result;
	}
	function normalizeAngleSec(angle) {
	  return normalizeAngle(angle, 0.0);
	}
	function normalizeAngle(angle, fromVal) {
	  let toVal = fromVal + 2.0 * Math.PI;
	  let result = angle;
	  while (result < fromVal) {
	    result += 2.0 * Math.PI;
	  }
	  while (result >= toVal) {
	    result -= 2.0 * Math.PI;
	  }
	  return result;
	}

	let Region = function () {
	  this._start1 = null;
	  this._end1 = null;
	  this._start2 = null;
	  this._end2 = null;
	};
	Region.prototype.getStart1 = function () {
	  return this._start1;
	};
	Region.prototype.setStart1 = function (start1) {
	  this._start1 = start1;
	};
	Region.prototype.getEnd1 = function () {
	  return this._end1;
	};
	Region.prototype.setEnd1 = function (end1) {
	  this._end1 = end1;
	};
	Region.prototype.getStart2 = function () {
	  return this._start2;
	};
	Region.prototype.setStart2 = function (start2) {
	  this._start2 = start2;
	};
	Region.prototype.getEnd2 = function () {
	  return this._end2;
	};
	Region.prototype.setEnd2 = function (end2) {
	  this._end2 = end2;
	};

	let Connection = function () {
	  this.loop = new Loop();
	  this.region = new Region();
	  // Start and end form the 1st base pair of the region.
	  this.start = null;
	  this.end = null;
	  this.xrad = null;
	  this.yrad = null;
	  this.angle = null;
	  // True if segment between this connection and the
	  // next must be extruded out of the circle
	  this.extruded = null;
	  // True if the extruded segment must be drawn long.
	  this.broken = null;
	  this._isNull = false;
	};
	Connection.prototype.isNull = function () {
	  return this._isNull;
	};
	Connection.prototype.setNull = function (isNull) {
	  this._isNull = isNull;
	};
	Connection.prototype.getLoop = function () {
	  return this.loop;
	};
	Connection.prototype.setLoop = function (loop) {
	  this.loop = loop;
	};
	Connection.prototype.getRegion = function () {
	  return this.region;
	};
	Connection.prototype.setRegion = function (region) {
	  this.region = region;
	};
	Connection.prototype.getStart = function () {
	  return this.start;
	};
	Connection.prototype.setStart = function (start) {
	  this.start = start;
	};
	Connection.prototype.getEnd = function () {
	  return this.end;
	};
	Connection.prototype.setEnd = function (end) {
	  this.end = end;
	};
	Connection.prototype.getXrad = function () {
	  return this.xrad;
	};
	Connection.prototype.setXrad = function (xrad) {
	  this.xrad = xrad;
	};
	Connection.prototype.getYrad = function () {
	  return this.yrad;
	};
	Connection.prototype.setYrad = function (yrad) {
	  this.yrad = yrad;
	};
	Connection.prototype.getAngle = function () {
	  return this.angle;
	};
	Connection.prototype.setAngle = function (angle) {
	  this.angle = angle;
	};
	Connection.prototype.isExtruded = function () {
	  return this.extruded;
	};
	Connection.prototype.setExtruded = function (extruded) {
	  this.extruded = extruded;
	};
	Connection.prototype.isBroken = function () {
	  return this.broken;
	};
	Connection.prototype.setBroken = function (broken) {
	  this.broken = broken;
	};

	let Loop = function () {
	  this.nconnection = null;
	  this.connections = [];
	  this._connections = [];
	  this.number = null;
	  this.depth = null;
	  this.mark = null;
	  this.x = null;
	  this.y = null;
	  this.radius = null;
	};
	Loop.prototype.getNconnection = function () {
	  return this.nconnection;
	};
	Loop.prototype.setNconnection = function (nconnection) {
	  this.nconnection = nconnection;
	};
	Loop.prototype.setConnection = function (i, c) {
	  if (c != null) {
	    this._connections[i] = c;
	  } else {
	    if (!this._connections[i]) {
	      this._connections[i] = new Connection();
	    }
	    this._connections[i].setNull(true);
	  }
	};
	Loop.prototype.getConnection = function (i) {
	  if (!this._connections[i]) {
	    this._connections[i] = new Connection();
	  }
	  var c = this._connections[i];
	  if (c.isNull()) {
	    return null;
	  } else {
	    return c;
	  }
	};
	Loop.prototype.addConnection = function (i, c) {
	  this._connections.push(c);
	};
	Loop.prototype.getNumber = function () {
	  return this.number;
	};
	Loop.prototype.setNumber = function (number) {
	  this.number = number;
	};
	Loop.prototype.getDepth = function () {
	  return this.depth;
	};
	Loop.prototype.setDepth = function (depth) {
	  this.depth = depth;
	};
	Loop.prototype.isMark = function () {
	  return this.mark;
	};
	Loop.prototype.setMark = function (mark) {
	  this.mark = mark;
	};
	Loop.prototype.getX = function () {
	  return this.x;
	};
	Loop.prototype.setX = function (x) {
	  this.x = x;
	};
	Loop.prototype.getY = function () {
	  return this.y;
	};
	Loop.prototype.setY = function (y) {
	  this.y = y;
	};
	Loop.prototype.getRadius = function () {
	  return this.radius;
	};
	Loop.prototype.setRadius = function (radius) {
	  this.radius = radius;
	};

	let Base = function () {
	  this.mate = null;
	  this.x = null;
	  this.y = null;
	  this.extracted = null;
	  this.region = new Region();
	};
	Base.prototype.getMate = function () {
	  return this.mate;
	};
	Base.prototype.setMate = function (mate) {
	  this.mate = mate;
	};
	Base.prototype.getX = function () {
	  return this.x;
	};
	Base.prototype.setX = function (x) {
	  this.x = x;
	};
	Base.prototype.getY = function () {
	  return this.y;
	};
	Base.prototype.setY = function (y) {
	  this.y = y;
	};
	Base.prototype.isExtracted = function () {
	  return this.extracted;
	};
	Base.prototype.setExtracted = function (extracted) {
	  this.extracted = extracted;
	};
	Base.prototype.getRegion = function () {
	  return this.region;
	};
	Base.prototype.setRegion = function (region) {
	  this.region = region;
	};

	let Radloop = function () {
	  this.radius = null;
	  this.loopnumber = null;
	  this.next = null;
	  this.prev = null;
	};
	Radloop.prototype.getRadius = function () {
	  return this.radius;
	};
	Radloop.prototype.setRadius = function (radius) {
	  this.radius = radius;
	};
	Radloop.prototype.getLoopnumber = function () {
	  return this.loopnumber;
	};
	Radloop.prototype.setLoopnumber = function (loopnumber) {
	  this.loopnumber = loopnumber;
	};
	Radloop.prototype.getNext = function () {
	  return this.next;
	};
	Radloop.prototype.setNext = function (next) {
	  this.next = next;
	};
	Radloop.prototype.getPrev = function () {
	  return this.prev;
	};
	Radloop.prototype.setPrev = function (prev) {
	  this.prev = prev;
	};

	let drawNAView = function (baseList, varnaCfg) {
	  //Calculates coordinates according to the NAView layout
	  var pairTable = [];
	  let spaceBetweenBases = varnaCfg.spaceBetweenBases;
	  for (let i = 0; i < baseList.length; i++) {
	    pairTable.push(baseList[i].getPartnerInd());
	  }
	  var naView = new NAView();
	  // TODO: understand how exactly NAView draw
	  naView.BACKBONE_DISTANCE = varnaCfg.bpDistance;
	  let xy = naView.naview_xy_coordinates(pairTable);

	  // Updating individual base positions
	  var coords = [];
	  for (let i = 0; i < baseList.length; i++) {
	    coords.push({
	      x: Math.round(xy.x[i] * spaceBetweenBases),
	      y: Math.round(xy.y[i] * spaceBetweenBases)
	    });
	  }
	  return coords;
	};

	// TODO: check if rlphead is really used
	let NAView = function () {
	  this.ANUM = 9999.0;
	  this.MAXITER = 500;
	  this.bases = [];
	  this.nbase = null;
	  this.nregion = null;
	  this.loop_count = null;
	  this.root = new Loop();
	  this.loops = [];
	  this.regions = [];
	  this.rlphead = new Radloop();
	  this.lencut = 0.8;
	  this.RADIUS_REDUCTION_FACTOR = 1.4;
	  this.angleinc = null;
	  this._h = null;
	  // private boolean noIterationFailureYet = true;
	  this.HELIX_FACTOR = 0.6;
	  this.BACKBONE_DISTANCE = 65;
	};
	NAView.prototype.naview_xy_coordinates = function (ptable2) {
	  var x = [];
	  var y = [];
	  if (ptable2.length === 0) {
	    return 0;
	  }
	  // 1 index ptable
	  var ptable = [];
	  ptable.push(ptable2.length);
	  for (let j = 0; j < ptable2.length; j++) {
	    ptable.push(ptable2[j] + 1);
	  }
	  this.nbase = ptable[0];
	  this.bases = [];
	  for (let index = 0; index < this.nbase + 1; index++) {
	    this.bases.push(new Base());
	  }
	  this.regions = [];
	  for (let index = 0; index < this.nbase + 1; index++) {
	    this.regions.push(new Region());
	  }
	  this.read_in_bases(ptable);
	  this.rlphead = null;
	  this.find_regions();
	  this.loop_count = 0;
	  this.loops = [];
	  for (let index = 0; index < this.nbase + 1; index++) {
	    this.loops.push(new Loop());
	  }
	  this.construct_loop(0);
	  this.find_central_loop();
	  this.traverse_loop(this.root, null);
	  for (let i = 0; i < this.nbase; i++) {
	    x.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getX());
	    y.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getY());
	  }
	  return {
	    nbase: this.nbase,
	    x: x,
	    y: y
	  };
	};

	/**
	 * Init with given ptable
	 * Add pseudo-basepair at exterior for open chain
	 * @param ptable - 1-index pair table
	 */
	NAView.prototype.read_in_bases = function read_in_bases(ptable) {
	  let npairs = 0;

	  // Set up an origin.
	  this.bases.push(new Base());
	  this.bases[0].setMate(0);
	  this.bases[0].setExtracted(false);
	  this.bases[0].setX(this.ANUM);
	  this.bases[0].setY(this.ANUM);
	  for (let i = 1; i <= this.nbase; i++) {
	    this.bases.push(new Base());
	    this.bases[i].setExtracted(false);
	    this.bases[i].setX(this.ANUM);
	    this.bases[i].setY(this.ANUM);
	    this.bases[i].setMate(ptable[i]);
	    if (ptable[i] > i) npairs++;
	  }
	  // must have at least 1 pair to avoid segfault
	  if (npairs == 0) {
	    this.bases[1].setMate(this.nbase);
	    this.bases[this.nbase].setMate(1);
	  }
	};

	/**
	 * Find all regions, basepairs delimited the loop
	 */
	NAView.prototype.find_regions = function find_regions() {
	  let mate = null;
	  let mark = [];
	  let nb1 = this.nbase + 1;
	  for (let i = 0; i < nb1; i++) {
	    mark.push(false);
	  }
	  this.nregion = 0;
	  for (let i = 0; i <= this.nbase; i++) {
	    if ((mate = this.bases[i].getMate()) != 0 && !mark[i]) {
	      this.regions[this.nregion].setStart1(i);
	      this.regions[this.nregion].setEnd2(mate);
	      mark[i] = true;
	      mark[mate] = true;
	      this.bases[i].setRegion(this.regions[this.nregion]);
	      this.bases[mate].setRegion(this.regions[this.nregion]);
	      // Search all unpaired bases within basepair (i, mate)
	      for (i++, mate--; i < mate && this.bases[i].getMate() == mate; i++, mate--) {
	        mark[mate] = true;
	        mark[i] = true;
	        this.bases[i].setRegion(this.regions[this.nregion]);
	        this.bases[mate].setRegion(this.regions[this.nregion]);
	      }
	      this.regions[this.nregion].setEnd1(--i);
	      this.regions[this.nregion].setStart2(mate + 1);
	      this.nregion++;
	    }
	  }
	};
	NAView.prototype.construct_loop = function construct_loop(ibase) {
	  let i = null;
	  let mate = null;
	  var retloop = new Loop();
	  let lp = new Loop();
	  retloop = this.loops[this.loop_count++];
	  retloop.setNconnection(0);
	  retloop.setDepth(0);
	  retloop.setNumber(this.loop_count);
	  retloop.setRadius(0.0);

	  // Not sure if this really do anything since rlphead is set to null at some point
	  for (let rlp = this.rlphead; rlp != null; rlp = rlp.getNext()) if (rlp.getLoopnumber() == this.loop_count) retloop.setRadius(rlp.getRadius());
	  i = ibase;
	  do {
	    if ((mate = this.bases[i].getMate()) != 0) {
	      let rp = this.bases[i].getRegion();
	      if (!this.bases[rp.getStart1()].isExtracted()) {
	        if (i == rp.getStart1()) {
	          this.bases[rp.getStart1()].setExtracted(true);
	          this.bases[rp.getEnd1()].setExtracted(true);
	          this.bases[rp.getStart2()].setExtracted(true);
	          this.bases[rp.getEnd2()].setExtracted(true);
	          lp = this.construct_loop(rp.getEnd1() < this.nbase ? rp.getEnd1() + 1 : 0);
	        } else if (i == rp.getStart2()) {
	          this.bases[rp.getStart2()].setExtracted(true);
	          this.bases[rp.getEnd2()].setExtracted(true);
	          this.bases[rp.getStart1()].setExtracted(true);
	          this.bases[rp.getEnd1()].setExtracted(true);
	          lp = this.construct_loop(rp.getEnd2() < this.nbase ? rp.getEnd2() + 1 : 0);
	        } else {
	          console.log("Something went terribly wrong ....");
	        }
	        retloop.setNconnection(retloop.getNconnection() + 1);
	        let cp = new Connection();
	        retloop.setConnection(retloop.getNconnection() - 1, cp);
	        retloop.setConnection(retloop.getNconnection(), null);
	        cp.setLoop(lp);
	        cp.setRegion(rp);
	        if (i == rp.getStart1()) {
	          cp.setStart(rp.getStart1());
	          cp.setEnd(rp.getEnd2());
	        } else {
	          cp.setStart(rp.getStart2());
	          cp.setEnd(rp.getEnd1());
	        }
	        cp.setExtruded(false);
	        cp.setBroken(false);
	        lp.setNconnection(lp.getNconnection() + 1);
	        cp = new Connection();
	        lp.setConnection(lp.getNconnection() - 1, cp);
	        lp.setConnection(lp.getNconnection(), null);
	        cp.setLoop(retloop);
	        cp.setRegion(rp);
	        if (i == rp.getStart1()) {
	          cp.setStart(rp.getStart2());
	          cp.setEnd(rp.getEnd1());
	        } else {
	          cp.setStart(rp.getStart1());
	          cp.setEnd(rp.getEnd2());
	        }
	        cp.setExtruded(false);
	        cp.setBroken(false);
	      }
	      i = mate;
	    }
	    if (++i > this.nbase) i = 0;
	  } while (i != ibase);
	  return retloop;
	};
	NAView.prototype.find_central_loop = function find_central_loop() {
	  var lp = new Loop();
	  let maxconn = 0;
	  let maxdepth = -1;
	  this.determine_depths();
	  for (let i = 0; i < this.loop_count; i++) {
	    lp = this.loops[i];
	    if (lp.getNconnection() > maxconn) {
	      maxdepth = lp.getDepth();
	      maxconn = lp.getNconnection();
	      this.root = lp;
	    } else if (lp.getDepth() > maxdepth && lp.getNconnection() == maxconn) {
	      maxdepth = lp.getDepth();
	      this.root = lp;
	    }
	  }
	};

	/*
	 * Set each loop depth
	 */
	NAView.prototype.determine_depths = function determine_depths() {
	  for (let i = 0; i < this.loop_count; i++) {
	    let lp = this.loops[i];
	    for (let j = 0; j < this.loop_count; j++) {
	      this.loops[j].setMark(false);
	    }
	    lp.setDepth(this.depth(lp));
	  }
	};

	/*
	 * Compute loop depth
	 */
	NAView.prototype.depth = function depth(lp) {
	  if (lp.getNconnection() <= 1) {
	    return 0;
	  }
	  if (lp.isMark()) {
	    return -1;
	  }
	  lp.setMark(true);
	  let count = 0;
	  let ret = 0;
	  for (let i = 0; lp.getConnection(i) != null; i++) {
	    let d = depth(lp.getConnection(i).getLoop());
	    if (d >= 0) {
	      if (++count == 1) {
	        ret = d;
	      } else if (ret > d) {
	        ret = d;
	      }
	    }
	  }
	  lp.setMark(false);
	  return ret + 1;
	};
	NAView.prototype.traverse_loop = function traverse_loop(lp, anchor_connection) {
	  var xs, ys, xe, ye, xn, yn, angleinc, r;
	  var radius, xc, yc, xo, yo, astart, aend, a;
	  var cp, cpnext, acp, cpprev;
	  var i, j, n, ic;
	  var da, maxang;
	  var count, icstart, icend, icmiddle, icroot;
	  var done, done_all_connections, rooted;
	  var sign;
	  var midx, midy, nrx, nry, mx, my, vx, vy, dotmv, nmidx, nmidy;
	  var icstart1, icup, icdown, icnext, direction;
	  var dan, dx, dy, rr;
	  var cpx, cpy, cpnextx, cpnexty, cnx, cny, rcn, rc, lnx, lny, rl, ac, acn, sx, sy, dcp;
	  var imaxloop = 0;
	  angleinc = 2 * Math.PI / (this.nbase + 1);
	  acp = null;
	  icroot = -1;
	  var indice = 0;
	  for (ic = 0; (cp = lp.getConnection(indice)) != null; indice++, ic++) {
	    xs = -Math.sin(angleinc * cp.getStart());
	    ys = Math.cos(angleinc * cp.getStart());
	    xe = -Math.sin(angleinc * cp.getEnd());
	    ye = Math.cos(angleinc * cp.getEnd());
	    xn = ye - ys;
	    yn = xs - xe;
	    r = Math.sqrt(xn * xn + yn * yn);
	    cp.setXrad(xn / r);
	    cp.setYrad(yn / r);
	    cp.setAngle(Math.atan2(yn, xn));
	    if (cp.getAngle() < 0.0) {
	      cp.setAngle(cp.getAngle() + 2 * Math.PI);
	    }
	    if (anchor_connection != null && anchor_connection.getRegion() == cp.getRegion()) {
	      acp = cp;
	      icroot = ic;
	    }
	  }
	  set_radius: while (true) {
	    this.determine_radius(lp, this.lencut);
	    radius = lp.getRadius() / this.RADIUS_REDUCTION_FACTOR;
	    if (anchor_connection == null) {
	      xc = yc = 0.0;
	    } else {
	      xo = (this.bases[acp.getStart()].getX() + this.bases[acp.getEnd()].getX()) / 2.0;
	      yo = (this.bases[acp.getStart()].getY() + this.bases[acp.getEnd()].getY()) / 2.0;
	      xc = xo - radius * acp.getXrad();
	      yc = yo - radius * acp.getYrad();
	    }

	    // The construction of the connectors will proceed in blocks of
	    // connected connectors, where a connected connector pairs means two
	    // connectors that are forced out of the drawn circle because they
	    // are too close together in angle.

	    // First, find the start of a block of connected connectors

	    if (icroot == -1) {
	      icstart = 0;
	    } else {
	      icstart = icroot;
	    }
	    cp = lp.getConnection(icstart);
	    count = 0;
	    done = false;
	    do {
	      j = icstart - 1;
	      if (j < 0) {
	        j = lp.getNconnection() - 1;
	      }
	      cpprev = lp.getConnection(j);
	      if (!this.connected_connection(cpprev, cp)) {
	        done = true;
	      } else {
	        icstart = j;
	        cp = cpprev;
	      }
	      if (++count > lp.getNconnection()) {
	        // Here everything is connected. Break on maximum angular
	        // separation between connections.
	        maxang = -1.0;
	        for (ic = 0; ic < lp.getNconnection(); ic++) {
	          j = ic + 1;
	          if (j >= lp.getNconnection()) {
	            j = 0;
	          }
	          cp = lp.getConnection(ic);
	          cpnext = lp.getConnection(j);
	          ac = cpnext.getAngle() - cp.getAngle();
	          if (ac < 0.0) {
	            ac += 2 * Math.PI;
	          }
	          if (ac > maxang) {
	            maxang = ac;
	            imaxloop = ic;
	          }
	        }
	        icend = imaxloop;
	        icstart = imaxloop + 1;
	        if (icstart >= lp.getNconnection()) {
	          icstart = 0;
	        }
	        cp = lp.getConnection(icend);
	        cp.setBroken(true);
	        done = true;
	      }
	    } while (!done);
	    done_all_connections = false;
	    icstart1 = icstart;
	    while (!done_all_connections) {
	      count = 0;
	      done = false;
	      icend = icstart;
	      rooted = false;
	      while (!done) {
	        cp = lp.getConnection(icend);
	        if (icend == icroot) {
	          rooted = true;
	        }
	        j = icend + 1;
	        if (j >= lp.getNconnection()) {
	          j = 0;
	        }
	        cpnext = lp.getConnection(j);
	        if (this.connected_connection(cp, cpnext)) {
	          if (++count >= lp.getNconnection()) {
	            break;
	          }
	          icend = j;
	        } else {
	          done = true;
	        }
	      }
	      icmiddle = this.find_ic_middle(icstart, icend, anchor_connection, acp, lp);
	      ic = icup = icdown = icmiddle;
	      done = false;
	      direction = 0;
	      while (!done) {
	        if (direction < 0) {
	          ic = icup;
	        } else if (direction == 0) {
	          ic = icmiddle;
	        } else {
	          ic = icdown;
	        }
	        if (ic >= 0) {
	          cp = lp.getConnection(ic);
	          if (anchor_connection == null || acp != cp) {
	            if (direction == 0) {
	              astart = cp.getAngle() - Math.asin(1.0 / 2.0 / radius);
	              aend = cp.getAngle() + Math.asin(1.0 / 2.0 / radius);
	              this.bases[cp.getStart()].setX(xc + radius * Math.cos(astart));
	              this.bases[cp.getStart()].setY(yc + radius * Math.sin(astart));
	              this.bases[cp.getEnd()].setX(xc + radius * Math.cos(aend));
	              this.bases[cp.getEnd()].setY(yc + radius * Math.sin(aend));
	            } else if (direction < 0) {
	              j = ic + 1;
	              if (j >= lp.getNconnection()) {
	                j = 0;
	              }
	              cp = lp.getConnection(ic);
	              cpnext = lp.getConnection(j);
	              cpx = cp.getXrad();
	              cpy = cp.getYrad();
	              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;
	              if (cp.getAngle() > cpnext.getAngle()) {
	                ac -= Math.PI;
	              }
	              cnx = Math.cos(ac);
	              cny = Math.sin(ac);
	              lnx = cny;
	              lny = -cnx;
	              da = cpnext.getAngle() - cp.getAngle();
	              if (da < 0.0) {
	                da += 2 * Math.PI;
	              }
	              if (cp.isExtruded()) {
	                if (da <= Math.PI / 2) {
	                  rl = 2.0;
	                } else {
	                  rl = 1.5;
	                }
	              } else {
	                rl = 1.0;
	              }
	              this.bases[cp.getEnd()].setX(this.bases[cpnext.getStart()].getX() + rl * lnx);
	              this.bases[cp.getEnd()].setY(this.bases[cpnext.getStart()].getY() + rl * lny);
	              this.bases[cp.getStart()].setX(this.bases[cp.getEnd()].getX() + cpy);
	              this.bases[cp.getStart()].setY(this.bases[cp.getEnd()].getY() - cpx);
	            } else {
	              j = ic - 1;
	              if (j < 0) {
	                j = lp.getNconnection() - 1;
	              }
	              cp = lp.getConnection(j);
	              cpnext = lp.getConnection(ic);
	              cpnextx = cpnext.getXrad();
	              cpnexty = cpnext.getYrad();
	              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;
	              if (cp.getAngle() > cpnext.getAngle()) {
	                ac -= Math.PI;
	              }
	              cnx = Math.cos(ac);
	              cny = Math.sin(ac);
	              lnx = -cny;
	              lny = cnx;
	              da = cpnext.getAngle() - cp.getAngle();
	              if (da < 0.0) {
	                da += 2 * Math.PI;
	              }
	              if (cp.isExtruded()) {
	                if (da <= Math.PI / 2) {
	                  rl = 2.0;
	                } else {
	                  rl = 1.5;
	                }
	              } else {
	                rl = 1.0;
	              }
	              this.bases[cpnext.getStart()].setX(this.bases[cp.getEnd()].getX() + rl * lnx);
	              this.bases[cpnext.getStart()].setY(this.bases[cp.getEnd()].getY() + rl * lny);
	              this.bases[cpnext.getEnd()].setX(this.bases[cpnext.getStart()].getX() - cpnexty);
	              this.bases[cpnext.getEnd()].setY(this.bases[cpnext.getStart()].getY() + cpnextx);
	            }
	          }
	        }
	        if (direction < 0) {
	          if (icdown == icend) {
	            icdown = -1;
	          } else if (icdown >= 0) {
	            if (++icdown >= lp.getNconnection()) {
	              icdown = 0;
	            }
	          }
	          direction = 1;
	        } else {
	          if (icup == icstart) {
	            icup = -1;
	          } else if (icup >= 0) {
	            if (--icup < 0) {
	              icup = lp.getNconnection() - 1;
	            }
	          }
	          direction = -1;
	        }
	        done = icup == -1 && icdown == -1;
	      }
	      icnext = icend + 1;
	      if (icnext >= lp.getNconnection()) {
	        icnext = 0;
	      }
	      if (icend != icstart && !(icstart == icstart1 && icnext == icstart1)) {
	        // Move the bases just constructed (or the radius) so that
	        // the bisector of the end points is radius distance away
	        // from the loop center.

	        cp = lp.getConnection(icstart);
	        cpnext = lp.getConnection(icend);
	        dx = this.bases[cpnext.getEnd()].getX() - this.bases[cp.getStart()].getX();
	        dy = this.bases[cpnext.getEnd()].getY() - this.bases[cp.getStart()].getY();
	        midx = this.bases[cp.getStart()].getX() + dx / 2.0;
	        midy = this.bases[cp.getStart()].getY() + dy / 2.0;
	        rr = Math.sqrt(dx * dx + dy * dy);
	        mx = dx / rr;
	        my = dy / rr;
	        vx = xc - midx;
	        vy = yc - midy;
	        rr = Math.sqrt(dx * dx + dy * dy);
	        vx /= rr;
	        vy /= rr;
	        dotmv = vx * mx + vy * my;
	        nrx = dotmv * mx - vx;
	        nry = dotmv * my - vy;
	        rr = Math.sqrt(nrx * nrx + nry * nry);
	        nrx /= rr;
	        nry /= rr;

	        // Determine which side of the bisector the center should
	        // be.

	        dx = this.bases[cp.getStart()].getX() - xc;
	        dy = this.bases[cp.getStart()].getY() - yc;
	        ac = Math.atan2(dy, dx);
	        if (ac < 0.0) {
	          ac += 2 * Math.PI;
	        }
	        dx = this.bases[cpnext.getEnd()].getX() - xc;
	        dy = this.bases[cpnext.getEnd()].getY() - yc;
	        acn = Math.atan2(dy, dx);
	        if (acn < 0.0) {
	          acn += 2 * Math.PI;
	        }
	        if (acn < ac) {
	          acn += 2 * Math.PI;
	        }
	        if (acn - ac > Math.PI) {
	          sign = -1;
	        } else {
	          sign = 1;
	        }
	        nmidx = xc + sign * radius * nrx;
	        nmidy = yc + sign * radius * nry;
	        if (rooted) {
	          xc -= nmidx - midx;
	          yc -= nmidy - midy;
	        } else {
	          for (ic = icstart;;) {
	            cp = lp.getConnection(ic);
	            i = cp.getStart();
	            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);
	            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);
	            i = cp.getEnd();
	            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);
	            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);
	            if (ic == icend) {
	              break;
	            }
	            if (++ic >= lp.getNconnection()) {
	              ic = 0;
	            }
	          }
	        }
	      }
	      icstart = icnext;
	      done_all_connections = icstart == icstart1;
	    }
	    for (ic = 0; ic < lp.getNconnection(); ic++) {
	      cp = lp.getConnection(ic);
	      j = ic + 1;
	      if (j >= lp.getNconnection()) {
	        j = 0;
	      }
	      cpnext = lp.getConnection(j);
	      dx = this.bases[cp.getEnd()].getX() - xc;
	      dy = this.bases[cp.getEnd()].getY() - yc;
	      rc = Math.sqrt(dx * dx + dy * dy);
	      ac = Math.atan2(dy, dx);
	      if (ac < 0.0) {
	        ac += 2 * Math.PI;
	      }
	      dx = this.bases[cpnext.getStart()].getX() - xc;
	      dy = this.bases[cpnext.getStart()].getY() - yc;
	      rcn = Math.sqrt(dx * dx + dy * dy);
	      acn = Math.atan2(dy, dx);
	      if (acn < 0.0) {
	        acn += 2 * Math.PI;
	      }
	      if (acn < ac) {
	        acn += 2 * Math.PI;
	      }
	      dan = acn - ac;
	      dcp = cpnext.getAngle() - cp.getAngle();
	      if (dcp <= 0.0) {
	        dcp += 2 * Math.PI;
	      }
	      if (Math.abs(dan - dcp) > Math.PI) {
	        if (cp.isExtruded()) {
	          console.log("Warning from traverse_loop. Loop " + lp.getNumber() + " has crossed regions\n");
	        } else if (cpnext.getStart() - cp.getEnd() != 1) {
	          cp.setExtruded(true);
	          continue set_radius; // remplacement du goto
	        }
	      }
	      if (cp.isExtruded()) {
	        this.construct_extruded_segment(cp, cpnext);
	      } else {
	        n = cpnext.getStart() - cp.getEnd();
	        if (n < 0) {
	          n += this.nbase + 1;
	        }
	        angleinc = dan / n;
	        for (j = 1; j < n; j++) {
	          i = cp.getEnd() + j;
	          if (i > this.nbase) {
	            i -= this.nbase + 1;
	          }
	          a = ac + j * angleinc;
	          rr = rc + (rcn - rc) * (a - ac) / dan;
	          this.bases[i].setX(xc + rr * Math.cos(a));
	          this.bases[i].setY(yc + rr * Math.sin(a));
	        }
	      }
	    }
	    break;
	  }
	  for (ic = 0; ic < lp.getNconnection(); ic++) {
	    if (icroot != ic) {
	      cp = lp.getConnection(ic);
	      //IM HERE
	      this.generate_region(cp);
	      this.traverse_loop(cp.getLoop(), cp);
	    }
	  }
	  n = 0;
	  sx = 0.0;
	  sy = 0.0;
	  for (ic = 0; ic < lp.getNconnection(); ic++) {
	    j = ic + 1;
	    if (j >= lp.getNconnection()) {
	      j = 0;
	    }
	    cp = lp.getConnection(ic);
	    cpnext = lp.getConnection(j);
	    n += 2;
	    sx += this.bases[cp.getStart()].getX() + this.bases[cp.getEnd()].getX();
	    sy += this.bases[cp.getStart()].getY() + this.bases[cp.getEnd()].getY();
	    if (!cp.isExtruded()) {
	      for (j = cp.getEnd() + 1; j != cpnext.getStart(); j++) {
	        if (j > this.nbase) {
	          j -= this.nbase + 1;
	        }
	        n++;
	        sx += this.bases[j].getX();
	        sy += this.bases[j].getY();
	      }
	    }
	  }
	  lp.setX(sx / n);
	  lp.setY(sy / n);
	};
	NAView.prototype.determine_radius = function determine_radius(lp, lencut) {
	  var mindit, ci, dt, sumn, sumd, radius, dit;
	  var i,
	    j,
	    end,
	    start,
	    imindit = 0;
	  var cp = new Connection(),
	    cpnext = new Connection();
	  var rt2_2 = 0.7071068;
	  do {
	    mindit = 1.0e10;
	    for (sumd = 0.0, sumn = 0.0, i = 0; i < lp.getNconnection(); i++) {
	      cp = lp.getConnection(i);
	      j = i + 1;
	      if (j >= lp.getNconnection()) {
	        j = 0;
	      }
	      cpnext = lp.getConnection(j);
	      end = cp.getEnd();
	      start = cpnext.getStart();
	      if (start < end) {
	        start += this.nbase + 1;
	      }
	      dt = cpnext.getAngle() - cp.getAngle();
	      if (dt <= 0.0) {
	        dt += 2 * Math.PI;
	      }
	      if (!cp.isExtruded()) {
	        ci = start - end;
	      } else {
	        if (dt <= Math.PI / 2) {
	          ci = 2.0;
	        } else {
	          ci = 1.5;
	        }
	      }
	      sumn += dt * (1.0 / ci + 1.0);
	      sumd += dt * dt / ci;
	      dit = dt / ci;
	      if (dit < mindit && !cp.isExtruded() && ci > 1.0) {
	        mindit = dit;
	        imindit = i;
	      }
	    }
	    radius = sumn / sumd;
	    if (radius < rt2_2) {
	      radius = rt2_2;
	    }
	    if (mindit * radius < lencut) {
	      lp.getConnection(imindit).setExtruded(true);
	    }
	  } while (mindit * radius < lencut);
	  if (lp.getRadius() > 0.0) {
	    radius = lp.getRadius();
	  } else {
	    lp.setRadius(radius);
	  }
	};
	NAView.prototype.find_ic_middle = function find_ic_middle(icstart, icend, anchor_connection, acp, lp) {
	  var count, ret, ic, i;
	  var done;
	  count = 0;
	  ret = -1;
	  ic = icstart;
	  done = false;
	  while (!done) {
	    if (count++ > lp.getNconnection() * 2) {
	      console.log("Infinite loop in 'find_ic_middle'");
	    }
	    if (anchor_connection != null && lp.getConnection(ic) == acp) {
	      ret = ic;
	    }
	    done = ic == icend;
	    if (++ic >= lp.getNconnection()) {
	      ic = 0;
	    }
	  }
	  if (ret == -1) {
	    for (i = 1, ic = icstart; i < (count + 1) / 2; i++) {
	      if (++ic >= lp.getNconnection()) ic = 0;
	    }
	    ret = ic;
	  }
	  return ret;
	};
	NAView.prototype.construct_extruded_segment = function construct_extruded_segment(cp, cpnext) {
	  var astart, aend1, aend2, aave, dx, dy, a1, a2, ac, rr, da, dac;
	  var start, end, n, nstart, nend;
	  var collision;
	  astart = cp.getAngle();
	  aend2 = aend1 = cpnext.getAngle();
	  if (aend2 < astart) {
	    aend2 += 2 * Math.PI;
	  }
	  aave = (astart + aend2) / 2.0;
	  start = cp.getEnd();
	  end = cpnext.getStart();
	  n = end - start;
	  if (n < 0) {
	    n += this.nbase + 1;
	  }
	  da = cpnext.getAngle() - cp.getAngle();
	  if (da < 0.0) {
	    da += 2 * Math.PI;
	  }
	  if (n == 2) {
	    this.construct_circle_segment(start, end);
	  } else {
	    dx = this.bases[end].getX() - this.bases[start].getX();
	    dy = this.bases[end].getY() - this.bases[start].getY();
	    rr = Math.sqrt(dx * dx + dy * dy);
	    dx /= rr;
	    dy /= rr;
	    if (rr >= 1.5 && da <= Math.PI / 2) {
	      nstart = start + 1;
	      if (nstart > this.nbase) {
	        nstart -= this.nbase + 1;
	      }
	      nend = end - 1;
	      if (nend < 0) {
	        nend += this.nbase + 1;
	      }
	      this.bases[nstart].setX(this.bases[start].getX() + 0.5 * dx);
	      this.bases[nstart].setY(this.bases[start].getY() + 0.5 * dy);
	      this.bases[nend].setX(this.bases[end].getX() - 0.5 * dx);
	      this.bases[nend].setY(this.bases[end].getY() - 0.5 * dy);
	      start = nstart;
	      end = nend;
	    }
	    do {
	      collision = false;
	      this.construct_circle_segment(start, end);
	      nstart = start + 1;
	      if (nstart > this.nbase) {
	        nstart -= this.nbase + 1;
	      }
	      dx = this.bases[nstart].getX() - this.bases[start].getX();
	      dy = this.bases[nstart].getY() - this.bases[start].getY();
	      a1 = Math.atan2(dy, dx);
	      if (a1 < 0.0) {
	        a1 += 2 * Math.PI;
	      }
	      dac = a1 - astart;
	      if (dac < 0.0) {
	        dac += 2 * Math.PI;
	      }
	      if (dac > Math.PI) {
	        collision = true;
	      }
	      nend = end - 1;
	      if (nend < 0) {
	        nend += this.nbase + 1;
	      }
	      dx = this.bases[nend].getX() - this.bases[end].getX();
	      dy = this.bases[nend].getY() - this.bases[end].getY();
	      a2 = Math.atan2(dy, dx);
	      if (a2 < 0.0) {
	        a2 += 2 * Math.PI;
	      }
	      dac = aend1 - a2;
	      if (dac < 0.0) {
	        dac += 2 * Math.PI;
	      }
	      if (dac > Math.PI) {
	        collision = true;
	      }
	      if (collision) {
	        ac = this.minf2(aave, astart + 0.5);
	        this.bases[nstart].setX(this.bases[start].getX() + Math.cos(ac));
	        this.bases[nstart].setY(this.bases[start].getY() + Math.sin(ac));
	        start = nstart;
	        ac = this.maxf2(aave, aend2 - 0.5);
	        this.bases[nend].setX(this.bases[end].getX() + Math.cos(ac));
	        this.bases[nend].setY(this.bases[end].getY() + Math.sin(ac));
	        end = nend;
	        n -= 2;
	      }
	    } while (collision && n > 1);
	  }
	};
	NAView.prototype.construct_circle_segment = function construct_circle_segment(start, end) {
	  var dx, dy, rr, midx, midy, xn, yn, nrx, nry, mx, my, a;
	  var l, j, i;
	  dx = this.bases[end].getX() - this.bases[start].getX();
	  dy = this.bases[end].getY() - this.bases[start].getY();
	  rr = Math.sqrt(dx * dx + dy * dy);
	  l = end - start;
	  if (l < 0) {
	    l += this.nbase + 1;
	  }
	  if (rr >= l) {
	    dx /= rr;
	    dy /= rr;
	    for (j = 1; j < l; j++) {
	      i = start + j;
	      if (i > this.nbase) {
	        i -= this.nbase + 1;
	      }
	      this.bases[i].setX(this.bases[start].getX() + dx * j / l);
	      this.bases[i].setY(this.bases[start].getY() + dy * j / l);
	    }
	  } else {
	    this.find_center_for_arc(l - 1, rr);
	    dx /= rr;
	    dy /= rr;
	    midx = this.bases[start].getX() + dx * rr / 2.0;
	    midy = this.bases[start].getY() + dy * rr / 2.0;
	    xn = dy;
	    yn = -dx;
	    nrx = midx + this._h * xn;
	    nry = midy + this._h * yn;
	    mx = this.bases[start].getX() - nrx;
	    my = this.bases[start].getY() - nry;
	    rr = Math.sqrt(mx * mx + my * my);
	    a = Math.atan2(my, mx);
	    for (j = 1; j < l; j++) {
	      i = start + j;
	      if (i > this.nbase) {
	        i -= this.nbase + 1;
	      }
	      this.bases[i].setX(nrx + rr * Math.cos(a + j * this.angleinc));
	      this.bases[i].setY(nry + rr * Math.sin(a + j * this.angleinc));
	    }
	  }
	};
	NAView.prototype.find_center_for_arc = function find_center_for_arc(n, b) {
	  var h, hhi, hlow, r, disc, theta, e, phi;
	  var iter;
	  hhi = (n + 1.0) / Math.PI;
	  // changed to prevent div by zero if (ih)
	  hlow = -hhi - b / (n + 1.000001 - b);
	  if (b < 1) {
	    // otherwise we might fail below (ih)
	    hlow = 0;
	  }
	  iter = 0;
	  do {
	    h = (hhi + hlow) / 2.0;
	    r = Math.sqrt(h * h + b * b / 4.0);
	    disc = 1.0 - 0.5 / (r * r);
	    if (Math.abs(disc) > 1.0) {
	      console.log("Unexpected large magnitude discriminant = " + disc + " " + r);
	    }
	    theta = Math.acos(disc);
	    phi = Math.acos(h / r);
	    e = theta * (n + 1) + 2 * phi - 2 * Math.PI;
	    if (e > 0.0) {
	      hlow = h;
	    } else {
	      hhi = h;
	    }
	  } while (Math.abs(e) > 0.0001 && ++iter < this.MAXITER);
	  if (iter >= this.MAXITER) {
	    if (noIterationFailureYet) {
	      console.log("Iteration failed in find_center_for_arc");
	      noIterationFailureYet = false;
	    }
	    h = 0.0;
	    theta = 0.0;
	  }
	  this._h = h;
	  this.angleinc = theta;
	};
	NAView.prototype.generate_region = function generate_region(cp) {
	  var l, start, end, i, mate;
	  var rp;
	  rp = cp.getRegion();
	  l = 0;
	  if (cp.getStart() == rp.getStart1()) {
	    start = rp.getStart1();
	    end = rp.getEnd1();
	  } else {
	    start = rp.getStart2();
	    end = rp.getEnd2();
	  }
	  if (this.bases[cp.getStart()].getX() > this.ANUM - 100.0 || this.bases[cp.getEnd()].getX() > this.ANUM - 100.0) {
	    console.log("Bad region passed to generate_region. Coordinates not defined.");
	  }
	  for (i = start + 1; i <= end; i++) {
	    l++;
	    this.bases[i].setX(this.bases[cp.getStart()].getX() + this.HELIX_FACTOR * l * cp.getXrad());
	    this.bases[i].setY(this.bases[cp.getStart()].getY() + this.HELIX_FACTOR * l * cp.getYrad());
	    mate = this.bases[i].getMate();
	    this.bases[mate].setX(this.bases[cp.getEnd()].getX() + this.HELIX_FACTOR * l * cp.getXrad());
	    this.bases[mate].setY(this.bases[cp.getEnd()].getY() + this.HELIX_FACTOR * l * cp.getYrad());
	  }
	};
	NAView.prototype.minf2 = function minf2(x1, x2) {
	  return x1 < x2 ? x1 : x2;
	};
	NAView.prototype.maxf2 = function maxf2(x1, x2) {
	  return x1 > x2 ? x1 : x2;
	};
	NAView.prototype.connected_connection = function connected_connection(cp, cpnext) {
	  if (cp.isExtruded()) {
	    return true;
	  } else if (cp.getEnd() + 1 == cpnext.getStart()) {
	    return true;
	  } else {
	    return false;
	  }
	};

	// Line layout

	let drawLine = function (baseList, varnaCfg) {
	  var coords = [];
	  let spaceBetweenBases = varnaCfg.spaceBetweenBases;
	  for (let i = 0; i < baseList.length; i++) {
	    coords[i] = {
	      x: i * spaceBetweenBases * 20,
	      y: 0
	    };
	  }
	  return coords;
	};

	let drawCircle = function (baseList, varnaCfg) {
	  var coords = [];
	  let BASE_RADIUS = 10;
	  let spaceBetweenBases = varnaCfg.spaceBetweenBases;
	  let l = baseList.length;
	  let radius = Math.round(3 * (l + 1) * BASE_RADIUS) / (2 * Math.PI) * spaceBetweenBases;
	  for (let i = 0; i < l; i++) {
	    let angle = -(-(i + 1) * 2 * Math.PI) / (l + 1 - Math.PI / 2);
	    coords[i] = {
	      x: radius * Math.cos(angle),
	      y: radius * Math.sin(angle)
	    };
	  }
	  return coords;
	};

	/*--------------------------------------------------------------------------*/
	/*---   create, copy, and free config   ------------------------------------*/
	/*--------------------------------------------------------------------------*/

	const MATH_TWO_PI$4 = 2 * Math.PI;
	const epsilon0 = 1.0;
	const epsilon3$3 = 1e-3;
	/**
	 * @brief cfgCreateConfig
	 *      - constructor-like method for creating a config
	 * @param radius
	 *      - radius used for drawing that loop
	 * @return
	 *      - an initialized config struct
	 */
	function cfgCreateConfig(radius) {
	  var cfg = {};
	  cfg.radius = radius;
	  cfg.minRadius = radius;
	  cfg.defaultRadius = radius;
	  cfg.cfgArcs = null;
	  cfg.numberOfArcs = 0;
	  return cfg;
	}

	/**
	 * @brief cfgCreateConfigArc
	 *      - constructor-like method for adding a new config entry to a given config
	 * @param angle
	 *      - angle (radiant) that can be found between stems 'from' and 'to' later on
	 * @param numberOfArcSegments
	 *      - number of arc segments between stems 'from' and 'to'
	 * @return
	 *      - an initialized configArc struct
	 */
	function cfgCreateConfigArc(angle, numberOfArcSegments) {
	  var newConfigArc = {};
	  newConfigArc.numberOfArcSegments = numberOfArcSegments;
	  newConfigArc.arcAngle = angle;
	  return newConfigArc;
	}
	function cfgCloneConfig(cfg) {
	  var clonedCfg = {};
	  clonedCfg.radius = cfg.radius;
	  clonedCfg.minRadius = cfg.minRadius;
	  clonedCfg.defaultRadius = cfg.defaultRadius;
	  clonedCfg.numberOfArcs = cfg.numberOfArcs;
	  var numberOfArcs = cfg.numberOfArcs;
	  clonedCfg.cfgArcs = new Array(numberOfArcs);
	  for (let currentArc = 0; currentArc < numberOfArcs; ++currentArc) {
	    clonedCfg.cfgArcs[currentArc] = {};
	    clonedCfg.cfgArcs[currentArc].numberOfArcSegments = cfg.cfgArcs[currentArc].numberOfArcSegments;
	    clonedCfg.cfgArcs[currentArc].arcAngle = cfg.cfgArcs[currentArc].arcAngle;
	  }
	  return clonedCfg;
	}

	/*--------------------------------------------------------------------------*/
	/*---   access to config elements   ----------------------------------------*/
	/*--------------------------------------------------------------------------*/

	function getArcAngle(cfg, currentArc) {
	  return cfg.cfgArcs[currentArc].arcAngle;
	}

	/*--------------------------------------------------------------------------*/
	/*---   radius computation   -----------------------------------------------*/
	/*--------------------------------------------------------------------------*/

	/**
	 * Approximate the radius of a circle required to draw m base pairs
	 * with a distance of 'a' to each other, and n (unpaired) consecutive
	 * nucleotides with a distance of b over a specified angle.
	 *
	 * Uses a Newton iteration to approximate solution
	 *
	 * @param a paired
	 * @param b unpaired
	 * @param m #stems
	 * @param n #backbones
	 * @param angle angle
	 */
	function approximateConfigArcRadius(a, b, m, n, angle) {
	  const MAX_ITERATIONS = 1000;

	  /// calculation:
	  ///
	  /// be s the length of a line at the circle (paired or unpaired / a or b)
	  /// the angle over such a single line be alpha
	  ///     alpha = angle / ( m + n )
	  ///
	  /// for such a single line the following equation holds (where r is the radius of the circle)
	  ///     sin( alpha / 2 ) = ( s / 2 ) / r
	  ///     r = ( s / 2 ) / sin( alpha / 2 )
	  ///     r = ( s / 2 ) / sin( ( angle / ( m + n ) ) / 2 )
	  ///
	  /// now we replace s with a or b to get the upper or lower bound for the radius interval
	  var lowerBound = b / 2 / Math.sin(angle / (m + n) / 2);
	  var upperBound = a / 2 / Math.sin(angle / (m + n) / 2);
	  var rtn = 0.5 * (lowerBound + upperBound);

	  /// there is a minimum valid radius!
	  /// if rtn is smaller than 0.5*a or 0.5*b than the result will become nan
	  rtn = Math.max(rtn, 0.5 * a);
	  rtn = Math.max(rtn, 0.5 * b);
	  var j = 0;
	  for (j = 0; j < MAX_ITERATIONS; j++) {
	    var dx = 2 * (m * Math.asin(a / (2 * rtn)) + n * Math.asin(b / (2 * rtn)) - angle / 2) / -(a * m / (rtn * Math.sqrt(rtn * rtn - a * a / 4)) + b * n / (rtn * Math.sqrt(rtn * rtn - b * b / 4)));
	    rtn -= dx;
	    if (Math.abs(dx) < epsilon3$3) {
	      break;
	    }
	  }
	  if (rtn < lowerBound) {
	    console.log("[WARNING] [GET RADIUS] result too small: %12.8lf < %12.8lf -> reset\n", rtn, lowerBound);
	    rtn = lowerBound;
	  } else if (rtn > upperBound) {
	    console.log("[WARNING] [GET RADIUS] result too large: %12.8lf > %12.8lf -> reset\n", rtn, upperBound);
	    rtn = upperBound;
	  }
	  if (j >= MAX_ITERATIONS) {
	    console.log("[WARNING] [GET RADIUS] iterarion limit reached (%d)\n", MAX_ITERATIONS);
	  }
	  return rtn;
	}

	/**
	*/
	function approximateConfigRadius(cfg, unpaired, paired) {
	  // calculate a fitting radius for each arc without compressing or stretching arc segments
	  // return the maximum of those values as the radius fitting for the loop
	  var r = 0;
	  for (var currentArc = 0; currentArc < cfg.numberOfArcs; ++currentArc) {
	    var stems = 1;
	    var numberOfArcSegments = cfg.cfgArcs[currentArc].numberOfArcSegments;
	    var angle = getArcAngle(cfg, currentArc);
	    var tempR = approximateConfigArcRadius(paired, unpaired, stems, numberOfArcSegments, angle);
	    if (tempR > r) {
	      r = tempR;
	    }
	  }
	  return r;
	}

	//--------------------------------------------------------------------------------------------------------------------------

	/**
	 * @brief cfgGenerateDefaultConfig
	 *      - generates a config that resembles a drawing without any
	 *        constraints given by config input for the given loop
	 * @param ptable
	 *      - the RNA's pairing information
	 * @param start
	 *      - index of the loop's first base
	 * @param unpaired
	 *      - default length of backbone lines
	 * @param paired
	 *      - default distance between paired bases
	 * @param radius
	 *      - radius for the given loop
	 * @return
	 *      - complete config for that loop
	 */
	function cfgGenerateDefaultConfig(ptable, start, unpaired, paired, radius) {
	  /// create loop configuration
	  var cfg = cfgCreateConfig(radius);

	  /// compute angles for paired and unpaired bases
	  var anglePaired = 2 * Math.asin(paired / (2 * radius)); // angle over paired
	  var angleUnpaired = 2 * Math.asin(unpaired / (2 * radius)); // angle over unpaired

	  /// initialize values for first arc
	  var arcUnpaired = 0;
	  var angleArc; // alpha + numBackbones * beta

	  /// pointer to first arc
	  //configArc **currentArc = NULL;
	  //currentArc = &(cfg->first);

	  /// start with first base after parent stem
	  var i = start + 1;
	  while (i <= ptable[start]) {
	    /// until last base at parent stem
	    if (ptable[i] == 0) {
	      /// arc
	      i++;
	    } else {
	      /// increment number of arcs
	      ++cfg.numberOfArcs;
	      if (i != ptable[start]) {
	        /// skip subtree at stem
	        i = ptable[i] + 1;
	      } else {
	        /// parent stem -> finish
	        break;
	      }
	    }
	  }
	  cfg.cfgArcs = new Array(cfg.numberOfArcs);

	  /// start with first base after parent stem
	  i = start + 1;
	  var currentArc = 0;
	  var numberOfArcSegments = 0;
	  while (i <= ptable[start]) {
	    /// until last base at parent stem
	    if (ptable[i] == 0) {
	      /// arc
	      arcUnpaired++;
	      i++;
	    } else {
	      /// stem: create arc
	      angleArc = anglePaired + (arcUnpaired + 1) * angleUnpaired;
	      numberOfArcSegments = arcUnpaired + 1;
	      cfg.cfgArcs[currentArc] = cfgCreateConfigArc(angleArc, numberOfArcSegments);
	      ++currentArc;
	      if (i != ptable[start]) {
	        /// initialize values for next arc
	        arcUnpaired = 0;

	        /// skip subtree at stem
	        i = ptable[i] + 1;
	      } else {
	        /// parent stem -> finish
	        break;
	      }
	    }
	  }
	  return cfg;
	}
	function cfgGenHandleStem(baseNr, ptable, baseInformation, unpaired, paired) {
	  var continueStem = 1;
	  var i = baseNr;
	  while (continueStem) {
	    if (ptable[i + 1] == ptable[i] - 1) {
	      i++;
	    } else {
	      // found unpaired above stem
	      cfgGenHandleLoop(i, ptable, baseInformation, unpaired, paired);
	      continueStem = 0;
	    }
	  }
	}

	/**
	 * @brief cfgGenHandleLoop
	 *      - recursively iterates through the RNA and generates default configurations.
	 *        Alternates with corresponding handleStem method.
	 * @param baseNr
	 *      - index of the loop's first base
	 * @param ptable
	 *      - the RNA's pairing information
	 * @param baseInformation
	 *      - array of tBaseInformation annotations (to save config)
	 */
	function cfgGenHandleLoop(baseNr, ptable, baseInformation, unpaired, paired) {
	  var start = baseNr;
	  var end = ptable[baseNr];
	  var unpairedCount = 0;
	  var stemCount = 1;

	  // count stems and unpaired bases to use for bulge detection
	  var i = start + 1;
	  while (i < end) {
	    if (ptable[i] == 0) {
	      // unpaired base
	      unpairedCount++;
	      i++;
	    } else if (ptable[i] > i) {
	      // found new stem
	      stemCount++;
	      i = ptable[i];
	    } else {
	      // returned from stem
	      i++;
	    }
	  }
	  var isBulge = stemCount == 2 && unpairedCount == 1;
	  if (isBulge) {
	    if (ptable[start + 1] == 0) {
	      // unpaired on left strand
	      cfgGenHandleStem(start + 2, ptable, baseInformation, unpaired, paired);
	    } else {
	      // unpaired on the right strand
	      cfgGenHandleStem(start + 1, ptable, baseInformation, unpaired, paired);
	    }
	  } else {
	    var m = stemCount; // compare RNApuzzler.c -> f_handle_loop
	    var n = unpairedCount + stemCount; // compare RNApuzzler.c -> f_handle_loop
	    var defaultRadius = approximateConfigArcRadius(paired, unpaired, m, n, MATH_TWO_PI$4);
	    var cfgLoop = cfgGenerateDefaultConfig(ptable, start, unpaired, paired, defaultRadius);
	    baseInformation[start].config = cfgLoop;
	    var i = start + 1;
	    while (i < end) {
	      if (ptable[i] == 0) {
	        // unpaired base
	        i++;
	      } else if (ptable[i] > i) {
	        // found new stem
	        cfgGenHandleStem(i, ptable, baseInformation, unpaired, paired);
	        i = ptable[i];
	      } else {
	        // returned from stem
	        i++;
	      }
	    }
	  }
	}

	// documentation at header file
	function cfgGenerateConfig(ptable, baseInformation, unpaired, paired) {
	  var length = ptable[0];
	  var i = 1;
	  while (i < length) {
	    if (ptable[i] == 0) {
	      // unpaired at exterior loop
	      i++;
	    } else if (ptable[i] > i) {
	      // found stem
	      cfgGenHandleStem(i, ptable, baseInformation, unpaired, paired);
	      i = ptable[i];
	    } else {
	      // returned from stem
	      i++;
	    }
	  }
	}

	/*--------------------------------------------------------------------------*/
	/*---   set and update config elements   -----------------------------------*/
	/*--------------------------------------------------------------------------*/

	// documentation at header file
	/**
	 * @brief cfgSetRadius
	 *      - changes the value of radius for a config to the given value
	 * @param config
	 *      - config that is being altered
	 * @param radius
	 *      - new radius
	 */
	function cfgSetRadius(cfg, radius) {
	  cfg.radius = radius;
	}

	/**
	 * @brief cfgUpdateMinRadius
	 *      - updates the minimum possible radius for the given config
	 * @param config
	 * @param unpaired
	 * @param paired
	 */
	function cfgUpdateMinRadius(cfg, unpaired, paired) {
	  var minRadius = approximateConfigRadius(cfg, unpaired, paired);
	  cfg.minRadius = minRadius;
	}
	function cfgApplyChanges(cfg, loopName, deltaCfg, radiusNew, puzzler) {
	  /// - start with adjusting config angles; if applicable
	  if (deltaCfg != null) {
	    for (var currentArc = 0; currentArc < cfg.numberOfArcs; currentArc++) {
	      cfg.cfgArcs[currentArc].arcAngle += deltaCfg[currentArc];
	    }
	  }

	  /// - then, adjust config radius
	  var oldRadius = cfg.radius;
	  var newRadius = -1.0;
	  if (radiusNew > 0.0) {
	    /// in case the input is a positive value
	    /// we set the minimum of valid and input as new radius
	    cfgUpdateMinRadius(cfg, puzzler.unpaired, puzzler.paired);
	    newRadius = Math.max(radiusNew, cfg.minRadius);
	    cfgSetRadius(cfg, newRadius);
	  } else if (radiusNew == 0.0) {
	    /// set the minRadius as new value
	    /// (this allows to shrink a loop)
	    cfgUpdateMinRadius(cfg, puzzler.unpaired, puzzler.paired);
	    newRadius = cfg.minRadius;
	    cfgSetRadius(cfg, newRadius);
	  } else if (radiusNew == -1.0) {
	    /// set the minRadius as new value
	    /// (this forbidds to shrink a loop)
	    cfgUpdateMinRadius(cfg, puzzler.unpaired, puzzler.paired);
	    if (cfg.minRadius - epsilon0 > oldRadius) {
	      newRadius = cfg.minRadius;
	    } else {
	      var defaultIncrease = 1.05;
	      newRadius = oldRadius * defaultIncrease;
	    }
	    cfgSetRadius(cfg, newRadius);
	  } else {
	    /// all unhandled inputs result in errors
	    console.log("[ERROR] set %c's new radius to -1.0 because of invalid input %10.8lf.\n", loopName, radiusNew);
	    newRadius = -1.0;
	  }
	  return newRadius;
	}
	function cfgIsValid(cfg, deltaCfg) {
	  if (deltaCfg == null) {
	    return 0;
	  }
	  var sumAngles = 0.0;
	  var validSingleAngles = 1;
	  for (var currentArc = 0; currentArc < cfg.numberOfArcs; currentArc++) {
	    var angle = getArcAngle(cfg, currentArc) + deltaCfg[currentArc];
	    sumAngles += angle;
	    var validAngle = 0.0 < angle && angle < MATH_TWO_PI$4;
	    validSingleAngles = validSingleAngles && validAngle;
	  }
	  var validSumAngles = Math.abs(sumAngles - MATH_TWO_PI$4) < epsilon3$3;
	  return validSingleAngles && validSumAngles;
	}

	// Modified and converted from RNAturtle.c

	const TYPE_BASE_NONE$1 = 0;
	const TYPE_EXTERIOR = 1;
	const TYPE_STEM = 2;
	const TYPE_BULGE = 3;
	const TYPE_LOOP1 = 4;
	const TYPE_LOOP2 = 5;
	const EXTERIOR_Y$4 = 100.0;
	const MATH_PI_HALF$1 = Math.PI / 2;
	function drawTurtle(baseList, varnaCfg) {
	  // const paired = 35.0;
	  // const unpaired = 25.0;
	  const paired = varnaCfg.bpDistance;
	  const unpaired = varnaCfg.backboneLoop;
	  const spaceBetweenBases = varnaCfg.spaceBetweenBases;

	  // Create 1-index ptable and baseInformation
	  var ptable = [];
	  ptable.push(baseList.length);
	  for (let i = 0; i < baseList.length; i++) {
	    ptable.push(baseList[i].getPartnerInd() + 1);
	  }
	  const length = ptable[0];

	  // turtle base information
	  var baseInformation = new Array(length + 1).fill(null).map(() => ({
	    baseType: TYPE_BASE_NONE$1,
	    distance: unpaired,
	    angle: 0.0,
	    config: null
	  }));

	  // generate default configuration for each loop
	  cfgGenerateConfig(ptable, baseInformation, unpaired, paired);

	  // compute loop angles
	  computeAffineCoordinates(ptable, paired, unpaired, baseInformation);

	  // transform affine coordinates into cartesian coordinates
	  var myX = new Array(length).fill(0);
	  var myY = new Array(length).fill(0);
	  affineToCartesianCoordinates(baseInformation, length, myX, myY);

	  // if (drawArcs) {
	  //     // compute postscript arcs instead of lines
	  //     computeAnglesAndCentersForPS(ptable, myX, myY, baseInformation, arc_coords);
	  // }

	  var coords = [];
	  for (let i = 0; i < length; i++) {
	    coords.push({
	      x: myX[i] * spaceBetweenBases,
	      y: myY[i] * spaceBetweenBases
	    });
	  }
	  return coords;
	}

	/**
	 * Handle bases of the exterior loop
	 *
	 * @returns first paired base
	 */
	function handleExteriorBases(ptable, currentBase, baseInformation, direction) {
	  const length = ptable[0];
	  if (currentBase > 1) {
	    baseInformation[currentBase].angle = baseInformation[currentBase].angle + direction * MATH_PI_HALF$1;
	    baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	  }
	  while (currentBase < length && ptable[currentBase] <= 0) {
	    baseInformation[currentBase + 1].angle = 0.0;
	    baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	    currentBase++;
	  }
	  if (currentBase + 1 <= length) {
	    baseInformation[currentBase + 1].angle = direction * MATH_PI_HALF$1;
	    baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	  } else {
	    baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	  }
	  return currentBase;
	}

	// Count no. of base pairs and consecutive pairs on a loop
	// i - last base of first stem half
	// m - no. of base pairs; n - no. of consecutive pairs
	function countLoopPairs(i, ptable) {
	  const end = ptable[i++];
	  var m = 1;
	  var n = 1;
	  while (i < end) {
	    if (ptable[i] <= 0 || ptable[i] < i) {
	      n++;
	      i++;
	    } else {
	      m++;
	      i = ptable[i];
	    }
	  }
	  return [m, n];
	}
	function detectBulge(start, ptable) {
	  let bulge = 0;
	  let end = ptable[start];
	  let iterate = 1;
	  let old = 0;
	  let i = start + 1;
	  do {
	    if (ptable[i] > 0) {
	      if (iterate > 0) {
	        if (ptable[i] == old) {
	          i++;
	        } else {
	          if (start == ptable[i] || ptable[i] == end - 2) {
	            bulge = ptable[i];
	            break;
	          } else {
	            break;
	          }
	        }
	      } else {
	        iterate++;
	        old = i;
	        i = ptable[i];
	      }
	    } else {
	      if (iterate > 0) {
	        iterate = 0;
	        i++;
	      } else {
	        i++;
	      }
	    }
	  } while (i > start);
	  return bulge;
	}
	function handleLoop(i, ptable, paired, unpaired, baseInformation, direction) {
	  let start = i;
	  const end = ptable[i];
	  let [m, n] = countLoopPairs(i, ptable);
	  let bulge = detectBulge(i, ptable);
	  if (bulge > 0 && n - m == 1) {
	    let length = unpaired * (n - m + 1) / 2;
	    let alpha = Math.acos(unpaired / (2 * length));
	    if (ptable[i + 1] == 0) {
	      baseInformation[i + 1].angle = baseInformation[i + 1].angle + direction * alpha;
	      baseInformation[i].baseType = TYPE_BULGE;
	      baseInformation[ptable[i]].baseType = TYPE_BULGE;
	      i++;
	      baseInformation[i + 1].angle = -direction * alpha * 2;
	      baseInformation[i].baseType = TYPE_BULGE;
	      i++;
	      baseInformation[i + 1].angle = direction * alpha;
	      baseInformation[i].baseType = TYPE_BULGE;
	      baseInformation[ptable[i]].baseType = TYPE_BULGE;
	      handleStem(ptable, i, paired, unpaired, baseInformation, direction);
	      i = ptable[i];
	    } else {
	      baseInformation[i + 1].angle = baseInformation[i + 1].angle + 0.0;
	      baseInformation[i].baseType = TYPE_BULGE;
	      i++;
	      baseInformation[i + 1].angle = baseInformation[i + 1].angle + 0.0;
	      baseInformation[i + 1].baseType = TYPE_BULGE;
	      baseInformation[i + 2].angle = baseInformation[i + 2].angle + 0.0;
	      baseInformation[i + 1].baseType = TYPE_BULGE;
	      handleStem(ptable, i, paired, unpaired, baseInformation, direction);
	      i = ptable[i];
	      baseInformation[i + 1].angle = baseInformation[i + 1].angle + direction * alpha;
	      baseInformation[i].baseType = TYPE_BULGE;
	      i++;
	      baseInformation[i + 1].angle = -direction * alpha * 2;
	      baseInformation[i].baseType = TYPE_BULGE;
	      i++;
	      baseInformation[i + 1].angle = direction * alpha;
	      baseInformation[i].baseType = TYPE_BULGE;
	    }
	  } else {
	    const cfg = baseInformation[start].config;
	    let currentArc = 0;
	    let r = cfg.radius;
	    let angle_over_paired = 2 * Math.asin(paired / (2 * r));
	    let current_angle = getArcAngle(cfg, currentArc);
	    let current_bb_angle = (current_angle - angle_over_paired) / cfg.cfgArcs[currentArc].numberOfArcSegments;
	    let current_distance = Math.sqrt(2 * r * r * (1 - Math.cos(current_bb_angle)));
	    let current_delta_ab = 0.5 * (Math.PI + angle_over_paired + current_bb_angle);
	    let current_delta_bb = Math.PI + current_bb_angle;
	    ++currentArc;
	    baseInformation[i + 1].angle = baseInformation[i + 1].angle + direction * (Math.PI - current_delta_ab);
	    baseInformation[i].distance = current_distance;
	    let current_stem_count = 0;
	    if (baseInformation[i].baseType == TYPE_LOOP1) {
	      baseInformation[i].baseType = TYPE_LOOP2;
	    } else {
	      baseInformation[i].baseType = TYPE_LOOP1;
	    }
	    i++;
	    while (i < end) {
	      if (ptable[i] <= 0) {
	        baseInformation[i + 1].angle = -direction * (current_delta_bb - Math.PI);
	        baseInformation[i].distance = current_distance;
	        baseInformation[i].baseType = TYPE_LOOP1;
	        i++;
	      } else if (ptable[i] > i) {
	        baseInformation[i + 1].angle = direction * (Math.PI - current_delta_ab);
	        current_stem_count++;
	        baseInformation[i].baseType = TYPE_LOOP1;
	        handleStem(ptable, i, paired, unpaired, baseInformation, direction);
	        i = ptable[i];
	      } else {
	        if (current_stem_count == 1) {
	          current_stem_count = 0;
	          current_angle = getArcAngle(cfg, currentArc);
	          current_bb_angle = (current_angle - angle_over_paired) / cfg.cfgArcs[currentArc].numberOfArcSegments;
	          current_distance = Math.sqrt(2 * r * r * (1 - Math.cos(current_bb_angle)));
	          current_delta_ab = 0.5 * (Math.PI + angle_over_paired + current_bb_angle);
	          current_delta_bb = Math.PI + current_bb_angle;
	          ++currentArc;
	        }
	        baseInformation[i + 1].angle = baseInformation[i + 1].angle + direction * (Math.PI - current_delta_ab);
	        baseInformation[i].distance = current_distance;
	        baseInformation[i].baseType = TYPE_LOOP1;
	        i++;
	      }
	    }
	    if (i + 1 <= ptable[0]) {
	      baseInformation[i + 1].angle = direction * (Math.PI - current_delta_ab);
	    }
	    baseInformation[i].baseType = TYPE_LOOP1;
	  }
	  return;
	}
	function handleStem(ptable, i, paired, unpaired, baseInformation, direction) {
	  let end = ptable[i] + 1;
	  baseInformation[i].baseType = TYPE_STEM;
	  i++;

	  // First position of stem, continue!, Detect bulges on opposite strand
	  while (ptable[i] > 0 && (ptable[i] == end - 1 || ptable[i] + 1 == ptable[i - 1])) {
	    baseInformation[i + 1].angle = 0.0;
	    baseInformation[i].baseType = TYPE_STEM;
	    i++;
	  }
	  if (ptable[i] == end - 1) ; else {
	    // i - last base of first stem half
	    handleLoop(--i, ptable, paired, unpaired, baseInformation, direction);
	  }
	  // set i as base pairing partner of last stem base
	  i = ptable[i];
	  baseInformation[i].baseType = TYPE_STEM;
	  i++;
	  while (i < end && i < ptable[0]) {
	    baseInformation[i].baseType = TYPE_STEM;
	    i++;
	  }
	  return;
	}

	/**
	 * Compute angles for all loops
	 */
	function computeAffineCoordinates(ptable, paired, unpaired, baseInformation) {
	  const length = ptable[0];
	  let currentBase = 1;
	  const direction = -1;
	  baseInformation[0].angle = 0.0;
	  if (2 <= length) {
	    baseInformation[1].angle = baseInformation[0].angle;
	    baseInformation[2].angle = baseInformation[1].angle;
	  }
	  let dangle_count = 0;
	  while (currentBase < length) {
	    if (ptable[currentBase] <= 0) {
	      if (currentBase > 1) {
	        baseInformation[currentBase - 1].baseType = TYPE_EXTERIOR;
	      }
	      currentBase = handleExteriorBases(ptable, currentBase, baseInformation, direction);
	      // returns first paired base currentBase
	      dangle_count++;
	    }
	    if (currentBase < length) {
	      if (ptable[currentBase] - ptable[currentBase - 1] != 1 && ptable[currentBase] != 0 && ptable[currentBase - 1] != 0) {
	        if (currentBase == 1) {
	          if (dangle_count < 1) {
	            baseInformation[0].angle = baseInformation[1].angle = baseInformation[2].angle = -MATH_PI_HALF$1;
	            baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	          }
	          handleStem(ptable, currentBase, paired, unpaired, baseInformation, direction);
	          currentBase = ptable[currentBase] + 1;
	          if (currentBase == length) {
	            baseInformation[currentBase - 1].baseType = TYPE_EXTERIOR;
	            baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	            baseInformation[currentBase].angle = -MATH_PI_HALF$1;
	          }
	          continue;
	        } else {
	          baseInformation[currentBase].angle = baseInformation[currentBase].angle + direction * MATH_PI_HALF$1;
	          baseInformation[currentBase + 1].distance = unpaired;
	          baseInformation[currentBase - 1].baseType = TYPE_EXTERIOR;
	          baseInformation[currentBase + 1].angle = baseInformation[currentBase + 1].angle + direction * MATH_PI_HALF$1;
	          baseInformation[currentBase].baseType = TYPE_EXTERIOR;
	          dangle_count++;
	        }
	      }
	      handleStem(ptable, currentBase, paired, unpaired, baseInformation, direction);
	      // currentBase is the next base after stem
	      currentBase = ptable[currentBase] + 1;
	      if (currentBase == length) {
	        baseInformation[currentBase - 1].baseType = TYPE_EXTERIOR;
	        currentBase = handleExteriorBases(ptable, currentBase, baseInformation, direction);
	      }
	    }
	  }
	  baseInformation[length].baseType = TYPE_EXTERIOR;
	}

	/**
	 * Calculate the coordinates for the drawing with the given angle angles
	 */
	function affineToCartesianCoordinates(baseInformation, length, x, y) {
	  if (length < 1) {
	    return;
	  }
	  let angle = 0.0;
	  x[0] = y[0] = EXTERIOR_Y$4;
	  for (let i = 1; i < length; i++) {
	    angle = angle - baseInformation[i + 1].angle;
	    x[i] = x[i - 1] + baseInformation[i].distance * Math.cos(-angle);
	    y[i] = y[i - 1] + baseInformation[i].distance * Math.sin(-angle);
	  }
	  return;
	}

	const epsilon7$3 = 1e-7;
	function bubblesort(numValues, valuesLevel1, valuesLevel2, indices) {
	  for (let i = 0; i < numValues; i++) {
	    indices[i] = i;
	  }
	  let thisValue = 0.0;
	  let nextValue = 0.0;
	  let swap = 0;
	  for (let i = 0; i < numValues - 1; i++) {
	    for (let j = 0; j < numValues - i - 1; j++) {
	      thisValue = valuesLevel1[indices[j + 0]];
	      nextValue = valuesLevel1[indices[j + 1]];
	      swap = 0;
	      if (nextValue - thisValue > epsilon7$3) {
	        swap = 1;
	      } else if (Math.abs(nextValue - thisValue) < epsilon7$3) {
	        thisValue = valuesLevel2[indices[j + 0]];
	        nextValue = valuesLevel2[indices[j + 1]];
	        if (nextValue - thisValue > epsilon7$3) {
	          swap = 1;
	        }
	      }
	      if (swap) {
	        let tmp = indices[j + 0];
	        indices[j + 0] = indices[j + 1];
	        indices[j + 1] = tmp;
	      }
	    }
	  }
	}

	/**
	 * @brief
	 *    Given a circle's radius and a distance between two points on the circle
	 *    this function calculates the angle between those points.
	 *    Note that the resulting angle will always be smaller than or equal to 180°.
	 *    If knowing the wanted angle being greater than 180° just subtract the result from 360°.
	 * @param radius the circle's radius
	 * @param distance the distance between two points on the circle
	 * @return angle in degree
	 */
	function distanceToAngle(radius, distance) {
	  return 2.0 * Math.asin(distance / (2.0 * radius));
	}

	const MATH_PI$3 = Math.PI;
	const epsilon7$2 = 1e-7;
	function vectorLength2D(vector) {
	  let x = vector[0];
	  let y = vector[1];
	  return Math.sqrt(x * x + y * y);
	}
	function vectorLength2DSquared(vector) {
	  let x = vector[0];
	  let y = vector[1];
	  return x * x + y * y;
	}
	function scalarProduct2D(vector1, vector2) {
	  let x1 = vector1[0];
	  let y1 = vector1[1];
	  let x2 = vector2[0];
	  let y2 = vector2[1];
	  let scalarProduct = x1 * x2 + y1 * y2;
	  //console.log("[SCALAR PRODUCT] %f * %f + %f * %f = %f\n", x1, x2, y1, y2, scalarProduct);
	  return scalarProduct;
	}
	function normalize$1(vector) {
	  let length = vectorLength2D(vector);
	  vector[0] /= length;
	  vector[1] /= length;
	}
	function isToTheRightPointPoint(lineStart, lineEnd, point) {
	  // implicite knowledge:
	  // a normal to a vector is always directed to the right
	  //
	  // idea:
	  // add the normal vector of the line to any point of the line  -> the resulting point is to the right of the line
	  // add the negative normal vector to the same point            -> the resulting point is to the left  of the line
	  // now get the distances of these points to the point of interest
	  // if that point is closer to the right point than to the left ->   that point itself is to the right of the line

	  let vline = [lineEnd[0] - lineStart[0], lineEnd[1] - lineStart[1]];
	  let normal = [vline[1], -vline[0]];
	  let right = [lineEnd[0] + normal[0], lineEnd[1] + normal[1]];
	  let left = [lineEnd[0] - normal[0], lineEnd[1] - normal[1]];
	  let vright = [point[0] - right[0], point[1] - right[1]];
	  let vleft = [point[0] - left[0], point[1] - left[1]];

	  // for comparing lengths of vectors there is no need to actually compute their length
	  // comparing their squares of their respective lengths grant the same results
	  // while saving some computation time (spare us the sqrt operation)
	  let squaredDistanceRight = scalarProduct2D(vright, vright);
	  let squaredDistanceLeft = scalarProduct2D(vleft, vleft);
	  let ret = squaredDistanceRight < squaredDistanceLeft;
	  return ret;
	}
	function isToTheRightPointVector(lineStart, lineVector, point) {
	  let lineEnd = [lineStart[0] + lineVector[0], lineStart[1] + lineVector[1]];
	  return isToTheRightPointPoint(lineStart, lineEnd, point);
	}
	function angleBetweenVectors2D(vector1, vector2) {
	  //    console.log("[ANGLE BETWEEN VECTORS] v1:(%3.2f, %3.2f) v2:(%3.2f, %3.2f)\n"
	  //           , vector1[0], vector1[1]
	  //           , vector2[0], vector2[1]);
	  let vectorNormalized1 = [vector1[0], vector1[1]];
	  let vectorNormalized2 = [vector2[0], vector2[1]];
	  normalize$1(vectorNormalized1);
	  normalize$1(vectorNormalized2);
	  //    console.log("[ANGLE BETWEEN VECTORS] u1:(%3.2f, %3.2f) u2:(%3.2f, %3.2f)\n"
	  //           , vectorNormalized1[0], vectorNormalized1[1]
	  //           , vectorNormalized2[0], vectorNormalized2[1]);

	  let cosAngle = scalarProduct2D(vectorNormalized1, vectorNormalized2);
	  let angle = 0.0;
	  if (Math.abs(cosAngle - -1.00) < epsilon7$2) {
	    // cosAngle == -1 -> rad: PI deg: 180°
	    angle = MATH_PI$3;
	  } else if (Math.abs(cosAngle - 1.00) < epsilon7$2) {
	    // cosAngle == +1 -> rad: 0 deg: 0°
	    angle = 0;
	  } else {
	    angle = Math.acos(cosAngle);
	  }
	  //console.log("[ANGLE BETWEEN VECTORS] cosin:%3.2f radiant:%3.2f\n", cosAngle, angle);
	  return angle;
	}
	function anglePtPtPt2D(p1, p2, p3) {
	  let v1 = [p1[0] - p2[0], p1[1] - p2[1]];
	  let v2 = [p3[0] - p2[0], p3[1] - p2[1]];
	  return angleBetweenVectors2D(v1, v2);
	}
	function rotatePointAroundPoint(point, rotationCenter, angle, ret) {
	  let x = point[0];
	  let y = point[1];
	  let x0 = rotationCenter[0];
	  let y0 = rotationCenter[1];
	  let phi = -angle; // negative value because we rotate clockwise for positive input

	  ret[0] = x0 + (x - x0) * Math.cos(phi) - (y - y0) * Math.sin(phi);
	  ret[1] = y0 + (x - x0) * Math.sin(phi) + (y - y0) * Math.cos(phi);
	  //    console.log("rotation of [%3.2f, %3.2f] around [%3.2f, %3.2f] by %3.2f°\n"
	  //           "         -> [%3.2f, %3.2f]\n",
	  //           point[0], point[1], rotationCenter[0], rotationCenter[1], TO_DEGREE*angle, ret[0], ret[1]);
	}
	function rotateVectorByAngle(vector, angle, ret) {
	  let c = [0, 0];
	  rotatePointAroundPoint(vector, c, angle, ret);
	}
	function translatePointByVector(point, trans, ret) {
	  ret[0] = point[0] + trans[0];
	  ret[1] = point[1] + trans[1];
	}
	function solveSquareEquation(a, b, c) {
	  //    console.log("****************************************************************\n");
	  //    console.log("solving: 0 = %f*x² + %f*x + %f\n", a,b,c);
	  let ret = 0;
	  let discr = b * b - 4 * a * c;
	  //    console.log("discr: %f\n", discr);
	  if (discr < 0.0) {
	    ret = 0;
	    return [-1, -1, ret];
	  }
	  if (discr == 0.0) {
	    ret = 1;
	  } else {
	    ret = 2;
	  }
	  let answer1 = (-b + Math.sqrt(discr)) / (2 * a);
	  let answer2 = (-b - Math.sqrt(discr)) / (2 * a);
	  //    console.log("answers: %d\n", ret);
	  //    if (ret > 0) { console.log("answer1: %3.2f\n", answer1); }
	  //    if (ret > 1) { console.log("answer2: %3.2f\n", answer2); }

	  return [answer1, answer2, ret];
	}
	function getCutPointsOfCircles(c1, r1, c2, r2, ret1, ret2) {
	  let answers = -2;
	  let c1x = c1[0];
	  let c1y = c1[1];
	  let c2x = c2[0];
	  let c2y = c2[1];

	  /// include GeoGebra_output.h for these calls
	  //GEOGEBRA_printCircle('A', c1, r1);
	  //GEOGEBRA_printCircle('B', c2, r2);

	  let dx = c1x - c2x;
	  dx = dx < 0 ? -dx : dx;
	  let dy = c1y - c2y;
	  dy = dy < 0 ? -dy : dy;
	  let dr = r1 - r2;
	  dr = dr < 0 ? -dr : dr;
	  let eps = 1.0;
	  /// if any delta is smaller than this epsilon this delta will be considered zero
	  /// i.e. the values that are being compared are treated as equal

	  let smallDX = dx < eps;
	  let smallDY = dy < eps;
	  let smallDR = dr < eps;

	  //    console.log("small... dx:%d dy:%d dr:%d\n", smallDX, smallDY, smallDR);

	  if (smallDX && smallDY) {
	    if (smallDR) {
	      /// circles coincide
	      answers = -1;
	      console.log("circles coincide\n");
	    } else {
	      /// circles are concentric but with different radius
	      answers = 0;
	      console.log("circles are concentric\n");
	    }
	  } else if (!smallDY) {
	    // (smallDX || !smallDX) && !smallDY
	    // EQ1: circle1: (r1)² = (c1x - x)² + (c1y - y)²
	    // EQ2: circle2: (r2)² = (c2x - x)² + (c2y - y)²

	    // EQ3: EQ1 - EQ2, get y
	    // EQ3: y = (x * k + l) / m = (k / m) * x + (l / m)
	    let k = -2 * c1x + 2 * c2x;
	    let l = c1x * c1x - c2x * c2x + c1y * c1y - c2y * c2y - r1 * r1 + r2 * r2;
	    let m = -1 * (-2 * c1y + 2 * c2y);
	    //        console.log("m: %f\n", m);

	    // EQ4: replace y in EQ1 with EQ3
	    // transform equation into ax²+bx+c=0 shape
	    let p = c1y - l / m;
	    let q = k / m;
	    let a = q * q + 1;
	    let b = -2 * c1x - 2 * p * q;
	    let c = c1x * c1x + p * p - r1 * r1;
	    let sol1;
	    let sol2;
	    [sol1, sol2, answers] = solveSquareEquation(a, b, c);

	    //        if (answers == 0) {
	    //            console.log("no solution 1: %3.2lf %3.2lf %3.2lf\n", a, b, c);
	    //        }

	    if (answers > 0) {
	      ret1[0] = sol1;
	      ret1[1] = (sol1 * k + l) / m;
	      //                console.log("Py1: (%3.2f, %3.2f)\n", ret1[0], ret1[1]);
	    }
	    if (answers > 1) {
	      ret2[0] = sol2;
	      ret2[1] = (sol2 * k + l) / m;
	      //                console.log("Py2: (%3.2f, %3.2f)\n", ret2[0], ret2[1]);
	    }
	  } else {
	    // smallDY && !smallDX
	    let k = -2 * c1y + 2 * c2y;
	    let l = c1x * c1x - c2x * c2x + (c1y * c1y - c2y * c2y) + (r2 * r2 - r1 * r1);
	    let m = -1 * (-2 * c1x + 2 * c2x);
	    let p = c1x - l / m;
	    let q = k / m;
	    let a = q * q + 1;
	    let b = -2 * c1y - 2 * p * q;
	    let c = c1y * c1y + p * p - r1 * r1;
	    let sol1;
	    let sol2;
	    //console.log("a:%3.2f b:%3.2f c:%3.2f\n", a, b, c);
	    [sol1, sol2, answers] = solveSquareEquation(a, b, c);
	    if (answers == 0) {
	      console.log("no solution 2: %3.2lf %3.2lf %3.2lf\n", a, b, c);
	    }
	    if (answers > 0) {
	      ret1[1] = sol1;
	      ret1[0] = (sol1 * k + l) / m;
	      //console.log("Px1: (%3.2f, %3.2f)\n", ret1[0], ret1[1]);
	    }
	    if (answers > 1) {
	      ret2[1] = sol2;
	      ret2[0] = (sol2 * k + l) / m;
	      //console.log("Px2: (%3.2f, %3.2f)\n", ret2[0], ret2[1]);
	    }
	  }
	  return answers;
	}
	function getCutPointsOfCircleAndLine(center, radius, anchor, direction, ret1, ret2) {
	  /// TODO do the documentation stuff (Kreis vs. Gerade -> Latex)

	  let a = direction[0] * direction[0] + direction[1] * direction[1];
	  let b = 2 * direction[0] * (anchor[0] - center[0]) + 2 * direction[1] * (anchor[1] - center[1]);
	  let c = (anchor[0] - center[0]) * (anchor[0] - center[0]) + (anchor[1] - center[1]) * (anchor[1] - center[1]) - radius * radius;
	  let solution1;
	  let solution2;
	  let answers;
	  [solution1, solution2, answers] = solveSquareEquation(a, b, c);
	  if (answers > 0) {
	    ret1[0] = anchor[0] + solution1 * direction[0];
	    ret1[1] = anchor[1] + solution1 * direction[1];
	  }
	  if (answers > 1) {
	    ret2[0] = anchor[0] + solution2 * direction[0];
	    ret2[1] = anchor[1] + solution2 * direction[1];
	  }
	  return answers;
	}
	function vector(pStart, pEnd, v) {
	  v[0] = pEnd[0] - pStart[0];
	  v[1] = pEnd[1] - pStart[1];
	  //    console.log("[VECTOR] start:(%3.2f, %3.2f) end:(%3.2f, %3.2f) vector:(%3.2f, %3.2f)\n"
	  //           , pStart[0], pStart[1]
	  //           , pEnd[0], pEnd[1]
	  //           , v[0], v[1]);
	}
	function normal(v, n) {
	  let vNormal = [];
	  vNormal[0] = v[1];
	  vNormal[1] = -v[0];
	  let vNormalUnit = [];
	  unit(vNormal, vNormalUnit);
	  n[0] = vNormalUnit[0];
	  n[1] = vNormalUnit[1];
	}
	function unit(v, u) {
	  let length = vectorLength2D(v);
	  u[0] = v[0] / length;
	  u[1] = v[1] / length;
	}
	function circle$1(A, B, C, center) {
	  // char* fnName = "CIRCLE";

	  let dy_AB = B[1] - A[1];
	  let dy_BC = C[1] - B[1];
	  //let dy_CA = A[1] - C[1];
	  let p1 = [],
	    p2 = [],
	    p3 = [];
	  if (dy_AB == 0.0) {
	    p1[0] = A[0];
	    p1[1] = A[1];
	    p2[0] = C[0];
	    p2[1] = C[1];
	    p3[0] = B[0];
	    p3[1] = B[1];
	  } else if (dy_BC == 0.0) {
	    p1[0] = C[0];
	    p1[1] = C[1];
	    p2[0] = A[0];
	    p2[1] = A[1];
	    p3[0] = B[0];
	    p3[1] = B[1];
	  } else {
	    p1[0] = A[0];
	    p1[1] = A[1];
	    p2[0] = B[0];
	    p2[1] = B[1];
	    p3[0] = C[0];
	    p3[1] = C[1];
	  }
	  // note:
	  // we have to make sure there is no horizontal line in the calculation
	  // as this would cause division by zero at some point (which is forbidden)
	  //
	  // if A,B,C form a valid circle we are sure there are at least two lines in (AB, BC, CA)
	  // that are non-horizontal which we take like above

	  // line p1p2: anchor=p1 direction=v12
	  // line p2p3: anchor=p2 direction=v23
	  let v12 = [],
	    v23 = [];
	  vector(p1, p2, v12);
	  vector(p2, p3, v23);

	  // midpoints
	  let m12 = [p1[0] + 0.5 * v12[0], p1[1] + 0.5 * v12[1]];
	  let m23 = [p2[0] + 0.5 * v23[0], p2[1] + 0.5 * v23[1]];

	  // normals
	  let n12 = [],
	    n23 = [];
	  normal(v12, n12);
	  normal(v23, n23);

	  // perpendicular to p1p2: anchor=m12 direction=n12
	  // perpendicular to p2p3: anchor=m23 direction=n23
	  let d12 = n12[1] / n12[0];
	  let d23 = n23[1] / n23[0];

	  // perp12 : y = d12 * (x - m12[0]) + m12[1]
	  // perp23 : y = d23 * (x - m23[0]) + m23[1]

	  // d12 * (x - m12[0]) + m12[1] = d23 * (x - m23[0]) + m23[1]
	  // d12 * x - d12 * m12[0] + m12[1] = d23 * x - d23 * m23[0] + m23[1]
	  // x * (d12 - d23) = - d23 * m23[0] + m23[1] + d12 * m12[0] - m12[1]
	  // x = (d12 * m12[0] - d23 * m23[0] + m23[1] - m12[1]) / (d12 - d23)
	  // insert x into perp12

	  let pCut = [];
	  pCut[0] = (d12 * m12[0] - d23 * m23[0] + m23[1] - m12[1]) / (d12 - d23);
	  pCut[1] = d12 * (pCut[0] - m12[0]) + m12[1];
	  let vP1ToPCut = [];
	  vector(p1, pCut, vP1ToPCut);
	  center[0] = pCut[0];
	  center[1] = pCut[1];
	  let radius = vectorLength2D(vP1ToPCut);
	  return radius;

	  //    console.log("[%s] P1=(%f, %f)\n", fnName, p1[0], p1[1]);
	  //    console.log("[%s] P2=(%f, %f)\n", fnName, p2[0], p2[1]);
	  //    console.log("[%s] P3=(%f, %f)\n", fnName, p3[0], p3[1]);
	  //    console.log("[%s] line12 : y = %f * (x - %f) + %f\n", fnName, (v12[1] / v12[0]), p1[0], p1[1]);
	  //    console.log("[%s] line23 : y = %f * (x - %f) + %f\n", fnName, (v23[1] / v23[0]), p2[0], p2[1]);
	  //    console.log("[%s] perp12 : y = %f * (x - %f) + %f\n", fnName, d12, m12[0], m12[1]);
	  //    console.log("[%s] perp23 : y = %f * (x - %f) + %f\n", fnName, d23, m23[0], m23[1]);
	  //    console.log("[%s] P = (%f, %f)\n", fnName, pCut[0], pCut[1]);
	  //    console.log("[%s] r = %f\n", fnName, *radius);
	}

	function AABB() {
	  this.min = new Array(2);
	  this.max = new Array(2);
	}
	function boundingboxLoop() {
	  this.parent = null;
	  // circle definition
	  this.c = new Array(2); // center
	  this.r; // radius
	}
	function boundingboxStem() {
	  this.parent = null;

	  // rectangle definition
	  this.a = new Array(2); // direction 1 (unit vector) // direction from stem center to loop center
	  this.b = new Array(2); // direction 2 (unit vector) // points to the left of vector a
	  this.c = new Array(2); // center
	  this.e = new Array(2); // half width extension of a and b

	  // additional information on RNA
	  this.bulgeCount = null;
	  this.bulgeDist = null;
	  this.bulges = [];
	}
	function configtree() {
	  /// AABB
	  this.aabb = new AABB();
	}

	function getBulgeXY(stem, index) {
	  let bulge = stem.bulges[index];
	  let x = stem.c[0] + bulge[2] * stem.a[0] + bulge[0] * stem.b[0] * (stem.e[1] + stem.bulgeDist);
	  let y = stem.c[1] + bulge[2] * stem.a[1] + bulge[0] * stem.b[1] * (stem.e[1] + stem.bulgeDist);
	  return [x, y];
	}
	function getBulgeCoordinatesExtraDistance(stem, index, extraDistance, pPrev, pThis, pNext) {
	  let bulge = stem.bulges[index];
	  pPrev[0] = stem.c[0] + bulge[1] * stem.a[0] + bulge[0] * stem.b[0] * stem.e[1];
	  pPrev[1] = stem.c[1] + bulge[1] * stem.a[1] + bulge[0] * stem.b[1] * stem.e[1];
	  pThis[0] = stem.c[0] + bulge[2] * stem.a[0] + bulge[0] * stem.b[0] * (stem.e[1] + extraDistance + stem.bulgeDist);
	  pThis[1] = stem.c[1] + bulge[2] * stem.a[1] + bulge[0] * stem.b[1] * (stem.e[1] + extraDistance + stem.bulgeDist);
	  pNext[0] = stem.c[0] + bulge[3] * stem.a[0] + bulge[0] * stem.b[0] * stem.e[1];
	  pNext[1] = stem.c[1] + bulge[3] * stem.a[1] + bulge[0] * stem.b[1] * stem.e[1];
	}
	function getBulgeCoordinates(stem, index, pPrev, pThis, pNext) {
	  getBulgeCoordinatesExtraDistance(stem, index, 0, pPrev, pThis, pNext);
	}
	function translateLoopBox(box, vector) {
	  let center = [box.c[0], box.c[1]];
	  let newCenter = [];
	  translatePointByVector(center, vector, newCenter);
	  box.c[0] = newCenter[0];
	  box.c[1] = newCenter[1];
	}
	function translateStemBox(box, vector) {
	  let center = [box.c[0], box.c[1]];
	  let newCenter = [];
	  translatePointByVector(center, vector, newCenter);
	  box.c[0] = newCenter[0];
	  box.c[1] = newCenter[1];
	}
	function getLoopData(center, start, ptable, baseInformation, x, y) {
	  // copy/pasted from plot_layouts.c ... consider moving this one to utils or such a thing.

	  let i = start;
	  let end = ptable[start];
	  let cfg = baseInformation[i].config;
	  let r = cfg.radius;

	  // Reminder to offset -1
	  // x, y and arc_coords as well have their entry for the first base (i=1) at index 0
	  // this results in a offset -1 at every reading access to x, y
	  // consider the stem just before the loop
	  // if i's partner is to the right of the loop's first line
	  // then this loop is directed clockwise, counter clockwise otherwise
	  let current = [x[start - 1], y[start - 1]];
	  let next = [x[start + 1 - 1], y[start + 1 - 1]];
	  let last = [x[end - 1], y[end - 1]];
	  let go_clockwise = isToTheRightPointPoint(current, next, last);
	  let v_pair = [];
	  vector(last, current, v_pair);
	  let v_normal = [];
	  normal(v_pair, v_normal);
	  let pair_length = vectorLength2D(v_pair); // = paired

	  let center_dist = Math.sqrt(r * r - 0.25 * pair_length * pair_length);

	  // for clockwise go to the right... and to the left for counter clockwise loop
	  let dir = go_clockwise ? 1 : -1;
	  center[0] = last[0] + 0.5 * v_pair[0] + dir * center_dist * v_normal[0];
	  center[1] = last[1] + 0.5 * v_pair[1] + dir * center_dist * v_normal[1];
	  return r;
	}
	function createLoopBox(center, radius) {
	  let box = new boundingboxLoop();
	  box.c = [];
	  box.c[0] = center[0];
	  box.c[1] = center[1];
	  box.r = radius;
	  return box;
	}
	function buildLoopBox(start, ptable, baseInformation, x, y) {
	  let center = [];

	  // calculate center coords and radius for the loop
	  let radius = getLoopData(center, start, ptable, baseInformation, x, y);

	  //console.log("lBox [%3.2f %3.2f] r:%3.2f\n", center_x, center_y, radius);

	  return createLoopBox(center, radius);
	}
	function createStemBox(s, e, sp) {
	  let box = new boundingboxStem();
	  let a = [0.5 * (e[0] - s[0]), 0.5 * (e[1] - s[1])];
	  let b = [0.5 * (s[0] - sp[0]), 0.5 * (s[1] - sp[1])];
	  let length_a = vectorLength2D(a);
	  let length_b = vectorLength2D(b);
	  if (length_a == 0) {
	    // solve this using b's normal vector
	    normal(b, a);
	    // make a have length 0.1 to create a proper bounding box
	    length_a = 0.1;
	    a[0] = a[0] * length_a;
	    a[1] = a[1] * length_a;
	  }
	  box.a = [];
	  box.b = [];
	  box.c = [];
	  box.d = [];
	  box.e = [];
	  box.a[0] = a[0] / length_a;
	  box.a[1] = a[1] / length_a;
	  box.b[0] = b[0] / length_b;
	  box.b[1] = b[1] / length_b;
	  box.c[0] = s[0] + a[0] - b[0];
	  box.c[1] = s[1] + a[1] - b[1];
	  box.e[0] = length_a;
	  box.e[1] = length_b;
	  return box;
	}
	function countBulges(ptable, start, end) {
	  let bulgeCount = 0;
	  for (let i = start; i < end; i++) {
	    if (ptable[i] == 0) {
	      bulgeCount++;
	    }
	  }
	  for (let i = ptable[end]; i < ptable[start]; i++) {
	    if (ptable[i] == 0) {
	      bulgeCount++;
	    }
	  }
	  return bulgeCount;
	}
	function getA(box, x, y) {
	  let a = [box.a[0], box.a[1]];
	  let b = [box.b[0], box.b[1]];
	  let c = [box.c[0], box.c[1]];
	  let p = [x - c[0], y - c[1]];
	  let ret = 0.0;
	  if (b[0] == 0.0) {
	    ret = p[0] / a[0];
	  } else if (b[1] == 0.0) {
	    ret = p[1] / a[1];
	  } else {
	    ret = (p[0] * b[1] - p[1] * b[0]) / (a[0] * b[1] - a[1] * b[0]);
	  }
	  return ret;
	}
	function createBulge(box, x, y, i, bSign) {
	  let bulge = [];

	  // remember -1 offset between
	  let aPrev = getA(box, x[i - 1 - 1], y[i - 1 - 1]);
	  let aThis = getA(box, x[i - 1 + 0], y[i - 1 + 0]);
	  let aNext = getA(box, x[i - 1 + 1], y[i - 1 + 1]);
	  bulge[0] = bSign;
	  bulge[1] = aPrev;
	  bulge[2] = aThis;
	  bulge[3] = aNext;
	  return bulge;
	}
	function setBulges(box, ptable, start, end, x, y, bulgeCount, bulgeDist) {
	  if (bulgeCount <= 0) {
	    box.bulges = null;
	    box.bulgeCount = 0;
	    box.bulgeDist = bulgeDist;
	    return;
	  }
	  let bulges = [];
	  let currentBulge = 0;
	  for (let i = start; i < end; i++) {
	    if (ptable[i] == 0) {
	      let bSign = 1.0;
	      let bulge = createBulge(box, x, y, i, bSign);
	      bulges[currentBulge] = bulge;
	      currentBulge++;
	    }
	  }
	  for (let i = ptable[end]; i < ptable[start]; i++) {
	    if (ptable[i] == 0) {
	      let bSign = -1.0;
	      let bulge = createBulge(box, x, y, i, bSign);
	      bulges[currentBulge] = bulge;
	      currentBulge++;
	    }
	  }
	  box.bulgeCount = bulgeCount;
	  box.bulgeDist = bulgeDist;
	  box.bulges = bulges;
	}
	function buildStemBox(start, end, ptable, x, y, bulgeDist) {
	  let i_s = start;
	  let i_e = end;
	  let i_sp = ptable[start];

	  /// get coordinates for rectangle corners
	  // -1 for offset ptable vs. x/y
	  let s = [x[i_s - 1], y[i_s - 1]];
	  let e = [x[i_e - 1], y[i_e - 1]];
	  let sp = [x[i_sp - 1], y[i_sp - 1]];

	  /// finally create the box
	  let box = createStemBox(s, e, sp);

	  /// get coordinates for bulges
	  let bulgeCount = countBulges(ptable, i_s, i_e);
	  setBulges(box, ptable, i_s, i_e, x, y, bulgeCount, bulgeDist);
	  return box;
	}
	function getLBoxCenter(box, c) {
	  c[0] = box.c[0];
	  c[1] = box.c[1];
	}

	const MATH_TWO_PI$3 = 2 * Math.PI;
	const EXTERIOR_Y$3 = 100.0;
	const epsilon7$1 = 1e-7;
	function updateAABB(aabb, sBox, lBox) {
	  let stem_ea = [sBox.e[0] * sBox.a[0], sBox.e[0] * sBox.a[1]];
	  let stem_eb = [sBox.e[1] * sBox.b[0], sBox.e[1] * sBox.b[1]];
	  const numPoints = 6 + sBox.bulgeCount;

	  /// array of relevant points
	  let p = [];
	  for (let i = 0; i < numPoints; i++) {
	    p[i] = [];
	  }

	  /// corners of stem
	  p[0][0] = sBox.c[0] - stem_ea[0] + stem_eb[0];
	  p[0][1] = sBox.c[1] - stem_ea[1] + stem_eb[1];
	  p[1][0] = sBox.c[0] + stem_ea[0] + stem_eb[0];
	  p[1][1] = sBox.c[1] + stem_ea[1] + stem_eb[1];
	  p[2][0] = sBox.c[0] + stem_ea[0] - stem_eb[0];
	  p[2][1] = sBox.c[1] + stem_ea[1] - stem_eb[1];
	  p[3][0] = sBox.c[0] - stem_ea[0] - stem_eb[0];
	  p[3][1] = sBox.c[1] - stem_ea[1] - stem_eb[1];

	  /// lower left of loop AABB
	  p[4][0] = lBox.c[0] - lBox.r;
	  p[4][1] = lBox.c[1] - lBox.r;
	  /// upper right of loop AABB
	  p[5][0] = lBox.c[0] + lBox.r;
	  p[5][1] = lBox.c[1] + lBox.r;

	  /// bulge points
	  let pPrev = [];
	  let pNext = [];
	  for (let i = 0; i < sBox.bulgeCount; i++) {
	    getBulgeCoordinates(sBox, i, pPrev, p[6 + i], pNext);
	  }

	  /// set aabb
	  aabb.min[0] = p[0][0];
	  aabb.min[1] = p[0][1];
	  aabb.max[0] = p[0][0];
	  aabb.max[1] = p[0][1];
	  for (let i = 1; i < numPoints; i++) {
	    if (aabb.min[0] > p[i][0]) {
	      aabb.min[0] = p[i][0];
	    }
	    if (aabb.min[1] > p[i][1]) {
	      aabb.min[1] = p[i][1];
	    }
	    if (aabb.max[0] < p[i][0]) {
	      aabb.max[0] = p[i][0];
	    }
	    if (aabb.max[1] < p[i][1]) {
	      aabb.max[1] = p[i][1];
	    }
	  }
	}
	function updateBoundingBoxes(node, puzzler) {
	  /// fix this node's loop
	  /// then for each child fix the stem and bulges
	  /// and call recursively

	  if (!isExterior(node)) {
	    const numStemBackBones = Math.round(2.0 * node.sBox.e[0] / puzzler.unpaired);
	    let stemLength = puzzler.unpaired * numStemBackBones;
	    let distanceStemEndToLoopCenter = Math.sqrt(node.cfg.radius * node.cfg.radius - 0.25 * puzzler.paired * puzzler.paired);
	    let distanceStemCenterToLoopCenter = 0.5 * stemLength + distanceStemEndToLoopCenter;
	    node.lBox.c[0] = node.sBox.c[0] + distanceStemCenterToLoopCenter * node.sBox.a[0];
	    node.lBox.c[1] = node.sBox.c[1] + distanceStemCenterToLoopCenter * node.sBox.a[1];
	    node.lBox.r = node.cfg.radius;
	    updateAABB(node.aabb, node.sBox, node.lBox);
	  }
	  let childAngleRad = 0.0;
	  for (let i = 0; i < node.childCount; i++) {
	    let child = getChild(node, i);
	    let sBox = child.sBox;
	    let lBox = child.lBox;
	    let parentLoopCenter = [];
	    if (isExterior(node)) {
	      parentLoopCenter[0] = lBox.c[0];
	      parentLoopCenter[1] = EXTERIOR_Y$3;
	    } else {
	      getLoopCenter(node, parentLoopCenter);
	    }

	    /// ... fix the stem's extensions ...
	    const numStemBackBones = Math.round(2.0 * sBox.e[0] / puzzler.unpaired);
	    let stemLength = puzzler.unpaired * numStemBackBones;
	    sBox.e[0] = 0.5 * stemLength;
	    sBox.e[1] = 0.5 * puzzler.paired;

	    /// ... fix the stem's directions ...
	    if (isExterior(node)) {
	      childAngleRad = Math.PI;
	    } else {
	      childAngleRad += getArcAngle(node.cfg, i);
	    }
	    let aFixed = [];
	    if (isExterior(node)) {
	      aFixed[0] = 0.0;
	      aFixed[1] = 1.0;
	    } else {
	      let gamma = childAngleRad - Math.PI;
	      rotateVectorByAngle(node.sBox.a, gamma, aFixed);
	    }
	    sBox.a[0] = aFixed[0];
	    sBox.a[1] = aFixed[1];
	    let bFixed = [];
	    normal(aFixed, bFixed);
	    bFixed[0] *= -1;
	    bFixed[1] *= -1;
	    sBox.b[0] = bFixed[0];
	    sBox.b[1] = bFixed[1];
	    let s0 = 0;
	    if (!isExterior(node)) {
	      s0 = Math.sqrt(node.cfg.radius * node.cfg.radius - 0.25 * puzzler.paired * puzzler.paired);
	    }
	    let distanceStemCenter = s0 + 0.5 * stemLength;

	    /// ... fix the stem's position.
	    sBox.c[0] = parentLoopCenter[0] + distanceStemCenter * aFixed[0];
	    sBox.c[1] = parentLoopCenter[1] + distanceStemCenter * aFixed[1];
	    if (stemLength == 0) {
	      sBox.e[0] = epsilon7$1;
	    }
	  }
	  for (let i = 0; i < node.childCount; i++) {
	    updateBoundingBoxes(getChild(node, i), puzzler);
	  }
	}
	function applyChangesToConfigAndBoundingBoxes(tree, deltaCfg, radiusNew, puzzler) {
	  /// Apply all changes to config
	  let cfg = tree.cfg;

	  /// - start with adjusting config radius and angles
	  cfgApplyChanges(cfg, getNodeName(tree), deltaCfg, radiusNew, puzzler);

	  /// - apply changes of config to bounding boxes
	  updateBoundingBoxes(tree, puzzler);

	  //if (GEOGEBRA_FLAG) {
	  //  GEOGEBRA_generateTree(global_root2, puzzler.numberOfChangesAppliedToConfig);
	  //}
	}
	function countSubtreeNodes(node) {
	  let count = 1; // count this node

	  for (let currentChild = 0; currentChild < node.childCount; currentChild++) {
	    // count children and add child count
	    count += countSubtreeNodes(getChild(node, currentChild));
	  }
	  return count;
	}
	function countAncestorNodes(node) {
	  let count = 0;
	  let ancestor = getParent(node);
	  while (ancestor != null) {
	    ++count;
	    ancestor = getParent(ancestor);
	  }
	  return count;
	}
	function collectSubtreeNodes(node, allNodes, currentIndex) {
	  allNodes[currentIndex] = node;
	  let nextIndex = currentIndex + 1; // increase index as this one was just taken

	  for (let currentChild = 0; currentChild < node.childCount; currentChild++) {
	    nextIndex = collectSubtreeNodes(getChild(node, currentChild), allNodes, nextIndex);
	  }
	  return nextIndex;
	}
	function collectAncestorNodes(node, ancestorList) {
	  let currentIndex = 0;
	  let ancestor = getParent(node);
	  while (ancestor != null) {
	    ancestorList[currentIndex] = ancestor;
	    ++currentIndex;
	    ancestor = getParent(ancestor);
	  }
	}
	function isExterior(node) {
	  return getNodeID(node) == 0;
	}
	function isInteriorLoop(node) {
	  return !isExterior(node) && node.childCount == 1;
	}
	function isMultiLoop(node) {
	  return !isExterior(node) && node.childCount > 1;
	}
	function getNodeID(node) {
	  if (node != null) {
	    return node.id;
	  } else {
	    return -1;
	  }
	}
	function getNodeName(node) {
	  /**
	   * @brief cfgMotivBlank
	   *    - name of exterior loops and small bulge loops
	   *    initialized at cfgGenerateMotivs
	   */
	  const cfgMotivBlank = '_';
	  const id = getNodeID(node);
	  if (id == -1) {
	    return cfgMotivBlank;
	  }
	  let motivId = (id + 33) % 128;
	  while (motivId < 33) {
	    motivId = (motivId + 33) % 128;
	  }
	  let motiv = String.fromCharCode(motivId);
	  //console.log("[CONVERT] %3d . %3d . %c\n", id, motivId, motiv);
	  return motiv;
	}
	function setChild(parent, index, child) {
	  if (0 <= index && index < parent.childCount) {
	    parent.children[index] = child;
	  }
	}

	/**
	 * @brief treeGetChildCount
	 *    - counts the number of children this loop will have in the configtree
	 * @param loopStart
	 *    - index of the loops first base
	 * @param ptable
	 *    - the RNA's pairing information
	 * @return
	 *    - number of child nodes
	 */
	let treeGetChildCount = function (loopStart, ptable) {
	  let childCount = 0;
	  let end = ptable[loopStart];
	  for (let i = loopStart + 1; i < end; ++i) {
	    if (ptable[i] > i) {
	      // found new stem
	      childCount++;
	      i = ptable[i];
	    }
	  }
	  return childCount;
	};

	/**
	 * @brief createTreeNode
	 *    - this method can be referred to as a constructor method for configtree nodes.
	 * @param parent
	 *    - parent node (the prior loop), null for the root node
	 * @param loopStart
	 *    - index of the loops first node, 1 for root node
	 * @param stemStart
	 *    - index of the prior stems first node, -1 for root node
	 * @param ptable
	 *    - the RNA's pairing information
	 * @param cfg
	 *    - the configuration found in baseInformation for that loop.
	 *    null for exterior loop (root node)
	 * @return
	 *    - an initialized configtree tBaseInformation with set parent, loopStart, cfg, childCount and initialized children array
	 */
	function createTreeNode(id, parent, loopStart, stemStart, ptable, cfg) {
	  // allocate children array
	  let childCount;
	  if (cfg == null) {
	    childCount = treeGetChildCount(0, ptable);
	  } else {
	    childCount = treeGetChildCount(loopStart, ptable);
	  }
	  var children = childCount > 0 ? new Array(childCount).fill(null) : null;
	  var node = new configtree();
	  node.id = id;
	  node.parent = parent;
	  node.children = children;
	  node.childCount = childCount;
	  node.cfg = cfg;
	  node.loop_start = loopStart;
	  node.stem_start = stemStart;
	  node.lBox = null;
	  node.sBox = null;
	  return node;
	}

	/**
	 * @brief treeHandleLoop
	 *    - method for configtree construction.
	 *    uses recursive calls alternating with treeHandleStem method to get the whole RNA
	 * @param parent
	 *    - parent node of the current loop in configtree
	 * @param loopStart
	 *    - index of the loop's first base
	 * @param stemStart
	 *    - index of the prior stem's first base
	 * @param pairTable
	 *    - the RNA's pairing information
	 * @param baseInformation
	 *    - array of tBaseInformation annotations (grants config)
	 * @return
	 *    - pointer to the subtree (configtree) that has this loop as root
	 */
	function treeHandleLoop(parent, nodeID, loopStart, stemStart, ptable, baseInformation) {
	  let addedChildren = 0;
	  var subtree = createTreeNode(nodeID, parent, loopStart, stemStart, ptable, baseInformation[loopStart].config);
	  const end = ptable[loopStart];
	  for (let i = loopStart + 1; i < end; ++i) {
	    if (ptable[i] > i) {
	      // found new stem
	      let child = null;
	      [child, nodeID] = treeHandleStem(subtree, nodeID, i, ptable, baseInformation);
	      child.parent = subtree;
	      setChild(subtree, addedChildren, child);
	      addedChildren++;
	      i = ptable[i];
	    }
	  }
	  return [subtree, nodeID];
	}

	/**
	 * @brief treeHandleStem
	 *    - method for configtree construction.
	 *    uses recursive calls alternating with treeHandleLoop method to get the whole RNA
	 * @param parent
	 *    - parent node of the current loop in configtree
	 * @param stemStart
	 *    - index of the stem's first base
	 * @param ptable
	 *    - the RNA's pairing information
	 * @param baseInformation
	 *    - array of tBaseInformation annotations (grants config)
	 * @return
	 *    - pointer to the cunsecutive subtree (configtree) that is created from the consecutive loop
	 */
	function treeHandleStem(parent, nodeID, stemStart, ptable, baseInformation) {
	  ++nodeID;
	  //console.log("New stem: %c\n", *nodeID);
	  let i = stemStart;
	  while (baseInformation[i].config == null) {
	    ++i;
	  }
	  return treeHandleLoop(parent, nodeID, i, stemStart, ptable, baseInformation);
	}

	/**
	 * @brief buildBoundingBoxes
	 * @param tree
	 * @param ptable
	 * @param baseInformation
	 * @param x
	 * @param y
	 * @param bulge
	 *    - distance between regular stem and bulge base
	 */
	function buildBoundingBoxes(tree, ptable, baseInformation, x, y, bulge) {
	  const isRoot = tree.parent == null;
	  if (!isRoot) {
	    let lBox = buildLoopBox(tree.loop_start, ptable, baseInformation, x, y);
	    let sBox = buildStemBox(tree.stem_start, tree.loop_start, ptable, x, y, bulge);
	    lBox.parent = tree;
	    sBox.parent = tree;
	    tree.lBox = lBox;
	    tree.sBox = sBox;
	    updateAABB(tree.aabb, sBox, lBox);
	  }
	  for (let currentChild = 0; currentChild < tree.childCount; currentChild++) {
	    let child = getChild(tree, currentChild);
	    buildBoundingBoxes(child, ptable, baseInformation, x, y, bulge);
	  }
	}

	// documentation at header file
	function buildConfigtree(ptable, baseInformation, x, y, bulge) {
	  // create root
	  let nodeID = 0;
	  let root = createTreeNode(nodeID, null, 1, -1, ptable, null);
	  let addedChildren = 0;
	  const length = ptable[0];
	  for (let i = 1; i < length; ++i) {
	    if (ptable[i] > i) {
	      // found stem
	      let child = null;
	      [child, nodeID] = treeHandleStem(root, nodeID, i, ptable, baseInformation);
	      setChild(root, addedChildren, child);
	      addedChildren++;
	      i = ptable[i];
	    }
	  }
	  buildBoundingBoxes(root, ptable, baseInformation, x, y, bulge);
	  return root;
	}

	/**
	 * @brief translateBoundingBoxesByVector
	 *    - Performs a translation of a whole branch by a given vector.
	 *    Used to apply changes in config to the tree and its bounding boxes.
	 * @param tree
	 *    - tree that is being translated
	 * @param vector
	 *    - translation vector as let array[2]
	 */
	function translateBoundingBoxes(tree, vector) {
	  translateStemBox(tree.sBox, vector);
	  translateLoopBox(tree.lBox, vector);
	  updateAABB(tree.aabb, tree.sBox, tree.lBox);
	  for (let currentChild = 0; currentChild < tree.childCount; currentChild++) {
	    translateBoundingBoxes(getChild(tree, currentChild), vector);
	  }
	}

	/**
	 * @brief getChildIndex
	 *    - gets the index of child node where to find the node with given name.
	 * @param tree
	 *    - configtree you want to search in.
	 * @param childID
	 *    - ID of childnode you are looking for.
	 * @return
	 *    - child index or -1 if tree does not contain such a childnode.
	 */
	function getChildIndex(tree, childID) {
	  // check if there are further nodes to check
	  let childIndex = tree.childCount - 1;
	  for (let currentChild = 0; currentChild < tree.childCount; ++currentChild) {
	    let child = getChild(tree, currentChild);
	    if (getNodeID(child) > childID) {
	      childIndex = currentChild - 1;
	      break;
	    }
	  }
	  return childIndex;
	}

	/**
	 * @brief getChildAngle
	 *    - Calculates the clockwise angle of a given child node (given by name) at a loop.
	 *    This child needs to be a direct child node
	 *    The rotation angle of its center node will be calculated.
	 * @param parentNode
	 *    - tree node acting as parent loop
	 * @param childNode
	 *    - child node of which you want to know the angle
	 * @return
	 *    - angle of child node
	 *    the resulting angle might be smaller than 0° or greater than 360°
	 */
	function getChildAngle(parentNode, childNode) {
	  let parentLoopCenter = [parentNode.lBox.c[0], parentNode.lBox.c[1]];
	  let parentStemCenter = [parentNode.sBox.c[0], parentNode.sBox.c[1]];
	  let parentLoopStemVector = [];
	  vector(parentLoopCenter, parentStemCenter, parentLoopStemVector);
	  let childLoopCenter = [childNode.lBox.c[0], childNode.lBox.c[1]];
	  let angle = anglePtPtPt2D(parentStemCenter, parentLoopCenter, childLoopCenter);
	  if (!isToTheRightPointVector(parentLoopCenter, parentLoopStemVector, childLoopCenter)) {
	    angle = MATH_TWO_PI$3 - angle;
	  }
	  return angle;
	}

	/**
	 * @brief getChildAngleByIndex
	 *    - Calculates the clockwise angle of a given child node (given by name) at a loop.
	 *    This child needs to be a direct child node
	 *    The rotation angle of its center node will be calculated.
	 * @param parentNode
	 *    - tree node acting as parent loop
	 * @param childIndex
	 *    - index of child node of which you want to know the angle
	 * @return
	 *    - angle of child node
	 *    the resulting angle might be smaller than 0° or greater than 360°
	 */
	function getChildAngleByIndex(parentNode, childIndex) {
	  return getChildAngle(parentNode, getChild(parentNode, childIndex));
	}

	/**
	 * @brief getLoopCenter
	 *    - Getter for the center coordinates of a tree node's loop.
	 * @param node
	 *    - your tree node
	 * @param p
	 *    - double[2] return value for the loop's center coordinates
	 */
	function getLoopCenter(node, p) {
	  getLBoxCenter(node.lBox, p);
	}

	/*
	 * Get index-th child
	 */
	function getChild(node, index) {
	  if (node == null) {
	    return null;
	  } else if (index < 0) {
	    return null;
	  } else if (index >= node.childCount) {
	    return null;
	  } else {
	    return node.children[index];
	  }
	}
	function getParent(node) {
	  if (node == null) {
	    return null;
	  } else {
	    return node.parent;
	  }
	}

	const epsilon7 = 1e-7;
	function intersectCircleCircle(c1, c1r, c2, c2r) {
	  let v_c1_c2 = [];
	  vector(c1, c2, v_c1_c2);
	  let distance = vectorLength2D(v_c1_c2);
	  let intersect = distance < c1r + c2r;
	  //  console.log("C1=(%3.2f, %3.2f) r1=%3.2f ... C2=(%3.2f, %3.2f) r2=%3.2f\n", c1x, c1y, c1r, c2x, c2y, c2r);

	  return intersect;
	}
	function intersectLineSegments(A, B, X, Y, P) {
	  if (X[0] < A[0] - epsilon7 && X[0] < B[0] - epsilon7 && Y[0] < A[0] - epsilon7 && Y[0] < B[0] - epsilon7 || X[0] > A[0] + epsilon7 && X[0] > B[0] + epsilon7 && Y[0] > A[0] + epsilon7 && Y[0] > B[0] + epsilon7) {
	    /// Check if the x-coordinates of X and Y are smaller than
	    /// the x-coordinates of A and B . lines can not intersect
	    return 0;
	  }
	  if (X[1] < A[1] - epsilon7 && X[1] < B[1] - epsilon7 && Y[1] < A[1] - epsilon7 && Y[1] < B[1] - epsilon7 || X[1] > A[1] + epsilon7 && X[1] > B[1] + epsilon7 && Y[1] > A[1] + epsilon7 && Y[1] > B[1] + epsilon7) {
	    /// Check if the y-coordinates of X and Y are smaller than
	    /// the y-coordinates of A and B . lines can not intersect
	    return 0;
	  }
	  let denominator = (B[0] - A[0]) * (X[1] - Y[1]) - (B[1] - A[1]) * (X[0] - Y[0]);
	  if (Math.abs(denominator) < epsilon7) {
	    /// lines are parallel

	    /// check if X is situated on AB line
	    let sX, sY;
	    let dx = B[0] - A[0];
	    let dy = B[1] - A[1];
	    if (Math.abs(dx) > epsilon7) {
	      sX = (X[0] - A[0]) / dx;
	      let refXy = A[1] + sX * dy;
	      if (Math.abs(refXy - X[1]) > epsilon7) {
	        /// AB and XY are not part of the same line
	        return 0;
	      }
	      sY = (Y[0] - A[0]) / dx;
	    } else {
	      sX = (X[1] - A[1]) / dy;
	      let refXx = A[0] + sX * dx;
	      if (Math.abs(refXx - X[0]) > epsilon7) {
	        /// AB and XY are not part of the same line
	        return 0;
	      }
	      sY = (Y[1] - A[1]) / dy;
	    }

	    /// check if X or Y are situated directly on AB
	    if (0.0 <= sX && sX <= 1.0 || 0.0 <= sY && sY <= 1.0) {
	      return 1;
	    }

	    /// check if XY encloses AB
	    if (sX < 0.0 && 1.0 < sY || sY < 0.0 && 1.0 < sX) {
	      return 1;
	    }
	  } else {
	    /// lines are not parallel and might intersect
	    /// (default case)

	    let nominatorS = (X[0] - Y[0]) * (A[1] - X[1]) - (X[1] - Y[1]) * (A[0] - X[0]);
	    let nominatorT = (A[0] - X[0]) * (B[1] - A[1]) - (A[1] - X[1]) * (B[0] - A[0]);
	    let s = nominatorS / denominator;
	    let t = nominatorT / denominator;
	    if (0.0 <= s && s <= 1.0 && 0.0 <= t && t <= 1.0) {
	      let Ps = [];
	      Ps[0] = A[0] + s * (B[0] - A[0]);
	      Ps[1] = A[1] + s * (B[1] - A[1]);
	      let Pt = [];
	      Pt[0] = X[0] + t * (Y[0] - X[0]);
	      Pt[1] = X[1] + t * (Y[1] - X[1]);
	      if (Math.abs(Ps[0] - Pt[0]) < epsilon7 && Math.abs(Ps[1] - Pt[1]) < epsilon7) {
	        return 1;
	      } else {
	        // real difference
	        console.log("[DZ] intersectLineSegments: real difference = %15lf\n", Math.abs(Ps[0] - Pt[0]));
	      }
	    }
	  }
	  return 0;
	}

	const epsilonRecognize$1 = 14;
	function intersectLoopLoop(loop1, loop2) {
	  let c1 = [loop1.c[0], loop1.c[1]];
	  let r1 = loop1.r + 0.5 * epsilonRecognize$1;
	  let c2 = [loop2.c[0], loop2.c[1]];
	  let r2 = loop2.r + 0.5 * epsilonRecognize$1;
	  return intersectCircleCircle(c1, r1, c2, r2);
	}
	function projectPointOntoLine(a, b, p, ret_p) {
	  let u = [];
	  vector(a, p, u);
	  let v = [];
	  vector(a, b, v);
	  let w = [-v[1], v[0]];

	  /// split vmath.vector u into linear combination of vmath.vectors v and a vmath.vector perpendicular to v (w)
	  /// u = r * v + s * w
	  /// compute r which grants all needed information
	  let r = (u[1] - u[0] * w[1] / w[0]) / (v[1] - v[0] * w[1] / w[0]);
	  if (r < 0.0) {
	    ret_p[0] = a[0];
	    ret_p[1] = a[1];
	  } else if (r > 1.0) {
	    ret_p[0] = b[0];
	    ret_p[1] = b[1];
	  } else {
	    ret_p[0] = a[0] + r * v[0];
	    ret_p[1] = a[1] + r * v[1];
	  }

	  //printf("[PROJECT] r = %f\n", r);
	  //GEOGEBRA_printPoint("A", a);
	  //GEOGEBRA_printPoint("B", b);
	  //GEOGEBRA_printPoint("P", p);
	  //GEOGEBRA_printPoint("R", ret_p);
	  //printf("[GEOGEBRA] AB = Segment[A, B]\n");
	  return;
	}
	function ClosestPtPointBulge(p, a, b, c, ret_p) {
	  /// Note:
	  ///
	  /// In contrast to ClosestPtPointTriangle (taken from book Real-Time Collision Detection)
	  /// this function does not work for general triangles.
	  /// We implicitely make use of the fact that our bulges are equiliteral triangles
	  /// or to be more precise there are no angles greater than 90° in our triangles.
	  /// This allows for only checking for the first occurance of a side where polet p
	  /// is on the outer side of the triangle and not checking any further.
	  ///
	  /// In fact applying this function to a triangle with some angle being greater than 90°
	  /// may lead to wrong results as follows as described in the mentioned book
	  /// (at ClosestPtPointTriangle) as well.

	  {
	    // check if p on outer side of AB
	    let orientABC = isToTheRightPointPoint(a, b, c);
	    let orientABP = isToTheRightPointPoint(a, b, p);
	    //printf("[%s] ABC != ABP ? %d != %d : %d\n", fnName, orientABC, orientABP, orientABC != orientABP);
	    if (orientABC != orientABP) {
	      // p is on outer side of AB
	      //printf("[%s] check AB\n", fnName);
	      projectPointOntoLine(a, b, p, ret_p);
	      return;
	    }
	  }
	  {
	    // check if p on outer side of BC
	    let orientBCA = isToTheRightPointPoint(b, c, a);
	    let orientBCP = isToTheRightPointPoint(b, c, p);
	    //printf("[%s] BCA != BCP ? %d != %d : %d\n", fnName, orientBCA, orientBCP, orientBCA != orientBCP);
	    if (orientBCA != orientBCP) {
	      // p is on outer side of BC
	      //printf("[%s] check BC\n", fnName);
	      projectPointOntoLine(b, c, p, ret_p);
	      return;
	    }
	  }
	  {
	    // check if p on outer side of CA
	    let orientCAB = isToTheRightPointPoint(c, a, b);
	    let orientCAP = isToTheRightPointPoint(c, a, p);
	    //printf("[%s] CAB != CAP ? %d != %d : %d\n", fnName, orientCAB, orientCAP, orientCAB != orientCAP);
	    if (orientCAB != orientCAP) {
	      // p is on outer side of CA
	      //printf("[%s] check CA\n", fnName);
	      projectPointOntoLine(c, a, p, ret_p);
	      return;
	    }
	  }
	  {
	    // p is inside ABC
	    //printf("[%s] inside triangle\n", fnName);
	    ret_p[0] = p[0];
	    ret_p[1] = p[1];
	    return;
	  }
	}

	/**
	 * @brief ClosestPtPointOBB
	 * Implementation of ClostestPtPointOBB from the book "Real Time Collision Detection".
	 * Calculates the polet on a rectangle (stem) that is closest to a given polet p.
	 * @param stem    - rectangle / stem bounding box
	 * @param p_x     - x value of polet p
	 * @param p_y     - y value of polet p
	 * @param ret_p_x   - pointer to closest point's x value (used as return)
	 * @param ret_p_y   - pointer to closest point's y value (used as return)
	 */
	function ClosestPtPointOBB(stem, p, ret_p) {
	  let u0 = [stem.a[0], stem.a[1]];
	  let u1 = [stem.b[0], stem.b[1]];
	  let dv = [];
	  vector(stem.c, p, dv);
	  let dist_0 = scalarProduct2D(dv, u0);
	  let dist_1 = scalarProduct2D(dv, u1);
	  //printf("dist[%3.2f %3.2f]\n", dist_0, dist_1);

	  let sign_d0 = dist_0 < 0 ? -1 : 1;
	  let sign_d1 = dist_1 < 0 ? -1 : 1;
	  let sign_e0 = stem.e[0] < 0 ? -1 : 1;
	  let sign_e1 = stem.e[1] < 0 ? -1 : 1;
	  let abs_d0 = sign_d0 * dist_0;
	  let abs_d1 = sign_d1 * dist_1;
	  let abs_e0 = sign_e0 * stem.e[0];
	  let abs_e1 = sign_e1 * stem.e[1];

	  // clamp dist_0/1 to the extents of the OBB
	  let clamped_0 = abs_d0 > abs_e0 ? sign_d0 * abs_e0 : sign_d0 * abs_d0;
	  let clamped_1 = abs_d1 > abs_e1 ? sign_d1 * abs_e1 : sign_d1 * abs_d1;
	  ret_p[0] = stem.c[0] + clamped_0 * stem.a[0] + clamped_1 * stem.b[0];
	  ret_p[1] = stem.c[1] + clamped_0 * stem.a[1] + clamped_1 * stem.b[1];
	}
	function intersectStemLoop(stem, loop) {
	  // IDEA:
	  // get the polet on the rectangle (stem) that is closest to the circle's (loop) center
	  // if that polet is situated inside the circle
	  // then rectangle and circle intersect
	  // (from the book "Real Time Collision Detection")

	  // DEBUG
	  //  printf("Stem vs Loop\n");
	  //  printf("Stem: c[%3.2f, %3.2f] a[%3.2f, %3.2f] b[%3.2f, %3.2f] e[%3.2f, %3.2f]\n",
	  //      stem.c[0], stem.c[1],
	  //      stem.a[0], stem.a[1],
	  //      stem.b[0], stem.b[1],
	  //      stem.e[0], stem.e[1]);
	  //  printf("Loop: c[%3.2f, %3.2f] r[%3.2f]\n",
	  //      loop.c[0], loop.c[1],
	  //      loop.r);

	  // this is an implementation of TestSphereOBB from the book "Real Time Collision Detection"

	  /*
	  let stem_ea[2] = { stem.e[0] * stem.a[0],
	               stem.e[0] * stem.a[1] };
	  let stem_eb[2] = { stem.e[1] * stem.b[0],
	               stem.e[1] * stem.b[1] };
	  let A1[2] = { stem.c[0] - stem_ea[0] + stem_eb[0],
	           stem.c[1] - stem_ea[1] + stem_eb[1] };
	  let B1[2] = { stem.c[0] + stem_ea[0] + stem_eb[0],
	           stem.c[1] + stem_ea[1] + stem_eb[1] };
	  let C1[2] = { stem.c[0] + stem_ea[0] - stem_eb[0],
	           stem.c[1] + stem_ea[1] - stem_eb[1] };
	  let D1[2] = { stem.c[0] - stem_ea[0] - stem_eb[0],
	           stem.c[1] - stem_ea[1] - stem_eb[1] };
	   if ((   A1[0] < loop.c[0] - loop.r - epsilonRecognize
	     && B1[0] < loop.c[0] - loop.r - epsilonRecognize
	     && C1[0] < loop.c[0] - loop.r - epsilonRecognize
	     && D1[0] < loop.c[0] - loop.r - epsilonRecognize)
	    ||
	    (   A1[1] < loop.c[1] - loop.r - epsilonRecognize
	     && B1[1] < loop.c[1] - loop.r - epsilonRecognize
	     && C1[1] < loop.c[1] - loop.r - epsilonRecognize
	     && D1[1] < loop.c[1] - loop.r - epsilonRecognize)
	    ||
	    (   A1[0] > loop.c[0] + loop.r + epsilonRecognize
	     && B1[0] > loop.c[0] + loop.r + epsilonRecognize
	     && C1[0] > loop.c[0] + loop.r + epsilonRecognize
	     && D1[0] > loop.c[0] + loop.r + epsilonRecognize)
	    ||
	    (   A1[1] > loop.c[1] + loop.r + epsilonRecognize
	     && B1[1] > loop.c[1] + loop.r + epsilonRecognize
	     && C1[1] > loop.c[1] + loop.r + epsilonRecognize
	     && D1[1] > loop.c[1] + loop.r + epsilonRecognize)
	    ) {
	    return 0;
	  }
	  */

	  let intersect = 0;
	  let p = [];
	  ClosestPtPointOBB(stem, loop.c, p);
	  //  printf("ClosestPtPoint: [%3.2f %3.2f]\n", p_x, p_y);
	  //  printf("Center:     [%3.2f %3.2f]\n", loop.c[0], loop.c[1]);

	  let v_c_to_p = [];
	  vector(loop.c, p, v_c_to_p);
	  /*
	  let distance = vmath.vectorLength2D( v_c_to_p );
	  //  printf("distance:     %3.2f\n", distance);
	  //  printf("radius:     %3.2f\n", loop.r);
	   intersect = (distance < (loop.r + epsilonRecognize)); // add epsilon to classify nearby objects as intersecting
	  //  printf("intersecting: %d\n", intersect);
	  */

	  let distanceSquared = vectorLength2DSquared(v_c_to_p);
	  intersect = distanceSquared < (loop.r + epsilonRecognize$1) * (loop.r + epsilonRecognize$1);
	  // add epsilon to classify nearby objects as intersecting
	  return intersect;
	}
	function intersectStemStem(stem1, stem2) {
	  /// brute force approach for intersecting two rectangles
	  let stem1_ea = [stem1.e[0] * stem1.a[0], stem1.e[0] * stem1.a[1]];
	  let stem1_eb = [stem1.e[1] * stem1.b[0], stem1.e[1] * stem1.b[1]];
	  let B1 = [stem1.c[0] + stem1_ea[0] + stem1_eb[0], stem1.c[1] + stem1_ea[1] + stem1_eb[1]];
	  let C1 = [stem1.c[0] + stem1_ea[0] - stem1_eb[0], stem1.c[1] + stem1_ea[1] - stem1_eb[1]];
	  let D1 = [stem1.c[0] - stem1_ea[0] - stem1_eb[0], stem1.c[1] - stem1_ea[1] - stem1_eb[1]];
	  let A1 = [stem1.c[0] - stem1_ea[0] + stem1_eb[0], stem1.c[1] - stem1_ea[1] + stem1_eb[1]];
	  let stem2_ea = [stem2.e[0] * stem2.a[0], stem2.e[0] * stem2.a[1]];
	  let stem2_eb = [stem2.e[1] * stem2.b[0], stem2.e[1] * stem2.b[1]];
	  let B2 = [stem2.c[0] + stem2_ea[0] + stem2_eb[0], stem2.c[1] + stem2_ea[1] + stem2_eb[1]];
	  let C2 = [stem2.c[0] + stem2_ea[0] - stem2_eb[0], stem2.c[1] + stem2_ea[1] - stem2_eb[1]];
	  let D2 = [stem2.c[0] - stem2_ea[0] - stem2_eb[0], stem2.c[1] - stem2_ea[1] - stem2_eb[1]];
	  let A2 = [stem2.c[0] - stem2_ea[0] + stem2_eb[0], stem2.c[1] - stem2_ea[1] + stem2_eb[1]];

	  // Only the sides of the stems (AB, CD) need to be intersected against
	  // each other
	  if (intersectLineSegments(A1, B1, A2, B2)
	  //    || intersectLineSegments(A1, B1, B2, C2, null)
	  || intersectLineSegments(A1, B1, C2, D2)
	  //    || intersectLineSegments(A1, B1, D2, A2, null)
	  //    || intersectLineSegments(B1, C1, A2, B2, null)
	  //    || intersectLineSegments(B1, C1, B2, C2, null)
	  //    || intersectLineSegments(B1, C1, C2, D2, null)
	  //    || intersectLineSegments(B1, C1, D2, A2, null)
	  || intersectLineSegments(C1, D1, A2, B2)
	  //    || intersectLineSegments(C1, D1, B2, C2, null)
	  || intersectLineSegments(C1, D1, C2, D2)
	  //    || intersectLineSegments(C1, D1, D2, A2, null)
	  //    || intersectLineSegments(D1, A1, A2, B2, null)
	  //    || intersectLineSegments(D1, A1, B2, C2, null)
	  //    || intersectLineSegments(D1, A1, C2, D2, null)
	  //    || intersectLineSegments(D1, A1, D2, A2, null)
	  ) {
	    return 1;
	  } else {
	    return 0;
	  }
	}

	// Returns true if circle circ intersects triangle ABC, false otherwise.
	function TestCircleTriangle(circ_c, circ_r, A, B, C, p) {
	  // Find polet P on triangle ABC closest to circle center

	  // DA version
	  ClosestPtPointBulge(circ_c, A, B, C, p);

	  //  // DZ version
	  //  let p[2];
	  //  ClosestPtPointTriangle(circ_c, A, B, C, p);
	  //  if ((fabs(circ_c[0] - p[0]) <= epsilon3)
	  //    && (fabs(circ_c[1] - p[1]) <= epsilon3)) {
	  //    printf("TestCircleTriangle: %10.8lf %10.8lf <. %10.8lf %10.8lf\n",
	  //       circ_c[0], circ_c[1],
	  //       p[0], p[1]);
	  //  }

	  // circle and triangle intersect if the (squared) distance from circle
	  // center to polet is less than the (squared) circle radius
	  let v = [];
	  vector(p, circ_c, v);
	  let ret = scalarProduct2D(v, v) <= circ_r * circ_r;

	  //printf("[TEST TRIANGLE]\n");
	  //GEOGEBRA_printPoint("A", A);
	  //GEOGEBRA_printPoint("B", B);
	  //GEOGEBRA_printPoint("C", C);
	  //printf("[GEOGEBRA] abc = Polygon[A,B,C]\n");
	  //GEOGEBRA_printPoint("IN", circ_c);
	  //GEOGEBRA_printPoint("OUT", p);

	  return ret;
	}
	function intersectLoopBulges(loop, stem, bulge) {
	  bulge = -1;
	  let c = [loop.c[0], loop.c[1]];
	  let r = loop.r + epsilonRecognize$1;
	  for (let currentBulge = 0; currentBulge < stem.bulgeCount; currentBulge++) {
	    /**/
	    let A = [],
	      B = [],
	      C = [];
	    getBulgeCoordinates(stem, currentBulge, A, B, C);
	    let p = [];
	    if (TestCircleTriangle(c, r, A, B, C, p)) {
	      bulge = currentBulge;
	      return [1, bulge];
	    }
	  }
	  return [0, bulge];
	}
	function intersectBulgesBulges$1(stem1, stem2, bulge1, bulge2) {
	  bulge1 = -1;
	  bulge2 = -1;
	  let distance = 0.5 * epsilonRecognize$1;
	  for (let currentBulge1 = 0; currentBulge1 < stem1.bulgeCount; currentBulge1++) {
	    let piPrev = [],
	      piThis = [],
	      piNext = [];
	    getBulgeCoordinatesExtraDistance(stem1, currentBulge1, distance, piPrev, piThis, piNext);
	    for (let currentBulge2 = 0; currentBulge2 < stem2.bulgeCount; currentBulge2++) {
	      let pjPrev = [],
	        pjThis = [],
	        pjNext = [];
	      getBulgeCoordinatesExtraDistance(stem2, currentBulge2, distance, pjPrev, pjThis, pjNext);
	      if (intersectLineSegments(piPrev, piThis, pjPrev, pjThis) || intersectLineSegments(piPrev, piThis, pjThis, pjNext) || intersectLineSegments(piThis, piNext, pjPrev, pjThis) || intersectLineSegments(piThis, piNext, pjThis, pjNext)) {
	        bulge1 = currentBulge1;
	        bulge2 = currentBulge2;
	        return [1, bulge1, bulge2];
	      }
	    }
	  }
	  return [0, bulge1, bulge2];
	}
	function intersectStemBulges$1(stem1, stem2, bulge2) {
	  bulge2 = -1;
	  if (stem2.bulgeCount == 0) {
	    return [0, bulge2];
	  }

	  /// simplify to only check bulge lines against left and right stem lines
	  ///
	  /// if the bulge is surrounded by the stem then there is a Stem vs. Stem intersection
	  /// if the bulge intersects the stem's bottom or top line then there is an intersection with the adjacent loop
	  /// . no need to checks those cases

	  // N - North, E - East, S - South, W - West
	  // north is direction to loop
	  let pNW = [];
	  pNW[0] = stem1.c[0] + stem1.e[0] * stem1.a[0] - stem1.e[1] * stem1.b[0];
	  pNW[1] = stem1.c[1] + stem1.e[0] * stem1.a[1] - stem1.e[1] * stem1.b[1];
	  let pSW = [];
	  pSW[0] = stem1.c[0] - stem1.e[0] * stem1.a[0] - stem1.e[1] * stem1.b[0];
	  pSW[1] = stem1.c[1] - stem1.e[0] * stem1.a[1] - stem1.e[1] * stem1.b[1];
	  let pNE = [];
	  pNE[0] = stem1.c[0] + stem1.e[0] * stem1.a[0] + stem1.e[1] * stem1.b[0];
	  pNE[1] = stem1.c[1] + stem1.e[0] * stem1.a[1] + stem1.e[1] * stem1.b[1];
	  let pSE = [];
	  pSE[0] = stem1.c[0] - stem1.e[0] * stem1.a[0] + stem1.e[1] * stem1.b[0];
	  pSE[1] = stem1.c[1] - stem1.e[0] * stem1.a[1] + stem1.e[1] * stem1.b[1];
	  let distance = epsilonRecognize$1;
	  for (let currentBulge2 = 0; currentBulge2 < stem2.bulgeCount; currentBulge2++) {
	    let pPrev = [],
	      pThis = [],
	      pNext = [];
	    getBulgeCoordinatesExtraDistance(stem2, currentBulge2, distance, pPrev, pThis, pNext);
	    if (intersectLineSegments(pNW, pSW, pPrev, pThis) || intersectLineSegments(pNW, pSW, pThis, pNext) || intersectLineSegments(pNE, pSE, pPrev, pThis) || intersectLineSegments(pNE, pSE, pThis, pNext)) {
	      bulge2 = currentBulge2;
	      return [1, bulge2];
	    }
	  }
	  return [0, bulge2];
	}

	const intersectionType = Object.freeze({
	  noIntersection: 0,
	  LxL: 1,
	  LxS: 2,
	  SxL: 3,
	  SxS: 4,
	  LxB: 5,
	  BxL: 6,
	  SxB: 7,
	  BxS: 8,
	  BxB: 9,
	  siblings: 10,
	  exterior: 11
	});
	function intersectionTypeToString(it) {
	  switch (it) {
	    case intersectionType.LxL:
	      return "LxL";
	    case intersectionType.LxS:
	      return "LxS";
	    case intersectionType.LxB:
	      return "LxB";
	    case intersectionType.SxL:
	      return "SxL";
	    case intersectionType.SxS:
	      return "SxS";
	    case intersectionType.SxB:
	      return "SxB";
	    case intersectionType.BxL:
	      return "BxL";
	    case intersectionType.BxS:
	      return "BxS";
	    case intersectionType.BxB:
	      return "BxB";
	    case intersectionType.siblings:
	      return "BRA";
	    case intersectionType.exterior:
	      return "EXT";
	    default:
	      return "UNK";
	  }
	}

	const EXTERIOR_Y$2 = 100.0;
	const epsilonRecognize = 14;
	function intersectNodeExterior(node, puzzler) {
	  if (isExterior(node)) {
	    return 0;
	  }
	  if (isExterior(getParent(node))) {
	    return 0;
	  }
	  let cy = node.lBox.c[1];
	  let r = node.lBox.r + epsilonRecognize;
	  if (puzzler.checkExteriorIntersections) {
	    return cy - r <= EXTERIOR_Y$2;
	  } else {
	    return 0;
	  }
	}
	function intersectNodesBoundingBoxes(aabb1, aabb2, stem1, stem2) {
	  let extraDistance = 0;
	  extraDistance += epsilonRecognize;
	  let count = 0;
	  if (stem1.bulgeDist > 0.0) {
	    count++;
	  }
	  if (stem2.bulgeDist > 0.0) {
	    count++;
	  }
	  if (count > 0) {
	    extraDistance += 1.0 / count * (stem1.bulgeDist + stem2.bulgeDist);
	  }

	  //printInformation(fnName, "aabb1 min-max: %12.8lf %12.8lf -- %12.8lf %12.8lf\n", aabb1.min[0], aabb1.min[1], aabb1.max[0], aabb1.max[1]);
	  //printInformation(fnName, "aabb2 min-max: %12.8lf %12.8lf -- %12.8lf %12.8lf\n", aabb2.min[0], aabb2.min[1], aabb2.max[0], aabb2.max[1]);

	  if (aabb1.max[0] < aabb2.min[0] - extraDistance || aabb2.max[0] < aabb1.min[0] - extraDistance || aabb1.max[1] < aabb2.min[1] - extraDistance || aabb2.max[1] < aabb1.min[1] - extraDistance) {
	    return 0;
	  } else {
	    return 1;
	  }
	}
	function intersectNodeNode(node1, node2) {
	  let bulge1 = -1;
	  let bulge2 = -1;
	  let res = -1;
	  if (node1 == node2) {
	    return intersectionType.noIntersection;
	  }
	  let sBox_node1 = node1.sBox;
	  let lBox_node1 = node1.lBox;
	  let sBox_node2 = node2.sBox;
	  let lBox_node2 = node2.lBox;

	  // let intersectOld = OLD_intersectNodesBoundingBoxes(sBox_node1, lBox_node1, sBox_node2, lBox_node2);
	  let intersect = intersectNodesBoundingBoxes(node1.aabb, node2.aabb, sBox_node1, sBox_node2);
	  /*
	  if (intersectOld != intersect) {
	    printInformation(fnName, "aabb1 %d min-max: %12.8lf %12.8lf -- %12.8lf %12.8lf\n", getNodeID(node1), node1.aabb.min[0], node1.aabb.min[1], node1.aabb.max[0], node1.aabb.max[1]);
	    printInformation(fnName, "aabb2 %d min-max: %12.8lf %12.8lf -- %12.8lf %12.8lf\n", getNodeID(node2), node2.aabb.min[0], node2.aabb.min[1], node2.aabb.max[0], node2.aabb.max[1]);
	    printInformation(fnName, "result: %d\n", intersect);
	  }
	  */

	  if (!intersect) {
	    return intersectionType.noIntersection;
	  }
	  let parentOfNode1 = getParent(node1);
	  let parentOfNode2 = getParent(node2);
	  let node1IsParentOfNode2 = node1 == parentOfNode2;
	  let node2IsParentOfNode1 = node2 == parentOfNode1;
	  let nodesHaveCommonParent = parentOfNode1 == parentOfNode2;

	  /// SxS
	  if (!node1IsParentOfNode2 && !node2IsParentOfNode1 && !nodesHaveCommonParent && intersectStemStem(sBox_node1, sBox_node2)) {
	    /// successive stems never intersect while config is not broken
	    return intersectionType.SxS;
	  }

	  /// LxL
	  if (!node1IsParentOfNode2 && !node2IsParentOfNode1 && intersectLoopLoop(lBox_node1, lBox_node2)) {
	    /// successive loops do never intersect
	    return intersectionType.LxL;
	  }

	  /// SxL
	  if (!node2IsParentOfNode1 && intersectStemLoop(sBox_node1, lBox_node2)) {
	    return intersectionType.SxL;
	  }

	  /// LxS
	  if (!node1IsParentOfNode2 && intersectStemLoop(sBox_node2, lBox_node1)) {
	    return intersectionType.LxS;
	  }

	  /// LxB
	  if (!node1IsParentOfNode2) {
	    [res, bulge2] = intersectLoopBulges(lBox_node1, sBox_node2, bulge2);
	    if (res) {
	      return intersectionType.LxB;
	    }
	  }

	  /// BxL
	  if (!node2IsParentOfNode1) {
	    [res, bulge1] = intersectLoopBulges(lBox_node2, sBox_node1, bulge1);
	    if (res) {
	      return intersectionType.BxL;
	    }
	  }

	  /// SxB
	  [res, bulge2] = intersectStemBulges$1(sBox_node1, sBox_node2, bulge2);
	  if (res) {
	    return intersectionType.SxB;
	  }

	  /// BxS
	  [res, bulge1] = intersectStemBulges$1(sBox_node2, sBox_node1, bulge1);
	  if (res) {
	    return intersectionType.BxS;
	  }

	  /// BxB
	  [res, bulge1, bulge2] = intersectBulgesBulges$1(sBox_node1, sBox_node2, bulge1, bulge2);
	  if (res) {
	    return intersectionType.BxB;
	  }
	  return intersectionType.noIntersection;
	}
	function intersectNodeTree(node, tree, intersectorNode) {
	  let intersecting = intersectNodeNode(node, tree);
	  if (intersecting != intersectionType.noIntersection) {
	    intersectorNode.node = tree;
	    return 1;
	  } else {
	    let childCount = tree.childCount;
	    for (let i = 0; i < childCount; i++) {
	      if (intersectNodeTree(node, getChild(tree, i), intersectorNode)) {
	        return 1;
	      }
	    }
	  }
	  return 0;
	}
	function intersect_iterateTree(tree1, tree2, intersectorNode1, intersectorNode2) {
	  if (intersectNodeTree(tree1, tree2, intersectorNode2)) {
	    intersectorNode1.node = tree1;
	    return 1;
	  } else {
	    let childCount = tree1.childCount;
	    for (let i = 0; i < childCount; i++) {
	      if (intersect_iterateTree(getChild(tree1, i), tree2, intersectorNode1, intersectorNode2)) {
	        return 1;
	      }
	    }
	  }
	  return 0;
	}

	/*
	 * starting method for detection of intersections between trees
	 * basically this one iterates over both subtrees and does the intersection check
	 * for each pair from tree1 and tree2
	 * this is done recursively...
	 * iterate over tree1 and for each node we iterate over tree2 for intersection calcultion
	 */
	function intersectTrees(tree1, tree2) {
	  let intersectorNode1 = {
	    node: null
	  };
	  let intersectorNode2 = {
	    node: null
	  };
	  let intersecting = intersect_iterateTree(tree1, tree2, intersectorNode1, intersectorNode2);
	  return intersecting;
	}
	function intersectNodeLists(list1, size1, list2, size2, puzzler) {
	  for (let index1 = 0; index1 < size1; index1++) {
	    const node1 = list1[index1];
	    let isExterior1 = isExterior(node1);
	    for (let index2 = 0; index2 < size2; index2++) {
	      const node2 = list2[index2];
	      if (isExterior1) {
	        if (intersectNodeExterior(node2, puzzler)) {
	          return 1;
	        }
	      } else if (isExterior(node2)) {
	        if (intersectNodeExterior(node1, puzzler)) {
	          return 1;
	        }
	      } else {
	        if (intersectionType.noIntersection != intersectNodeNode(node1, node2)) {
	          return 1;
	        }
	      }
	    }
	  }
	  return 0;
	}

	const epsilonFix$1 = 19;
	function getBoundingWedgeRec(root, node, parentAngle, minAngle, maxAngle) {
	  /// --- Documentation ---
	  ///
	  /// How to ... get the bounding wedge of root's i-th child tree?
	  ///
	  /// get interesting points of current node
	  ///     (2) touch points of tangents from root.center to node's loop circle
	  ///     (n) bulge points of node's stem
	  ///     (2) corners of node's stem that coincide with root's loop [only for direct child]
	  ///
	  /// update min-angle...
	  ///     for each interesting point
	  ///         check if the point is on the left side of the min-angle axis
	  ///         if so
	  ///             min-angle -= diff-angle of min-axis and point-axis
	  /// update max-angle...
	  ///     for each interesting point
	  ///         check if the point is on the right side of the min-angle axis
	  ///         if so
	  ///             max-angle += diff-angle of max-axis and point-axis

	  const distance = epsilonFix$1;
	  let parent = getParent(node);
	  let centerRoot = [];
	  getLoopCenter(root, centerRoot);
	  let centerNode = [];
	  getLoopCenter(node, centerNode);
	  let vRootNode = [];
	  vector(centerRoot, centerNode, vRootNode);

	  /// set appropriate nodeAngle
	  /// this could have been done using ctree.getChildAngle function
	  /// but in terms of performance we can get this for free O(1)
	  /// costs of ctree.getChildAngle: O( maxDegreeOnPath * ( depth(node) - depth(root) ) ) per call
	  let nodeAngle;
	  if (parent == root) {
	    /// this happens only for the initial call and not for the recursive calls
	    /// initialize min/max with the direct child's angle
	    nodeAngle = getChildAngle(root, node);
	    minAngle = nodeAngle;
	    maxAngle = nodeAngle;
	  } else {
	    /// compare ctree.getChildAngle function
	    let centerParent = [];
	    getLoopCenter(parent, centerParent);
	    let vRootParent = [];
	    vector(centerRoot, centerParent, vRootParent);
	    let diffParent = angleBetweenVectors2D(vRootParent, vRootNode);
	    if (!isToTheRightPointVector(centerRoot, vRootParent, centerNode)) {
	      diffParent *= -1;
	    }
	    nodeAngle = parentAngle + diffParent;
	  }

	  /// get all bounding boxes
	  let loopNode = node.lBox;
	  let stemNode = node.sBox;

	  /// allocate space for points of interest
	  let numPoints = stemNode.bulgeCount;
	  if (parent == root) {
	    numPoints += 2;
	  } // for bottom corners of direct child's stem
	  let points = new Array(numPoints);
	  let pointIndex = 0;

	  /// points of interest (part 1)
	  /// bulge points
	  for (let i = 0; i < stemNode.bulgeCount; i++) {
	    let o = [],
	      q = []; // o, q are unused but necessary for function call
	    let bulgePoint = [];
	    getBulgeCoordinatesExtraDistance(stemNode, i, distance, o, bulgePoint, q);
	    points[pointIndex] = bulgePoint;
	    pointIndex++;
	  }

	  /// points of interest (part 2, only for direct child of root)
	  /// for the direct child of this computation's root
	  /// the corners of that child that coincide with root's loop (. stem bottom corners)
	  /// have a huge effect on the size of the bounding wedge
	  /// for all further descendants these points do not matter because
	  /// of the greater impact of the loops
	  if (parent == root) {
	    let pStemBottomCornerL = [];
	    pStemBottomCornerL[0] = stemNode.c[0] - stemNode.e[0] * stemNode.a[0] + stemNode.e[1] * stemNode.b[0];
	    pStemBottomCornerL[1] = stemNode.c[1] - stemNode.e[0] * stemNode.a[1] + stemNode.e[1] * stemNode.b[1];
	    points[pointIndex] = pStemBottomCornerL;
	    pointIndex++;
	    let pStemBottomCornerR = [];
	    pStemBottomCornerR[0] = stemNode.c[0] - stemNode.e[0] * stemNode.a[0] - stemNode.e[1] * stemNode.b[0];
	    pStemBottomCornerR[1] = stemNode.c[1] - stemNode.e[0] * stemNode.a[1] - stemNode.e[1] * stemNode.b[1];
	    points[pointIndex] = pStemBottomCornerR;
	    pointIndex++;
	  }

	  /// we compute the two tangents from root's center to node's circle periphery
	  /// using these for our min/max calculation ensures that the whole loop
	  /// is contained in the wedge
	  ///
	  /// we can directly compute the diffAngle for the touching points of the tangents
	  /// by using pythagoras' sentence
	  let radiusNode = loopNode.r + distance;
	  let distanceRootNode = vectorLength2D(vRootNode);
	  /// positive angle and negative angle share their size
	  let angle1 = Math.asin(radiusNode / distanceRootNode);
	  /// no need for let computation, just flip sign
	  let angle2 = -1 * angle1;

	  // store both angles in an array to afunction code duplication
	  let angles = [angle1, angle2];
	  /// update min / max for the tangents touching points (angles)
	  for (let currentAngle = 0; currentAngle < 2; currentAngle++) {
	    let diffAngle = angles[currentAngle];
	    let pointAngle = nodeAngle + diffAngle;

	    /// actual updating for min and max
	    if (pointAngle < minAngle) {
	      minAngle = pointAngle;
	    }
	    if (pointAngle > maxAngle) {
	      maxAngle = pointAngle;
	    }
	  }

	  /// update min / max for bulge points (and stem bottom points in first level of recursion)
	  for (let currentPoint = 0; currentPoint < numPoints; currentPoint++) {
	    let point = points[currentPoint];

	    /// vector from root.loop.center to point
	    let vCenterPoint = [];
	    vector(centerRoot, point, vCenterPoint);

	    /// (positive) offset angle between node.loop.center and point
	    let diffAngle = angleBetweenVectors2D(vRootNode, vCenterPoint);
	    let sign;
	    if (isToTheRightPointVector(centerRoot, vRootNode, point)) {
	      sign = 1;
	    } else {
	      sign = -1;
	    }
	    /// now the offset angle has some direction information
	    diffAngle *= sign;

	    /// the current point's angle has to be set with regard to the node's angle
	    let pointAngle = nodeAngle + diffAngle;

	    /// actual updating for min and max
	    if (pointAngle < minAngle) {
	      minAngle = pointAngle;
	    }
	    if (pointAngle > maxAngle) {
	      maxAngle = pointAngle;
	    }
	  }

	  /// free allocated space
	  // for (let currentPoint = 0; currentPoint < numPoints; currentPoint++) {
	  //     double* point = points[currentPoint];
	  //     free(point);
	  // }

	  /// recursive call
	  for (let currentChild = 0; currentChild < node.childCount; currentChild++) {
	    let child = getChild(node, currentChild);
	    getBoundingWedgeRec(root, child, nodeAngle, minAngle, maxAngle);
	  }
	  return [minAngle, maxAngle];
	}
	function getBoundingWedge(root, childIndex, minAngle, maxAngle) {
	  let child = getChild(root, childIndex);

	  /// not needed, done inside getBoundingWedgeRec at first recursion level
	  /// we keep this stuff here for maintainance reasons
	  //let childAngle;
	  //getChildAngle(root, child, &childAngle);
	  //*minAngle = *maxAngle = childAngle;

	  return getBoundingWedgeRec(root, child, 0, minAngle, maxAngle);
	}

	const MATH_PI$2 = Math.PI;
	const MATH_TWO_PI$2 = MATH_PI$2 * 2;
	const epsilon3$2 = 1e-3;
	const searchStrategy = Object.freeze({
	  BINARY_SEARCH: 0,
	  LINEAR_SEARCH: 1
	});
	const increaseStrategy = Object.freeze({
	  INCREASE_ALL_OTHER: 0,
	  INCREASE_LEFT_NEIGHBOR: 1,
	  INCREASE_RIGHT_NEIGHBOR: 2,
	  INCREASE_BOTH_NEIGHBORS: 3
	});
	const distributionStrategy = Object.freeze({
	  DISTRIBUTE_EQUALLY: 0,
	  DISTRIBUTE_PROPORTIONALLY: 1
	});
	function checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  return intersectNodeLists(subtree, sizeSubtree, subtree, sizeSubtree, puzzler) || intersectNodeLists(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	}

	/**
	 * @brief shrinkLoopRadiusLinearSearch
	 *    Try shrinking a loop by searching for a minimal radius in range [minRadius, maxRadius]
	 *    with minRadius being the minimal possible radius for the given config and maxRadius
	 *    being the radius that is currently applied (but may be too large).
	 * @param node the tree node which's loop you want to optimize
	 * @param allNodes
	 * @param numNodes
	 * @return shrinking ratio: new radius / old radius (0 < ratio <= 1)
	 */
	function shrinkLoopRadiusLinearSearch(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  let cfg = node.cfg;
	  let cfgRadius = cfg.radius;

	  /// we only want to adjust the radius based on the current config
	  /// the current radius is valid because it is
	  /// - either the result of the intersection resolution
	  /// - or attained while shrinking (causing no new intersections)
	  let minValidRadius = cfgRadius;

	  /// setup interval for linear search for a better (smaller) radius
	  let maxRadius = cfgRadius;
	  let minRadius = cfg.minRadius;

	  /// Check if difference is larger than a minimum
	  let minAbsoluteDelta = 1.0;
	  if (maxRadius - minRadius < minAbsoluteDelta) {
	    /// No change . shrinkingRatio == 1.0
	    return 1.0;
	  }

	  /// initialize linear search
	  let radius = minRadius;
	  let delta = 0.1 * (maxRadius - minRadius);

	  /// set maximum number of steps for linear search
	  let currentStep = 0;
	  let maxSteps = 10;

	  //  let doLoop = minRadius + minRelativeDelta * maxRadius < maxRadius;
	  while (currentStep < maxSteps) {
	    applyChangesToConfigAndBoundingBoxes(node, null, radius, puzzler);
	    let intersecting = checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	    if (intersecting) {
	      radius += delta;
	    } else {
	      break;
	    }
	    ++currentStep;
	  }
	  if (currentStep >= maxSteps || cfg.radius > maxRadius) {
	    applyChangesToConfigAndBoundingBoxes(node, null, minValidRadius, puzzler);
	  }

	  /// measure shrinking
	  let shrinkingRatio = cfg.radius / maxRadius;
	  //  printf("[%s] %c old:%f new:%f ratio:%f\n", fnName, getLoopName(node), cfgRadius, newRadius, shrinkingRatio);
	  return shrinkingRatio;
	}

	/**
	 * @brief shrinkLoopRadiusBinarySearch
	 *    Try shrinking a loop by searching for a minimal radius in range [minRadius, maxRadius]
	 *    with minRadius being the minimal possible radius for the given config and maxRadius
	 *    being the radius that is currently applied (but may be too large).
	 * @param node the tree node which's loop you want to optimize
	 * @param allNodes
	 * @param numNodes
	 * @return shrinking ratio: new radius / old radius (0 < ratio <= 1)
	 */
	function shrinkLoopRadiusBinarySearch(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  let cfg = node.cfg;
	  let cfgRadius = cfg.radius;

	  /// we only want to adjust the radius based on the current config
	  /// the current radius is valid because it is
	  /// - either the result of the intersection resolution
	  /// - or attained while shrinking (causing no new intersections)
	  let minValidRadius = cfgRadius;

	  /// set abort criteria for binary search
	  let searchDepth = 0;
	  let maxSearchDepth = 10;
	  let minAbsoluteDelta = 10.0;
	  //  let minRelativeDelta = 0.01; // 1%

	  /// setup interval for binary search for a better (smaller) radius
	  let maxRadius = cfgRadius;
	  let minRadius = cfg.minRadius;

	  /// initialize binary search
	  let radius = minRadius;
	  let delta = 0.5 * (maxRadius - minRadius);

	  //  let doLoop = minRadius + minRelativeDelta * maxRadius < maxRadius;
	  let doLoop = minRadius + minAbsoluteDelta < maxRadius;
	  while (doLoop) {
	    searchDepth++;

	    //    printf("[%s] %c [%f, %f] r:%f\n", fnName, getLoopName(node), minRadius, maxRadius, radius);
	    applyChangesToConfigAndBoundingBoxes(node, null, radius, puzzler);
	    let intersecting = checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	    if (intersecting) {
	      radius += delta;
	    } else {
	      minValidRadius = radius;
	      radius -= delta;
	    }
	    delta *= 0.5;

	    //    printf("[%s]   valid:%d minValid:%f\n", fnName, !intersecting, minValidRadius);

	    let stopBySearchDepth = searchDepth > maxSearchDepth;
	    let stopByRadiusLimit = radius < minRadius;
	    //    let stopByRelativeDeltaLimit = (delta < cfgRadius * minRelativeDelta);
	    let stopByAbsoluteDeltaLimit = delta < minAbsoluteDelta;
	    doLoop = !stopBySearchDepth && !stopByRadiusLimit
	    //         && !stopByRelativeDeltaLimit
	    && !stopByAbsoluteDeltaLimit;
	    //    if (!doLoop) {
	    //      printf("[%s] %c stop reason:", fnName, getLoopName(node));
	    //      if (stopBySearchDepth) { printf(" maxSearchDepth (#%d)", maxSearchDepth); }
	    //      if (stopByRadiusLimit) { printf(" minRadiusReached"); }
	    //      if (stopByRelativeDeltaLimit)  { printf(" next changes < %.2f%%", 100.0 * minRelativeDelta); }
	    //      if (stopByAbsoluteDeltaLimit)  { printf(" next changes < %.2f", minAbsoluteDelta); }
	    //      printf("\n");
	    //    }
	  }
	  if (cfg.radius > minValidRadius) {
	    applyChangesToConfigAndBoundingBoxes(node, null, minValidRadius, puzzler);
	  }

	  /// measure shrinking
	  let shrinkingRatio = minValidRadius / cfgRadius;
	  //  printf("[%s] %c old:%f new:%f ratio:%f\n", fnName, getLoopName(node), cfgRadius, newRadius, shrinkingRatio);
	  return shrinkingRatio;
	}
	function shrinkLoopRadius(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  const strategy = searchStrategy.LINEAR_SEARCH;
	  switch (strategy) {
	    case searchStrategy.BINARY_SEARCH:
	      /// Use binary search
	      return shrinkLoopRadiusBinarySearch(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	    case searchStrategy.LINEAR_SEARCH:
	      /// Use linear search
	      return shrinkLoopRadiusLinearSearch(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	    default:
	      return 1.0;
	  }
	}

	/**
	 * @brief getSpaces
	 * @param node
	 * @param configSize
	 * @param pairedAngle
	 * @param space
	 */
	function getSpaces(node, configSize, pairedAngle, space) {
	  /// allocate memory for stuff used in calculation
	  let boundsLeft = new Array(configSize);
	  let boundsRight = new Array(configSize);

	  /// get all bounding wedges
	  boundsLeft[0] = 0.0 + 0.5 * pairedAngle;
	  let min, max;
	  for (let i = 0; i < configSize - 1; i++) {
	    [min, max] = getBoundingWedge(node, i, min, max);
	    boundsRight[i] = min;
	    boundsLeft[i + 1] = max;
	  }
	  boundsRight[configSize - 1] = MATH_TWO_PI$2 - 0.5 * pairedAngle;
	  for (let i = 0; i < configSize; i++) {
	    space[i] = boundsRight[i] - boundsLeft[i];
	  }
	}

	/**
	 * Check if config or radius changed
	 *
	 * @param cfg current configuration
	 * @param oldRadius
	 * @param newRadius
	 * @param deltas relative changes
	 */
	function somethingChanged(cfg, oldRadius, newRadius, deltas) {
	  let changed = newRadius - oldRadius != 0.0;
	  if (!changed && deltas != null) {
	    for (let i = 0; i < cfg.numberOfArcs; i++) {
	      if (deltas[i] != 0.0) {
	        changed = 1;
	        break;
	      }
	    }
	  }
	  return changed;
	}

	/**
	 * Apply relative relative changes (deltas) to configuration)
	 * - check if changes exist
	 * - apply relative changes if changes exist
	 *
	 * @param node current node to change
	 * @param deltas relative changes
	 * @param targetRadius
	 * @param logTag
	 * @param puzzler options to apply
	 */
	function applyDeltas(node, deltas, targetRadius, puzzler) {
	  if (somethingChanged(node.cfg, node.cfg.radius, targetRadius, deltas)) {
	    applyChangesToConfigAndBoundingBoxes(node, deltas, targetRadius, puzzler);
	  }
	}

	/**
	 * Apply new configuration.
	 * - compute relative changes (deltas)
	 * - apply relative changes
	 *
	 * @param node current node to change
	 * @param targetConfig
	 * @param targetRadius
	 * @param puzzler options to apply
	 */
	function applyConfig(node, targetConfig, puzzler) {
	  let cfg = node.cfg;
	  const configSize = cfg.numberOfArcs;
	  let deltas = new Array(configSize);
	  for (let i = 0; i < configSize; i++) {
	    deltas[i] = getArcAngle(targetConfig, i) - getArcAngle(cfg, i);
	  }
	  applyDeltas(node, deltas, targetConfig.radius, puzzler);
	}

	/**
	 * Compute current angle alpha between two unpaired bases for all arcs of a loop
	 *
	 * @param cfg current loop configuration
	 * @param puzzler options to apply
	 */
	function computeAlphas(alphas, cfg, pairedDistance) {
	  let configSize = cfg.numberOfArcs;
	  let pairedAngle = distanceToAngle(cfg.radius, pairedDistance);

	  /// Get alphas
	  for (let currentArc = 0; currentArc < configSize; currentArc++) {
	    alphas[currentArc] = (getArcAngle(cfg, currentArc) - pairedAngle) / cfg.cfgArcs[currentArc].numberOfArcSegments;
	  }
	}

	/**
	 * Increase all arcs except the one having decrease index.
	 *
	 * @param increase
	 * @param decreaseIndex
	 * @param configSize
	 */
	function computeIncreasesAllOther(increase, decreaseIndex, configSize) {
	  for (let i = 0; i < configSize; i++) {
	    if (i != decreaseIndex) {
	      increase[0]++;
	      increase[increase[0]] = i;
	    }
	  }
	}

	/**
	 * Increase left neighbor.
	 *
	 * @param increase
	 * @param decreaseIndex
	 * @param configSize
	 */
	function computeIncreasesLeftNeighbor(increase, decreaseIndex, configSize) {
	  let leftNeighbor = decreaseIndex > 0 ? decreaseIndex - 1 : configSize - 1;
	  increase[0]++;
	  increase[increase[0]] = leftNeighbor;
	}

	/**
	 * Increase right neighbor.
	 *
	 * @param increase
	 * @param decreaseIndex
	 * @param configSize
	 */
	function computeIncreasesRightNeighbor(increase, decreaseIndex, configSize) {
	  let rightNeighbor = decreaseIndex < configSize - 1 ? decreaseIndex + 1 : 0;
	  increase[0]++;
	  increase[increase[0]] = rightNeighbor;
	}

	/**
	 * Increase both neighbors.
	 *
	 * @param increase
	 * @param decreaseIndex
	 * @param configSize
	 */
	function computeIncreasesBothNeighbors(increase, decreaseIndex, configSize) {
	  let leftNeighbor = decreaseIndex > 0 ? decreaseIndex - 1 : configSize - 1;
	  let rightNeighbor = decreaseIndex < configSize - 1 ? decreaseIndex + 1 : 0;
	  increase[0]++;
	  increase[increase[0]] = leftNeighbor;
	  if (rightNeighbor != leftNeighbor) {
	    increase[0]++;
	    increase[increase[0]] = rightNeighbor;
	  }
	}

	/**
	 * Decide, which arcs to increase.
	 *
	 * @param increase
	 * @param decreaseIndex
	 * @param configSize
	 */
	function computeIncreases(increase, decreaseIndex, configSize) {
	  const strategy = increaseStrategy.INCREASE_ALL_OTHER;
	  switch (strategy) {
	    case increaseStrategy.INCREASE_ALL_OTHER:
	      computeIncreasesAllOther(increase, decreaseIndex, configSize);
	      break;
	    case increaseStrategy.INCREASE_LEFT_NEIGHBOR:
	      computeIncreasesLeftNeighbor(increase, decreaseIndex, configSize);
	      break;
	    case increaseStrategy.INCREASE_RIGHT_NEIGHBOR:
	      computeIncreasesRightNeighbor(increase, decreaseIndex, configSize);
	      break;
	    case increaseStrategy.INCREASE_BOTH_NEIGHBORS:
	      computeIncreasesBothNeighbors(increase, decreaseIndex, configSize);
	      break;
	  }
	}

	/**
	 * Compute configuration angle changes (deltas)
	 * distribute changes equally among arcs
	 *
	 */
	function computeDeltasDistributeEqually(deltas, decreaseIndex, decreaseAngle, increase) {
	  let deltaPerIncrease = decreaseAngle / increase[0];
	  for (let i = 1; i <= increase[0]; i++) {
	    let index = increase[i];
	    deltas[index] = deltaPerIncrease;
	  }
	  deltas[decreaseIndex] = -1 * decreaseAngle;
	}

	/**
	 * Compute configuration angle changes (deltas);
	 * distribute changes among arcs proportionally to alpha values of the respective arc
	 *
	 */
	function computeDeltasDistributeProportionally(deltas, decreaseIndex, decreaseAngle, cfgArcs, alphas, increase) {
	  let sumIncreaseAlphas = 0.0;
	  for (let i = 1; i <= increase[0]; i++) {
	    let index = increase[i];
	    sumIncreaseAlphas += cfgArcs[index].numberOfArcSegments * alphas[index];
	  }
	  for (let i = 1; i <= increase[0]; i++) {
	    let index = increase[i];
	    deltas[index] = cfgArcs[index].numberOfArcSegments * alphas[index] / sumIncreaseAlphas * decreaseAngle;
	  }
	  deltas[decreaseIndex] = -1 * decreaseAngle;
	}

	/**
	 * Compute configuration angle changes (deltas);
	 *
	 */
	function computeDeltas(deltas, decreaseIndex, decreaseAngle, cfgArcs, alphas, increase) {
	  const strategy = distributionStrategy.DISTRIBUTE_PROPORTIONALLY;
	  switch (strategy) {
	    case distributionStrategy.DISTRIBUTE_EQUALLY:
	      computeDeltasDistributeEqually(deltas, decreaseIndex, decreaseAngle, increase);
	      break;
	    case distributionStrategy.DISTRIBUTE_PROPORTIONALLY:
	      computeDeltasDistributeProportionally(deltas, decreaseIndex, decreaseAngle, cfgArcs, alphas, increase);
	      break;
	  }
	}

	/**
	 * Search for the best loop configuration between
	 * - the configuration with the new deltas computed applied
	 * - the old configuration (best)
	 *
	 * @param node node to change
	 * @param best best configuration
	 * @param subtree subtree nodes
	 * @param sizeSubtree number of subtree nodes
	 * @param ancestorList top level tree nodes
	 * @param sizeAncestorList number of top level tree nodes
	 * @param puzzler puzzler options
	 */
	function searchBestConfig(node, deltas, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  /// linear search for best config between current state and desired state (with no intersections)
	  let cfg = node.cfg;
	  let configSize = cfg.numberOfArcs;

	  /// apply the full range of changes
	  applyDeltas(node, deltas, cfg.radius, puzzler);

	  /// then search back for the first occuring valid state (which is then closest to the desired state)
	  let numSteps = 10;
	  let factor = 1.0 / numSteps;
	  for (let i = 0; i < configSize; i++) {
	    deltas[i] *= -1 * factor;
	  }
	  let intersecting = checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	  if (intersecting) {
	    for (let currentStep = 0; currentStep < numSteps - 1; ++currentStep) {
	      applyDeltas(node, deltas, cfg.radius, puzzler);
	      intersecting = checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	      if (!intersecting) {
	        // found improved config state
	        // stop search
	        break;
	      }
	    }
	  }
	  return !intersecting;
	}
	function canShrink(alphas, numberOfArcs, unpairedAngle) {
	  for (let currentArc = 0; currentArc < numberOfArcs; ++currentArc) {
	    if (alphas[currentArc] <= unpairedAngle) {
	      return 0;
	    }
	  }
	  return 1;
	}

	/**
	  * Optimize the loop of one specific node:
	  * - reduce radius
	  * - change config
	  *
	  */
	function optimizeNode(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  if (node.childCount <= 0) {
	    /// nothing to do for hairpin loops
	    //    printf("[%s] %c is hairpin-loop.\n", fnName, getNodeID(node));
	    return 1.0;
	  }
	  let cfg = node.cfg;
	  if (cfg.radius - cfg.defaultRadius < 5.0) {
	    /// nothing to do if radius increase is small
	    //    printDebug(fnName, "%d is almost in default state. no operation.\n", getNodeID(node));
	    return 1.0;
	  }

	  // configuration variables
	  let minMultiple = 2;
	  let configSize = cfg.numberOfArcs;

	  /// Save initial loop configuration
	  let initialConfig = cfgCloneConfig(cfg);

	  /// Save best configuration so far
	  let bestConfig = cfgCloneConfig(initialConfig);

	  /// Save radius of initial loop configuration
	  let initialRadius = cfg.radius;

	  // Loop characteristics that do change with config changes
	  let alphas = new Array(configSize);
	  let spaces = new Array(configSize);
	  let deltas = new Array(configSize);

	  // Index arrays
	  let sorted = new Array(configSize);
	  let increase = new Array(configSize + 1);

	  // minimal index that has largest space available
	  let minSortedIndex = 0;

	  // Number of runs
	  let runNr = 0;
	  let runNrMax = 100 * configSize; // just in case ...

	  let configChanged = 1;
	  let unpairedAngle;
	  while (minSortedIndex < configSize && runNr < runNrMax) {
	    runNr++;

	    //    printDebug(fnName, "%d [%d] min sorted index: %d\n", getNodeID(node), runNr, minSortedIndex);

	    /// save the number of (valid) entries at index 0 of increase
	    increase[0] = 0;
	    if (configChanged) {
	      /// get current unpaired angle
	      unpairedAngle = distanceToAngle(cfg.radius, puzzler.unpaired);

	      /// compute current angle alpha between two unpaired bases for all arcs of a loop
	      computeAlphas(alphas, cfg, puzzler.paired);
	      if (canShrink(alphas, configSize, unpairedAngle) && shrinkLoopRadius(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) < 1.0) {
	        //        printDebug(fnName, "%d (%d) shrinkLoopRadius: %16.12lf -- %16.12lf (%16.12lf)\n", getNodeID(node), runNr, cfg.radius, initialRadius, (cfg.radius / bestConfig.radius));
	        /// save current config as best configuration
	        // cfgFreeConfig(bestConfig);
	        bestConfig = cfgCloneConfig(cfg);

	        /// start process again
	        minSortedIndex = 0;

	        /// get current unpaired angle
	        unpairedAngle = distanceToAngle(cfg.radius, puzzler.unpaired);

	        /// compute current angle alpha between two unpaired bases for all arcs of a loop
	        computeAlphas(alphas, cfg, puzzler.paired);
	      } else {
	        /// No improvement
	        /// - reapply best config found so far
	        applyConfig(node, bestConfig, puzzler);
	      }
	      if (minSortedIndex == 0) {
	        /// Compute for each arc the available space between two wedges
	        let pairedAngle = distanceToAngle(cfg.radius, puzzler.paired);
	        getSpaces(node, configSize, pairedAngle, spaces);

	        /// Sort alphas by size decreasing
	        //      for (let currentArc = minSortedIndex; currentArc < configSize; currentArc++) {
	        //        let index = currentArc;
	        //        printDebug(fnName, "%d unsorted arc[%d] alpha: %16.12lf space: %16.12lf\n", getNodeID(node), index, alphas[index], spaces[index]);
	        //      }
	        bubblesort(configSize, alphas, spaces, sorted);
	        //      for (let currentArc = minSortedIndex; currentArc < configSize; currentArc++) {
	        //        let index = sorted[currentArc];
	        //        printDebug(fnName, "%d sorted arc[%d] alpha: %16.12lf space: %16.12lf\n", getNodeID(node), index, alphas[index], spaces[index]);
	        //      }
	      }
	    } else {
	      /// apply best configuration found so far
	      applyConfig(node, bestConfig, puzzler);
	    }

	    /// Find first arc with sufficient space based on alphas and spaces
	    let decreaseIndex = -1;
	    for (let index = minSortedIndex; index < configSize; index++) {
	      let currentArc = sorted[index];
	      //      printDebug(fnName, "%d arc[%d] alpha: %16.12lf space: %16.12lf\n", getNodeID(node), currentArc, alphas[currentArc], spaces[currentArc]);
	      let space = spaces[currentArc];
	      if (space > MATH_PI$2) {
	        space = MATH_PI$2;
	      }
	      /// having some space available is nice and sweet
	      /// but does not suffice justifying such expensive actions
	      /// therefore we claim a minimum distance to throw away in the drawing area

	      let minSpace = minMultiple * unpairedAngle;
	      if (space > minSpace) {
	        decreaseIndex = currentArc;
	        minSortedIndex = index + 1;
	        break;
	      }
	    }
	    if (decreaseIndex < 0) {
	      //      printDebug(fnName, "%d no valid arcs for shrinking.\n", getNodeID(node));
	      /// No arc found: leave
	      break;
	    }

	    /// Check if current arc has sufficient space
	    let space = spaces[decreaseIndex];
	    let minNecessarySpace = cfg.cfgArcs[decreaseIndex].numberOfArcSegments * unpairedAngle;
	    let currentNecessarySpace = cfg.cfgArcs[decreaseIndex].numberOfArcSegments * alphas[decreaseIndex];
	    const factor = 0.5;
	    // const let factor = 1.0;
	    let decreaseAngle = factor * Math.min(currentNecessarySpace - minNecessarySpace, space);
	    if (decreaseAngle < epsilon3$2) {
	      /// decreaseAngle too small: leave
	      continue;
	    }

	    /// Mark arcs for increase
	    computeIncreases(increase, decreaseIndex, configSize);

	    /// Compute configuration angle changes (deltas)
	    computeDeltas(deltas, decreaseIndex, decreaseAngle, cfg.cfgArcs, alphas, increase);

	    //    printDebug(fnName, "%d hook 1\n", getNodeID(node));

	    /// Apply changes as far as possible (start):
	    /// linear search for best config between current state and desired state (with no intersections)
	    //      printDebug(fnName, "%d searchBestConfig\n", getNodeID(node));
	    configChanged = searchBestConfig(node, deltas, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	  }

	  /// apply best configuration found so far
	  applyConfig(node, bestConfig, puzzler);
	  if (runNr >= runNrMax) {
	    // Check if improvement search ran out of attempts . bad sign
	    console.log("run number exceeded during node optimization\n");
	  }

	  /// Finished improvements
	  //  printDebug(fnName, "%d radii: %16.12lf -- %16.12lf\n", getNodeID(node), bestConfig.radius, initialConfig.radius);
	  if (bestConfig.radius < initialConfig.radius) {
	    // if (FANCY_PS) {
	    //   applyConfig(node, initialConfig, puzzler);
	    //   PS_printFancyTree(node, puzzler);
	    //   applyConfig(node, bestConfig, puzzler);
	    // }

	    /// best radius smaller than initial radius: log changes
	    for (let i = 0; i < configSize; i++) {
	      deltas[i] = getArcAngle(bestConfig, i) - getArcAngle(initialConfig, i);
	    }
	    puzzler.numberOfChangesAppliedToConfig++;
	    // logConfigChanges(getNodeID(node), cfg, deltas, initialConfig.radius, bestConfig.radius, "OPT", puzzler);

	    // if (FANCY_PS) {
	    //   PS_printFancyTree(node, puzzler);
	    // }
	  } else {
	    /// otherwise revert to initial state
	    applyConfig(node, initialConfig, puzzler);
	  }

	  /// compute and return gain in radius size
	  let shrinkRatio = cfg.radius / initialRadius;

	  //  printDebug(fnName, "%d radius: %12.8f . %12.8f (%12.8f%%)\n", getNodeID(node), radiusBeforeShrinking, radiusAfterShrinking, shrinkRatio * 100.0);

	  return shrinkRatio;
	}
	function optimizeTreeRecursive(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler) {
	  let shrinkingRatio = 1.0;
	  let ratio = 1.0;
	  let minRatio = 1.0;
	  do {
	    if (puzzler.numberOfChangesAppliedToConfig > puzzler.maximumNumberOfConfigChangesAllowed) {
	      console.log("Reached maximum number of changes. Abort.\n");
	      minRatio = 1.0;
	      break;
	    }
	    minRatio = 1.0;
	    /// do loop until nothing improves further
	    /// recursive optimization of all children
	    for (let currentChild = 0; currentChild < node.childCount; currentChild++) {
	      let child = getChild(node, currentChild);
	      ratio = optimizeTreeRecursive(child, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	      minRatio = Math.min(ratio, minRatio);
	      shrinkingRatio *= ratio;
	    }
	    if (minRatio < 1.0) {
	      continue;
	    }
	    if (!isExterior(node)) {
	      /// shrink current node
	      ratio = optimizeNode(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	      minRatio = Math.min(ratio, minRatio);
	      shrinkingRatio *= ratio;
	    }
	  } while (minRatio < 1.0);
	  return shrinkingRatio;
	}
	function optimizeTree(node, puzzler) {
	  if (!puzzler.optimize) {
	    return 1.0;
	  }
	  let shrinkingRatio = 1.0;

	  /// Collect subtree and ancestor tree nodes for intersection tests
	  let sizeSubtree = countSubtreeNodes(node);
	  let subtree = new Array(sizeSubtree);
	  collectSubtreeNodes(node, subtree, 0);
	  let sizeAncestorList = countAncestorNodes(node);
	  let ancestorList = new Array(sizeAncestorList);
	  collectAncestorNodes(node, ancestorList);
	  if (!checkIntersections(subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler)) {
	    /// Only start if subtree does not intersect with ancestor tree
	    shrinkingRatio = optimizeTreeRecursive(node, subtree, sizeSubtree, ancestorList, sizeAncestorList, puzzler);
	  } else {
	    /// nothing to do if children are intersecting
	    console.log("Optimization called while %d's subtree intersecting with itself or ancestors!\n", getNodeID(node));
	  }
	  return shrinkingRatio;
	}

	var ctors$1 = {
		'uint16': Uint16Array,
		'uint8': Uint8Array
	};


	// EXPORTS //

	var ctors_1 = ctors$1;

	// MODULES //

	var ctors = ctors_1;


	// IS LITTLE ENDIAN //

	/**
	* FUNCTION: isLittleEndian()
	*	Returns a boolean indicating if an environment is little endian.
	*
	* @returns {Boolean} boolean indicating if an environment is little endian
	*/
	function isLittleEndian$1() {
		var uint16_view;
		var uint8_view;

		uint16_view = new ctors[ 'uint16' ]( 1 );

		// Set the uint16 view to a value having distinguishable lower and higher order words.
		// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
		uint16_view[ 0 ] = 0x1234;

		// Create a uint8 view on top of the uint16 buffer:
		uint8_view = new ctors[ 'uint8' ]( uint16_view.buffer );

		// If little endian, the least significant byte will be first...
		return ( uint8_view[ 0 ] === 0x34 );
	} // end FUNCTION isLittleEndian()


	// EXPORTS //

	var lib$2 = isLittleEndian$1();

	// MODULES //

	var isLittleEndian = lib$2;


	// INDEX //

	var HIGH$1;
	if ( isLittleEndian === true ) {
		HIGH$1 = 1; // second index
	} else {
		HIGH$1 = 0; // first index
	}


	// EXPORTS //

	var high = HIGH$1;

	// MODULES //

	var HIGH = high;


	// NOTES //

	/**
	* float64 (64 bits)
	* f := fraction (significand/mantissa) (52 bits)
	* e := exponent (11 bits)
	* s := sign bit (1 bit)
	*
	* |-------- -------- -------- -------- -------- -------- -------- --------|
	* |                                Float64                                |
	* |-------- -------- -------- -------- -------- -------- -------- --------|
	* |              Uint32               |               Uint32              |
	* |-------- -------- -------- -------- -------- -------- -------- --------|
	*
	* If little endian (more significant bits last):
	*                         <-- lower      higher -->
	* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
	*
	* If big endian (more significant bits first):
	*                         <-- higher      lower -->
	* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
	*
	*
	* Note: in which Uint32 can we find the higher order bits? If LE, the second; if BE, the first.
	* Refs: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
	*/


	// VARIABLES //

	var FLOAT64_VIEW = new Float64Array( 1 );
	var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


	// HIGH WORD //

	/**
	* FUNCTION: highWord( x )
	*	Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
	*
	* @param {Number} x - input value
	* @returns {Number} higher order word
	*/
	function highWord( x ) {
		FLOAT64_VIEW[ 0 ] = x;
		return UINT32_VIEW[ HIGH ];
	} // end FUNCTION highWord()


	// EXPORTS //

	var lib$1 = highWord;

	// MODULES //

	var getHighWord = lib$1;


	// SIGNBIT //

	/**
	* FUNCTION: signbit( x )
	*	Returns a boolean indicating if the sign bit is on (true) or off (false).
	*
	* @param {Number} x - input value
	* @returns {Boolean} boolean indicating if sign bit is on or off
	*/
	function signbit( x ) {
		// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
		var high = getHighWord( x );

		// Shift off all bits which are not the sign bit and check if the sign bit is on:
		return ( high >>> 31 ) ? true : false;
	} // end FUNCTION signbit()


	// EXPORTS //

	var lib = signbit;

	var signbit$1 = /*@__PURE__*/getDefaultExportFromCjs(lib);

	const MATH_TWO_PI$1 = Math.PI * 2;
	const MIN_POSITIVE_ANGLE = +0.0000000001;
	const MIN_NEGATIVE_ANGLE = -0.0000000001;
	const epsilonFix = 19;
	function pointToAngle(center, vRef, rotationSign, point) {
	  let vCenterToPoint = [];
	  vector(center, point, vCenterToPoint);
	  let angle = angleBetweenVectors2D(vRef, vCenterToPoint);
	  let cw = isToTheRightPointVector(center, vRef, point);
	  if (rotationSign > 0 && cw) ; else if (rotationSign > 0 && !cw) {
	    angle = MATH_TWO_PI$1 - angle;
	  } else if (rotationSign < 0 && cw) {
	    angle = -MATH_TWO_PI$1 + angle;
	  } else if (rotationSign < 0 && !cw) {
	    angle = -angle;
	  }
	  //  printf("[%s] angle: %3.2f° - sign=%3.2f C=(%3.2f, %3.2f) v=(%3.2f, %3.2f) P=(%3.2f, %3.2f)\n"
	  //       , fnName, angle, rotationSign
	  //       , center[0], center[1]
	  //       , vRef[0], vRef[1]
	  //       , point[0], point[1]
	  //       );
	  return angle;
	}

	// staticRectLengthA is used for debug only
	function fixIntersectionOfRectangleAndCircle(staticRectCenter, staticRectVecA, staticRectVecB, staticRectLengthA, staticRectLengthB, mobileCircCenter, mobileCircRadius, rotationCenter, rotationSign) {
	  let fnName = "fixIntersectionOfCircleAndRectangle";

	  /// emergency exit
	  if (rotationSign == 0) {
	    console.log(fnName, "invalid rotation sign\n");
	    return 0.0;
	  }

	  /// some extra distance after intersection resolution
	  const distance = epsilonFix + mobileCircRadius;

	  /// vmath.circle definition (Center = centerNode.loop.center; sourceNode.loop.center on the vmath.circles periphery)
	  let vRotationCenterToInPoint = [];
	  vector(rotationCenter, mobileCircCenter, vRotationCenterToInPoint);
	  let rotationRadius = vectorLength2D(vRotationCenterToInPoint);

	  /// line definition
	  let axisOffset = staticRectLengthB + distance;
	  let axisDirection = [staticRectVecA[0], staticRectVecA[1]];
	  let axisAnchorPositive = [staticRectCenter[0] + axisOffset * staticRectVecB[0], staticRectCenter[1] + axisOffset * staticRectVecB[1]];
	  let axisAnchorNegative = [staticRectCenter[0] - axisOffset * staticRectVecB[0], staticRectCenter[1] - axisOffset * staticRectVecB[1]];

	  /// cut polet computation
	  let count = 0;
	  let cut = [[], [], [], []];
	  let numCutPointsPositive = getCutPointsOfCircleAndLine(rotationCenter, rotationRadius, axisAnchorPositive, axisDirection, cut[count + 0], cut[count + 1]);
	  count += numCutPointsPositive;
	  let numCutPointsNegative = getCutPointsOfCircleAndLine(rotationCenter, rotationRadius, axisAnchorNegative, axisDirection, cut[count + 0], cut[count + 1]);
	  count += numCutPointsNegative;
	  if (count == 0) {
	    /// in case we found no cut points
	    /// (example szenario: RF00100 >AANU01122137.1_2893-3214 Macaca mulatta 1099214708557, whole genome shotgun sequence.)
	    /// we just take those points on the vmath.circle that are closest to the lines
	    let axisNormal = [];
	    normal(axisDirection, axisNormal);
	    cut[count][0] = rotationCenter[0] + rotationRadius * axisNormal[0];
	    cut[count][1] = rotationCenter[1] + rotationRadius * axisNormal[1];
	    count++;
	    cut[count][0] = rotationCenter[0] - rotationRadius * axisNormal[0];
	    cut[count][1] = rotationCenter[1] - rotationRadius * axisNormal[1];
	    count++;
	  }

	  /// transform the calculated points into rotation angles
	  let angles = [];
	  for (let i = 0; i < count; i++) {
	    angles[i] = pointToAngle(rotationCenter, vRotationCenterToInPoint, rotationSign, cut[i]);
	  }

	  // fix underflows
	  for (let i = 0; i < count; i++) {
	    if (angles[i] == 0.0) {
	      angles[i] = signbit$1(angles[i]) ? MIN_NEGATIVE_ANGLE : MIN_POSITIVE_ANGLE;
	    }
	  }
	  let angle = rotationSign * MATH_TWO_PI$1;
	  for (let i = 0; i < count; i++) {
	    //    printDebug(fnName, "sign: %+2.0f | old: %7.2f° | angle: %7.2f°", rotationSign, angle, angles[i]);
	    if (rotationSign > 0.0 && angles[i] > 0.0) {
	      angle = Math.min(angle, angles[i]);
	    }
	    if (rotationSign < 0.0 && angles[i] < 0.0) {
	      angle = Math.max(angle, angles[i]);
	    }
	    //    printDebug(null, "| new: %7.2f°\n", angle);
	  }
	  if (Math.abs(angle) == 0.0 || Math.abs(angle) == MATH_TWO_PI$1) {
	    angle = 0.0;
	    console.log(fnName, "no valid rotation here.\n");
	  }
	  //  printDebug(fnName, "return: %+7.2f°\n", angle);
	  return angle;
	}
	function fixIntersectionOfCircles(staticCircleCenter, staticCircleRadius, mobileCircleCenter, mobileCircleRadius, rotationCenter, rotationSign) {
	  let fnName = "fixIntersectionOfCircles";

	  /// emergency exit
	  if (rotationSign == 0) {
	    console.log(fnName, "invalid rotation sign\n");
	    return 0.0;
	  }

	  /// some extra distance after intersection resolution
	  let distance = epsilonFix;

	  /// vmath.circle around centerNode
	  let vRotationCenterToCircleLoopCenter = [];
	  vector(rotationCenter, mobileCircleCenter, vRotationCenterToCircleLoopCenter);
	  let rotationRadius = vectorLength2D(vRotationCenterToCircleLoopCenter);

	  /// vmath.circle around rootNode (extended by intersectorNode's radius and some extra distance)
	  let extendedStaticCircleRadius = staticCircleRadius + mobileCircleRadius + distance;

	  /// cut polet computation
	  let cut1 = [],
	    cut2 = [];
	  let numCutPoints = getCutPointsOfCircles(rotationCenter, rotationRadius, staticCircleCenter, extendedStaticCircleRadius, cut1, cut2);

	  /// emergency exit ... should never happen
	  if (numCutPoints == 0) {
	    console.log(fnName, "calculated cut points: 0 expected: 1+\n");
	    console.log(fnName, "");
	    GEOGEBRA_printCircle("static", staticCircleCenter, staticCircleRadius);
	    console.log(fnName, "");
	    GEOGEBRA_printCircle("mobile", mobileCircleCenter, mobileCircleRadius);
	    console.log(fnName, "");
	    GEOGEBRA_printPoint("rotationcenter", rotationCenter);
	    console.log(fnName, "distance = %f\n", distance);
	    console.log(fnName, "rotationsign = %d\n", rotationSign);
	    return 0.0;
	  }

	  /// get rotation angles from cut points
	  let angle1 = 0.0;
	  let angle2 = 0.0;
	  {
	    // get angle1
	    let vCircleCenterToCut1 = [];
	    vector(rotationCenter, cut1, vCircleCenterToCut1);
	    angle1 = angleBetweenVectors2D(vRotationCenterToCircleLoopCenter, vCircleCenterToCut1);
	    let isCW1 = isToTheRightPointVector(rotationCenter, vRotationCenterToCircleLoopCenter, cut1);
	    if (!isCW1) {
	      angle1 *= -1;
	    }
	    // fix underflow
	    if (angle1 == 0.0) {
	      angle1 = signbit$1(angle1) ? MIN_NEGATIVE_ANGLE : MIN_POSITIVE_ANGLE;
	    }

	    // get angle2
	    let vCircleCenterToCut2 = [];
	    vector(rotationCenter, cut2, vCircleCenterToCut2);
	    angle2 = angleBetweenVectors2D(vRotationCenterToCircleLoopCenter, vCircleCenterToCut2);
	    let isCW2 = isToTheRightPointVector(rotationCenter, vRotationCenterToCircleLoopCenter, cut2);
	    if (!isCW2) {
	      angle2 *= -1;
	    }
	    // fix underflow
	    if (angle2 == 0.0) {
	      angle2 = signbit$1(angle2) ? MIN_NEGATIVE_ANGLE : MIN_POSITIVE_ANGLE;
	    }
	    if (isCW1 == isCW2) {
	      if (Math.abs(angle1) < Math.abs(angle2)) {
	        // evaluate angle2 from the other side
	        if (isCW2) {
	          angle2 = angle2 - MATH_TWO_PI$1;
	        } else {
	          angle2 = MATH_TWO_PI$1 - angle2;
	        }
	      } else {
	        // evaluate angle1 from the other side
	        if (isCW1) {
	          angle1 = angle1 - MATH_TWO_PI$1;
	        } else {
	          angle1 = MATH_TWO_PI$1 - angle1;
	        }
	      }
	    }
	  }
	  let rotationAngle = 0.0;
	  if (rotationSign == 1) {
	    rotationAngle = Math.max(angle1, angle2);
	  } else if (rotationSign == -1) {
	    rotationAngle = Math.min(angle1, angle2);
	  }
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "no valid rotation here.\n");
	  }
	  return rotationAngle;
	}

	/*----------------------------------------------------------------------*/

	function getRotationAngleLxL(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleLxL";
	  let staticLoop = ancestor.lBox;
	  let rotationLoop = rotationNode.lBox;
	  let mobileLoop = intersector.lBox;
	  let staticCircleCenter = [];
	  getLBoxCenter(staticLoop, staticCircleCenter);
	  let staticCircleRadius = staticLoop.r;
	  let mobileCircleCenter = [];
	  getLBoxCenter(mobileLoop, mobileCircleCenter);
	  let mobileCircleRadius = mobileLoop.r;
	  let rotationCenter = [];
	  getLBoxCenter(rotationLoop, rotationCenter);
	  let rotationAngle = fixIntersectionOfCircles(staticCircleCenter, staticCircleRadius, mobileCircleCenter, mobileCircleRadius, rotationCenter, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleLxS(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleLxS";
	  let staticRect = intersector.sBox;
	  let mobileCirc = ancestor.lBox;
	  let rotationLoop = rotationNode.lBox;
	  let inverseRotationSign = -1 * rotationSign;
	  let inverseRotationAngle = fixIntersectionOfRectangleAndCircle(staticRect.c, staticRect.a, staticRect.b, staticRect.e[0], staticRect.e[1], mobileCirc.c, mobileCirc.r, rotationLoop.c, inverseRotationSign);
	  let rotationAngle = -1 * inverseRotationAngle;
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleSxL(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleSxL";
	  let staticRect = ancestor.sBox;
	  let mobileCirc = intersector.lBox;
	  let rotationLoop = rotationNode.lBox;
	  let rotationAngle = fixIntersectionOfRectangleAndCircle(staticRect.c, staticRect.a, staticRect.b, staticRect.e[0], staticRect.e[1], mobileCirc.c, mobileCirc.r, rotationLoop.c, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleLxB(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleLxB";

	  /// idea: construct vmath.circles around the intersecting loop and bulge and resolve their intersection

	  let staticLoop = ancestor.lBox;
	  let mobileStem = intersector.sBox;

	  // ### static vmath.circle
	  // --- grab the intersector loop as static vmath.circle
	  let staticCircleCenter = [];
	  getLBoxCenter(staticLoop, staticCircleCenter);
	  let staticCircleRadius = staticLoop.r;

	  // ### mobile vmath.circle
	  // --- get bulge indices
	  let intersect, mobileBulgeIndex;
	  [intersect, mobileBulgeIndex] = intersectLoopBulges(staticLoop, mobileStem, mobileBulgeIndex);

	  // --- define mobile vmath.circle from mobile bulge
	  let mobileBulge = [[], [], []];
	  getBulgeCoordinates(mobileStem, mobileBulgeIndex, mobileBulge[0], mobileBulge[1], mobileBulge[2]);
	  let mobileCircleCenter = [];
	  let mobileCircleRadius = circle$1(mobileBulge[0], mobileBulge[1], mobileBulge[2], mobileCircleCenter);

	  // ### rotation center
	  // --- define rotation center from rotation loop
	  let rotationLoop = rotationNode.lBox;
	  let rotationCenter = [];
	  getLBoxCenter(rotationLoop, rotationCenter);

	  // ### resolve
	  // --- fix intersection of vmath.circles
	  let rotationAngle = fixIntersectionOfCircles(staticCircleCenter, staticCircleRadius, mobileCircleCenter, mobileCircleRadius, rotationCenter, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleBxL(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleBxL";

	  /// idea: construct vmath.circles around the intersecting bulge and loop and resolve their intersection

	  let staticStem = ancestor.sBox;
	  let mobileLoop = intersector.lBox;

	  // ### static vmath.circle
	  // --- get bulge indices
	  let intersect, staticBulgeIndex;
	  [intersect, staticBulgeIndex] = intersectLoopBulges(mobileLoop, staticStem, staticBulgeIndex);

	  // --- define static vmath.circle from static bulge
	  let staticBulge = [[], [], []];
	  getBulgeCoordinates(staticStem, staticBulgeIndex, staticBulge[0], staticBulge[1], staticBulge[2]);
	  let staticCircleCenter = [];
	  let staticCircleRadius = circle$1(staticBulge[0], staticBulge[1], staticBulge[2], staticCircleCenter);

	  // ### mobile vmath.circle
	  // --- grab the intersector loop as mobile vmath.circle
	  let mobileCircleCenter = [];
	  getLBoxCenter(mobileLoop, mobileCircleCenter);
	  let mobileCircleRadius = mobileLoop.r;

	  // ### rotation center
	  // --- define rotation center from rotation loop
	  let rotationLoop = rotationNode.lBox;
	  let rotationCenter = [];
	  getLBoxCenter(rotationLoop, rotationCenter);

	  // ### resolve
	  // --- fix intersection of vmath.circles
	  let rotationAngle = fixIntersectionOfCircles(staticCircleCenter, staticCircleRadius, mobileCircleCenter, mobileCircleRadius, rotationCenter, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleSxS(ancestor, rotationNode, intersector, rotatioSign) {
	  let fnName = "getRotationAngleSxS";
	  let rotationAngle = getRotationAngleSxL(ancestor, rotationNode, intersector, rotatioSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleSxB(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleSxB";
	  let staticStem = ancestor.sBox;
	  let mobileStem = intersector.sBox;
	  let rotationLoop = rotationNode.lBox;
	  let intersect, mobileBulgeIndex;
	  [intersect, mobileBulgeIndex] = intersectStemBulges(staticStem, mobileStem, mobileBulgeIndex);

	  // ### mobile vmath.circle
	  // --- define mobile vmath.circle from mobile bulge
	  let mobileBulge = [[], [], []];
	  getBulgeCoordinates(mobileStem, mobileBulgeIndex, mobileBulge[0], mobileBulge[1], mobileBulge[2]);
	  let mobileCircleCenter = [];
	  let mobileCircleRadius = circle$1(mobileBulge[0], mobileBulge[1], mobileBulge[2], mobileCircleCenter);
	  let rotationAngle = fixIntersectionOfRectangleAndCircle(staticStem.c, staticStem.a, staticStem.b, staticStem.e[0], staticStem.e[1], mobileCircleCenter, mobileCircleRadius, rotationLoop.c, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleBxS(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleBxS";
	  let staticStem = intersector.sBox;
	  let mobileStem = ancestor.sBox;
	  let rotationLoop = rotationNode.lBox;
	  let intersect, mobileBulgeIndex;
	  [intersect, mobileBulgeIndex] = intersectStemBulges(staticStem, mobileStem, mobileBulgeIndex);

	  // ### mobile vmath.circle
	  // --- define mobile vmath.circle from mobile bulge
	  let mobileBulge = [[], [], []];
	  getBulgeCoordinates(mobileStem, mobileBulgeIndex, mobileBulge[0], mobileBulge[1], mobileBulge[2]);
	  let mobileCircleCenter = [];
	  let mobileCircleRadius = circle$1(mobileBulge[0], mobileBulge[1], mobileBulge[2], mobileCircleCenter);
	  let rotationAngle = fixIntersectionOfRectangleAndCircle(staticStem.c, staticStem.a, staticStem.b, staticStem.e[0], staticStem.e[1], mobileCircleCenter, mobileCircleRadius, rotationLoop.c, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngleBxB(ancestor, rotationNode, intersector, rotationSign) {
	  let fnName = "getRotationAngleBxB";

	  /// idea: construct vmath.circles around both bulges and resolve their intersection

	  let staticStem = ancestor.sBox;
	  let mobileStem = intersector.sBox;

	  // --- get bulge indices
	  let intersect, staticBulgeIndex, mobileBulgeIndex;
	  [intersect, staticBulgeIndex, mobileBulgeIndex] = intersectBulgesBulges(staticStem, mobileStem, staticBulgeIndex, mobileBulgeIndex);

	  // ### static vmath.circle
	  // --- define static vmath.circle from static bulge
	  let staticBulge = [[], [], []];
	  getBulgeCoordinates(staticStem, staticBulgeIndex, staticBulge[0], staticBulge[1], staticBulge[2]);
	  let staticCircleCenter = [];
	  let staticCircleRadius = circle$1(staticBulge[0], staticBulge[1], staticBulge[2], staticCircleCenter);

	  // ### mobile vmath.circle
	  // --- define mobile vmath.circle from mobile bulge
	  let mobileBulge = [[], [], []];
	  getBulgeCoordinates(mobileStem, mobileBulgeIndex, mobileBulge[0], mobileBulge[1], mobileBulge[2]);
	  let mobileCircleCenter = [];
	  let mobileCircleRadius = circle$1(mobileBulge[0], mobileBulge[1], mobileBulge[2], mobileCircleCenter);

	  // ### rotation center
	  // --- define rotation center from rotation loop
	  let rotationLoop = rotationNode.lBox;
	  let rotationCenter = [];
	  getLBoxCenter(rotationLoop, rotationCenter);

	  // ### resolve
	  // --- fix intersection of vmath.circles
	  let rotationAngle = fixIntersectionOfCircles(staticCircleCenter, staticCircleRadius, mobileCircleCenter, mobileCircleRadius, rotationCenter, rotationSign);
	  if (rotationAngle == 0.0) {
	    console.log(fnName, "[%c %c %c] (promoted)\n", getNodeName(ancestor), getNodeName(rotationNode), getNodeName(intersector));
	  }
	  return rotationAngle;
	}
	function getRotationAngle(rootNode, centerNode, intersectorNode, it, rotationSign) {
	  let fnName = "getRotationAngle";
	  /// performs the appropriate calculation method for the given intersection type

	  let rotationAngle = 0.0;
	  switch (it) {
	    case intersectionType.LxL:
	      rotationAngle = getRotationAngleLxL(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.LxS:
	      rotationAngle = getRotationAngleLxS(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.LxB:
	      rotationAngle = getRotationAngleLxB(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.SxL:
	      rotationAngle = getRotationAngleSxL(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.SxS:
	      rotationAngle = getRotationAngleSxS(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.SxB:
	      rotationAngle = getRotationAngleSxB(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.BxL:
	      rotationAngle = getRotationAngleBxL(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.BxS:
	      rotationAngle = getRotationAngleBxS(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    case intersectionType.BxB:
	      rotationAngle = getRotationAngleBxB(rootNode, centerNode, intersectorNode, rotationSign);
	      break;
	    default:
	      console.log(fnName, "no computation for given intersection type\n");
	  }
	  return rotationAngle;
	}

	const MATH_PI$1 = Math.PI;
	const MATH_TWO_PI = MATH_PI$1 * 2;
	const epsilon3$1 = 1e-3;

	/*
	function DEPRECATED_getMinOuterAngle(
	  const treeNode *node
	) {
	  stemBox* sBox = node.sBox;
	  let pStemTopCorner[2];
	  pStemTopCorner[0] = sBox.c[0] + sBox.e[0] * sBox.a[0] + sBox.e[1] * sBox.b[0];
	  pStemTopCorner[1] = sBox.c[1] + sBox.e[0] * sBox.a[1] + sBox.e[1] * sBox.b[1];
	  let pLoopCenter[2];
	  getLoopCenter(node, pLoopCenter);
	  let vLoopCenterToStemTopCorner[2];
	  vector(pLoopCenter, pStemTopCorner, vLoopCenterToStemTopCorner);
	  let vLoopCenterToStemCenter[2] = { (-1) * sBox.a[0], (-1) * sBox.a[1] };
	  let minOuterAngle = angleBetweenVectors2D(vLoopCenterToStemCenter, vLoopCenterToStemTopCorner);

	  return minOuterAngle;
	}
	*/

	function calcDeltasEquidistantIncrease(targetAngleIn, configSize, increase, deltaCfg) {
	  let targetAngle = targetAngleIn;
	  let increaseCount = 0;
	  for (let i = 0; i < configSize; i++) {
	    if (increase[i]) {
	      increaseCount++;
	    }
	  }
	  let deltaPerIncrease = targetAngle / increaseCount;
	  for (let i = 0; i < configSize; i++) {
	    //    printDebug(fnName, "deltaCfg[%d]: %5.2lf°", i, deltaCfg[i]);
	    if (increase[i]) {
	      deltaCfg[i] += deltaPerIncrease;
	    }
	    //    printDebug(null, " . %5.2lf°\n", deltaCfg[i]);
	  }
	}
	function calcDeltasMaximumFirstDecrease(targetAngleIn, indexLeft, indexRight, configSize, deltaCfg, currentAngles, minAngleHalf) {
	  let targetAngle = targetAngleIn;
	  //  console.log("[%s] iLeft: %d iRight: %d\n", fnName, indexLeft , indexRight);

	  let i;
	  let doLoop = 1;
	  while (doLoop) {
	    let maxSpace = 0.0;
	    let maxSpaceIndex = -1;
	    if (indexLeft == -1) {
	      //      console.log("[%s] behavior: iterate right\n", fnName);

	      let sumAngles = 0.0;
	      i = -1;
	      while (i != indexRight) {
	        i++;
	        let cfg = currentAngles[i] + deltaCfg[i] - 2 * minAngleHalf;
	        sumAngles += cfg;
	      }
	      while (i != configSize - 1) {
	        i++;
	        let cfg = currentAngles[i] + deltaCfg[i] - 2 * minAngleHalf;
	        if (sumAngles < MATH_PI$1) {
	          if (cfg > maxSpace) {
	            maxSpace = cfg;
	            maxSpaceIndex = i;
	          }
	        } else {
	          break;
	        }
	        /// sum increase happens afterwards to allow bending the arc containing 180°
	        sumAngles += cfg;
	      }
	    } else if (indexRight == -1) {
	      //      console.log("[%s] behavior: iterate left\n", fnName);

	      let sumAngles = 0.0;
	      i = configSize - 1;
	      while (i != indexLeft) {
	        let cfg = currentAngles[i] + deltaCfg[i] - 2 * minAngleHalf;
	        sumAngles += cfg;
	        i--;
	      }
	      while (i != -1) {
	        //        console.log("[%s] i: %d size: %d\n", fnName, i, configSize);
	        let cfg = currentAngles[i] + deltaCfg[i] - 2 * minAngleHalf;
	        if (sumAngles < MATH_PI$1) {
	          if (cfg > maxSpace) {
	            maxSpace = cfg;
	            maxSpaceIndex = i;
	          }
	        } else {
	          break;
	        }
	        /// sum increase happens afterwards to allow bending the arc containing 180°
	        sumAngles += cfg;
	        i--;
	      }
	    } else {
	      // default behavior
	      //      console.log("[%s] behavior: default\n", fnName);

	      i = indexRight;
	      if (i == configSize - 1) {
	        i = -1;
	      }
	      while (i != indexLeft) {
	        //        console.log("[%s] i: %d size: %d\n", fnName, i+1, configSize);
	        let cfg = currentAngles[i + 1] + deltaCfg[i + 1] - 2 * minAngleHalf;
	        if (cfg > maxSpace) {
	          maxSpace = cfg;
	          maxSpaceIndex = i + 1;
	          //          console.log("[%s] newMax: %+7.2f°[%d] (cfg: %+7.2f° delta: %+7.2f° space: %+7.2f°)\n", fnName, maxSpace, maxSpaceIndex, toDegree(currentAngles[maxSpaceIndex]), deltaCfg[maxSpaceIndex], (-2) * minAngleHalf);
	        }
	        i++;
	        if (i == configSize - 1) {
	          i = -1;
	        }
	      }
	    }

	    /// using spaces
	    //    for (i = 0; i < configSize; i++) {
	    //      if (decrease[i]) {
	    //        if (currentAngles[i] > maxSpace) {
	    //          maxSpace = currentAngles[i];
	    //          maxSpaceIndex = i;
	    //        }
	    //      }
	    //    }

	    //    maxSpace = toDegree(maxSpace);

	    let diff = 0.0;
	    if (maxSpaceIndex != -1) {
	      let factor = targetAngle < 0.1 * targetAngleIn ? 1.0 : 0.5;
	      diff = -1 * Math.min(factor * maxSpace, targetAngle);
	      //      console.log("[%s] diff: %+7.2f = (-1) * Math.min(%+7.2f, %+7.2f)\n", fnName, diff, (factor * maxSpace), targetAngle);
	      //      console.log("[%s] cfg[%d]: %+7.2f° (+ %+7.2f°) diff: %+7.2f°\n", fnName, maxSpaceIndex, toDegree(currentAngles[maxSpaceIndex]), deltaCfg[maxSpaceIndex], diff);
	      deltaCfg[maxSpaceIndex] += diff;
	      targetAngle += diff;
	    }
	    doLoop = targetAngle > 0.0 && Math.abs(diff) > epsilon3$1;
	  }
	  return targetAngle;
	}
	function calcDeltasNearestNeighborsFirstDecrease(targetAngleIn, indexLeft, indexRight, configSize, decrease, space, deltaCfg) {
	  let targetAngle = targetAngleIn;
	  //  console.log("[%s] start: %d stop: %d\n", fnName, startIndex, stopIndex);
	  let steps = 0;
	  let stemIt = indexRight;
	  while (stemIt != indexLeft) {
	    stemIt++;
	    if (stemIt == configSize) {
	      stemIt = -1;
	    }
	    steps++;
	    //    console.log("[%s] stemIt: %d steps: %d\n", fnName, stemIt, steps);
	  }
	  let numIt = steps / 2; // implicit floor() operation
	  //  console.log("[%s] indexL: %d indexR: %d steps: %d numItFloat: %f numItInt: %d\n", fnName, indexLeft, indexRight, steps, 0.5 * steps, numIt);

	  let index = new Array(steps);
	  let changed = 1;
	  while (changed) {
	    changed = 0;
	    let count = 0;
	    let iL = indexLeft;
	    if (iL == -1) {
	      iL = configSize - 1;
	    }
	    let iR = indexRight + 1;
	    if (iR == configSize) {
	      iR = 0;
	    }
	    for (let i = 0; i < numIt; i++) {
	      if (decrease[iL]) {
	        index[count] = iL;
	        count++;
	      }
	      if (decrease[iR]) {
	        index[count] = iR;
	        count++;
	      }
	      iL--;
	      if (iL == -1) {
	        iL = configSize - 1;
	      }
	      iR++;
	      if (iR == configSize) {
	        iR = 0;
	      }
	    }
	    if (numIt < 0.5 * steps) {
	      index[count] = iL;
	      count++;
	      iL--;
	      if (iL == -1) {
	        iL = configSize - 1;
	      }
	    }

	    //    console.log("[%s] index queue:", fnName);
	    //    for (i = 0; i < count; i++) {
	    //      console.log(" %d", index[i]);
	    //    }
	    //    console.log("\n");

	    if (count > 0) {
	      let partAngle = targetAngle / count;
	      for (let k = 0; k < count; k++) {
	        let j = index[k];
	        if (decrease[j]) {
	          let diff = -1 * Math.min(space[j] + deltaCfg[j], partAngle);
	          deltaCfg[j] += diff;
	          targetAngle += diff;
	          changed = changed || diff != 0.0;
	        }
	      }
	    }
	  }

	  //  console.log("[%s] return: %+7.2f°\n", fnName, targetAngle);

	  return targetAngle;
	}

	/**
	 * @brief calcDeltas
	 *    The area between stems indexLeft and indexRight
	 *    (by traversing the loop clockwise starting at indexLeft-stem)
	 *    will be enlarged in degree as given via deltaAngle.
	 *    All other areas will be used to compensate that increase
	 *    (i.e. by decreasing those area's angles).
	 * @param node
	 * @param recursiveEnd
	 * @param indexLeft
	 * @param indexRight
	 * @param deltaAngle
	 * @param deltas
	 * @return the amount of change (in positive degree) that can be accomplished with calculated deltas
	 */
	function calcDeltas(node, recursiveEnd, indexLeft, indexRight, deltaAngle, puzzler, deltas) {
	  let fnName = "CALC DELTAS";

	  /// Check: valid angle >= 0.0
	  if (deltaAngle < 0.0) {
	    console.log(fnName, "cannot handle negative angles! grant proper input! (deltaAngle: %+7.2f°)\n", deltaAngle);
	    return 0.0;
	  }

	  /// Check: valid range
	  if (indexLeft == indexRight) {
	    console.log(fnName, "non-sense input. indices have to be different. (left: %d right%d)\n", indexLeft, indexRight);
	  }
	  let childCount = node.childCount;
	  let configSize = childCount + 1;

	  /// get the current node's stem's bounding wedge
	  //let minOuterAngle = getMinOuterAngle(node);
	  //let minOuterAngle = 0.5 * getPairedAngle(node);
	  let minOuterAngle = Math.asin(puzzler.paired / (2 * node.cfg.radius));
	  //  printDebug(fnName, "%d minOuterAngle:%f\n", getNodeID(node), minOuterAngle);

	  /// allocate memory for stuff used in calculation
	  let anglesMin = new Array(childCount);
	  let anglesMax = new Array(childCount);
	  let space = new Array(configSize);
	  let deltaCfg = new Array(configSize);
	  let increase = new Array(configSize);
	  let decrease = new Array(configSize);
	  let currentAngles = new Array(configSize);

	  /// Initialization currentAngles
	  let cfg = node.cfg;
	  for (let currentArc = 0; currentArc < cfg.numberOfArcs; ++currentArc) {
	    currentAngles[currentArc] = getArcAngle(cfg, currentArc);
	  }

	  /// get all bounding wedges (minAngle, maxAngle)
	  let min, max;
	  for (let currentChild = 0; currentChild < childCount; currentChild++) {
	    [min, max] = getBoundingWedge(node, currentChild, min, max);
	    //    printDebug(fnName, "wedge[%d]  min:%5.2lf  max:%5.2lf\n",
	    //           currentChild, min, max);

	    anglesMin[currentChild] = min;
	    anglesMax[currentChild] = max;
	  }

	  /// convert bounding wedges to "free" areas that can be used for compensation of changes
	  space[0] = anglesMin[0] - (0 + minOuterAngle);
	  //  printDebug(fnName, "space[%d] = %+11.6lf : %+11.6lf - %+11.6lf\n", 0, space[0], anglesMin[0], minOuterAngle);
	  for (let i = 1; i < configSize - 1; i++) {
	    space[i] = anglesMin[i] - anglesMax[i - 1];
	    //    printDebug(fnName, "space[%d] = %+11.6lf : %+11.6lf - %+11.6lf\n", i, space[i], anglesMin[i], anglesMax[i]);
	  }
	  space[configSize - 1] = MATH_TWO_PI - minOuterAngle - anglesMax[configSize - 2];
	  //  printDebug(fnName, "space[%d] = %+11.6lf : %+11.6lf - %+11.6lf\n", configSize - 1, space[configSize - 1], (MATH_TWO_PI - minOuterAngle), anglesMax[configSize - 2]);

	  // fix too big spaces (may become bigger than config for very large loops)
	  for (let i = 0; i < configSize; i++) {
	    space[i] = Math.min(space[i], getArcAngle(node.cfg, i) - 2 * minOuterAngle);
	  }

	  //  // debug
	  //  for (let i = 0; i < configSize; i++) {
	  //    printDebug(fnName, "space[%d] = %+11.6lf\n", i, space[i]);
	  //  }

	  /// Initialization: calculation values (deltaCfg, increase, decrease)
	  for (let i = 0; i < configSize; i++) {
	    deltaCfg[i] = 0.0;
	    increase[i] = -1;
	    decrease[i] = -1;
	  }

	  //  console.log("[%s] iLeft: %d iRight: %d angle: %+7.2f°\n", fnName, indexLeft, indexRight, deltaAngle);

	  /// Mark increase and decrease areas
	  let currentIndex = indexLeft; // stemIndex
	  while (currentIndex != indexRight) {
	    //    console.log("[%s] (1) currentIndex: %d size: %d\n", fnName, currentIndex+1, configSize);
	    increase[currentIndex + 1] = 1;
	    decrease[currentIndex + 1] = 0;
	    currentIndex++;
	    if (currentIndex == configSize - 1) {
	      currentIndex = -1;
	    }
	  }
	  while (currentIndex != indexLeft) {
	    //    console.log("[%s] (2) currentIndex: %d size: %d\n", fnName, currentIndex+1, configSize);
	    increase[currentIndex + 1] = 0;
	    decrease[currentIndex + 1] = space[currentIndex + 1] > 0.0;
	    currentIndex++;
	    if (currentIndex == configSize - 1) {
	      currentIndex = -1;
	    }
	  }

	  /// ------------------------
	  /// --- ^        ^ ---
	  /// --- | preparations | ---
	  /// --- |        | ---
	  /// ------------------------

	  /// ------------------------
	  /// --- |        | ---
	  /// --- | calculation  | ---
	  /// --- v        v ---
	  /// ------------------------

	  //  console.log("[%s] [SIGNS] %d", fnName, getNodeID(node));
	  //  for (let i = 0; i < configSize; i++) {
	  //    if (increase[i]) {
	  //      console.log(" %d:+", i);
	  //    }
	  //    if (decrease[i]) {
	  //      console.log(" %d:-", i);
	  //    }
	  //    if (!increase[i] && !decrease[i]) {
	  //      console.log(" %d:#", i);
	  //    }
	  //  }
	  //  console.log("\n");

	  let targetAngle = deltaAngle;

	  /// Step 1: equidistant increase
	  calcDeltasEquidistantIncrease(targetAngle, configSize, increase, deltaCfg);

	  /// Step 2: nearest neighbor first decrease
	  targetAngle = calcDeltasNearestNeighborsFirstDecrease(targetAngle, indexLeft, indexRight, configSize, decrease, space, deltaCfg);

	  /// Step 3: check if intersections are fixed
	  let notFixedYet = targetAngle != 0.0;
	  if (notFixedYet) {
	    /// if the intersection is not yet fixed

	    //    printDebug(fnName, "remaining target: %+7.2f°\n", targetAngle);

	    /// check if there is a loop on a higher level that can be bend instead of this one
	    /// if this is the case we can apply methods using spaces
	    /// otherwise we need to use drastical measures (e.g. maximumFirstDecrease using cfg instead of spaces)

	    let parent = getParent(node);
	    let canGoHigher = 0;
	    while (parent != recursiveEnd && !isExterior(parent)) {
	      //      console.log("[%s] parent: %d\n", fnName, getNodeID(parent));
	      let parentIsMultiLoop = isMultiLoop(parent);
	      if (parentIsMultiLoop) {
	        //        console.log("[%s] is multi loop\n", fnName);
	        canGoHigher = 1;
	        break;
	      } else {
	        // parent is interior loop
	        let childAngle = getArcAngle(parent.cfg, 0);
	        if (Math.abs(childAngle - MATH_PI$1) < epsilon3$1) ; else if (childAngle > MATH_PI$1) {
	          if (indexLeft == 0) {
	            //            console.log("[%s] can bend left\n", fnName);
	            canGoHigher = 1;
	            break;
	          }
	        } else if (childAngle < MATH_PI$1) {
	          if (indexLeft == -1) {
	            //            console.log("[%s] can bend right\n", fnName);
	            canGoHigher = 1;
	            break;
	          }
	        }
	      }

	      /// if current parent node can not be adapted check its parent
	      parent = getParent(parent);
	    }

	    //    console.log("[%s] canGoHigher: %d\n", fnName, canGoHigher);
	    if (!canGoHigher) {
	      targetAngle = calcDeltasMaximumFirstDecrease(targetAngle, indexLeft, indexRight, configSize, deltaCfg, currentAngles, minOuterAngle);
	    }
	  }

	  /// Step 4: equidistant increase with negative remaining target angle
	  calcDeltasEquidistantIncrease(-1 * targetAngle, configSize, increase, deltaCfg);
	  if (!cfgIsValid(cfg, deltaCfg)) {
	    console.log(fnName, "Deltas invalid 3\n");
	    // printConfigError(fnName, node, deltaCfg);
	    //  } else {
	    //    printDebug(fnName, "Deltas valid 3\n");
	  }

	  /// transfer calculated deltas to return area
	  for (let currentArc = 0; currentArc < configSize; currentArc++) {
	    deltas[currentArc] = deltaCfg[currentArc];
	    //    console.log("[%s] delta[%d]: %+7.2f° (space[%d]: %+7.2f°)\n", fnName, currentArc, deltas[currentArc], currentArc, space[currentArc]);
	  }

	  /// free allocated memory

	  /// check if all deltas sum up to zero
	  let checkSum = 0.0;
	  for (let currentArc = 0; currentArc < configSize; currentArc++) {
	    checkSum += deltas[currentArc];
	  }
	  if (Math.abs(checkSum) > epsilon3$1) {
	    console.log("[%s] config broke ... abort and reset\n", fnName);
	    for (let currentArc = 0; currentArc < configSize; currentArc++) {
	      //      console.log("[%s] delta[%d]: %+7.2f° (space[%d]: %+7.2f°)\n", fnName, currentArc, deltas[currentArc], currentArc, space[currentArc]);
	      deltas[currentArc] = 0.0;
	    }
	    targetAngle = deltaAngle;
	  }
	  if (!cfgIsValid(cfg, deltas)) {
	    // printConfigError(fnName, node, deltas);

	    for (let currentArc = 0; currentArc < configSize; currentArc++) {
	      //      console.log("[%s] delta[%d]: %+7.2f° (space[%d]: %+7.2f°)\n", fnName, currentArc, deltas[currentArc], currentArc, space[currentArc]);
	      deltas[currentArc] = 0.0;
	    }
	    targetAngle = deltaAngle;
	    //  } else {
	    //    printDebug(fnName, "Deltas valid\n");
	  }

	  //  for (let currentArc = 0; currentArc < configSize; ++currentArc) {
	  //    printDebug(fnName, "delta[%d] = %05.2f°\n", currentArc, deltas[currentArc]);
	  //  }

	  /// return the difference that can be accomplished using these deltas
	  let changedAngle = deltaAngle - targetAngle;
	  //  console.log("[%s] %+7.2f° = %+7.2f° - %+7.2f°\n", fnName, changedAngle, deltaAngle, targetAngle);
	  return changedAngle;
	}

	const epsilon3 = 1e-3;

	/**
	 * @brief checkAndApplyConfigChanges
	 *    - Method for performing of config.
	 *    Alters config as well as all corresponding boundingboxes.
	 *    Determines the new radius that fits best.
	 * @param tree
	 *    - tree node where the config is changed.
	 * @param deltaCfg
	 *    - array of config changes.
	 *    contains diff-values for each config angle.
	 *    in degree format
	 * @return 1 if something changed, 0 otherwise
	 */
	function checkAndApplyConfigChanges(tree, deltaCfg, it, puzzler) {
	  let fnName = "checkAndApplyConfigChanges";
	  let cfg = tree.cfg;
	  if (deltaCfg != null) {
	    for (let cntr = 0; cntr < 100; cntr++) {
	      let valid = 0;
	      for (let currentArc = 0; currentArc < cfg.numberOfArcs; currentArc++) {
	        if (Math.abs(deltaCfg[currentArc]) >= epsilon3) {
	          valid = 1;
	          break;
	        }
	      }
	      if (valid) {
	        break;
	      } else {
	        for (let currentArc = 0; currentArc < cfg.numberOfArcs; currentArc++) {
	          deltaCfg[currentArc] = 2.0 * deltaCfg[currentArc];
	        }
	      }
	      //    if (LOG_FLAG && cntr > 0) {
	      //      printf("[ LOG ] fixing... (%d)\n", cntr);
	      //    }
	    }
	  }

	  /*
	  printDebug(fnName, "\t- config old -\n");
	  cfgPrintConfig(cfg);
	  */

	  let logTag = intersectionTypeToString(it);
	  if (cfgIsValid(cfg, deltaCfg)) {
	    puzzler.numberOfChangesAppliedToConfig++;
	    cfg.radius;
	    let radiusNew = -1.0; // == unknown | calculate optimal radius
	    applyChangesToConfigAndBoundingBoxes(tree, deltaCfg, radiusNew, puzzler);
	    cfg.radius;
	    // logConfigChanges(getNodeID(tree), cfg, deltaCfg, oldRadius, newRadius, logTag, puzzler);

	    return 1;
	  } else {
	    /// changes result in angles outside 0° to 360°
	    console.log(fnName, "%s cannot apply changes to config. Invalid changes.\n", logTag);

	    /*
	    /// prlet erronious changes
	    printConfigError(fnName, tree, deltaCfg);
	    */

	    /// for not ending up in infinite calculations without being able to apply any changes
	    /// we increase the counter for changes per default
	    /// infinite calculations occurred while testing with RNA families
	    puzzler.numberOfChangesAppliedToConfig++;
	    return 0;
	  }
	}

	const MATH_PI = Math.PI;
	const EXTERIOR_Y$1 = 100.0;

	/**
	 * - -1 if rotation is counter-clockwise
	 * - 1 if rotation is clockwise
	 * - 0 else
	 */
	function TENTATIVE2_getRotationSign(path, pathLength) {
	  let result = 0;
	  if (pathLength < 2) {
	    console.log("[CRITICAL] path length: %d\n", pathLength);
	    return result;
	  }

	  /// Compute rotation angle
	  let angle = 0.0;
	  let currentNode = path[0];
	  let childNode;
	  for (let i = 1; i < pathLength; i++) {
	    childNode = path[i];
	    angle += getChildAngle(currentNode, childNode);
	    //    printInformation(fnName, "child angle %d:  %12.8lf\n", i, angle);
	    angle -= MATH_PI;
	    //    printInformation(fnName, "turtle angle %d: %12.8lf\n", i, angle);
	    currentNode = childNode;
	  }
	  //  printInformation(fnName, "angle: %12.8lf\n", angle);

	  /// Determine return value
	  if (angle < 0.0) {
	    result = 1;
	  } else if (angle > 0.0) {
	    result = -1;
	  } else {
	    result = 0;
	  }

	  //  printDebug(fnName, "return: %d (%12.8lf°)\n", result, angle);
	  return result;
	}
	function fixIntersectionWithAncestor(ancestor, rotationNode, intersector, rotationIndex, rotationSign, it, puzzler) {
	  if (rotationNode == ancestor && (it == intersectionType.LxL || it == intersectionType.LxS || it == intersectionType.LxB)) {
	    //    printf("[%s] [%d %d %d] no-op at ancestor with type %s\n", fnName, getNodeID(ancestor), getNodeID(rotationNode), getNodeID(intersector), intersectionTypeToString(it));
	    return 0;
	  }
	  let interiorChildAngle;
	  if (isInteriorLoop(rotationNode)) {
	    /// prevent interior loops from increasing the distance to their "straight" state
	    /// We only allow rotations towards straight.
	    interiorChildAngle = getChildAngleByIndex(rotationNode, 0);
	    let allowedRotationSign = 0;
	    if (interiorChildAngle > MATH_PI) {
	      allowedRotationSign = -1;
	    } else if (interiorChildAngle < MATH_PI) {
	      allowedRotationSign = 1;
	    }
	    if (rotationSign != allowedRotationSign) {
	      return 0;
	    }
	  }

	  /// get the rotation angle depending on the intersection type
	  let rotationAngle = getRotationAngle(ancestor, rotationNode, intersector, it, rotationSign);
	  if (isInteriorLoop(rotationNode)) {
	    /// prevent interior loops from rotating over their "straight" state
	    /// If necessary we limit the rotation so that this interior loop becomes straight.
	    let diffToStraight = MATH_PI - interiorChildAngle;
	    if (Math.abs(rotationAngle) > Math.abs(diffToStraight)) {
	      rotationAngle = diffToStraight;
	    }
	  }
	  let changed = 0;
	  if (rotationAngle != 0.0) {
	    /// compute the deltas for changing the configuration of this loop
	    let deltas = new Array(rotationNode.childCount + 1);
	    let deltaAngle = Math.abs(rotationAngle);
	    let indexLeft = -2;
	    let indexRight = -2;
	    if (rotationAngle > 0.0) {
	      indexLeft = -1;
	      indexRight = rotationIndex;
	    } else {
	      indexLeft = rotationIndex;
	      indexRight = -1;
	    }
	    calcDeltas(rotationNode, ancestor, indexLeft, indexRight, deltaAngle, puzzler, deltas);

	    /// check and apply the computed changes to the configuration of this loop
	    let itLog = isExterior(ancestor) ? intersectionType.exterior : it;
	    changed = checkAndApplyConfigChanges(rotationNode, deltas, itLog, puzzler);

	    // if (FANCY_PS) {
	    // PS_printFancyPath(ancestor, intersector, rotationNode, puzzler);
	    // }
	  }
	  if (changed) {
	    return rotationNode;
	  } else {
	    return null;
	  }
	}

	/**
	 * check if loop is interior and straight
	 */
	function isStraightInteriorLoop(node) {
	  return isInteriorLoop(node) && getChildAngleByIndex(node, 0) == MATH_PI;
	}

	/**
	 * compute intersection path from ancestor to intersector
	 * skipping straight interior loops that can not be used for rotations
	 * . improves rotation angle and rotation loop computations
	 */
	function constructReducedIntersectionPath(ancestor, intersector, it) {
	  /// - compute path length
	  let pathLength = 1;
	  let node = intersector;
	  while (node != ancestor) {
	    node = getParent(node);
	    if (!isStraightInteriorLoop(node)) {
	      /// skip straight interior loops
	      ++pathLength;
	    }
	  }
	  switch (it) {
	    case intersectionType.LxL:
	    case intersectionType.LxS:
	    case intersectionType.LxB:
	      /// - start at the child of the ancestor node for Lx? intersections
	      if (!isStraightInteriorLoop(ancestor)) {
	        /// exclude ancestor from reduced path
	        --pathLength;
	      }
	      break;
	  }

	  /// - construct path
	  let path = new Array(pathLength);
	  node = intersector;
	  for (let i = pathLength - 1; i >= 0; node = getParent(node)) {
	    if (i == pathLength - 1 || !isStraightInteriorLoop(node)) {
	      path[i] = node;
	      i--;
	    }
	  }
	  return path;
	}

	/**
	 */
	function handleIntersectionWithAncestor(ancestor, intersector, recursionDepth, puzzler) {
	  /// Determine intersection type
	  let it = intersectNodeNode(ancestor, intersector);
	  if (it == intersectionType.noIntersection) {
	    /// Early termination for no intersection.
	    console.log("wrong input. there is no intersection for %d and %d. [%s_DEBUG_PATH_%05d_%04d_vs_%04d.ps]\n", getNodeID(ancestor), getNodeID(intersector), puzzler.filename, puzzler.numberOfChangesAppliedToConfig, getNodeID(ancestor), getNodeID(intersector));
	    return null;
	  }

	  /// construct path from ancestor to intersector
	  //treeNode** path = constructIntersectionPath(ancestor, intersector, it, &pathLength);
	  let path = constructReducedIntersectionPath(ancestor, intersector, it);
	  let pathLength = path.length;

	  /// at each node determine child to follow
	  let childIndex = new Array(pathLength - 1);
	  for (let i = 0; i < pathLength - 1; i++) {
	    childIndex[i] = getChildIndex(path[i], getNodeID(path[i + 1]));
	  }

	  /// node changed by trying to fix intersection
	  let changedNode = null;

	  /// Compute orientation of reduced path
	  //let rotationSign = getRotationSign(path, pathLength);
	  let rotationSign = TENTATIVE2_getRotationSign(path, pathLength);
	  //let tentative_rotationSign = TENTATIVE2_getRotationSign(path, pathLength, it);

	  /* DZ: check
	  if (rotationSign != tentative_rotationSign && !isExterior(ancestor)) {
	    printWarning(fnName,
	           "Old rotation sign != new rotation sign: %d != %d; child : %d\n",
	           rotationSign,
	           tentative_rotationSign,
	           getChildIndex(ancestor, getNodeID(intersector))
	          );
	    PS_printFancyPath(ancestor, intersector, null, puzzler);
	  }
	  */

	  if (rotationSign == 0) {
	    /// path is straight . no intersection
	    console.log("[FAILED] invalid rotation sign (zero) for %04d and %04d. [%s_DEBUG_PATH_%05d_%04d_vs_%04d.ps]\n", getNodeID(ancestor), getNodeID(intersector), puzzler.filename, puzzler.numberOfChangesAppliedToConfig, getNodeID(ancestor), getNodeID(intersector));
	    //    PS_printPath(ancestor, intersector, puzzler);
	  } else {
	    //  printf("[%s] Path of %d vs. %d ...", fnName, getNodeID(ancestor), getNodeID(intersector));
	    //  for (let i = 0; i < pathLength; i++) {
	    //    printf(" %d(%d)", getNodeID(path[i]), path[i].childCount);
	    //  }
	    //  printf("\n");

	    // if (FANCY_PS) {
	    //   PS_printFancyPath(ancestor, intersector, null, puzzler);
	    // }

	    /// run from intersector to ancestor twice:
	    /// - in the first run we only choose interior loops for rotations
	    let nodeNumber = pathLength - 2; // skip intersector, start with its first ancestor
	    while (changedNode == null && nodeNumber >= 0) {
	      if (isInteriorLoop(path[nodeNumber])) {
	        // if (FANCY_PS) {
	        //   PS_printFancyPath(ancestor, intersector, path[nodeNumber], puzzler);
	        // }

	        /// interior loop: try to improve
	        changedNode = fixIntersectionWithAncestor(ancestor, path[nodeNumber], intersector, childIndex[nodeNumber], rotationSign, it, puzzler);
	      }

	      /// go to non-straight ancestor
	      nodeNumber--;
	    }

	    /// - in the second run we only choose multi loop for rotations
	    nodeNumber = pathLength - 2; // skip intersector, start with its first ancestor
	    while (changedNode == null && nodeNumber >= 0) {
	      if (isMultiLoop(path[nodeNumber])) {
	        // if (FANCY_PS) {
	        //   PS_printFancyPath(ancestor, intersector, path[nodeNumber], puzzler);
	        // }

	        /// multi-loop: try to improve
	        changedNode = fixIntersectionWithAncestor(ancestor, path[nodeNumber], intersector, childIndex[nodeNumber], rotationSign, it, puzzler);
	      }

	      /// go to non-straight ancestor
	      nodeNumber--;
	    }
	  }
	  if (changedNode == null) {
	    console.log("[FAILED] to resolve %04d vs. %04d (%s) [%s_DEBUG_PATH_%05d_%04d_vs_%04d.ps]\n", getNodeID(ancestor), getNodeID(intersector), changedNode != null ? "changed" : "not changed", puzzler.filename, puzzler.numberOfChangesAppliedToConfig, getNodeID(ancestor), getNodeID(intersector));
	    // printPath(fnName, path, pathLength, -1);
	    // PS_printPath(ancestor, intersector, puzzler);
	  }

	  //  printf("[%s] %d vs. %d [RETURN %d]\n", fnName, getNodeID(ancestor), getNodeID(intersector), ret);
	  return changedNode;
	}
	function TENTATIVE2_updateExteriorBoundingBoxes(exterior, loop, stemNorthX, stemSouthX, stemWestY, stemEastY) {
	  let s = [stemSouthX, stemWestY]; // south / west corner
	  let e = [stemNorthX, stemWestY]; // north / west corner
	  let sp = [stemSouthX, stemEastY]; // south / east corner
	  let stem = createStemBox(s, e, sp);
	  exterior.lBox = loop;
	  exterior.sBox = stem;
	  loop.parent = exterior;
	  stem.parent = exterior;
	  updateAABB(exterior.aabb, stem, loop);
	}
	function TENTATIVE3_setupExteriorBoundingBoxes(exterior, topLevelAncestor, intersector, puzzler) {
	  /// determine loop
	  let upperY = EXTERIOR_Y$1;
	  // let lowerY = 0.0;
	  let lowerY = upperY - puzzler.paired;
	  let loopX = topLevelAncestor.lBox.c[0];
	  let radius = 0.5 * (upperY - lowerY);
	  let center = [loopX, upperY - radius];
	  let intersectorAABB = intersector.aabb;
	  if (intersectorAABB.max[0] < loopX) {
	    /// intersector is left of topLevelAncestor
	    /// use distance aabb.min[0] .. loopX for stem setup
	    let stemNorthX = loopX;
	    let stemSouthX = intersectorAABB.min[0];
	    let stemWestY = upperY;
	    let StemEastY = lowerY;
	    let loop = createLoopBox(center, radius);
	    TENTATIVE2_updateExteriorBoundingBoxes(exterior, loop, stemNorthX, stemSouthX, stemWestY, StemEastY);
	  } else if (loopX < intersectorAABB.min[0]) {
	    /// intersector is right of topLevelAncestor
	    /// use distance loopX .. aabb.max[0] for stem setup
	    let stemNorthX = loopX;
	    let stemSouthX = intersectorAABB.max[0];
	    let stemWestY = lowerY;
	    let StemEastY = upperY;
	    let loop = createLoopBox(center, radius);
	    TENTATIVE2_updateExteriorBoundingBoxes(exterior, loop, stemNorthX, stemSouthX, stemWestY, StemEastY);
	  } else {
	    /// intersector shares some space in x direction with topLevelAncestor
	    /// use distance aabb.min[0] .. loopX for stem setup
	    /// then check of intersection
	    /// if noIntersection
	    /// use distance loopX .. aabb.max[0] for stem setup
	    let stemNorthX = loopX;
	    let stemSouthX = intersectorAABB.min[0];
	    let stemWestY = upperY;
	    let StemEastY = lowerY;
	    let loop = createLoopBox(center, radius);
	    TENTATIVE2_updateExteriorBoundingBoxes(exterior, loop, stemNorthX, stemSouthX, stemWestY, StemEastY);
	    if (intersectionType.noIntersection == intersectNodeNode(intersector, exterior)) {
	      let stemNorthX = loopX;
	      let stemSouthX = intersectorAABB.max[0];
	      let stemWestY = lowerY;
	      let StemEastY = upperY;
	      let loop = createLoopBox(center, radius);
	      TENTATIVE2_updateExteriorBoundingBoxes(exterior, loop, stemNorthX, stemSouthX, stemWestY, StemEastY);
	    }
	  }
	}
	function checkNodeAgainstAncestors(node, puzzler) {
	  // char* fnName = "checkNodeAgainstAncestors";

	  let changedNode = null;
	  let ancestor = getParent(node);
	  let topLevelAncestor = node;

	  /// Move towards root checking and fixing ancestor intersections
	  while (!isExterior(ancestor)) {
	    topLevelAncestor = ancestor;
	    let it = intersectNodeNode(node, ancestor);
	    if (it != intersectionType.noIntersection) {
	      changedNode = handleIntersectionWithAncestor(ancestor, node, 0, puzzler);
	      if (changedNode != null) {
	        return changedNode;
	      }
	    }
	    ancestor = getParent(ancestor);
	    //printf("[ANCESTOR] %d vs %d : it:%d changed:%d\n", getNodeID(ancestor), getNodeID(node), it, (result & _changed));
	  }

	  /// Check and fix ancestor intersections for exterior
	  if (puzzler.checkExteriorIntersections) {
	    if (intersectNodeExterior(node, puzzler)) {
	      // simple check

	      // prepare complex check
	      let exterior = getParent(topLevelAncestor);
	      TENTATIVE3_setupExteriorBoundingBoxes(exterior, topLevelAncestor, node, puzzler);
	      changedNode = handleIntersectionWithAncestor(exterior, node, 0, puzzler);
	      /*
	      // setupExteriorBoundingBoxes(exterior, topLevelAncestor, node, puzzler);
	      TENTATIVE_setupExteriorBoundingBoxes(exterior, topLevelAncestor, node, puzzler);
	       // complex check
	      intersectionType it = intersectNodeNode(node, exterior);
	      if (it != noIntersection) {
	        changedNode = handleIntersectionWithAncestor(exterior, node, 0, puzzler);
	      }
	      */
	    }
	  }
	  return changedNode;
	}

	const MATH_PI_HALF = Math.PI / 2;
	const _false = 0x0000;
	const _intersect = 0x0001;
	const _changed = 0x0002;

	/**
	 * @brief fixIntersectionOfSiblings
	 *    Try to fix intersections of sibling subtrees at their common ancestor.
	 * @param tree
	 *    common ancestor of intersecting subtrees
	 * @param left
	 * @param right
	 * @param deltaCfg
	 * @param puzzler
	 * @return
	 *    1 if something was changed, 0 otherwise
	 */
	function fixIntersectionOfSiblings(tree, left, right, deltaCfg, puzzler) {
	  let wedgeMin, wedgeMax;
	  [wedgeMin, wedgeMax] = getBoundingWedge(tree, right, wedgeMin, wedgeMax);
	  let minAngle = wedgeMin;
	  [wedgeMin, wedgeMax] = getBoundingWedge(tree, left, wedgeMin, wedgeMax);
	  let maxAngle = wedgeMax;
	  let targetAngle = minAngle - maxAngle;
	  let changed = 0;
	  if (targetAngle < 0) {
	    targetAngle = Math.max(targetAngle, -MATH_PI_HALF); // limit the angle to avoid malformed structures
	    let changedAngle = calcDeltas(tree, getParent(tree), left, right, -1 * targetAngle, puzzler, deltaCfg);
	    if (changedAngle != 0.0) {
	      getChild(tree, left);
	      getChild(tree, right);
	      // if (FANCY_PS) {
	      //   PS_printFancySiblings(tree, leftNode, rightNode, puzzler);
	      // }

	      // apply all changes
	      changed = checkAndApplyConfigChanges(tree, deltaCfg, intersectionType.siblings, puzzler);

	      // if (FANCY_PS) {
	      //   PS_printFancySiblings(tree, leftNode, rightNode, puzzler);
	      // }

	      //printf("[%s] changed: %d\n", fnName, changed);
	    }
	  }
	  return changed;
	}

	/**
	 * @brief handleIntersectionOfSiblings
	 *    Try to fix intersections of sibling subtrees at their common ancestor.
	 * @param tree
	 *    common ancestor of intersecting subtrees
	 * @param listOfIntersections
	 *    list of pairs of indices of subtrees that are intersecting.
	 *    [numberOfIntersections, [i1, j1], [i2, j2], ...]
	 * @return
	 *    1 if something was changed, 0 otherwise
	 */
	function handleIntersectionOfSiblings(tree, listOfIntersections, puzzler) {
	  let fnName = "FIX INTERSECTION OF SIBLINGS";

	  /// idea:
	  /// - measure each intersection by calculating an overlap angle
	  /// - increase the spaces between intersectors and decrease spaces that are not between them
	  /// - distribute the overlap angle equally to all participating spaces
	  /// - check for new or remaining intersections (at the end)

	  if (puzzler.numberOfChangesAppliedToConfig > puzzler.maximumNumberOfConfigChangesAllowed) {
	    console.log(fnName, "Reached maximum number of changes. Abort.\n");
	    return -1;
	  }
	  let changed = 0;
	  let intersectionCount = listOfIntersections[0];

	  /*
	  printf("[%s] Summary: [", fnName);
	  for (let i = 0; i < intersectionCount; i++) {
	    let left = listOfIntersections[2*i+1];
	    let right = listOfIntersections[2*i+2];
	    let childLeft  = getChild(tree, left);
	    let childRight = getChild(tree, right);
	    if (i > 0) {
	      printf("\n[%s]       ", fnName);
	    }
	    printf(" %d[%d]=%d vs. %d[%d]=%d"
	         , getNodeID(tree), left, getID(childLeft)
	         , getNodeID(tree), right, getID(childRight)
	         );
	  }
	  printf(" ]\n");
	  */

	  let childCount = tree.childCount;
	  let configSize = childCount + 1;
	  let deltaCfg = new Array(configSize);

	  /// init deltas with zero
	  for (let i = 0; i < configSize; i++) {
	    deltaCfg[i] = 0.0;
	  }

	  /// fix intersections of siblings
	  for (let k = 0; k < intersectionCount; k++) {
	    // for all intersections - start
	    let left = listOfIntersections[2 * k + 1];
	    let right = listOfIntersections[2 * k + 2];

	    /*
	    let childLeft  = getChild(tree, left);
	    let childRight = getChild(tree, right);
	    printf("[%s] %d[%d]=%d vs. %d[%d]=%d\n"
	         , fnName
	         , getNodeID(tree), left, getNodeID(childLeft)
	         , getNodeID(tree), right, getNodeID(childRight)
	         );
	    */

	    changed = fixIntersectionOfSiblings(tree, left, right, deltaCfg, puzzler);
	    if (changed) {
	      break;
	    }
	  }
	  return changed;
	}
	function checkSiblings(node, puzzler) {
	  let ret = _false;
	  let childCount = node.childCount;
	  /// create array to store all information about overlapping neighbors
	  let intersectorsBranches = new Array(childCount * childCount);
	  for (let i = 0; i < childCount * childCount; i++) {
	    intersectorsBranches[i] = -1;
	  }

	  /// actually check for those intersections ...
	  for (let i = 0; i < childCount; i++) {
	    let intersectorsCount = 0;
	    for (let j = i + 1; j < childCount; j++) {
	      let childI = getChild(node, i);
	      let childJ = getChild(node, j);
	      if (intersectTrees(childI, childJ)) {
	        intersectorsBranches[i * childCount + intersectorsCount] = j;
	        intersectorsCount++;
	      }
	    }
	  }

	  /// ... and count them
	  let intersectionCount = 0;
	  for (let i = 0; i < childCount * childCount; i++) {
	    if (intersectorsBranches[i] != -1) {
	      intersectionCount++;
	    }
	  }
	  if (intersectionCount > 0) {
	    ret |= _intersect;

	    /// transform intersection information into format
	    /// [ count, [intersector_a, intersector_b], [intersector_a, intersector_b], ... ]
	    /// where count states how many pairs of a/b are there
	    /// the i-th intersection has index a=2*i+1; b=2*i+2
	    let listOfIntersections = new Array(1 + 2 * intersectionCount);
	    listOfIntersections[0] = intersectionCount;
	    let counter = 0;
	    for (let i = 0; i < childCount * childCount; i++) {
	      if (intersectorsBranches[i] != -1) {
	        // i / childCount is integer division in C
	        listOfIntersections[2 * counter + 1] = Math.floor(i / childCount);
	        listOfIntersections[2 * counter + 2] = intersectorsBranches[i];
	        counter++;
	      }
	    }

	    /// resolve all of those intersections for this node's subtrees
	    let retFix = handleIntersectionOfSiblings(node, listOfIntersections, puzzler);
	    if (retFix < 0) {
	      ret = retFix;
	    } else if (retFix) {
	      ret |= _changed;
	    }
	  }
	  return ret;
	}

	function checkAndFixIntersections(node, recursionDepth, puzzler) {
	  /// IN:  tree that may contain some intersections
	  /// OUT: tree with no intersections (that shall be resolved at this tree level)
	  ///
	  /// Note on OUT:
	  /// The only type of intersection that is allowed to persist the execution of this function's call
	  /// is sibling intersections that are not resolved by checkSiblings' calls (on purpose).
	  /// Those remaining intersection share the characteristic that at least one of those intersectors
	  /// has a ancestorIntersection at a higher tree level.
	  /// Resolving that ancestorIntersection (or both) will resolve the sibling intersection as well.

	  let checkTree = true;
	  while (checkTree) {
	    checkTree = false;

	    /// on the way from root to leaves ...
	    /// - resolve ancestor intersections
	    if (puzzler.checkAncestorIntersections && !isExterior(node)) {
	      let changedNodeByAncestor = checkNodeAgainstAncestors(node, puzzler);
	      if (changedNodeByAncestor != null) {
	        // go one level up in the hierarchy
	        return changedNodeByAncestor;
	      }
	    }

	    /// - recursive call for all children
	    if (!checkTree) {
	      for (let i = 0; i < node.childCount; i++) {
	        let child = getChild(node, i);
	        let changedNodeByRecursion = checkAndFixIntersections(child, recursionDepth + 1, puzzler);

	        /// move upwards in tree (stop handling of the current node)
	        /// return to 'changedNodeByRecursion' node
	        if (changedNodeByRecursion != null) {
	          //printDebug(fnName, "checkAndFixIntersections: %d -- %d\n", getNodeID(changedNode), getNodeID(node));
	          if (getNodeID(changedNodeByRecursion) < getNodeID(node)) {
	            // go one level up in the hierarchy
	            return changedNodeByRecursion;
	          } else if (changedNodeByRecursion == node) {
	            // continue with this node
	            checkTree = true;
	            break;
	          }
	        }
	      }
	    }

	    /// on the way back from leaves to root ...
	    /// - resolve sibling intersections
	    if (puzzler.checkSiblingIntersections && !isExterior(node) && !checkTree) {
	      /// precondition at this point:
	      ///
	      /// all subtrees of the current node (excluding the current node) do not have any intersection
	      /// (they might only intersect against sibling subtrees at this or a higher level)
	      let result = checkSiblings(node, puzzler);
	      if (result < 0) {
	        return null;
	      } else if (result) {
	        checkTree = true;
	        continue;
	      }
	    }
	  }

	  /// ----- OPTIMIZATIONS -----
	  if (puzzler.optimize) {
	    let optimize = false;
	    //        printDebug(fnName, "optimize %d\n", optimize);
	    /// Optimize, if
	    if (isExterior(node)) {
	      optimize = false;
	    } else if (isExterior(getParent(node))) {
	      /// - parent is exterior node
	      optimize = true;
	      //            printDebug(fnName, "exterior optimize %d\n", optimize);
	    } else if (node.cfg.radius > 10 * node.cfg.defaultRadius) {
	      /// - current nodes radius increased by at least one order of magnitude
	      optimize = true;
	      //            printDebug(fnName, "radius optimize %d: %12.8lf > %12.8lf\n", optimize, node.cfg.radius, node.cfg.defaultRadius);
	    }

	    //        printDebug(fnName, "optimize? %d\n", optimize);
	    if (optimize) {
	      //            printDebug(fnName, "optimizeTree! %d\n", optimize);
	      optimizeTree(node, puzzler);
	    }
	  }

	  /// ----- optional checks at the end -----

	  //    if (intersectTrees(node, node)) {
	  //        printError(fnName, "[FAILED] to resolve subtree %d [%s_DEBUG_TREE_%05d_%04d.ps]\n", getNodeID(node), puzzler.filename, puzzler.numberOfChangesAppliedToConfig, getNodeID(node));
	  //        printError(fnName, "[ INFO ] Remember that are some sibling intersection cases that are just fine to remain.\n");
	  //        PS_printTree(node, puzzler);
	  //    }

	  // if (FANCY_PS) {
	  //     PS_printFancyTree(node, puzzler);
	  // }

	  return null;
	}

	/**
	 * Resolve the intersections of the children of the exterior loop
	 */
	function resolveExteriorChildrenIntersectionXY(exteriorNode, ptable, unpaired, allowFlipping, myX, myY) {
	  // number of subtrees
	  let subtreeCount = exteriorNode.childCount;
	  if (subtreeCount < 2) {
	    return;
	  }

	  /// for each exterior child: get first node
	  let childTreeNode = new Array(subtreeCount);
	  for (let subtree = 0; subtree < subtreeCount; subtree++) {
	    childTreeNode[subtree] = getChild(exteriorNode, subtree);
	  }

	  /*
	  /// for each exterior child: prepare bounding box
	  double** bounds = (double**) vrna_alloc(subtreeCount * sizeof(double*));
	  for (let subtree = 0; subtree < subtreeCount; subtree++) {
	    bounds[subtree] = (double*) vrna_alloc(2 * sizeof(double));
	    bounds[subtree][0] = 0.0;
	    bounds[subtree][1] = 0.0;
	  }
	   /// get bounding box of first child
	  getSimpleBoundingBox(childTreeNode[0], bounds[0], 0);
	  */

	  /// for each subtree
	  /// - compute number of its first non-exterior base
	  /// - compute number of nucleotides before the subtree
	  /// - distance between nucleotides before the subtree
	  let firstBase = new Array(subtreeCount);
	  let backbone = new Array(subtreeCount);
	  let distance = new Array(subtreeCount);
	  for (let subtree = 0; subtree < subtreeCount; subtree++) {
	    backbone[subtree] = 0;
	    distance[subtree] = 0.0;
	  }
	  let subtree = 0;
	  let base = 1;
	  while (base < ptable[0] && subtree < subtreeCount) {
	    if (ptable[base] > base) {
	      firstBase[subtree] = base;
	      subtree++;
	      base = ptable[base];
	    } else {
	      base++;
	      backbone[subtree]++;
	    }
	  }

	  // store upper and lower subtrees
	  let upper = new Array(subtreeCount + 1);
	  let lower = new Array(subtreeCount + 1);
	  upper[0] = 0;
	  lower[0] = 0;

	  /// set first subtree to upper side
	  upper[0]++;
	  upper[upper[0]] = 0;

	  // accumulated offset of children
	  let offset = 0.0;
	  // accumulated translation of children
	  let accumulatedTranslation = 0.0;

	  /// for all subtrees
	  for (let subtree = 1; subtree < subtreeCount; subtree++) {
	    /// translate current subtree by accumulated offset
	    if (offset > 0.0) {
	      let translate = [offset, 0.0];
	      translateBoundingBoxes(childTreeNode[subtree], translate);
	    }
	    // getSimpleBoundingBox(childTreeNode[subtree], bounds[subtree], 0);

	    /// as long as the current child gets translated
	    let changed = 1;
	    let intersectUpper = 0;
	    let intersectLower = 0;
	    let fixOverlap = 0.0;
	    while (changed) {
	      // printf("Handling subtree %d\n", subtree);
	      changed = 0;
	      intersectUpper = 0;
	      intersectLower = 0;

	      /// check intersection of current subtree with previous upper subtrees
	      for (let u = 1; u <= upper[0]; u++) {
	        let upperStem = upper[u];
	        // printf("Check intersection between %d and %d\n", subtree, upperStem);
	        intersectUpper = intersectTrees(childTreeNode[subtree], childTreeNode[upperStem]);
	        if (intersectUpper) {
	          // printf("Intersection between %d and %d\n", subtree, upperStem);
	          break;
	        }
	        //printf("%d vs %d: upperOverlap:%f (boundsOverlap:%f)\n", subtree, upperStem, upperOverlap, boundsOverlap);
	      }
	      if (allowFlipping) {
	        /// if flipping is allowed:
	        /// check intersection of current subtree with previous lower subtrees
	        for (let l = 1; l <= lower[0]; l++) {
	          let lowerStem = lower[l];
	          intersectLower = intersectTrees(childTreeNode[subtree], childTreeNode[lowerStem]);
	          if (intersectLower) {
	            break;
	          }
	          //printf("%d vs %d: lowerOverlap:%f (boundsOverlap:%f)\n", subtree, lowerStem, lowerOverlap, boundsOverlap);
	        }
	      }
	      if (!allowFlipping && intersectUpper || allowFlipping && intersectUpper && intersectLower) {
	        /// if intersections can not be resolved by flipping
	        /// increase distance by constant amount per exterior base
	        distance[subtree] += unpaired; // minOverlap / backbone[subtree];
	        fixOverlap = unpaired * backbone[subtree];
	        // printf("Increase distance by %12.8lf\n", fixOverlap);

	        let translate = [fixOverlap, 0.0];
	        translateBoundingBoxes(childTreeNode[subtree], translate);

	        /*
	        bounds[subtree][0] += fixOverlap;
	        bounds[subtree][1] += fixOverlap;
	        */

	        offset += fixOverlap;
	        // printf("Total offset: %12.8lf\n", offset);

	        changed = 1;
	      } else {
	        if (allowFlipping && intersectUpper) {
	          /// if flipping is allowed and sufficient for resolving the intersection:
	          /// (intersection is on the upper side)
	          lower[0]++;
	          lower[lower[0]] = subtree;
	        } else {
	          upper[0]++;
	          upper[upper[0]] = subtree;
	        }
	      }
	    } // end while(changed)

	    /// translate exterior bases between previous and current subtree
	    let currentBase = 1;
	    for (let base = ptable[firstBase[subtree - 1]]; base < firstBase[subtree]; base++, ++currentBase) {
	      myX[base] += currentBase * distance[subtree] + accumulatedTranslation;
	    }
	    accumulatedTranslation += distance[subtree] * backbone[subtree];
	  }

	  /// Last part of the exterior loop
	  for (let base = ptable[firstBase[subtreeCount - 1]]; base < ptable[0]; ++base) {
	    myX[base] += accumulatedTranslation;
	  }

	  /// modify x- and y-coordinates for all subtrees
	  let currentLower = 1;
	  let translation = 0.0;
	  for (let subtree = 1; subtree < subtreeCount; subtree++) {
	    /// translate all bases of current subtree
	    translation += distance[subtree] * backbone[subtree];
	    // printf("Translate subtree %d by %12.8lf\n", subtree, translation);
	    for (let base = firstBase[subtree]; base < ptable[firstBase[subtree]]; ++base) {
	      myX[base] += translation;
	    }
	    if (subtree == lower[currentLower]) {
	      /// flip subtrees
	      let exteriorY = myY[1];
	      for (let base = firstBase[subtree]; base < ptable[firstBase[subtree]]; ++base) {
	        myY[base] = 2 * exteriorY - myY[base];
	      }
	      ++currentLower;
	    }
	  }
	  // processing end

	  /*
	  for (let subtree = 0; subtree < subtreeCount; subtree++) {
	    free(bounds[subtree]);
	  }
	  free(bounds);
	  */
	}

	// Modified and converted from RNApuzzler.c

	const EXTERIOR_Y = 100.0;
	const TYPE_BASE_NONE = 0;
	function drawPuzzler(baseList, varnaCfg) {
	  const puzzler = varnaCfg.puzzler;
	  puzzler.paired = varnaCfg.bpDistance;
	  puzzler.unpaired = varnaCfg.backboneLoop;
	  const spaceBetweenBases = varnaCfg.spaceBetweenBases;
	  if (puzzler.paired / puzzler.unpaired > 2.0) {
	    cosole.log("paired:unpaired > 2.0 . layout might be destroyed!");
	  }

	  // Create 1-index ptable and baseInformation
	  var ptable = [];
	  ptable.push(baseList.length);
	  for (let i = 0; i < baseList.length; i++) {
	    ptable.push(baseList[i].getPartnerInd() + 1);
	  }
	  let length = ptable[0];

	  // turtle base information
	  var baseInformation = new Array(length + 1).fill(null).map(() => ({
	    baseType: TYPE_BASE_NONE,
	    distance: puzzler.unpaired,
	    angle: 0.0,
	    config: null
	  }));

	  /// generate default configuration for each loop
	  cfgGenerateConfig(ptable, baseInformation, puzzler.unpaired, puzzler.paired);

	  /// RNAturtle
	  computeAffineCoordinates(ptable, puzzler.paired, puzzler.unpaired, baseInformation);

	  /// Transform affine coordinates into cartesian coordinates
	  var myX = new Array(length).fill(0);
	  var myY = new Array(length).fill(0);
	  affineToCartesianCoordinates(baseInformation, length, myX, myY);

	  /// Build RNApuzzler configuration tree from cartesian coordinates
	  const distBulge = Math.sqrt(puzzler.unpaired * puzzler.unpaired - 0.25 * puzzler.unpaired * puzzler.unpaired);
	  let tree = buildConfigtree(ptable, baseInformation, myX, myY, distBulge);

	  /// current and maximal number of changes applied to config
	  puzzler.numberOfChangesAppliedToConfig = 0;

	  /// DZ: should be dependent on the RNA length * 10 ???
	  puzzler.maximumNumberOfConfigChangesAllowed = 25000;

	  /// reset angle coordinates
	  /*
	  for (let i = 0; i < length+1; i++) {
	    baseInformation[i].distance = puzzler.unpaired;
	    baseInformation[i].angle = 0.0;
	  }
	  */

	  /// RNApuzzler
	  if (puzzler.checkExteriorIntersections || puzzler.checkSiblingIntersections || puzzler.checkAncestorIntersections) {
	    /// - One execution of checkAndFixIntersections should always be sufficient
	    updateBoundingBoxes(tree, puzzler);
	    checkAndFixIntersections(tree, 0, puzzler);
	    // printf("\n");
	    // printInformation("CHANGE COUNT", "%d %s\n\n", puzzler.numberOfChangesAppliedToConfig, puzzler.filename);
	  }

	  /// determine x and y coordinates from RNApuzzler result
	  /*
	  for (let i = 0; i < length; i++) {
	    myX[i] = 50 + i;
	    myY[i] = 100 - i;
	  }
	  */
	  determineNucleotideCoordinates(tree, ptable, length, puzzler.unpaired, puzzler.paired, myX, myY);
	  {
	    // resolveExteriorChildrenIntersectionAffin(tree, ptable, baseInformation, puzzler.unpaired, puzzler.allowFlipping);
	    // resolveExteriorChildIntersections(tree, ptable, baseInformation, puzzler.unpaired, puzzler.allowFlipping);
	    // affineToCartesianCoordinates(baseInformation, length, myX, myY);

	    resolveExteriorChildrenIntersectionXY(tree, ptable, puzzler.unpaired, puzzler.allowFlipping, myX, myY);
	  }

	  /// for all loops: compute postscript arcs instead of lines
	  // if (puzzler.drawArcs) {
	  //   computeAnglesAndCentersForPS(ptable, myX, myY, baseInformation, arc_coords);
	  // }

	  /*
	  for (let i = 0; i < length+1; i++) {
	    printf("baseInformation[%d]: %d\n", i, baseInformation[i].baseType);
	  }
	  */

	  var coords = [];
	  for (let i = 0; i < length; i++) {
	    coords.push({
	      x: myX[i] * spaceBetweenBases,
	      y: myY[i] * spaceBetweenBases
	    });
	  }
	  return coords;
	}

	//------------------------------------------------------------------------------

	/**
	 Calculate the coordinates for the drawing with the given angle angles
	 */
	function determineNucleotideCoordinates(node, ptable, length, unpairedDistance, pairedDistance, x, y) {
	  if (length < 1) {
	    return;
	  }

	  /// Handle stem of current node
	  /// TODO: bulges!
	  if (node.stem_start >= 1) {
	    let sBox = node.sBox;

	    /// - prepare bulge information
	    let leftBulges = 0;
	    let rightBulges = 0;
	    let currentBulge = 0;
	    for (let bulge = 0; bulge < sBox.bulgeCount; ++bulge) {
	      if (sBox.bulges[bulge][0] < 0.0) {
	        ++rightBulges;
	      } else {
	        ++leftBulges;
	      }
	    }

	    /// - left side
	    let ntStart = node.stem_start;
	    let ntEnd = node.loop_start;
	    let ntSegments = ntEnd - ntStart - leftBulges;
	    let pStart = [sBox.c[0] - sBox.e[0] * sBox.a[0] + sBox.e[1] * sBox.b[0], sBox.c[1] - sBox.e[0] * sBox.a[1] + sBox.e[1] * sBox.b[1]];
	    let pEnd = [sBox.c[0] + sBox.e[0] * sBox.a[0] + sBox.e[1] * sBox.b[0], sBox.c[1] + sBox.e[0] * sBox.a[1] + sBox.e[1] * sBox.b[1]];
	    for (let nt = ntStart; nt < ntEnd; ++nt) {
	      if (ptable[nt] == 0) {
	        // bulge
	        [x[nt - 1], y[nt - 1]] = getBulgeXY(sBox, currentBulge);
	        ++currentBulge;
	      } else {
	        x[nt - 1] = pStart[0] + (nt - ntStart - currentBulge) * (pEnd[0] - pStart[0]) / ntSegments;
	        y[nt - 1] = pStart[1] + (nt - ntStart - currentBulge) * (pEnd[1] - pStart[1]) / ntSegments;
	      }
	    }
	    x[ntEnd - 1] = pEnd[0];
	    y[ntEnd - 1] = pEnd[1];

	    /// - right side
	    ntStart = ptable[node.loop_start];
	    ntEnd = ptable[node.stem_start];
	    ntSegments = ntEnd - ntStart - rightBulges;
	    pStart[0] = sBox.c[0] + sBox.e[0] * sBox.a[0] - sBox.e[1] * sBox.b[0];
	    pStart[1] = sBox.c[1] + sBox.e[0] * sBox.a[1] - sBox.e[1] * sBox.b[1];
	    pEnd[0] = sBox.c[0] - sBox.e[0] * sBox.a[0] - sBox.e[1] * sBox.b[0];
	    pEnd[1] = sBox.c[1] - sBox.e[0] * sBox.a[1] - sBox.e[1] * sBox.b[1];
	    for (let nt = ntStart; nt < ntEnd; ++nt) {
	      if (ptable[nt] == 0) {
	        // bulge
	        [x[nt - 1], y[nt - 1]] = getBulgeXY(sBox, currentBulge);
	        ++currentBulge;
	      } else {
	        x[nt - 1] = pStart[0] + (nt - ntStart - currentBulge + leftBulges) * (pEnd[0] - pStart[0]) / ntSegments;
	        y[nt - 1] = pStart[1] + (nt - ntStart - currentBulge + leftBulges) * (pEnd[1] - pStart[1]) / ntSegments;
	      }
	    }
	    x[ntEnd - 1] = pEnd[0];
	    y[ntEnd - 1] = pEnd[1];
	  }

	  /// loop
	  let cfg = node.cfg;
	  if (cfg != null) {
	    const center = [node.lBox.c[0], node.lBox.c[1]];
	    const radius = cfg.radius;
	    const pairedAngle = distanceToAngle(radius, pairedDistance);

	    /// - determine angle from loop to parent stem
	    let startAngle = 0.0;
	    let sBox = node.sBox;
	    /*
	    if (abs(center[0] - sBox.c[0]) < 1e-10) {
	      if (center[1] > sBox.c[1]) {
	        startAngle = MATH_PI + MATH_PI_HALF;
	      } else {
	        startAngle = MATH_PI_HALF;
	      }
	    } else if (abs(center[1] - sBox.c[1]) < 1e-10) {
	      if (center[0] > sBox.c[0]) {
	        startAngle = MATH_PI;
	      } else {
	        startAngle = 0.0;
	      }
	    } else {
	    */
	    startAngle = Math.atan2(sBox.c[1] - center[1], sBox.c[0] - center[0]);
	    //}
	    startAngle -= pairedAngle / 2.0;

	    /// - for all loop arcs
	    let cfgArc = null;
	    let nt = node.loop_start;
	    let angle = startAngle;
	    let arcAngle = 0.0;
	    let numberOfArcSegments = 0;
	    for (let arc = 0; arc < cfg.numberOfArcs; ++arc) {
	      cfgArc = cfg.cfgArcs[arc];
	      numberOfArcSegments = cfgArc.numberOfArcSegments;
	      arcAngle = cfgArc.arcAngle;
	      for (let arcSegment = 1; arcSegment < numberOfArcSegments; ++arcSegment) {
	        angle = startAngle - arcSegment * ((arcAngle - pairedAngle) / numberOfArcSegments);
	        x[nt] = center[0] + radius * Math.cos(angle);
	        y[nt] = center[1] + radius * Math.sin(angle);
	        ++nt;
	      }
	      nt = ptable[nt + 1];
	      startAngle -= arcAngle;
	    }
	  }

	  /// children
	  for (let child = 0; child < node.childCount; ++child) {
	    determineNucleotideCoordinates(node.children[child], ptable, length, unpairedDistance, pairedDistance, x, y);
	  }

	  /// exterior
	  x[0] = EXTERIOR_Y;
	  y[0] = EXTERIOR_Y;
	  let start = 1;
	  if (ptable[1] != 0) {
	    start = ptable[1] + 1;
	  } else {
	    start = 2;
	  }
	  for (let nt = start; nt <= length; ++nt) {
	    if (ptable[nt] == 0) {
	      x[nt - 1] = x[nt - 2] + unpairedDistance;
	      y[nt - 1] = EXTERIOR_Y;
	    } else {
	      nt = ptable[nt];
	    }
	  }
	  return;
	}

	let layouts = {
	  'line': drawLine,
	  'circle': drawCircle,
	  'radiate': drawRadiate,
	  'naview': drawNAView,
	  'turtle': drawTurtle,
	  'puzzler': drawPuzzler
	};
	const layoutNames = Object.keys(layouts);
	let drawBases = function (baseList, varnaCfg) {
	  let layout = varnaCfg.layout;
	  if (layoutNames.includes(layout)) {
	    let coords = layouts[layout](baseList, varnaCfg);
	    for (let i = 0; i < baseList.length; i++) {
	      baseList[i].setCoords(coords[i]);
	    }
	    return coords;
	  } else {
	    throw new Error("Invaled layout");
	  }
	};

	// RNA related helper functions
	//
	//
	const OPENING = "([{<ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	const CLOSING = ")]}>abcdefghijklmnopqrstuvwxyz";

	// TODO: Add check for well balanced dbn
	/**
	 * Convert a given dbn to ptable format (0-index)
	 * Unlike ViennaRNA the first element is not the length
	 * All non-bracket charackters are treated as unpaired
	 * @param {string} dbn - secondary structure in dbn
	 * @return {Array} ptable
	 */
	function ptableFromDBN(dbn) {
	  let ptable = new Array(dbn.length).fill(-1);
	  let stack = {};
	  for (let i = 0; i < dbn.length; i++) {
	    let c = dbn[i];
	    let openIdx = OPENING.indexOf(c);
	    let closeIdx = CLOSING.indexOf(c);
	    if (openIdx >= 0) {
	      // Opening bracket
	      if (!(c in stack)) {
	        stack[c] = [];
	      }
	      stack[c].push(i);
	    } else if (closeIdx >= 0) {
	      // Closing bracket
	      let c2 = OPENING[closeIdx];
	      let j = stack[c2].pop();
	      ptable[i] = j;
	      ptable[j] = i;
	    } else ;
	  }
	  return ptable;
	}

	/**
	 * Convert RNA sequence into list
	 */
	function parseSeq(seq) {
	  let analyzedSeq = [];
	  let i = 0;
	  while (i < seq.length) {
	    if (seq[i] == '{') {
	      let found = false;
	      let buf = "";
	      i++;
	      while (!found && i < seq.length) {
	        if (seq[i] != '}') {
	          buf += seq[i];
	          i++;
	        } else {
	          found = true;
	        }
	      }
	      analyzedSeq.push(buf);
	    } else {
	      analyzedSeq.push(seq[i]);
	    }
	    i++;
	  }
	  return analyzedSeq;
	}

	const DBNStrandSep = "&";

	/**
	 * Basic class to draw one RNA
	 * @class
	 * @constructor
	 * @public
	 * @property {cytoscape} cy - cytoscape drawing
	 * @property {Array} baseList - Array of ModelBase
	 */
	class RNA {
	  name = null;
	  cy;
	  cfg;
	  baseList = [];
	  auxBPs = [];
	  baseStyleList = [];
	  constructor() {}

	  // TODO: Refactor as VARNA
	  /**
	   * Construct from given dbn and seq. At most one can be empty
	   * @param {string} dbn - secondary structure in dbn
	   * @param {string} seq - RNA sequence
	   */
	  static fromDBN(dbn, seq) {
	    if (dbn.length == 0 && seq.length == 0) {
	      throw new Error("At least one should be non-null!");
	    }
	    let rna = new this();
	    let seqTmp = seq.length == 0 ? [] : parseSeq(seq);
	    let sepPosLst = [];
	    let dbnFinal = "";
	    let seqFinal = [];
	    if (dbn.length == 0) {
	      dbnFinal = ".".repeat(seqTmp.length);
	      seqFinal = seqTmp;
	    } else {
	      // Parse strands if dbn is given
	      for (let i = 0; i < dbn.length; i++) {
	        let c = dbn[i];
	        if (c == DBNStrandSep && (seqTmp.length == 0 || seqTmp[i] == DBNStrandSep)) {
	          // Find separator at both dbn and seq, or seq is empty
	          sepPosLst.push(seqFinal.length - 1);
	        } else {
	          // Usual structural position, or separator unmatch
	          seqFinal.push(_.isUndefined(seqTmp[i]) ? "" : seqTmp[i]);
	          dbnFinal += c;
	        }
	      }
	      // Add unpaired bases if sequence is longer
	      for (let i = dbn.length; i < seqTmp.length; i++) {
	        dbnFinal += ".";
	      }
	    }
	    let ptable = ptableFromDBN(dbnFinal);
	    // Fill baseList
	    rna.baseList = new Array(ptable.length);
	    for (let i = 0; i < ptable.length; i++) {
	      let base = new ModelBase(i, i + 1, seqFinal[i]);
	      // Next base belongs to another strand:w
	      //
	      if (sepPosLst.indexOf(i) >= 0) {
	        base.setBackbone(DiscontinuousBackbone);
	      }
	      rna.baseList[i] = base;
	    }
	    // Fill basepair
	    for (let i = 0; i < ptable.length; i++) {
	      let j = ptable[i];
	      if (j == -1 || j < i) {
	        continue;
	      } else if (dbnFinal[i] == '(') {
	        rna.addBPNow(i, j);
	      } else {
	        rna.addBPAux(i, j);
	      }
	    }
	    return rna;
	  }

	  /**
	   * Set drawing configuration
	   * @param {VARNAConfig} cfg - configuration to draw
	   */
	  setConfig(cfg) {
	    if (!cfg instanceof VARNAConfig) {
	      throw new Error(`${cfg} is not an instance of VARNAConfig`);
	    }
	    this.cfg = cfg;
	  }
	  getSelector(inst) {
	    if (this.name === null) {
	      return inst;
	    }
	    let instNew = inst;
	    ["node", "edge"].forEach(t => {
	      if (inst.startsWith(t)) {
	        instNew = inst.replace(t, `${t}.${this.name}`);
	      }
	    });
	    return instNew;
	  }
	  getCyId(id, type) {
	    let newId = this.name === null ? "" : `${this.name}_`;
	    switch (type) {
	      case "base":
	        newId += "";
	        break;
	      case "backbone":
	        newId += "backbone_";
	        break;
	      case "planar":
	        newId += "planarbp_";
	        break;
	      case "aux":
	        newId += "auxbp_";
	        break;
	      default:
	        throw new Error(`Unknown type: ${type}`);
	    }
	    return newId + id;
	  }

	  /*
	   * Get BaseModel of base
	   * Directly return if base is already an instance of BaseModel
	   * @param {int|BaseModel} base - either index in baseList or BaseModel
	   */
	  getBase(base) {
	    if (Number.isInteger(base)) {
	      if (base >= this.baseList.length) {
	        throw new Error(`${base} is larger than total amount of bases minus one`);
	      }
	      return this.baseList[base];
	    } else if (base instanceof ModelBase) {
	      return base;
	    } else {
	      throw new Error(`${base} is not an integer or an instance of ModelBase.`);
	    }
	  }
	  /**
	   * Add additional basepair (i, j)
	   * The function check whether (i, j) fit planar unless the flag noplanar is set
	   *
	   * @param {int|ModelBase} i - index of ModelBase object of i
	   * @param {int|ModelBase} j - index of ModelBase object of j
	   */
	  addBP(i, j, opt = {}) {
	    let basei = this.getBase(i),
	      basej = this.getBase(j);
	    // Create ModelBP object for basepair
	    let mbp = new ModelBP(basei, basej, opt);
	    let indi, indj;
	    [indi, indj] = [Math.min(basei.ind, basej.ind), Math.max(basei.ind, basej.ind)];
	    // Add directly to aux
	    if (mbp.noplanar) {
	      this.addBPAux(basei, basej, mbp);
	      return;
	    } else {
	      // Here, we test if basepair (i, j) fit to planar
	      for (let indk = indi; indk <= indj; indk++) {
	        let tmp = this.baseList[indk];
	        let indl = tmp.getPartnerInd();
	        if (indl != -1) {
	          if (indl <= indi || indl >= indj) {
	            // Violate planar
	            this.addBPAux(basei, basej, mbp);
	            return;
	          }
	        }
	      }
	      this.addBPNow(basei, basej, mbp);
	    }
	  }

	  /**
	   * Add aux basepair (i, j)
	   * @param {int|ModelBase} i - 
	   */
	  addBPAux(i, j, mbp = null) {
	    let basei = this.getBase(i),
	      basej = this.getBase(j);
	    if (mbp === null) {
	      mbp = new ModelBP(basei, basej);
	    }
	    this.auxBPs.push(mbp);
	  }
	  addBPNow(i, j, mbp = null) {
	    let basei = this.getBase(i),
	      basej = this.getBase(j);
	    if (mbp === null) {
	      mbp = new ModelBP(basei, basej);
	    }
	    basei.setBP(mbp);
	    basej.setBP(mbp);
	  }

	  /**
	   * Apply base style to given bases
	   * The function assigns a number (the order) to given ModelBaseStyle object
	   * Bases will be grouped with class `basegroup${number}`
	   *
	   * @param {ModelBaseStyle} style - base style to apply
	   * @param {ModelBase|int}  bases - bases (could be either ModelBase object or the index in baseList) to apply on
	   */
	  applyBasesStyle(style, ...bases) {
	    if (style instanceof ModelBaseStyle) {
	      // Set style index as its id
	      if (bases.length > 0) {
	        style.setId(this.baseStyleList.length);
	        this.baseStyleList.push(style);
	      }
	      for (let i = 0; i < bases.length; i++) {
	        let element = bases[i];
	        let base;
	        if (Number.isInteger(element)) {
	          base = this.baseList[element];
	        } else if (element instanceof ModelBase) {
	          base = element;
	        } else {
	          throw new Error(`${element} is not an instance of int nor ModelBase.`);
	        }
	        base.setStyle(style);
	      }
	    } else {
	      throw new Error("The style should be an instance of ModelBaseStyle.");
	    }
	  }

	  /***************/
	  /*    Bases    */
	  /***************/

	  /**
	   * Return bases to draw in cytoscape format
	   */
	  cyOfBases() {
	    let elements = this.elOfBases();
	    let styles = this.styleOfBases();
	    return {
	      "el": elements,
	      "style": styles
	    };
	  }

	  /**
	   * Returns bases in cytoscape node element list
	   */
	  elOfBases() {
	    let res = [];
	    for (let i = 0; i < this.baseList.length; ++i) {
	      let base = this.baseList[i];
	      let baseEl = {
	        data: {
	          id: this.getCyId(base.ind, "base"),
	          label: base.c,
	          num: base.getBaseNum()
	        }
	      };
	      // Set custom base classes
	      baseEl['classes'] = [...base.classes];
	      if (this.name !== null) {
	        baseEl['classes'].push(this.name);
	      }
	      // Add baseNum class for node to draw base number
	      if (isNumberDrawn(base, this.cfg.baseNumPeriod, this.baseList.length)) {
	        baseEl["classes"].push("baseNum");
	      }
	      // Add class for base style
	      if (base.style !== null) {
	        baseEl["classes"].push(`basegroup${base.style.getId()}`);
	        baseEl["data"]["baseNumColor"] = base.style.baseNumColor;
	      }
	      baseEl['position'] = base.getCoords();
	      res.push(baseEl);
	    }
	    return res;
	  }

	  /**
	   * Returns base style in cytoscape style
	   */
	  styleOfBases() {
	    let cfg = this.cfg;
	    // Default style for all bases
	    let generalStyle = cfg.baseCyStyle(this.getSelector("node"));
	    // Default style for base label
	    let baseNameStyle = cfg.baseNameCyStyle(this.getSelector("node[label]"));
	    let res = [generalStyle, baseNameStyle];
	    // Specific base style
	    this.baseStyleList.forEach(basestyle => res.push(...basestyle.toCyStyleInList(this.getSelector(`node.basegroup${basestyle.getId()}`))));
	    return res;
	  }

	  /***************/
	  /* Base Number */
	  /***************/

	  /**
	   * Return base number to draw in cytoscape format
	   */
	  cyOfBaseNum() {
	    let cfg = this.cfg;
	    return [{
	      query: '.baseNum',
	      valign: "center",
	      halign: "left",
	      valignBox: "center",
	      halignBox: "left",
	      tpl: function (data) {
	        let color;
	        if (data.baseNumColor) {
	          color = data.baseNumColor;
	        } else {
	          color = cfg.baseNumColor;
	        }
	        return `<p style="color: ${color}">${data.num}</p>`;
	      }
	    }];
	  }

	  /***************/
	  /*  Backbone   */
	  /***************/

	  /**
	   * Return backbones to draw in cytoscape format
	   */
	  cyOfBackbones() {
	    let elements = this.elOfBackbones();
	    let styles = this.styleOfBackbones();
	    return {
	      "el": elements,
	      "style": styles
	    };
	  }

	  // TODO: custom backbone style
	  /**
	   * Returns backbone in cytoscape edge element list with classes set to backbone
	   */
	  elOfBackbones() {
	    let res = [];
	    for (let i = 0; i < this.baseList.length - 1; ++i) {
	      let backbone = this.baseList[i].getBackbone();
	      if (backbone != DiscontinuousBackbone) {
	        let el = {
	          "data": {
	            id: this.getCyId(i, 'backbone'),
	            source: this.getCyId(i, 'base'),
	            target: this.getCyId(i + 1, 'base')
	          },
	          "classes": ["backbone"]
	        };
	        if (this.name !== null) {
	          el.classes.push(this.name);
	        }
	        res.push(el);
	      }
	    }
	    return res;
	  }

	  /**
	   * Return backbone style in cytoscape format
	   */
	  styleOfBackbones() {
	    let cfg = this.cfg;
	    let res = [];
	    let generalStyle = cfg.backboneCyStyle(this.getSelector("edge.backbone"));
	    res.push(generalStyle);
	    return res;
	  }

	  /***************/
	  /*     BPs     */
	  /***************/

	  /**
	   * Return basepair to draw in cytoscape format
	   */
	  cyOfBPs() {
	    this.cfg;
	    let elements = [...this.elOfPlanarBPs(), ...this.elOfAuxBPs()];
	    let styles = this.styleOfBPs();
	    return {
	      "el": elements,
	      "style": styles
	    };
	  }

	  /**
	   * Returns cytoscape edge element for one single bp
	   */
	  elOfSingleBP(bp) {
	    let edgeEl = bp.toCyElement();
	    if (this.name !== null) {
	      edgeEl.classes.push(this.name);
	    }
	    // Here, we need to correct source and target base id
	    edgeEl.data.source = this.getCyId(edgeEl.data.source, "base");
	    edgeEl.data.target = this.getCyId(edgeEl.data.target, "base");
	    return edgeEl;
	  }

	  /**
	   * Returns planar basepair in cytoscape edge element list with classes set to basepair and planarbp
	   */
	  elOfPlanarBPs() {
	    let cfg = this.cfg;
	    let res = [];
	    // Nested bp
	    for (const base of this.baseList) {
	      let j = base.getPartnerInd();
	      if (j > base.ind) {
	        let bp = base.getBP();
	        let edgeEl = this.elOfSingleBP(bp);
	        edgeEl.data.id = this.getCyId(base.ind, "planar");
	        edgeEl.classes.push("planarbp");
	        if (cfg.layout == Layouts.LINE) {
	          if (_.isUndefined(edgeEl.style)) {
	            edgeEl.style = {};
	          }
	          let factor = cfg.bpLowerPlane ? 1 : -1;
	          edgeEl.style["control-point-distance"] = factor * (bp.partner3.ind - bp.partner5.ind) * 20;
	        }
	        res.push(edgeEl);
	      }
	    }
	    return res;
	  }

	  /**
	   * Returns aux basepair in cytoscape edge element list with classes set to basepair and auxbp
	   */
	  elOfAuxBPs() {
	    let cfg = this.cfg;
	    let res = [];
	    for (let i = 0; i < this.auxBPs.length; i++) {
	      let bp = this.auxBPs[i];
	      let edgeEl = this.elOfSingleBP(bp);
	      edgeEl.data.id = this.getCyId(i, "aux");
	      edgeEl.classes.push("auxbp");
	      if (cfg.layout == Layouts.LINE) {
	        if (_.isUndefined(edgeEl.style)) {
	          edgeEl.style = {};
	        }
	        let factor = cfg.bpLowerPlane ? 1 : -1;
	        edgeEl.style["control-point-distance"] = factor * (bp.partner3.ind - bp.partner5.ind) * 20;
	      }
	      res.push(edgeEl);
	    }
	    return res;
	  }

	  /**
	   * Return basepair style in cytoscape format
	   */
	  styleOfBPs() {
	    let cfg = this.cfg;
	    let res = [];
	    let generalStyle = cfg.bpCyStyle(this.getSelector("edge.basepair"));
	    if (cfg.layout == Layouts.LINE) {
	      generalStyle.style["curve-style"] = "unbundled-bezier";
	      generalStyle.style["control-point-weight"] = 0.5;
	    }
	    res.push(generalStyle);
	    return res;
	  }
	  customStyle() {
	    return [];
	  }
	  createCyFormat() {
	    let cfg = this.cfg;
	    drawBases(this.baseList, cfg);
	    let basesCy = this.cyOfBases();
	    let backbonesCy = this.cyOfBackbones();
	    let bpsCy = this.cyOfBPs();
	    let elements = [...basesCy.el, ...backbonesCy.el, ...bpsCy.el];
	    let styles = [...basesCy.style, ...backbonesCy.style, ...bpsCy.style, ...this.customStyle()];

	    // Set layout (base position)
	    let layoutDict = {
	      'name': 'preset'
	    };
	    let cyDist = {
	      elements: elements,
	      layout: layoutDict,
	      style: styles
	    };
	    return cyDist;
	  }
	}

	/**
	 * Return true to show number of given base
	 *
	 * @param {ModelBase} mb - base in ModelBase
	 * @param {int} period - base number period
	 * @param {int} total - total base number
	 */
	function isNumberDrawn(mb, period, total) {
	  if (period <= 0 || mb.getBaseNum() === null) {
	    return false;
	  }
	  return mb.ind == 0 || mb.getBaseNum() % period == 0 || mb.ind == total - 1;
	}

	/**
	 * Copyright (c) 2016-2024, The Cytoscape Consortium.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the “Software”), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	 * of the Software, and to permit persons to whom the Software is furnished to do
	 * so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	function _defineProperty$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}
	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _s, _e;
	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);
	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }
	  return _arr;
	}
	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}
	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
	  return arr2;
	}
	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike  ) {
	      if (it) o = it;
	      var i = 0;
	      var F = function () {};
	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }
	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }
	  var normalCompletion = true,
	    didErr = false,
	    err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	var _window = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

	var navigator = _window ? _window.navigator : null;
	_window ? _window.document : null;
	var typeofstr = _typeof('');
	var typeofobj = _typeof({});
	var typeoffn = _typeof(function () {});
	var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);
	var instanceStr = function instanceStr(obj) {
	  return obj && obj.instanceString && fn$6(obj.instanceString) ? obj.instanceString() : null;
	};

	var string = function string(obj) {
	  return obj != null && _typeof(obj) == typeofstr;
	};
	var fn$6 = function fn(obj) {
	  return obj != null && _typeof(obj) === typeoffn;
	};
	var array = function array(obj) {
	  return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);
	};
	var plainObject = function plainObject(obj) {
	  return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
	};
	var object = function object(obj) {
	  return obj != null && _typeof(obj) === typeofobj;
	};
	var number$1 = function number(obj) {
	  return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
	};
	var integer = function integer(obj) {
	  return number$1(obj) && Math.floor(obj) === obj;
	};
	var htmlElement = function htmlElement(obj) {
	  if ('undefined' === typeofhtmlele) {
	    return undefined;
	  } else {
	    return null != obj && obj instanceof HTMLElement;
	  }
	};
	var elementOrCollection = function elementOrCollection(obj) {
	  return element(obj) || collection(obj);
	};
	var element = function element(obj) {
	  return instanceStr(obj) === 'collection' && obj._private.single;
	};
	var collection = function collection(obj) {
	  return instanceStr(obj) === 'collection' && !obj._private.single;
	};
	var core = function core(obj) {
	  return instanceStr(obj) === 'core';
	};
	var stylesheet = function stylesheet(obj) {
	  return instanceStr(obj) === 'stylesheet';
	};
	var event = function event(obj) {
	  return instanceStr(obj) === 'event';
	};
	var emptyString = function emptyString(obj) {
	  if (obj === undefined || obj === null) {
	    // null is empty
	    return true;
	  } else if (obj === '' || obj.match(/^\s+$/)) {
	    return true; // empty string is empty
	  }

	  return false; // otherwise, we don't know what we've got
	};
	var domElement = function domElement(obj) {
	  if (typeof HTMLElement === 'undefined') {
	    return false; // we're not in a browser so it doesn't matter
	  } else {
	    return obj instanceof HTMLElement;
	  }
	};
	var boundingBox = function boundingBox(obj) {
	  return plainObject(obj) && number$1(obj.x1) && number$1(obj.x2) && number$1(obj.y1) && number$1(obj.y2);
	};
	var promise = function promise(obj) {
	  return object(obj) && fn$6(obj.then);
	};
	var ms = function ms() {
	  return navigator && navigator.userAgent.match(/msie|trident|edge/i);
	}; // probably a better way to detect this...

	var memoize$1 = function memoize(fn, keyFn) {
	  if (!keyFn) {
	    keyFn = function keyFn() {
	      if (arguments.length === 1) {
	        return arguments[0];
	      } else if (arguments.length === 0) {
	        return 'undefined';
	      }
	      var args = [];
	      for (var i = 0; i < arguments.length; i++) {
	        args.push(arguments[i]);
	      }
	      return args.join('$');
	    };
	  }
	  var memoizedFn = function memoizedFn() {
	    var self = this;
	    var args = arguments;
	    var ret;
	    var k = keyFn.apply(self, args);
	    var cache = memoizedFn.cache;
	    if (!(ret = cache[k])) {
	      ret = cache[k] = fn.apply(self, args);
	    }
	    return ret;
	  };
	  memoizedFn.cache = {};
	  return memoizedFn;
	};

	var camel2dash = memoize$1(function (str) {
	  return str.replace(/([A-Z])/g, function (v) {
	    return '-' + v.toLowerCase();
	  });
	});
	var dash2camel = memoize$1(function (str) {
	  return str.replace(/(-\w)/g, function (v) {
	    return v[1].toUpperCase();
	  });
	});
	var prependCamel = memoize$1(function (prefix, str) {
	  return prefix + str[0].toUpperCase() + str.substring(1);
	}, function (prefix, str) {
	  return prefix + '$' + str;
	});
	var capitalize = function capitalize(str) {
	  if (emptyString(str)) {
	    return str;
	  }
	  return str.charAt(0).toUpperCase() + str.substring(1);
	};

	var number = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
	var rgba = 'rgb[a]?\\((' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)(?:\\s*,\\s*(' + number + '))?\\)';
	var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)(?:\\s*,\\s*(?:' + number + '))?\\)';
	var hsla = 'hsl[a]?\\((' + number + ')\\s*,\\s*(' + number + '[%])\\s*,\\s*(' + number + '[%])(?:\\s*,\\s*(' + number + '))?\\)';
	var hslaNoBackRefs = 'hsl[a]?\\((?:' + number + ')\\s*,\\s*(?:' + number + '[%])\\s*,\\s*(?:' + number + '[%])(?:\\s*,\\s*(?:' + number + '))?\\)';
	var hex3 = '\\#[0-9a-fA-F]{3}';
	var hex6 = '\\#[0-9a-fA-F]{6}';

	var ascending = function ascending(a, b) {
	  if (a < b) {
	    return -1;
	  } else if (a > b) {
	    return 1;
	  } else {
	    return 0;
	  }
	};
	var descending = function descending(a, b) {
	  return -1 * ascending(a, b);
	};

	var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  var args = arguments;
	  for (var i = 1; i < args.length; i++) {
	    var obj = args[i];
	    if (obj == null) {
	      continue;
	    }
	    var keys = Object.keys(obj);
	    for (var j = 0; j < keys.length; j++) {
	      var k = keys[j];
	      tgt[k] = obj[k];
	    }
	  }
	  return tgt;
	};

	// get [r, g, b] from #abc or #aabbcc
	var hex2tuple = function hex2tuple(hex) {
	  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
	    return;
	  }
	  var shortHex = hex.length === 4;
	  var r, g, b;
	  var base = 16;
	  if (shortHex) {
	    r = parseInt(hex[1] + hex[1], base);
	    g = parseInt(hex[2] + hex[2], base);
	    b = parseInt(hex[3] + hex[3], base);
	  } else {
	    r = parseInt(hex[1] + hex[2], base);
	    g = parseInt(hex[3] + hex[4], base);
	    b = parseInt(hex[5] + hex[6], base);
	  }
	  return [r, g, b];
	};

	// get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
	var hsl2tuple = function hsl2tuple(hsl) {
	  var ret;
	  var h, s, l, a, r, g, b;
	  function hue2rgb(p, q, t) {
	    if (t < 0) t += 1;
	    if (t > 1) t -= 1;
	    if (t < 1 / 6) return p + (q - p) * 6 * t;
	    if (t < 1 / 2) return q;
	    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	  }
	  var m = new RegExp('^' + hsla + '$').exec(hsl);
	  if (m) {
	    // get hue
	    h = parseInt(m[1]);
	    if (h < 0) {
	      h = (360 - -1 * h % 360) % 360;
	    } else if (h > 360) {
	      h = h % 360;
	    }
	    h /= 360; // normalise on [0, 1]

	    s = parseFloat(m[2]);
	    if (s < 0 || s > 100) {
	      return;
	    } // saturation is [0, 100]
	    s = s / 100; // normalise on [0, 1]

	    l = parseFloat(m[3]);
	    if (l < 0 || l > 100) {
	      return;
	    } // lightness is [0, 100]
	    l = l / 100; // normalise on [0, 1]

	    a = m[4];
	    if (a !== undefined) {
	      a = parseFloat(a);
	      if (a < 0 || a > 1) {
	        return;
	      } // alpha is [0, 1]
	    }

	    // now, convert to rgb
	    // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	    if (s === 0) {
	      r = g = b = Math.round(l * 255); // achromatic
	    } else {
	      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      var p = 2 * l - q;
	      r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
	      g = Math.round(255 * hue2rgb(p, q, h));
	      b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
	    }
	    ret = [r, g, b, a];
	  }
	  return ret;
	};

	// get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
	var rgb2tuple = function rgb2tuple(rgb) {
	  var ret;
	  var m = new RegExp('^' + rgba + '$').exec(rgb);
	  if (m) {
	    ret = [];
	    var isPct = [];
	    for (var i = 1; i <= 3; i++) {
	      var channel = m[i];
	      if (channel[channel.length - 1] === '%') {
	        isPct[i] = true;
	      }
	      channel = parseFloat(channel);
	      if (isPct[i]) {
	        channel = channel / 100 * 255; // normalise to [0, 255]
	      }

	      if (channel < 0 || channel > 255) {
	        return;
	      } // invalid channel value

	      ret.push(Math.floor(channel));
	    }
	    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	    var allArePct = isPct[1] && isPct[2] && isPct[3];
	    if (atLeastOneIsPct && !allArePct) {
	      return;
	    } // must all be percent values if one is

	    var alpha = m[4];
	    if (alpha !== undefined) {
	      alpha = parseFloat(alpha);
	      if (alpha < 0 || alpha > 1) {
	        return;
	      } // invalid alpha value

	      ret.push(alpha);
	    }
	  }
	  return ret;
	};
	var colorname2tuple = function colorname2tuple(color) {
	  return colors[color.toLowerCase()];
	};
	var color2tuple = function color2tuple(color) {
	  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
	};
	var colors = {
	  // special colour names
	  transparent: [0, 0, 0, 0],
	  // NB alpha === 0

	  // regular colours
	  aliceblue: [240, 248, 255],
	  antiquewhite: [250, 235, 215],
	  aqua: [0, 255, 255],
	  aquamarine: [127, 255, 212],
	  azure: [240, 255, 255],
	  beige: [245, 245, 220],
	  bisque: [255, 228, 196],
	  black: [0, 0, 0],
	  blanchedalmond: [255, 235, 205],
	  blue: [0, 0, 255],
	  blueviolet: [138, 43, 226],
	  brown: [165, 42, 42],
	  burlywood: [222, 184, 135],
	  cadetblue: [95, 158, 160],
	  chartreuse: [127, 255, 0],
	  chocolate: [210, 105, 30],
	  coral: [255, 127, 80],
	  cornflowerblue: [100, 149, 237],
	  cornsilk: [255, 248, 220],
	  crimson: [220, 20, 60],
	  cyan: [0, 255, 255],
	  darkblue: [0, 0, 139],
	  darkcyan: [0, 139, 139],
	  darkgoldenrod: [184, 134, 11],
	  darkgray: [169, 169, 169],
	  darkgreen: [0, 100, 0],
	  darkgrey: [169, 169, 169],
	  darkkhaki: [189, 183, 107],
	  darkmagenta: [139, 0, 139],
	  darkolivegreen: [85, 107, 47],
	  darkorange: [255, 140, 0],
	  darkorchid: [153, 50, 204],
	  darkred: [139, 0, 0],
	  darksalmon: [233, 150, 122],
	  darkseagreen: [143, 188, 143],
	  darkslateblue: [72, 61, 139],
	  darkslategray: [47, 79, 79],
	  darkslategrey: [47, 79, 79],
	  darkturquoise: [0, 206, 209],
	  darkviolet: [148, 0, 211],
	  deeppink: [255, 20, 147],
	  deepskyblue: [0, 191, 255],
	  dimgray: [105, 105, 105],
	  dimgrey: [105, 105, 105],
	  dodgerblue: [30, 144, 255],
	  firebrick: [178, 34, 34],
	  floralwhite: [255, 250, 240],
	  forestgreen: [34, 139, 34],
	  fuchsia: [255, 0, 255],
	  gainsboro: [220, 220, 220],
	  ghostwhite: [248, 248, 255],
	  gold: [255, 215, 0],
	  goldenrod: [218, 165, 32],
	  gray: [128, 128, 128],
	  grey: [128, 128, 128],
	  green: [0, 128, 0],
	  greenyellow: [173, 255, 47],
	  honeydew: [240, 255, 240],
	  hotpink: [255, 105, 180],
	  indianred: [205, 92, 92],
	  indigo: [75, 0, 130],
	  ivory: [255, 255, 240],
	  khaki: [240, 230, 140],
	  lavender: [230, 230, 250],
	  lavenderblush: [255, 240, 245],
	  lawngreen: [124, 252, 0],
	  lemonchiffon: [255, 250, 205],
	  lightblue: [173, 216, 230],
	  lightcoral: [240, 128, 128],
	  lightcyan: [224, 255, 255],
	  lightgoldenrodyellow: [250, 250, 210],
	  lightgray: [211, 211, 211],
	  lightgreen: [144, 238, 144],
	  lightgrey: [211, 211, 211],
	  lightpink: [255, 182, 193],
	  lightsalmon: [255, 160, 122],
	  lightseagreen: [32, 178, 170],
	  lightskyblue: [135, 206, 250],
	  lightslategray: [119, 136, 153],
	  lightslategrey: [119, 136, 153],
	  lightsteelblue: [176, 196, 222],
	  lightyellow: [255, 255, 224],
	  lime: [0, 255, 0],
	  limegreen: [50, 205, 50],
	  linen: [250, 240, 230],
	  magenta: [255, 0, 255],
	  maroon: [128, 0, 0],
	  mediumaquamarine: [102, 205, 170],
	  mediumblue: [0, 0, 205],
	  mediumorchid: [186, 85, 211],
	  mediumpurple: [147, 112, 219],
	  mediumseagreen: [60, 179, 113],
	  mediumslateblue: [123, 104, 238],
	  mediumspringgreen: [0, 250, 154],
	  mediumturquoise: [72, 209, 204],
	  mediumvioletred: [199, 21, 133],
	  midnightblue: [25, 25, 112],
	  mintcream: [245, 255, 250],
	  mistyrose: [255, 228, 225],
	  moccasin: [255, 228, 181],
	  navajowhite: [255, 222, 173],
	  navy: [0, 0, 128],
	  oldlace: [253, 245, 230],
	  olive: [128, 128, 0],
	  olivedrab: [107, 142, 35],
	  orange: [255, 165, 0],
	  orangered: [255, 69, 0],
	  orchid: [218, 112, 214],
	  palegoldenrod: [238, 232, 170],
	  palegreen: [152, 251, 152],
	  paleturquoise: [175, 238, 238],
	  palevioletred: [219, 112, 147],
	  papayawhip: [255, 239, 213],
	  peachpuff: [255, 218, 185],
	  peru: [205, 133, 63],
	  pink: [255, 192, 203],
	  plum: [221, 160, 221],
	  powderblue: [176, 224, 230],
	  purple: [128, 0, 128],
	  red: [255, 0, 0],
	  rosybrown: [188, 143, 143],
	  royalblue: [65, 105, 225],
	  saddlebrown: [139, 69, 19],
	  salmon: [250, 128, 114],
	  sandybrown: [244, 164, 96],
	  seagreen: [46, 139, 87],
	  seashell: [255, 245, 238],
	  sienna: [160, 82, 45],
	  silver: [192, 192, 192],
	  skyblue: [135, 206, 235],
	  slateblue: [106, 90, 205],
	  slategray: [112, 128, 144],
	  slategrey: [112, 128, 144],
	  snow: [255, 250, 250],
	  springgreen: [0, 255, 127],
	  steelblue: [70, 130, 180],
	  tan: [210, 180, 140],
	  teal: [0, 128, 128],
	  thistle: [216, 191, 216],
	  tomato: [255, 99, 71],
	  turquoise: [64, 224, 208],
	  violet: [238, 130, 238],
	  wheat: [245, 222, 179],
	  white: [255, 255, 255],
	  whitesmoke: [245, 245, 245],
	  yellow: [255, 255, 0],
	  yellowgreen: [154, 205, 50]
	};

	// sets the value in a map (map may not be built)
	var setMap = function setMap(options) {
	  var obj = options.map;
	  var keys = options.keys;
	  var l = keys.length;
	  for (var i = 0; i < l; i++) {
	    var key = keys[i];
	    if (plainObject(key)) {
	      throw Error('Tried to set map with object key');
	    }
	    if (i < keys.length - 1) {
	      // extend the map if necessary
	      if (obj[key] == null) {
	        obj[key] = {};
	      }
	      obj = obj[key];
	    } else {
	      // set the value
	      obj[key] = options.value;
	    }
	  }
	};

	// gets the value in a map even if it's not built in places
	var getMap = function getMap(options) {
	  var obj = options.map;
	  var keys = options.keys;
	  var l = keys.length;
	  for (var i = 0; i < l; i++) {
	    var key = keys[i];
	    if (plainObject(key)) {
	      throw Error('Tried to get map with object key');
	    }
	    obj = obj[key];
	    if (obj == null) {
	      return obj;
	    }
	  }
	  return obj;
	};

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = _freeGlobal || freeSelf || Function('return this')();

	var _root = root;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return _root.Date.now();
	};

	var now_1 = now;

	/** Used to match a single whitespace character. */
	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex(string) {
	  var index = string.length;

	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}

	var _trimmedEndIndex = trimmedEndIndex;

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim(string) {
	  return string
	    ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	    : string;
	}

	var _baseTrim = baseTrim;

	/** Built-in value references. */
	var Symbol$1 = _root.Symbol;

	var _Symbol = Symbol$1;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$5.toString;

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$4.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];

	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto$4.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	var _objectToString = objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
	}

	var isSymbol_1 = isSymbol;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol_1(value)) {
	    return NAN;
	  }
	  if (isObject_1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject_1(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = _baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var toNumber_1 = toNumber;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  wait = toNumber_1(wait) || 0;
	  if (isObject_1(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now_1();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now_1());
	  }

	  function debounced() {
	    var time = now_1(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	var debounce_1 = debounce;

	var performance = _window ? _window.performance : null;
	var pnow = performance && performance.now ? function () {
	  return performance.now();
	} : function () {
	  return Date.now();
	};
	var raf = function () {
	  if (_window) {
	    if (_window.requestAnimationFrame) {
	      return function (fn) {
	        _window.requestAnimationFrame(fn);
	      };
	    } else if (_window.mozRequestAnimationFrame) {
	      return function (fn) {
	        _window.mozRequestAnimationFrame(fn);
	      };
	    } else if (_window.webkitRequestAnimationFrame) {
	      return function (fn) {
	        _window.webkitRequestAnimationFrame(fn);
	      };
	    } else if (_window.msRequestAnimationFrame) {
	      return function (fn) {
	        _window.msRequestAnimationFrame(fn);
	      };
	    }
	  }
	  return function (fn) {
	    if (fn) {
	      setTimeout(function () {
	        fn(pnow());
	      }, 1000 / 60);
	    }
	  };
	}();
	var requestAnimationFrame = function requestAnimationFrame(fn) {
	  return raf(fn);
	};
	var performanceNow = pnow;

	var DEFAULT_HASH_SEED = 9261;
	var K = 65599; // 37 also works pretty well
	var DEFAULT_HASH_SEED_ALT = 5381;
	var hashIterableInts = function hashIterableInts(iterator) {
	  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
	  // sdbm/string-hash
	  var hash = seed;
	  var entry;
	  for (;;) {
	    entry = iterator.next();
	    if (entry.done) {
	      break;
	    }
	    hash = hash * K + entry.value | 0;
	  }
	  return hash;
	};
	var hashInt = function hashInt(num) {
	  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
	  // sdbm/string-hash
	  return seed * K + num | 0;
	};
	var hashIntAlt = function hashIntAlt(num) {
	  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED_ALT;
	  // djb2/string-hash
	  return (seed << 5) + seed + num | 0;
	};
	var combineHashes = function combineHashes(hash1, hash2) {
	  return hash1 * 0x200000 + hash2;
	};
	var combineHashesArray = function combineHashesArray(hashes) {
	  return hashes[0] * 0x200000 + hashes[1];
	};
	var hashArrays = function hashArrays(hashes1, hashes2) {
	  return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
	};
	var hashIntsArray = function hashIntsArray(ints, seed) {
	  var entry = {
	    value: 0,
	    done: false
	  };
	  var i = 0;
	  var length = ints.length;
	  var iterator = {
	    next: function next() {
	      if (i < length) {
	        entry.value = ints[i++];
	      } else {
	        entry.done = true;
	      }
	      return entry;
	    }
	  };
	  return hashIterableInts(iterator, seed);
	};
	var hashString = function hashString(str, seed) {
	  var entry = {
	    value: 0,
	    done: false
	  };
	  var i = 0;
	  var length = str.length;
	  var iterator = {
	    next: function next() {
	      if (i < length) {
	        entry.value = str.charCodeAt(i++);
	      } else {
	        entry.done = true;
	      }
	      return entry;
	    }
	  };
	  return hashIterableInts(iterator, seed);
	};
	var hashStrings = function hashStrings() {
	  return hashStringsArray(arguments);
	};
	var hashStringsArray = function hashStringsArray(strs) {
	  var hash;
	  for (var i = 0; i < strs.length; i++) {
	    var str = strs[i];
	    if (i === 0) {
	      hash = hashString(str);
	    } else {
	      hash = hashString(str, hash);
	    }
	  }
	  return hash;
	};

	/*global console */
	var warningsEnabled = true;
	var warnSupported = console.warn != null; // eslint-disable-line no-console
	var traceSupported = console.trace != null; // eslint-disable-line no-console

	var MAX_INT$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
	var trueify = function trueify() {
	  return true;
	};
	var falsify = function falsify() {
	  return false;
	};
	var zeroify = function zeroify() {
	  return 0;
	};
	var noop$1 = function noop() {};
	var error = function error(msg) {
	  throw new Error(msg);
	};
	var warnings = function warnings(enabled) {
	  if (enabled !== undefined) {
	    warningsEnabled = !!enabled;
	  } else {
	    return warningsEnabled;
	  }
	};
	var warn = function warn(msg) {
	  /* eslint-disable no-console */
	  if (!warnings()) {
	    return;
	  }
	  if (warnSupported) {
	    console.warn(msg);
	  } else {
	    console.log(msg);
	    if (traceSupported) {
	      console.trace();
	    }
	  }
	}; /* eslint-enable */

	var clone = function clone(obj) {
	  return extend({}, obj);
	};

	// gets a shallow copy of the argument
	var copy = function copy(obj) {
	  if (obj == null) {
	    return obj;
	  }
	  if (array(obj)) {
	    return obj.slice();
	  } else if (plainObject(obj)) {
	    return clone(obj);
	  } else {
	    return obj;
	  }
	};
	var copyArray$1 = function copyArray(arr) {
	  return arr.slice();
	};
	var uuid = function uuid(a, b /* placeholders */) {
	  for (
	  // loop :)
	  b = a = '';
	  // b - result , a - numeric letiable
	  a++ < 36;
	  //
	  b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
	  ?
	  //  return a random number or 4
	  (a ^ 15 // if "a" is not 15
	  ?
	  // generate a random number from 0 to 15
	  8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
	  : 4 //  otherwise 4
	  ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
	  ) {
	  }
	  return b;
	};
	var _staticEmptyObject = {};
	var staticEmptyObject = function staticEmptyObject() {
	  return _staticEmptyObject;
	};
	var defaults$g = function defaults(_defaults) {
	  var keys = Object.keys(_defaults);
	  return function (opts) {
	    var filledOpts = {};
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var optVal = opts == null ? undefined : opts[key];
	      filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
	    }
	    return filledOpts;
	  };
	};
	var removeFromArray = function removeFromArray(arr, ele, oneCopy) {
	  for (var i = arr.length - 1; i >= 0; i--) {
	    if (arr[i] === ele) {
	      arr.splice(i, 1);
	    }
	  }
	};
	var clearArray = function clearArray(arr) {
	  arr.splice(0, arr.length);
	};
	var push = function push(arr, otherArr) {
	  for (var i = 0; i < otherArr.length; i++) {
	    var el = otherArr[i];
	    arr.push(el);
	  }
	};
	var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
	  if (prefix) {
	    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  return obj[propName];
	};
	var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
	  if (prefix) {
	    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  obj[propName] = value;
	};

	/* global Map */
	var ObjectMap = /*#__PURE__*/function () {
	  function ObjectMap() {
	    _classCallCheck(this, ObjectMap);
	    this._obj = {};
	  }
	  _createClass(ObjectMap, [{
	    key: "set",
	    value: function set(key, val) {
	      this._obj[key] = val;
	      return this;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key) {
	      this._obj[key] = undefined;
	      return this;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this._obj = {};
	    }
	  }, {
	    key: "has",
	    value: function has(key) {
	      return this._obj[key] !== undefined;
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      return this._obj[key];
	    }
	  }]);
	  return ObjectMap;
	}();
	var Map$2 = typeof Map !== 'undefined' ? Map : ObjectMap;

	/* global Set */

	var undef = "undefined" ;
	var ObjectSet = /*#__PURE__*/function () {
	  function ObjectSet(arrayOrObjectSet) {
	    _classCallCheck(this, ObjectSet);
	    this._obj = Object.create(null);
	    this.size = 0;
	    if (arrayOrObjectSet != null) {
	      var arr;
	      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
	        arr = arrayOrObjectSet.toArray();
	      } else {
	        arr = arrayOrObjectSet;
	      }
	      for (var i = 0; i < arr.length; i++) {
	        this.add(arr[i]);
	      }
	    }
	  }
	  _createClass(ObjectSet, [{
	    key: "instanceString",
	    value: function instanceString() {
	      return 'set';
	    }
	  }, {
	    key: "add",
	    value: function add(val) {
	      var o = this._obj;
	      if (o[val] !== 1) {
	        o[val] = 1;
	        this.size++;
	      }
	    }
	  }, {
	    key: "delete",
	    value: function _delete(val) {
	      var o = this._obj;
	      if (o[val] === 1) {
	        o[val] = 0;
	        this.size--;
	      }
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this._obj = Object.create(null);
	    }
	  }, {
	    key: "has",
	    value: function has(val) {
	      return this._obj[val] === 1;
	    }
	  }, {
	    key: "toArray",
	    value: function toArray() {
	      var _this = this;
	      return Object.keys(this._obj).filter(function (key) {
	        return _this.has(key);
	      });
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(callback, thisArg) {
	      return this.toArray().forEach(callback, thisArg);
	    }
	  }]);
	  return ObjectSet;
	}();
	var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

	// represents a node or an edge
	var Element = function Element(cy, params) {
	  var restore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  if (cy === undefined || params === undefined || !core(cy)) {
	    error('An element must have a core reference and parameters set');
	    return;
	  }
	  var group = params.group;

	  // try to automatically infer the group if unspecified
	  if (group == null) {
	    if (params.data && params.data.source != null && params.data.target != null) {
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  }

	  // validate group
	  if (group !== 'nodes' && group !== 'edges') {
	    error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
	    return;
	  }

	  // make the element array-like, just like a collection
	  this.length = 1;
	  this[0] = this;

	  // NOTE: when something is added here, add also to ele.json()
	  var _p = this._private = {
	    cy: cy,
	    single: true,
	    // indicates this is an element
	    data: params.data || {},
	    // data object
	    position: params.position || {
	      x: 0,
	      y: 0
	    },
	    // (x, y) position pair
	    autoWidth: undefined,
	    // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    autoPadding: undefined,
	    compoundBoundsClean: false,
	    // whether the compound dimensions need to be recalculated the next time dimensions are read
	    listeners: [],
	    // array of bound listeners
	    group: group,
	    // string; 'nodes' or 'edges'
	    style: {},
	    // properties as set by the style
	    rstyle: {},
	    // properties for style sent from the renderer to the core
	    styleCxts: [],
	    // applied style contexts from the styler
	    styleKeys: {},
	    // per-group keys of style property values
	    removed: true,
	    // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false,
	    // whether it's selected
	    selectable: params.selectable === undefined ? true : params.selectable ? true : false,
	    // whether it's selectable
	    locked: params.locked ? true : false,
	    // whether the element is locked (cannot be moved)
	    grabbed: false,
	    // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
	    // whether the element can be grabbed
	    pannable: params.pannable === undefined ? group === 'edges' ? true : false : params.pannable ? true : false,
	    // whether the element has passthrough panning enabled
	    active: false,
	    // whether the element is active from user interaction
	    classes: new Set$1(),
	    // map ( className => true )
	    animation: {
	      // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {},
	    // object in which the renderer can store information
	    scratch: params.scratch || {},
	    // scratch objects
	    edges: [],
	    // array of connected edges
	    children: [],
	    // array of children
	    parent: params.parent && params.parent.isNode() ? params.parent : null,
	    // parent ref
	    traversalCache: {},
	    // cache of output of traversal functions
	    backgrounding: false,
	    // whether background images are loading
	    bbCache: null,
	    // cache of the current bounding box
	    bbCacheShift: {
	      x: 0,
	      y: 0
	    },
	    // shift applied to cached bb to be applied on next get
	    bodyBounds: null,
	    // bounds cache of element body, w/o overlay
	    overlayBounds: null,
	    // bounds cache of element body, including overlay
	    labelBounds: {
	      // bounds cache of labels
	      all: null,
	      source: null,
	      target: null,
	      main: null
	    },
	    arrowBounds: {
	      // bounds cache of edge arrows
	      source: null,
	      target: null,
	      'mid-source': null,
	      'mid-target': null
	    }
	  };
	  if (_p.position.x == null) {
	    _p.position.x = 0;
	  }
	  if (_p.position.y == null) {
	    _p.position.y = 0;
	  }

	  // renderedPosition overrides if specified
	  if (params.renderedPosition) {
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();
	    _p.position = {
	      x: (rpos.x - pan.x) / zoom,
	      y: (rpos.y - pan.y) / zoom
	    };
	  }
	  var classes = [];
	  if (array(params.classes)) {
	    classes = params.classes;
	  } else if (string(params.classes)) {
	    classes = params.classes.split(/\s+/);
	  }
	  for (var i = 0, l = classes.length; i < l; i++) {
	    var cls = classes[i];
	    if (!cls || cls === '') {
	      continue;
	    }
	    _p.classes.add(cls);
	  }
	  this.createEmitter();
	  var bypass = params.style || params.css;
	  if (bypass) {
	    warn('Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.');
	    this.style(bypass);
	  }
	  if (restore === undefined || restore) {
	    this.restore();
	  }
	};

	var defineSearch = function defineSearch(params) {
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  };

	  // from pseudocode on wikipedia
	  return function searchFn(roots, fn, directed) {
	    var options;
	    if (plainObject(roots) && !elementOrCollection(roots)) {
	      options = roots;
	      roots = options.roots || options.root;
	      fn = options.visit;
	      directed = options.directed;
	    }
	    directed = arguments.length === 2 && !fn$6(fn) ? fn : directed;
	    fn = fn$6(fn) ? fn : function () {};
	    var cy = this._private.cy;
	    var v = roots = string(roots) ? this.filter(roots) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;

	    // enqueue v
	    for (var i = 0; i < v.length; i++) {
	      var vi = v[i];
	      var viId = vi.id();
	      if (vi.isNode()) {
	        Q.unshift(vi);
	        if (params.bfs) {
	          V[viId] = true;
	          connectedNodes.push(vi);
	        }
	        id2depth[viId] = 0;
	      }
	    }
	    var _loop = function _loop() {
	      var v = params.bfs ? Q.shift() : Q.pop();
	      var vId = v.id();
	      if (params.dfs) {
	        if (V[vId]) {
	          return "continue";
	        }
	        V[vId] = true;
	        connectedNodes.push(v);
	      }
	      var depth = id2depth[vId];
	      var prevEdge = connectedBy[vId];
	      var src = prevEdge != null ? prevEdge.source() : null;
	      var tgt = prevEdge != null ? prevEdge.target() : null;
	      var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
	      var ret = void 0;
	      ret = fn(v, prevEdge, prevNode, j++, depth);
	      if (ret === true) {
	        found = v;
	        return "break";
	      }
	      if (ret === false) {
	        return "break";
	      }
	      var vwEdges = v.connectedEdges().filter(function (e) {
	        return (!directed || e.source().same(v)) && edges.has(e);
	      });
	      for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
	        var e = vwEdges[_i2];
	        var w = e.connectedNodes().filter(function (n) {
	          return !n.same(v) && nodes.has(n);
	        });
	        var wId = w.id();
	        if (w.length !== 0 && !V[wId]) {
	          w = w[0];
	          Q.push(w);
	          if (params.bfs) {
	            V[wId] = true;
	            connectedNodes.push(w);
	          }
	          connectedBy[wId] = e;
	          id2depth[wId] = id2depth[vId] + 1;
	        }
	      }
	    };
	    while (Q.length !== 0) {
	      var _ret = _loop();
	      if (_ret === "continue") continue;
	      if (_ret === "break") break;
	    }
	    var connectedEles = cy.collection();
	    for (var _i = 0; _i < connectedNodes.length; _i++) {
	      var node = connectedNodes[_i];
	      var edge = connectedBy[node.id()];
	      if (edge != null) {
	        connectedEles.push(edge);
	      }
	      connectedEles.push(node);
	    }
	    return {
	      path: cy.collection(connectedEles),
	      found: cy.collection(found)
	    };
	  };
	};

	// search, spanning trees, etc
	var elesfn$v = {
	  breadthFirstSearch: defineSearch({
	    bfs: true
	  }),
	  depthFirstSearch: defineSearch({
	    dfs: true
	  })
	};

	// nice, short mathematical alias
	elesfn$v.bfs = elesfn$v.breadthFirstSearch;
	elesfn$v.dfs = elesfn$v.depthFirstSearch;

	var heap$1 = createCommonjsModule(function (module, exports) {
	// Generated by CoffeeScript 1.8.0
	(function() {
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function(x, y) {
	    if (x < y) {
	      return -1;
	    }
	    if (x > y) {
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.
	  
	  If x is already in a, insert it to the right of the rightmost x.
	  
	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function(a, x, lo, hi, cmp) {
	    var mid;
	    if (lo == null) {
	      lo = 0;
	    }
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (lo < 0) {
	      throw new Error('lo must be non-negative');
	    }
	    if (hi == null) {
	      hi = a.length;
	    }
	    while (lo < hi) {
	      mid = floor((lo + hi) / 2);
	      if (cmp(x, a[mid]) < 0) {
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function(array, item, cmp) {
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    array.push(item);
	    return _siftdown(array, 0, array.length - 1, cmp);
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function(array, cmp) {
	    var lastelt, returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if (array.length) {
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup(array, 0, cmp);
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.
	  
	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function(array, item, cmp) {
	    var returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup(array, 0, cmp);
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function(array, item, cmp) {
	    var _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (array.length && cmp(array[0], item) < 0) {
	      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
	      _siftup(array, 0, cmp);
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function(array, cmp) {
	    var i, _i, _len, _ref1, _results, _results1;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    _ref1 = (function() {
	      _results1 = [];
	      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
	      return _results1;
	    }).apply(this).reverse();
	    _results = [];
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      i = _ref1[_i];
	      _results.push(_siftup(array, i, cmp));
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function(array, item, cmp) {
	    var pos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf(item);
	    if (pos === -1) {
	      return;
	    }
	    _siftdown(array, 0, pos, cmp);
	    return _siftup(array, pos, cmp);
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function(array, n, cmp) {
	    var elem, result, _i, _len, _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    result = array.slice(0, n);
	    if (!result.length) {
	      return result;
	    }
	    heapify(result, cmp);
	    _ref = array.slice(n);
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      elem = _ref[_i];
	      heappushpop(result, elem, cmp);
	    }
	    return result.sort(cmp).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function(array, n, cmp) {
	    var elem, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (n * 10 <= array.length) {
	      result = array.slice(0, n).sort(cmp);
	      if (!result.length) {
	        return result;
	      }
	      los = result[result.length - 1];
	      _ref = array.slice(n);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        elem = _ref[_i];
	        if (cmp(elem, los) < 0) {
	          insort(result, elem, 0, null, cmp);
	          result.pop();
	          los = result[result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify(array, cmp);
	    _results = [];
	    for (_j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {
	      _results.push(heappop(array, cmp));
	    }
	    return _results;
	  };

	  _siftdown = function(array, startpos, pos, cmp) {
	    var newitem, parent, parentpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    newitem = array[pos];
	    while (pos > startpos) {
	      parentpos = (pos - 1) >> 1;
	      parent = array[parentpos];
	      if (cmp(newitem, parent) < 0) {
	        array[pos] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[pos] = newitem;
	  };

	  _siftup = function(array, pos, cmp) {
	    var childpos, endpos, newitem, rightpos, startpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[pos];
	    childpos = 2 * pos + 1;
	    while (childpos < endpos) {
	      rightpos = childpos + 1;
	      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
	        childpos = rightpos;
	      }
	      array[pos] = array[childpos];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[pos] = newitem;
	    return _siftdown(array, startpos, pos, cmp);
	  };

	  Heap = (function() {
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap(cmp) {
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function(x) {
	      return heappush(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pop = function() {
	      return heappop(this.nodes, this.cmp);
	    };

	    Heap.prototype.peek = function() {
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function(x) {
	      return this.nodes.indexOf(x) !== -1;
	    };

	    Heap.prototype.replace = function(x) {
	      return heapreplace(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pushpop = function(x) {
	      return heappushpop(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.heapify = function() {
	      return heapify(this.nodes, this.cmp);
	    };

	    Heap.prototype.updateItem = function(x) {
	      return updateItem(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.clear = function() {
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function() {
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function() {
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function() {
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice(0);
	      return heap;
	    };

	    Heap.prototype.toArray = function() {
	      return this.nodes.slice(0);
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function(root, factory) {
	    {
	      return module.exports = factory();
	    }
	  })(this, function() {
	    return Heap;
	  });

	}).call(commonjsGlobal);
	});

	var heap = heap$1;

	var dijkstraDefaults = defaults$g({
	  root: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false
	});
	var elesfn$u = {
	  dijkstra: function dijkstra(options) {
	    if (!plainObject(options)) {
	      var args = arguments;
	      options = {
	        root: args[0],
	        weight: args[1],
	        directed: args[2]
	      };
	    }
	    var _dijkstraDefaults = dijkstraDefaults(options),
	      root = _dijkstraDefaults.root,
	      weight = _dijkstraDefaults.weight,
	      directed = _dijkstraDefaults.directed;
	    var eles = this;
	    var weightFn = weight;
	    var source = string(root) ? this.filter(root)[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;
	    edges.unmergeBy(function (ele) {
	      return ele.isLoop();
	    });
	    var getDist = function getDist(node) {
	      return dist[node.id()];
	    };
	    var setDist = function setDist(node, d) {
	      dist[node.id()] = d;
	      Q.updateItem(node);
	    };
	    var Q = new heap(function (a, b) {
	      return getDist(a) - getDist(b);
	    });
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      dist[node.id()] = node.same(source) ? 0 : Infinity;
	      Q.push(node);
	    }
	    var distBetween = function distBetween(u, v) {
	      var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
	      var smallestDistance = Infinity;
	      var smallestEdge;
	      for (var _i = 0; _i < uvs.length; _i++) {
	        var edge = uvs[_i];
	        var _weight = weightFn(edge);
	        if (_weight < smallestDistance || !smallestEdge) {
	          smallestDistance = _weight;
	          smallestEdge = edge;
	        }
	      }
	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };
	    while (Q.size() > 0) {
	      var u = Q.pop();
	      var smalletsDist = getDist(u);
	      var uid = u.id();
	      knownDist[uid] = smalletsDist;
	      if (smalletsDist === Infinity) {
	        continue;
	      }
	      var neighbors = u.neighborhood().intersect(nodes);
	      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
	        var v = neighbors[_i2];
	        var vid = v.id();
	        var vDist = distBetween(u, v);
	        var alt = smalletsDist + vDist.dist;
	        if (alt < getDist(v)) {
	          setDist(v, alt);
	          prev[vid] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for
	    } // while

	    return {
	      distanceTo: function distanceTo(node) {
	        var target = string(node) ? nodes.filter(node)[0] : node[0];
	        return knownDist[target.id()];
	      },
	      pathTo: function pathTo(node) {
	        var target = string(node) ? nodes.filter(node)[0] : node[0];
	        var S = [];
	        var u = target;
	        var uid = u.id();
	        if (target.length > 0) {
	          S.unshift(target);
	          while (prev[uid]) {
	            var p = prev[uid];
	            S.unshift(p.edge);
	            S.unshift(p.node);
	            u = p.node;
	            uid = u.id();
	          }
	        }
	        return eles.spawn(S);
	      }
	    };
	  }
	};

	var elesfn$t = {
	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function kruskal(weightFn) {
	    weightFn = weightFn || function (edge) {
	      return 1;
	    };
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;
	    var numNodes = nodes.length;
	    var forest = new Array(numNodes);
	    var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

	    var findSetIndex = function findSetIndex(ele) {
	      for (var i = 0; i < forest.length; i++) {
	        var eles = forest[i];
	        if (eles.has(ele)) {
	          return i;
	        }
	      }
	    };

	    // start with one forest per node
	    for (var i = 0; i < numNodes; i++) {
	      forest[i] = this.spawn(nodes[i]);
	    }
	    var S = edges.sort(function (a, b) {
	      return weightFn(a) - weightFn(b);
	    });
	    for (var _i = 0; _i < S.length; _i++) {
	      var edge = S[_i];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setUIndex = findSetIndex(u);
	      var setVIndex = findSetIndex(v);
	      var setU = forest[setUIndex];
	      var setV = forest[setVIndex];
	      if (setUIndex !== setVIndex) {
	        A.merge(edge);

	        // combine forests for u and v
	        setU.merge(setV);
	        forest.splice(setVIndex, 1);
	      }
	    }
	    return A;
	  }
	};

	var aStarDefaults = defaults$g({
	  root: null,
	  goal: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  heuristic: function heuristic(edge) {
	    return 0;
	  },
	  directed: false
	});
	var elesfn$s = {
	  // Implemented from pseudocode from wikipedia
	  aStar: function aStar(options) {
	    var cy = this.cy();
	    var _aStarDefaults = aStarDefaults(options),
	      root = _aStarDefaults.root,
	      goal = _aStarDefaults.goal,
	      heuristic = _aStarDefaults.heuristic,
	      directed = _aStarDefaults.directed,
	      weight = _aStarDefaults.weight;
	    root = cy.collection(root)[0];
	    goal = cy.collection(goal)[0];
	    var sid = root.id();
	    var tid = goal.id();
	    var gScore = {};
	    var fScore = {};
	    var closedSetIds = {};
	    var openSet = new heap(function (a, b) {
	      return fScore[a.id()] - fScore[b.id()];
	    });
	    var openSetIds = new Set$1();
	    var cameFrom = {};
	    var cameFromEdge = {};
	    var addToOpenSet = function addToOpenSet(ele, id) {
	      openSet.push(ele);
	      openSetIds.add(id);
	    };
	    var cMin, cMinId;
	    var popFromOpenSet = function popFromOpenSet() {
	      cMin = openSet.pop();
	      cMinId = cMin.id();
	      openSetIds["delete"](cMinId);
	    };
	    var isInOpenSet = function isInOpenSet(id) {
	      return openSetIds.has(id);
	    };
	    addToOpenSet(root, sid);
	    gScore[sid] = 0;
	    fScore[sid] = heuristic(root);

	    // Counter
	    var steps = 0;

	    // Main loop
	    while (openSet.size() > 0) {
	      popFromOpenSet();
	      steps++;

	      // If we've found our goal, then we are done
	      if (cMinId === tid) {
	        var path = [];
	        var pathNode = goal;
	        var pathNodeId = tid;
	        var pathEdge = cameFromEdge[pathNodeId];
	        for (;;) {
	          path.unshift(pathNode);
	          if (pathEdge != null) {
	            path.unshift(pathEdge);
	          }
	          pathNode = cameFrom[pathNodeId];
	          if (pathNode == null) {
	            break;
	          }
	          pathNodeId = pathNode.id();
	          pathEdge = cameFromEdge[pathNodeId];
	        }
	        return {
	          found: true,
	          distance: gScore[cMinId],
	          path: this.spawn(path),
	          steps: steps
	        };
	      }

	      // Add cMin to processed nodes
	      closedSetIds[cMinId] = true;

	      // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not
	      var vwEdges = cMin._private.edges;
	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i];

	        // edge must be in set of calling eles
	        if (!this.hasElementWithId(e.id())) {
	          continue;
	        }

	        // cMin must be the source of edge if directed
	        if (directed && e.data('source') !== cMinId) {
	          continue;
	        }
	        var wSrc = e.source();
	        var wTgt = e.target();
	        var w = wSrc.id() !== cMinId ? wSrc : wTgt;
	        var wid = w.id();

	        // node must be in set of calling eles
	        if (!this.hasElementWithId(wid)) {
	          continue;
	        }

	        // if node is in closedSet, ignore it
	        if (closedSetIds[wid]) {
	          continue;
	        }

	        // New tentative score for node w
	        var tempScore = gScore[cMinId] + weight(e);

	        // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value

	        // w not in openSet
	        if (!isInOpenSet(wid)) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          addToOpenSet(w, wid);
	          cameFrom[wid] = cMin;
	          cameFromEdge[wid] = e;
	          continue;
	        }

	        // w already in openSet, but with greater gScore
	        if (tempScore < gScore[wid]) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          cameFrom[wid] = cMin;
	          cameFromEdge[wid] = e;
	        }
	      } // End of neighbors update
	    } // End of main loop

	    // If we've reached here, then we've not reached our goal
	    return {
	      found: false,
	      distance: undefined,
	      path: undefined,
	      steps: steps
	    };
	  }
	}; // elesfn

	var floydWarshallDefaults = defaults$g({
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false
	});
	var elesfn$r = {
	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function floydWarshall(options) {
	    var cy = this.cy();
	    var _floydWarshallDefault = floydWarshallDefaults(options),
	      weight = _floydWarshallDefault.weight,
	      directed = _floydWarshallDefault.directed;
	    var weightFn = weight;
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;
	    var N = nodes.length;
	    var Nsq = N * N;
	    var indexOf = function indexOf(node) {
	      return nodes.indexOf(node);
	    };
	    var atIndex = function atIndex(i) {
	      return nodes[i];
	    };

	    // Initialize distance matrix
	    var dist = new Array(Nsq);
	    for (var n = 0; n < Nsq; n++) {
	      var j = n % N;
	      var i = (n - j) / N;
	      if (i === j) {
	        dist[n] = 0;
	      } else {
	        dist[n] = Infinity;
	      }
	    }

	    // Initialize matrix used for path reconstruction
	    // Initialize distance matrix
	    var next = new Array(Nsq);
	    var edgeNext = new Array(Nsq);

	    // Process edges
	    for (var _i = 0; _i < edges.length; _i++) {
	      var edge = edges[_i];
	      var src = edge.source()[0];
	      var tgt = edge.target()[0];
	      if (src === tgt) {
	        continue;
	      } // exclude loops

	      var s = indexOf(src);
	      var t = indexOf(tgt);
	      var st = s * N + t; // source to target index
	      var _weight = weightFn(edge);

	      // Check if already process another edge between same 2 nodes
	      if (dist[st] > _weight) {
	        dist[st] = _weight;
	        next[st] = t;
	        edgeNext[st] = edge;
	      }

	      // If undirected graph, process 'reversed' edge
	      if (!directed) {
	        var ts = t * N + s; // target to source index

	        if (!directed && dist[ts] > _weight) {
	          dist[ts] = _weight;
	          next[ts] = s;
	          edgeNext[ts] = edge;
	        }
	      }
	    }

	    // Main loop
	    for (var k = 0; k < N; k++) {
	      for (var _i2 = 0; _i2 < N; _i2++) {
	        var ik = _i2 * N + k;
	        for (var _j = 0; _j < N; _j++) {
	          var ij = _i2 * N + _j;
	          var kj = k * N + _j;
	          if (dist[ik] + dist[kj] < dist[ij]) {
	            dist[ij] = dist[ik] + dist[kj];
	            next[ij] = next[ik];
	          }
	        }
	      }
	    }
	    var getArgEle = function getArgEle(ele) {
	      return (string(ele) ? cy.filter(ele) : ele)[0];
	    };
	    var indexOfArgEle = function indexOfArgEle(ele) {
	      return indexOf(getArgEle(ele));
	    };
	    var res = {
	      distance: function distance(from, to) {
	        var i = indexOfArgEle(from);
	        var j = indexOfArgEle(to);
	        return dist[i * N + j];
	      },
	      path: function path(from, to) {
	        var i = indexOfArgEle(from);
	        var j = indexOfArgEle(to);
	        var fromNode = atIndex(i);
	        if (i === j) {
	          return fromNode.collection();
	        }
	        if (next[i * N + j] == null) {
	          return cy.collection();
	        }
	        var path = cy.collection();
	        var prev = i;
	        var edge;
	        path.merge(fromNode);
	        while (i !== j) {
	          prev = i;
	          i = next[i * N + j];
	          edge = edgeNext[prev * N + i];
	          path.merge(edge);
	          path.merge(atIndex(i));
	        }
	        return path;
	      }
	    };
	    return res;
	  } // floydWarshall
	}; // elesfn

	var bellmanFordDefaults = defaults$g({
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false,
	  root: null
	});
	var elesfn$q = {
	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function bellmanFord(options) {
	    var _this = this;
	    var _bellmanFordDefaults = bellmanFordDefaults(options),
	      weight = _bellmanFordDefaults.weight,
	      directed = _bellmanFordDefaults.directed,
	      root = _bellmanFordDefaults.root;
	    var weightFn = weight;
	    var eles = this;
	    var cy = this.cy();
	    var _this$byGroup = this.byGroup(),
	      edges = _this$byGroup.edges,
	      nodes = _this$byGroup.nodes;
	    var numNodes = nodes.length;
	    var infoMap = new Map$2();
	    var hasNegativeWeightCycle = false;
	    var negativeWeightCycles = [];
	    root = cy.collection(root)[0]; // in case selector passed

	    edges.unmergeBy(function (edge) {
	      return edge.isLoop();
	    });
	    var numEdges = edges.length;
	    var getInfo = function getInfo(node) {
	      var obj = infoMap.get(node.id());
	      if (!obj) {
	        obj = {};
	        infoMap.set(node.id(), obj);
	      }
	      return obj;
	    };
	    var getNodeFromTo = function getNodeFromTo(to) {
	      return (string(to) ? cy.$(to) : to)[0];
	    };
	    var distanceTo = function distanceTo(to) {
	      return getInfo(getNodeFromTo(to)).dist;
	    };
	    var pathTo = function pathTo(to) {
	      var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
	      var end = getNodeFromTo(to);
	      var path = [];
	      var node = end;
	      for (;;) {
	        if (node == null) {
	          return _this.spawn();
	        }
	        var _getInfo = getInfo(node),
	          edge = _getInfo.edge,
	          pred = _getInfo.pred;
	        path.unshift(node[0]);
	        if (node.same(thisStart) && path.length > 0) {
	          break;
	        }
	        if (edge != null) {
	          path.unshift(edge);
	        }
	        node = pred;
	      }
	      return eles.spawn(path);
	    };

	    // Initializations { dist, pred, edge }
	    for (var i = 0; i < numNodes; i++) {
	      var node = nodes[i];
	      var info = getInfo(node);
	      if (node.same(root)) {
	        info.dist = 0;
	      } else {
	        info.dist = Infinity;
	      }
	      info.pred = null;
	      info.edge = null;
	    }

	    // Edges relaxation
	    var replacedEdge = false;
	    var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
	      var dist = info1.dist + weight;
	      if (dist < info2.dist && !edge.same(info1.edge)) {
	        info2.dist = dist;
	        info2.pred = node1;
	        info2.edge = edge;
	        replacedEdge = true;
	      }
	    };
	    for (var _i = 1; _i < numNodes; _i++) {
	      replacedEdge = false;
	      for (var e = 0; e < numEdges; e++) {
	        var edge = edges[e];
	        var src = edge.source();
	        var tgt = edge.target();
	        var _weight = weightFn(edge);
	        var srcInfo = getInfo(src);
	        var tgtInfo = getInfo(tgt);
	        checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight);

	        // If undirected graph, we need to take into account the 'reverse' edge
	        if (!directed) {
	          checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
	        }
	      }
	      if (!replacedEdge) {
	        break;
	      }
	    }
	    if (replacedEdge) {
	      // Check for negative weight cycles
	      var negativeWeightCycleIds = [];
	      for (var _e = 0; _e < numEdges; _e++) {
	        var _edge = edges[_e];
	        var _src = _edge.source();
	        var _tgt = _edge.target();
	        var _weight2 = weightFn(_edge);
	        var srcDist = getInfo(_src).dist;
	        var tgtDist = getInfo(_tgt).dist;
	        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
	          if (!hasNegativeWeightCycle) {
	            warn('Graph contains a negative weight cycle for Bellman-Ford');
	            hasNegativeWeightCycle = true;
	          }
	          if (options.findNegativeWeightCycles !== false) {
	            var negativeNodes = [];
	            if (srcDist + _weight2 < tgtDist) {
	              negativeNodes.push(_src);
	            }
	            if (!directed && tgtDist + _weight2 < srcDist) {
	              negativeNodes.push(_tgt);
	            }
	            var numNegativeNodes = negativeNodes.length;
	            for (var n = 0; n < numNegativeNodes; n++) {
	              var start = negativeNodes[n];
	              var cycle = [start];
	              cycle.push(getInfo(start).edge);
	              var _node = getInfo(start).pred;
	              while (cycle.indexOf(_node) === -1) {
	                cycle.push(_node);
	                cycle.push(getInfo(_node).edge);
	                _node = getInfo(_node).pred;
	              }
	              cycle = cycle.slice(cycle.indexOf(_node));
	              var smallestId = cycle[0].id();
	              var smallestIndex = 0;
	              for (var c = 2; c < cycle.length; c += 2) {
	                if (cycle[c].id() < smallestId) {
	                  smallestId = cycle[c].id();
	                  smallestIndex = c;
	                }
	              }
	              cycle = cycle.slice(smallestIndex).concat(cycle.slice(0, smallestIndex));
	              cycle.push(cycle[0]);
	              var cycleId = cycle.map(function (el) {
	                return el.id();
	              }).join(",");
	              if (negativeWeightCycleIds.indexOf(cycleId) === -1) {
	                negativeWeightCycles.push(eles.spawn(cycle));
	                negativeWeightCycleIds.push(cycleId);
	              }
	            }
	          } else {
	            break;
	          }
	        }
	      }
	    }
	    return {
	      distanceTo: distanceTo,
	      pathTo: pathTo,
	      hasNegativeWeightCycle: hasNegativeWeightCycle,
	      negativeWeightCycles: negativeWeightCycles
	    };
	  } // bellmanFord
	}; // elesfn

	var sqrt2 = Math.sqrt(2);

	// Function which colapses 2 (meta) nodes into one
	// Updates the remaining edge lists
	// Receives as a paramater the edge which causes the collapse
	var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
	  if (remainingEdges.length === 0) {
	    error("Karger-Stein must be run on a connected (sub)graph");
	  }
	  var edgeInfo = remainingEdges[edgeIndex];
	  var sourceIn = edgeInfo[1];
	  var targetIn = edgeInfo[2];
	  var partition1 = nodeMap[sourceIn];
	  var partition2 = nodeMap[targetIn];
	  var newEdges = remainingEdges; // re-use array

	  // Delete all edges between partition1 and partition2
	  for (var i = newEdges.length - 1; i >= 0; i--) {
	    var edge = newEdges[i];
	    var src = edge[1];
	    var tgt = edge[2];
	    if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
	      newEdges.splice(i, 1);
	    }
	  }

	  // All edges pointing to partition2 should now point to partition1
	  for (var _i = 0; _i < newEdges.length; _i++) {
	    var _edge = newEdges[_i];
	    if (_edge[1] === partition2) {
	      // Check source
	      newEdges[_i] = _edge.slice(); // copy
	      newEdges[_i][1] = partition1;
	    } else if (_edge[2] === partition2) {
	      // Check target
	      newEdges[_i] = _edge.slice(); // copy
	      newEdges[_i][2] = partition1;
	    }
	  }

	  // Move all nodes from partition2 to partition1
	  for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
	    if (nodeMap[_i2] === partition2) {
	      nodeMap[_i2] = partition1;
	    }
	  }
	  return newEdges;
	};

	// Contracts a graph until we reach a certain number of meta nodes
	var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
	  while (size > sizeLimit) {
	    // Choose an edge randomly
	    var edgeIndex = Math.floor(Math.random() * remainingEdges.length);

	    // Collapse graph based on edge
	    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
	    size--;
	  }
	  return remainingEdges;
	};
	var elesfn$p = {
	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function kargerStein() {
	    var _this = this;
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;
	    edges.unmergeBy(function (edge) {
	      return edge.isLoop();
	    });
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
	    var stopSize = Math.floor(numNodes / sqrt2);
	    if (numNodes < 2) {
	      error('At least 2 nodes are required for Karger-Stein algorithm');
	      return undefined;
	    }

	    // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)
	    var edgeIndexes = [];
	    for (var i = 0; i < numEdges; i++) {
	      var e = edges[i];
	      edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
	    }

	    // We will store the best cut found here
	    var minCutSize = Infinity;
	    var minCutEdgeIndexes = [];
	    var minCutNodeMap = new Array(numNodes);

	    // Initial meta node partition
	    var metaNodeMap = new Array(numNodes);
	    var metaNodeMap2 = new Array(numNodes);
	    var copyNodesMap = function copyNodesMap(from, to) {
	      for (var _i3 = 0; _i3 < numNodes; _i3++) {
	        to[_i3] = from[_i3];
	      }
	    };

	    // Main loop
	    for (var iter = 0; iter <= numIter; iter++) {
	      // Reset meta node partition
	      for (var _i4 = 0; _i4 < numNodes; _i4++) {
	        metaNodeMap[_i4] = _i4;
	      }

	      // Contract until stop point (stopSize nodes)
	      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
	      var edgesState2 = edgesState.slice(); // copy

	      // Create a copy of the colapsed nodes state
	      copyNodesMap(metaNodeMap, metaNodeMap2);

	      // Run 2 iterations starting in the stop state
	      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
	      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2);

	      // Is any of the 2 results the best cut so far?
	      if (res1.length <= res2.length && res1.length < minCutSize) {
	        minCutSize = res1.length;
	        minCutEdgeIndexes = res1;
	        copyNodesMap(metaNodeMap, minCutNodeMap);
	      } else if (res2.length <= res1.length && res2.length < minCutSize) {
	        minCutSize = res2.length;
	        minCutEdgeIndexes = res2;
	        copyNodesMap(metaNodeMap2, minCutNodeMap);
	      }
	    } // end of main loop

	    // Construct result
	    var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
	      return edges[e[0]];
	    }));
	    var partition1 = this.spawn();
	    var partition2 = this.spawn();

	    // traverse metaNodeMap for best cut
	    var witnessNodePartition = minCutNodeMap[0];
	    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
	      var partitionId = minCutNodeMap[_i5];
	      var node = nodes[_i5];
	      if (partitionId === witnessNodePartition) {
	        partition1.merge(node);
	      } else {
	        partition2.merge(node);
	      }
	    }

	    // construct components corresponding to each disjoint subset of nodes
	    var constructComponent = function constructComponent(subset) {
	      var component = _this.spawn();
	      subset.forEach(function (node) {
	        component.merge(node);
	        node.connectedEdges().forEach(function (edge) {
	          // ensure edge is within calling collection and edge is not in cut
	          if (_this.contains(edge) && !cut.contains(edge)) {
	            component.merge(edge);
	          }
	        });
	      });
	      return component;
	    };
	    var components = [constructComponent(partition1), constructComponent(partition2)];
	    var ret = {
	      cut: cut,
	      components: components,
	      // n.b. partitions are included to be compatible with the old api spec
	      // (could be removed in a future major version)
	      partition1: partition1,
	      partition2: partition2
	    };
	    return ret;
	  }
	}; // elesfn

	var copyPosition = function copyPosition(p) {
	  return {
	    x: p.x,
	    y: p.y
	  };
	};
	var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
	  return {
	    x: p.x * zoom + pan.x,
	    y: p.y * zoom + pan.y
	  };
	};
	var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
	  return {
	    x: (p.x - pan.x) / zoom,
	    y: (p.y - pan.y) / zoom
	  };
	};
	var array2point = function array2point(arr) {
	  return {
	    x: arr[0],
	    y: arr[1]
	  };
	};
	var min = function min(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var min = Infinity;
	  for (var i = begin; i < end; i++) {
	    var val = arr[i];
	    if (isFinite(val)) {
	      min = Math.min(val, min);
	    }
	  }
	  return min;
	};
	var max = function max(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var max = -Infinity;
	  for (var i = begin; i < end; i++) {
	    var val = arr[i];
	    if (isFinite(val)) {
	      max = Math.max(val, max);
	    }
	  }
	  return max;
	};
	var mean = function mean(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var total = 0;
	  var n = 0;
	  for (var i = begin; i < end; i++) {
	    var val = arr[i];
	    if (isFinite(val)) {
	      total += val;
	      n++;
	    }
	  }
	  return total / n;
	};
	var median = function median(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  if (copy) {
	    arr = arr.slice(begin, end);
	  } else {
	    if (end < arr.length) {
	      arr.splice(end, arr.length - end);
	    }
	    if (begin > 0) {
	      arr.splice(0, begin);
	    }
	  }

	  // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start
	  var off = 0; // offset from non-finite values
	  for (var i = arr.length - 1; i >= 0; i--) {
	    var v = arr[i];
	    if (includeHoles) {
	      if (!isFinite(v)) {
	        arr[i] = -Infinity;
	        off++;
	      }
	    } else {
	      // just remove it if we don't want to consider holes
	      arr.splice(i, 1);
	    }
	  }
	  if (sort) {
	    arr.sort(function (a, b) {
	      return a - b;
	    }); // requires copy = true if you don't want to change the orig
	  }

	  var len = arr.length;
	  var mid = Math.floor(len / 2);
	  if (len % 2 !== 0) {
	    return arr[mid + 1 + off];
	  } else {
	    return (arr[mid - 1 + off] + arr[mid + off]) / 2;
	  }
	};
	var deg2rad = function deg2rad(deg) {
	  return Math.PI * deg / 180;
	};
	var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
	  return Math.atan2(dispY, dispX) - Math.PI / 2;
	};
	var log2 = Math.log2 || function (n) {
	  return Math.log(n) / Math.log(2);
	};
	var signum = function signum(x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};
	var dist = function dist(p1, p2) {
	  return Math.sqrt(sqdist(p1, p2));
	};
	var sqdist = function sqdist(p1, p2) {
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;
	  return dx * dx + dy * dy;
	};
	var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
	  var length = v.length;

	  // First, get sum of all elements
	  var total = 0;
	  for (var i = 0; i < length; i++) {
	    total += v[i];
	  }

	  // Now, divide each by the sum of all elements
	  for (var _i = 0; _i < length; _i++) {
	    v[_i] = v[_i] / total;
	  }
	  return v;
	};

	// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
	var qbezierAt = function qbezierAt(p0, p1, p2, t) {
	  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
	};
	var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
	  return {
	    x: qbezierAt(p0.x, p1.x, p2.x, t),
	    y: qbezierAt(p0.y, p1.y, p2.y, t)
	  };
	};
	var lineAt = function lineAt(p0, p1, t, d) {
	  var vec = {
	    x: p1.x - p0.x,
	    y: p1.y - p0.y
	  };
	  var vecDist = dist(p0, p1);
	  var normVec = {
	    x: vec.x / vecDist,
	    y: vec.y / vecDist
	  };
	  t = t == null ? 0 : t;
	  d = d != null ? d : t * vecDist;
	  return {
	    x: p0.x + normVec.x * d,
	    y: p0.y + normVec.y * d
	  };
	};
	var bound = function bound(min, val, max) {
	  return Math.max(min, Math.min(max, val));
	};

	// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
	var makeBoundingBox = function makeBoundingBox(bb) {
	  if (bb == null) {
	    return {
	      x1: Infinity,
	      y1: Infinity,
	      x2: -Infinity,
	      y2: -Infinity,
	      w: 0,
	      h: 0
	    };
	  } else if (bb.x1 != null && bb.y1 != null) {
	    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};
	var copyBoundingBox = function copyBoundingBox(bb) {
	  return {
	    x1: bb.x1,
	    x2: bb.x2,
	    w: bb.w,
	    y1: bb.y1,
	    y2: bb.y2,
	    h: bb.h
	  };
	};
	var clearBoundingBox = function clearBoundingBox(bb) {
	  bb.x1 = Infinity;
	  bb.y1 = Infinity;
	  bb.x2 = -Infinity;
	  bb.y2 = -Infinity;
	  bb.w = 0;
	  bb.h = 0;
	};
	var shiftBoundingBox = function shiftBoundingBox(bb, dx, dy) {
	  return {
	    x1: bb.x1 + dx,
	    x2: bb.x2 + dx,
	    y1: bb.y1 + dy,
	    y2: bb.y2 + dy,
	    w: bb.w,
	    h: bb.h
	  };
	};
	var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
	  // update bb1 with bb2 bounds

	  bb1.x1 = Math.min(bb1.x1, bb2.x1);
	  bb1.x2 = Math.max(bb1.x2, bb2.x2);
	  bb1.w = bb1.x2 - bb1.x1;
	  bb1.y1 = Math.min(bb1.y1, bb2.y1);
	  bb1.y2 = Math.max(bb1.y2, bb2.y2);
	  bb1.h = bb1.y2 - bb1.y1;
	};
	var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
	  bb.x1 = Math.min(bb.x1, x);
	  bb.x2 = Math.max(bb.x2, x);
	  bb.w = bb.x2 - bb.x1;
	  bb.y1 = Math.min(bb.y1, y);
	  bb.y2 = Math.max(bb.y2, y);
	  bb.h = bb.y2 - bb.y1;
	};
	var expandBoundingBox = function expandBoundingBox(bb) {
	  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  bb.x1 -= padding;
	  bb.x2 += padding;
	  bb.y1 -= padding;
	  bb.y2 += padding;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;
	  return bb;
	};
	var expandBoundingBoxSides = function expandBoundingBoxSides(bb) {
	  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];
	  var top, right, bottom, left;
	  if (padding.length === 1) {
	    top = right = bottom = left = padding[0];
	  } else if (padding.length === 2) {
	    top = bottom = padding[0];
	    left = right = padding[1];
	  } else if (padding.length === 4) {
	    var _padding = _slicedToArray(padding, 4);
	    top = _padding[0];
	    right = _padding[1];
	    bottom = _padding[2];
	    left = _padding[3];
	  }
	  bb.x1 -= left;
	  bb.x2 += right;
	  bb.y1 -= top;
	  bb.y2 += bottom;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;
	  return bb;
	};

	// assign the values of bb2 into bb1
	var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
	  bb1.x1 = bb2.x1;
	  bb1.y1 = bb2.y1;
	  bb1.x2 = bb2.x2;
	  bb1.y2 = bb2.y2;
	  bb1.w = bb1.x2 - bb1.x1;
	  bb1.h = bb1.y2 - bb1.y1;
	};
	var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
	  // case: one bb to right of other
	  if (bb1.x1 > bb2.x2) {
	    return false;
	  }
	  if (bb2.x1 > bb1.x2) {
	    return false;
	  }

	  // case: one bb to left of other
	  if (bb1.x2 < bb2.x1) {
	    return false;
	  }
	  if (bb2.x2 < bb1.x1) {
	    return false;
	  }

	  // case: one bb above other
	  if (bb1.y2 < bb2.y1) {
	    return false;
	  }
	  if (bb2.y2 < bb1.y1) {
	    return false;
	  }

	  // case: one bb below other
	  if (bb1.y1 > bb2.y2) {
	    return false;
	  }
	  if (bb2.y1 > bb1.y2) {
	    return false;
	  }

	  // otherwise, must have some overlap
	  return true;
	};
	var inBoundingBox = function inBoundingBox(bb, x, y) {
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};
	var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
	  return inBoundingBox(bb, pt.x, pt.y);
	};
	var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
	  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
	};
	var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
	  var radius = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'auto';
	  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : radius;
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  cornerRadius = Math.min(cornerRadius, halfWidth, halfHeight);
	  var doWidth = cornerRadius !== halfWidth,
	    doHeight = cornerRadius !== halfHeight;

	  // Check intersections with straight line segments
	  var straightLineIntersections;

	  // Top segment, left to right
	  if (doWidth) {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Right segment, top to bottom
	  if (doHeight) {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);
	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Bottom segment, left to right
	  if (doWidth) {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);
	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Left segment, top to bottom
	  if (doHeight) {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);
	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Check intersections with arc segments
	  var arcIntersections;

	  // Top Left
	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Top Right
	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Right
	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Left
	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }
	  return []; // if nothing
	};

	var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
	  var t = tolerance;
	  var x1 = Math.min(lx1, lx2);
	  var x2 = Math.max(lx1, lx2);
	  var y1 = Math.min(ly1, ly2);
	  var y2 = Math.max(ly1, ly2);
	  return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
	};
	var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
	  var bb = {
	    x1: Math.min(x1, x3, x2) - tolerance,
	    x2: Math.max(x1, x3, x2) + tolerance,
	    y1: Math.min(y1, y3, y2) - tolerance,
	    y2: Math.max(y1, y3, y2) + tolerance
	  };

	  // if outside the rough bounding box for the bezier, then it can't be a hit
	  if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }
	};
	var solveQuadratic = function solveQuadratic(a, b, c, val) {
	  c -= val;
	  var r = b * b - 4 * a * c;
	  if (r < 0) {
	    return [];
	  }
	  var sqrtR = Math.sqrt(r);
	  var denom = 2 * a;
	  var root1 = (-b + sqrtR) / denom;
	  var root2 = (-b - sqrtR) / denom;
	  return [root1, root2];
	};
	var solveCubic = function solveCubic(a, b, c, d, result) {
	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component

	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

	  var epsilon = 0.00001;

	  // avoid division by zero while keeping the overall expression close in value
	  if (a === 0) {
	    a = epsilon;
	  }
	  b /= a;
	  c /= a;
	  d /= a;
	  var discriminant, q, r, dum1, s, t, term1, r13;
	  q = (3.0 * c - b * b) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;
	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = b / 3.0;
	  if (discriminant > 0) {
	    s = r + Math.sqrt(discriminant);
	    s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
	    t = r - Math.sqrt(discriminant);
	    t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt(3.0) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }
	  result[5] = result[3] = 0;
	  if (discriminant === 0) {
	    r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }
	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos(r / Math.sqrt(dum1));
	  r13 = 2.0 * Math.sqrt(q);
	  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
	  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
	  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
	  return;
	};
	var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve

	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)

	  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
	  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
	  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
	  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y;

	  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = [];

	  // Use the cubic solving algorithm
	  solveCubic(a, b, c, d, roots);
	  var zeroThreshold = 0.0000001;
	  var params = [];
	  for (var index = 0; index < 6; index += 2) {
	    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
	      params.push(roots[index]);
	    }
	  }
	  params.push(1.0);
	  params.push(0.0);
	  var minDistanceSquared = -1;
	  var curX, curY, distSquared;
	  for (var i = 0; i < params.length; i++) {
	    curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
	    curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
	    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
	    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
	    if (minDistanceSquared >= 0) {
	      if (distSquared < minDistanceSquared) {
	        minDistanceSquared = distSquared;
	      }
	    } else {
	      minDistanceSquared = distSquared;
	    }
	  }
	  return minDistanceSquared;
	};
	var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
	  var offset = [x - x1, y - y1];
	  var line = [x2 - x1, y2 - y1];
	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;
	  if (dotProduct < 0) {
	    return hypSq;
	  }
	  if (adjSq > lineSq) {
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }
	  return hypSq - adjSq;
	};
	var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
	  var x1, y1, x2, y2;
	  var y3;

	  // Intersect with vertical line through (x, y)
	  var up = 0;
	  // let down = 0;
	  for (var i = 0; i < points.length / 2; i++) {
	    x1 = points[i * 2];
	    y1 = points[i * 2 + 1];
	    if (i + 1 < points.length / 2) {
	      x2 = points[(i + 1) * 2];
	      y2 = points[(i + 1) * 2 + 1];
	    } else {
	      x2 = points[(i + 1 - points.length / 2) * 2];
	      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
	    }
	    if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;
	      if (y3 > y) {
	        up++;
	      }

	      // if( y3 < y ){
	      // down++;
	      // }
	    } else {
	      continue;
	    }
	  }
	  if (up % 2 === 0) {
	    return false;
	  } else {
	    return true;
	  }
	};
	var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
	  var transformedPoints = new Array(basePoints.length);

	  // Gives negative angle
	  var angle;
	  if (direction[0] != null) {
	    angle = Math.atan(direction[1] / direction[0]);
	    if (direction[0] < 0) {
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }
	  var cos = Math.cos(-angle);
	  var sin = Math.sin(-angle);

	  //    console.log("base: " + basePoints);
	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
	    transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
	    transformedPoints[i * 2] += centerX;
	    transformedPoints[i * 2 + 1] += centerY;
	  }
	  var points;
	  if (padding > 0) {
	    var expandedLineSet = expandPolygon(transformedPoints, -padding);
	    points = joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }
	  return pointInsidePolygonPoints(x, y, points);
	};
	var pointInsideRoundPolygon = function pointInsideRoundPolygon(x, y, basePoints, centerX, centerY, width, height, corners) {
	  var cutPolygonPoints = new Array(basePoints.length * 2);
	  for (var i = 0; i < corners.length; i++) {
	    var corner = corners[i];
	    cutPolygonPoints[i * 4 + 0] = corner.startX;
	    cutPolygonPoints[i * 4 + 1] = corner.startY;
	    cutPolygonPoints[i * 4 + 2] = corner.stopX;
	    cutPolygonPoints[i * 4 + 3] = corner.stopY;
	    var squaredDistance = Math.pow(corner.cx - x, 2) + Math.pow(corner.cy - y, 2);
	    if (squaredDistance <= Math.pow(corner.radius, 2)) {
	      return true;
	    }
	  }
	  return pointInsidePolygonPoints(x, y, cutPolygonPoints);
	};
	var joinLines = function joinLines(lineSet) {
	  var vertices = new Array(lineSet.length / 2);
	  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
	  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;
	  for (var i = 0; i < lineSet.length / 4; i++) {
	    currentLineStartX = lineSet[i * 4];
	    currentLineStartY = lineSet[i * 4 + 1];
	    currentLineEndX = lineSet[i * 4 + 2];
	    currentLineEndY = lineSet[i * 4 + 3];
	    if (i < lineSet.length / 4 - 1) {
	      nextLineStartX = lineSet[(i + 1) * 4];
	      nextLineStartY = lineSet[(i + 1) * 4 + 1];
	      nextLineEndX = lineSet[(i + 1) * 4 + 2];
	      nextLineEndY = lineSet[(i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }
	    var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
	    vertices[i * 2] = intersection[0];
	    vertices[i * 2 + 1] = intersection[1];
	  }
	  return vertices;
	};
	var expandPolygon = function expandPolygon(points, pad) {
	  var expandedLineSet = new Array(points.length * 2);
	  var currentPointX, currentPointY, nextPointX, nextPointY;
	  for (var i = 0; i < points.length / 2; i++) {
	    currentPointX = points[i * 2];
	    currentPointY = points[i * 2 + 1];
	    if (i < points.length / 2 - 1) {
	      nextPointX = points[(i + 1) * 2];
	      nextPointY = points[(i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    }

	    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

	    // Assume CCW polygon winding

	    var offsetX = nextPointY - currentPointY;
	    var offsetY = -(nextPointX - currentPointX);

	    // Normalize
	    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;
	    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }
	  return expandedLineSet;
	};
	var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
	  var dispX = centerX - x;
	  var dispY = centerY - y;
	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;
	  var len = Math.sqrt(dispX * dispX + dispY * dispY);
	  var newLength = len - 1;
	  if (newLength < 0) {
	    return [];
	  }
	  var lenProportion = newLength / len;
	  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
	};
	var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
	  x -= centerX;
	  y -= centerY;
	  x /= width / 2 + padding;
	  y /= height / 2 + padding;
	  return x * x + y * y <= 1;
	};

	// Returns intersections of increasing distance from line's start point
	var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
	  // Calculate d, direction vector of line
	  var d = [x2 - x1, y2 - y1]; // Direction vector of line
	  var f = [x1 - centerX, y1 - centerY];
	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
	  var discriminant = b * b - 4 * a * c;
	  if (discriminant < 0) {
	    return [];
	  }
	  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
	  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
	  var tMin = Math.min(t1, t2);
	  var tMax = Math.max(t1, t2);
	  var inRangeParams = [];
	  if (tMin >= 0 && tMin <= 1) {
	    inRangeParams.push(tMin);
	  }
	  if (tMax >= 0 && tMax <= 1) {
	    inRangeParams.push(tMax);
	  }
	  if (inRangeParams.length === 0) {
	    return [];
	  }
	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;
	  if (inRangeParams.length > 1) {
	    if (inRangeParams[0] == inRangeParams[1]) {
	      return [nearIntersectionX, nearIntersectionY];
	    } else {
	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;
	      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
	    }
	  } else {
	    return [nearIntersectionX, nearIntersectionY];
	  }
	};
	var midOfThree = function midOfThree(a, b, c) {
	  if (b <= a && a <= c || c <= a && a <= b) {
	    return a;
	  } else if (a <= b && b <= c || c <= b && b <= a) {
	    return b;
	  } else {
	    return c;
	  }
	};

	// (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)
	var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
	  var dx13 = x1 - x3;
	  var dx21 = x2 - x1;
	  var dx43 = x4 - x3;
	  var dy13 = y1 - y3;
	  var dy21 = y2 - y1;
	  var dy43 = y4 - y3;
	  var ua_t = dx43 * dy13 - dy43 * dx13;
	  var ub_t = dx21 * dy13 - dy21 * dx13;
	  var u_b = dy43 * dx21 - dx43 * dy21;
	  if (u_b !== 0) {
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;
	    var flptThreshold = 0.001;
	    var _min = 0 - flptThreshold;
	    var _max = 1 + flptThreshold;
	    if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
	      return [x1 + ua * dx21, y1 + ua * dy21];
	    } else {
	      if (!infiniteLines) {
	        return [];
	      } else {
	        return [x1 + ua * dx21, y1 + ua * dy21];
	      }
	    }
	  } else {
	    if (ua_t === 0 || ub_t === 0) {
	      // Parallel, coincident lines. Check if overlap

	      // Check endpoint of second line
	      if (midOfThree(x1, x2, x4) === x4) {
	        return [x4, y4];
	      }

	      // Check start point of second line
	      if (midOfThree(x1, x2, x3) === x3) {
	        return [x3, y3];
	      }

	      // Endpoint of first line
	      if (midOfThree(x3, x4, x2) === x2) {
	        return [x2, y2];
	      }
	      return [];
	    } else {
	      // Parallel, non-coincident
	      return [];
	    }
	  }
	};

	// math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
	// intersect a node polygon (pts transformed)
	//
	// math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
	// intersect the points (no transform)
	var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
	  var intersections = [];
	  var intersection;
	  var transformedPoints = new Array(basePoints.length);
	  var doTransform = true;
	  if (width == null) {
	    doTransform = false;
	  }
	  var points;
	  if (doTransform) {
	    for (var i = 0; i < transformedPoints.length / 2; i++) {
	      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
	      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
	    }
	    if (padding > 0) {
	      var expandedLineSet = expandPolygon(transformedPoints, -padding);
	      points = joinLines(expandedLineSet);
	    } else {
	      points = transformedPoints;
	    }
	  } else {
	    points = basePoints;
	  }
	  var currentX, currentY, nextX, nextY;
	  for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
	    currentX = points[_i2 * 2];
	    currentY = points[_i2 * 2 + 1];
	    if (_i2 < points.length / 2 - 1) {
	      nextX = points[(_i2 + 1) * 2];
	      nextY = points[(_i2 + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }
	    intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);
	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }
	  return intersections;
	};
	var roundPolygonIntersectLine = function roundPolygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding, corners) {
	  var intersections = [];
	  var intersection;
	  var lines = new Array(basePoints.length * 2);
	  corners.forEach(function (corner, i) {
	    if (i === 0) {
	      lines[lines.length - 2] = corner.startX;
	      lines[lines.length - 1] = corner.startY;
	    } else {
	      lines[i * 4 - 2] = corner.startX;
	      lines[i * 4 - 1] = corner.startY;
	    }
	    lines[i * 4] = corner.stopX;
	    lines[i * 4 + 1] = corner.stopY;
	    intersection = intersectLineCircle(x, y, centerX, centerY, corner.cx, corner.cy, corner.radius);
	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  });
	  for (var i = 0; i < lines.length / 4; i++) {
	    intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[i * 4], lines[i * 4 + 1], lines[i * 4 + 2], lines[i * 4 + 3], false);
	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }
	  if (intersections.length > 2) {
	    var lowestIntersection = [intersections[0], intersections[1]];
	    var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);
	    for (var _i3 = 1; _i3 < intersections.length / 2; _i3++) {
	      var squaredDistance = Math.pow(intersections[_i3 * 2] - x, 2) + Math.pow(intersections[_i3 * 2 + 1] - y, 2);
	      if (squaredDistance <= lowestSquaredDistance) {
	        lowestIntersection[0] = intersections[_i3 * 2];
	        lowestIntersection[1] = intersections[_i3 * 2 + 1];
	        lowestSquaredDistance = squaredDistance;
	      }
	    }
	    return lowestIntersection;
	  }
	  return intersections;
	};
	var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
	  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
	  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
	  var lenRatio = (length - amount) / length;
	  if (lenRatio < 0) {
	    lenRatio = 0.00001;
	  }
	  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
	};
	var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
	  var points = generateUnitNgonPoints(sides, rotationRadians);
	  points = fitPolygonToSquare(points);
	  return points;
	};
	var fitPolygonToSquare = function fitPolygonToSquare(points) {
	  var x, y;
	  var sides = points.length / 2;
	  var minX = Infinity,
	    minY = Infinity,
	    maxX = -Infinity,
	    maxY = -Infinity;
	  for (var i = 0; i < sides; i++) {
	    x = points[2 * i];
	    y = points[2 * i + 1];
	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  }

	  // stretch factors
	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);
	  for (var _i4 = 0; _i4 < sides; _i4++) {
	    x = points[2 * _i4] = points[2 * _i4] * sx;
	    y = points[2 * _i4 + 1] = points[2 * _i4 + 1] * sy;
	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  }
	  if (minY < -1) {
	    for (var _i5 = 0; _i5 < sides; _i5++) {
	      y = points[2 * _i5 + 1] = points[2 * _i5 + 1] + (-1 - minY);
	    }
	  }
	  return points;
	};
	var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
	  startAngle += rotationRadians;
	  var points = new Array(sides * 2);
	  var currentAngle;
	  for (var i = 0; i < sides; i++) {
	    currentAngle = i * increment + startAngle;
	    points[2 * i] = Math.cos(currentAngle); // x
	    points[2 * i + 1] = Math.sin(-currentAngle); // y
	  }

	  return points;
	};

	// Set the default radius, unless half of width or height is smaller than default
	var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
	  return Math.min(width / 4, height / 4, 8);
	};

	// Set the default radius
	var getRoundPolygonRadius = function getRoundPolygonRadius(width, height) {
	  return Math.min(width / 10, height / 10, 8);
	};
	var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
	  return 8;
	};
	var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
	  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
	};

	// get curve width, height, and control point position offsets as a percentage of node height / width
	var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
	  return {
	    heightOffset: Math.min(15, 0.05 * height),
	    widthOffset: Math.min(100, 0.25 * width),
	    ctrlPtOffsetPct: 0.05
	  };
	};

	var pageRankDefaults = defaults$g({
	  dampingFactor: 0.8,
	  precision: 0.000001,
	  iterations: 200,
	  weight: function weight(edge) {
	    return 1;
	  }
	});
	var elesfn$o = {
	  pageRank: function pageRank(options) {
	    var _pageRankDefaults = pageRankDefaults(options),
	      dampingFactor = _pageRankDefaults.dampingFactor,
	      precision = _pageRankDefaults.precision,
	      iterations = _pageRankDefaults.iterations,
	      weight = _pageRankDefaults.weight;
	    var cy = this._private.cy;
	    var _this$byGroup = this.byGroup(),
	      nodes = _this$byGroup.nodes,
	      edges = _this$byGroup.edges;
	    var numNodes = nodes.length;
	    var numNodesSqd = numNodes * numNodes;
	    var numEdges = edges.length;

	    // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column
	    var matrix = new Array(numNodesSqd);
	    var columnSum = new Array(numNodes);
	    var additionalProb = (1 - dampingFactor) / numNodes;

	    // Create null matrix
	    for (var i = 0; i < numNodes; i++) {
	      for (var j = 0; j < numNodes; j++) {
	        var n = i * numNodes + j;
	        matrix[n] = 0;
	      }
	      columnSum[i] = 0;
	    }

	    // Now, process edges
	    for (var _i = 0; _i < numEdges; _i++) {
	      var edge = edges[_i];
	      var srcId = edge.data('source');
	      var tgtId = edge.data('target');

	      // Don't include loops in the matrix
	      if (srcId === tgtId) {
	        continue;
	      }
	      var s = nodes.indexOfId(srcId);
	      var t = nodes.indexOfId(tgtId);
	      var w = weight(edge);
	      var _n = t * numNodes + s;

	      // Update matrix
	      matrix[_n] += w;

	      // Update column sum
	      columnSum[s] += w;
	    }

	    // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0
	    var p = 1.0 / numNodes + additionalProb; // Shorthand

	    // Traverse matrix, column by column
	    for (var _j = 0; _j < numNodes; _j++) {
	      if (columnSum[_j] === 0) {
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for (var _i2 = 0; _i2 < numNodes; _i2++) {
	          var _n2 = _i2 * numNodes + _j;
	          matrix[_n2] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for (var _i3 = 0; _i3 < numNodes; _i3++) {
	          var _n3 = _i3 * numNodes + _j;
	          matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
	        }
	      }
	    }

	    // Compute dominant eigenvector using power method
	    var eigenvector = new Array(numNodes);
	    var temp = new Array(numNodes);
	    var previous;

	    // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand
	    for (var _i4 = 0; _i4 < numNodes; _i4++) {
	      eigenvector[_i4] = 1;
	    }
	    for (var iter = 0; iter < iterations; iter++) {
	      // Temp array with all 0's
	      for (var _i5 = 0; _i5 < numNodes; _i5++) {
	        temp[_i5] = 0;
	      }

	      // Multiply matrix with previous result
	      for (var _i6 = 0; _i6 < numNodes; _i6++) {
	        for (var _j2 = 0; _j2 < numNodes; _j2++) {
	          var _n4 = _i6 * numNodes + _j2;
	          temp[_i6] += matrix[_n4] * eigenvector[_j2];
	        }
	      }
	      inPlaceSumNormalize(temp);
	      previous = eigenvector;
	      eigenvector = temp;
	      temp = previous;
	      var diff = 0;
	      // Compute difference (squared module) of both vectors
	      for (var _i7 = 0; _i7 < numNodes; _i7++) {
	        var delta = previous[_i7] - eigenvector[_i7];
	        diff += delta * delta;
	      }

	      // If difference is less than the desired threshold, stop iterating
	      if (diff < precision) {
	        break;
	      }
	    }

	    // Construct result
	    var res = {
	      rank: function rank(node) {
	        node = cy.collection(node)[0];
	        return eigenvector[nodes.indexOf(node)];
	      }
	    };
	    return res;
	  } // pageRank
	}; // elesfn

	var defaults$f = defaults$g({
	  root: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false,
	  alpha: 0
	});
	var elesfn$n = {
	  degreeCentralityNormalized: function degreeCentralityNormalized(options) {
	    options = defaults$f(options);
	    var cy = this.cy();
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    if (!options.directed) {
	      var degrees = {};
	      var maxDegree = 0;
	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];

	        // add current node to the current options object and call degreeCentrality
	        options.root = node;
	        var currDegree = this.degreeCentrality(options);
	        if (maxDegree < currDegree.degree) {
	          maxDegree = currDegree.degree;
	        }
	        degrees[node.id()] = currDegree.degree;
	      }
	      return {
	        degree: function degree(node) {
	          if (maxDegree === 0) {
	            return 0;
	          }
	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }
	          return degrees[node.id()] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;
	      for (var _i = 0; _i < numNodes; _i++) {
	        var _node = nodes[_i];
	        var id = _node.id();

	        // add current node to the current options object and call degreeCentrality
	        options.root = _node;
	        var _currDegree = this.degreeCentrality(options);
	        if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
	        if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
	        indegrees[id] = _currDegree.indegree;
	        outdegrees[id] = _currDegree.outdegree;
	      }
	      return {
	        indegree: function indegree(node) {
	          if (maxIndegree == 0) {
	            return 0;
	          }
	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }
	          return indegrees[node.id()] / maxIndegree;
	        },
	        outdegree: function outdegree(node) {
	          if (maxOutdegree === 0) {
	            return 0;
	          }
	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }
	          return outdegrees[node.id()] / maxOutdegree;
	        }
	      };
	    }
	  },
	  // degreeCentralityNormalized

	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function degreeCentrality(options) {
	    options = defaults$f(options);
	    var cy = this.cy();
	    var callingEles = this;
	    var _options = options,
	      root = _options.root,
	      weight = _options.weight,
	      directed = _options.directed,
	      alpha = _options.alpha;
	    root = cy.collection(root)[0];
	    if (!directed) {
	      var connEdges = root.connectedEdges().intersection(callingEles);
	      var k = connEdges.length;
	      var s = 0;

	      // Now, sum edge weights
	      for (var i = 0; i < connEdges.length; i++) {
	        s += weight(connEdges[i]);
	      }
	      return {
	        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
	      };
	    } else {
	      var edges = root.connectedEdges();
	      var incoming = edges.filter(function (edge) {
	        return edge.target().same(root) && callingEles.has(edge);
	      });
	      var outgoing = edges.filter(function (edge) {
	        return edge.source().same(root) && callingEles.has(edge);
	      });
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0;

	      // Now, sum incoming edge weights
	      for (var _i2 = 0; _i2 < incoming.length; _i2++) {
	        s_in += weight(incoming[_i2]);
	      }

	      // Now, sum outgoing edge weights
	      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
	        s_out += weight(outgoing[_i3]);
	      }
	      return {
	        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
	        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
	      };
	    }
	  } // degreeCentrality
	}; // elesfn

	// nice, short mathematical alias
	elesfn$n.dc = elesfn$n.degreeCentrality;
	elesfn$n.dcn = elesfn$n.degreeCentralityNormalised = elesfn$n.degreeCentralityNormalized;

	var defaults$e = defaults$g({
	  harmonic: true,
	  weight: function weight() {
	    return 1;
	  },
	  directed: false,
	  root: null
	});
	var elesfn$m = {
	  closenessCentralityNormalized: function closenessCentralityNormalized(options) {
	    var _defaults = defaults$e(options),
	      harmonic = _defaults.harmonic,
	      weight = _defaults.weight,
	      directed = _defaults.directed;
	    var cy = this.cy();
	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall({
	      weight: weight,
	      directed: directed
	    });

	    // Compute closeness for every node and find the maximum closeness
	    for (var i = 0; i < nodes.length; i++) {
	      var currCloseness = 0;
	      var node_i = nodes[i];
	      for (var j = 0; j < nodes.length; j++) {
	        if (i !== j) {
	          var d = fw.distance(node_i, nodes[j]);
	          if (harmonic) {
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }
	      if (!harmonic) {
	        currCloseness = 1 / currCloseness;
	      }
	      if (maxCloseness < currCloseness) {
	        maxCloseness = currCloseness;
	      }
	      closenesses[node_i.id()] = currCloseness;
	    }
	    return {
	      closeness: function closeness(node) {
	        if (maxCloseness == 0) {
	          return 0;
	        }
	        if (string(node)) {
	          // from is a selector string
	          node = cy.filter(node)[0].id();
	        } else {
	          // from is a node
	          node = node.id();
	        }
	        return closenesses[node] / maxCloseness;
	      }
	    };
	  },
	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function closenessCentrality(options) {
	    var _defaults2 = defaults$e(options),
	      root = _defaults2.root,
	      weight = _defaults2.weight,
	      directed = _defaults2.directed,
	      harmonic = _defaults2.harmonic;
	    root = this.filter(root)[0];

	    // we need distance from this node to every other node
	    var dijkstra = this.dijkstra({
	      root: root,
	      weight: weight,
	      directed: directed
	    });
	    var totalDistance = 0;
	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++) {
	      var n = nodes[i];
	      if (!n.same(root)) {
	        var d = dijkstra.distanceTo(n);
	        if (harmonic) {
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }
	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality
	}; // elesfn

	// nice, short mathematical alias
	elesfn$m.cc = elesfn$m.closenessCentrality;
	elesfn$m.ccn = elesfn$m.closenessCentralityNormalised = elesfn$m.closenessCentralityNormalized;

	var defaults$d = defaults$g({
	  weight: null,
	  directed: false
	});
	var elesfn$l = {
	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function betweennessCentrality(options) {
	    var _defaults = defaults$d(options),
	      directed = _defaults.directed,
	      weight = _defaults.weight;
	    var weighted = weight != null;
	    var cy = this.cy();

	    // starting
	    var V = this.nodes();
	    var A = {};
	    var _C = {};
	    var max = 0;
	    var C = {
	      set: function set(key, val) {
	        _C[key] = val;
	        if (val > max) {
	          max = val;
	        }
	      },
	      get: function get(key) {
	        return _C[key];
	      }
	    };

	    // A contains the neighborhoods of every node
	    for (var i = 0; i < V.length; i++) {
	      var v = V[i];
	      var vid = v.id();
	      if (directed) {
	        A[vid] = v.outgoers().nodes(); // get outgoers of every node
	      } else {
	        A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
	      }

	      C.set(vid, 0);
	    }
	    var _loop = function _loop(s) {
	      var sid = V[s].id();
	      var S = []; // stack
	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = new heap(function (a, b) {
	        return d[a] - d[b];
	      }); // queue

	      // init dictionaries
	      for (var _i = 0; _i < V.length; _i++) {
	        var _vid = V[_i].id();
	        P[_vid] = [];
	        g[_vid] = 0;
	        d[_vid] = Infinity;
	      }
	      g[sid] = 1; // sigma
	      d[sid] = 0; // distance to s

	      Q.push(sid);
	      while (!Q.empty()) {
	        var _v = Q.pop();
	        S.push(_v);
	        if (weighted) {
	          for (var j = 0; j < A[_v].length; j++) {
	            var w = A[_v][j];
	            var vEle = cy.getElementById(_v);
	            var edge = void 0;
	            if (vEle.edgesTo(w).length > 0) {
	              edge = vEle.edgesTo(w)[0];
	            } else {
	              edge = w.edgesTo(vEle)[0];
	            }
	            var edgeWeight = weight(edge);
	            w = w.id();
	            if (d[w] > d[_v] + edgeWeight) {
	              d[w] = d[_v] + edgeWeight;
	              if (Q.nodes.indexOf(w) < 0) {
	                //if w is not in Q
	                Q.push(w);
	              } else {
	                // update position if w is in Q
	                Q.updateItem(w);
	              }
	              g[w] = 0;
	              P[w] = [];
	            }
	            if (d[w] == d[_v] + edgeWeight) {
	              g[w] = g[w] + g[_v];
	              P[w].push(_v);
	            }
	          }
	        } else {
	          for (var _j = 0; _j < A[_v].length; _j++) {
	            var _w = A[_v][_j].id();
	            if (d[_w] == Infinity) {
	              Q.push(_w);
	              d[_w] = d[_v] + 1;
	            }
	            if (d[_w] == d[_v] + 1) {
	              g[_w] = g[_w] + g[_v];
	              P[_w].push(_v);
	            }
	          }
	        }
	      }
	      var e = {};
	      for (var _i2 = 0; _i2 < V.length; _i2++) {
	        e[V[_i2].id()] = 0;
	      }
	      while (S.length > 0) {
	        var _w2 = S.pop();
	        for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
	          var _v2 = P[_w2][_j2];
	          e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);
	        }
	        if (_w2 != V[s].id()) {
	          C.set(_w2, C.get(_w2) + e[_w2]);
	        }
	      }
	    };
	    for (var s = 0; s < V.length; s++) {
	      _loop(s);
	    }
	    var ret = {
	      betweenness: function betweenness(node) {
	        var id = cy.collection(node).id();
	        return C.get(id);
	      },
	      betweennessNormalized: function betweennessNormalized(node) {
	        if (max == 0) {
	          return 0;
	        }
	        var id = cy.collection(node).id();
	        return C.get(id) / max;
	      }
	    };

	    // alias
	    ret.betweennessNormalised = ret.betweennessNormalized;
	    return ret;
	  } // betweennessCentrality
	}; // elesfn

	// nice, short mathematical alias
	elesfn$l.bc = elesfn$l.betweennessCentrality;

	// Implemented by Zoe Xi @zoexi for GSOC 2016

	/* eslint-disable no-unused-vars */
	var defaults$c = defaults$g({
	  expandFactor: 2,
	  // affects time of computation and cluster granularity to some extent: M * M
	  inflateFactor: 2,
	  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
	  multFactor: 1,
	  // optional self loops for each node. Use a neutral value to improve cluster computations.
	  maxIterations: 20,
	  // maximum number of iterations of the MCL algorithm in a single run
	  attributes: [
	  // attributes/features used to group nodes, ie. similarity values between nodes
	  function (edge) {
	    return 1;
	  }]
	});
	/* eslint-enable */

	var setOptions$3 = function setOptions(options) {
	  return defaults$c(options);
	};
	/* eslint-enable */

	var getSimilarity$1 = function getSimilarity(edge, attributes) {
	  var total = 0;
	  for (var i = 0; i < attributes.length; i++) {
	    total += attributes[i](edge);
	  }
	  return total;
	};
	var addLoops = function addLoops(M, n, val) {
	  for (var i = 0; i < n; i++) {
	    M[i * n + i] = val;
	  }
	};
	var normalize = function normalize(M, n) {
	  var sum;
	  for (var col = 0; col < n; col++) {
	    sum = 0;
	    for (var row = 0; row < n; row++) {
	      sum += M[row * n + col];
	    }
	    for (var _row = 0; _row < n; _row++) {
	      M[_row * n + col] = M[_row * n + col] / sum;
	    }
	  }
	};

	// TODO: blocked matrix multiplication?
	var mmult = function mmult(A, B, n) {
	  var C = new Array(n * n);
	  for (var i = 0; i < n; i++) {
	    for (var j = 0; j < n; j++) {
	      C[i * n + j] = 0;
	    }
	    for (var k = 0; k < n; k++) {
	      for (var _j = 0; _j < n; _j++) {
	        C[i * n + _j] += A[i * n + k] * B[k * n + _j];
	      }
	    }
	  }
	  return C;
	};
	var expand = function expand(M, n, expandFactor /** power **/) {
	  var _M = M.slice(0);
	  for (var p = 1; p < expandFactor; p++) {
	    M = mmult(M, _M, n);
	  }
	  return M;
	};
	var inflate = function inflate(M, n, inflateFactor /** r **/) {
	  var _M = new Array(n * n);

	  // M(i,j) ^ inflatePower
	  for (var i = 0; i < n * n; i++) {
	    _M[i] = Math.pow(M[i], inflateFactor);
	  }
	  normalize(_M, n);
	  return _M;
	};
	var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
	  // Check that both matrices have the same elements (i,j)
	  for (var i = 0; i < n2; i++) {
	    var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places
	    var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
	    if (v1 !== v2) {
	      return false;
	    }
	  }
	  return true;
	};
	var assign$2 = function assign(M, n, nodes, cy) {
	  var clusters = [];
	  for (var i = 0; i < n; i++) {
	    var cluster = [];
	    for (var j = 0; j < n; j++) {
	      // Row-wise attractors and elements that they attract belong in same cluster
	      if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
	        cluster.push(nodes[j]);
	      }
	    }
	    if (cluster.length !== 0) {
	      clusters.push(cy.collection(cluster));
	    }
	  }
	  return clusters;
	};
	var isDuplicate = function isDuplicate(c1, c2) {
	  for (var i = 0; i < c1.length; i++) {
	    if (!c2[i] || c1[i].id() !== c2[i].id()) {
	      return false;
	    }
	  }
	  return true;
	};
	var removeDuplicates = function removeDuplicates(clusters) {
	  for (var i = 0; i < clusters.length; i++) {
	    for (var j = 0; j < clusters.length; j++) {
	      if (i != j && isDuplicate(clusters[i], clusters[j])) {
	        clusters.splice(j, 1);
	      }
	    }
	  }
	  return clusters;
	};
	var markovClustering = function markovClustering(options) {
	  var nodes = this.nodes();
	  var edges = this.edges();
	  var cy = this.cy();

	  // Set parameters of algorithm:
	  var opts = setOptions$3(options);

	  // Map each node to its position in node array
	  var id2position = {};
	  for (var i = 0; i < nodes.length; i++) {
	    id2position[nodes[i].id()] = i;
	  }

	  // Generate stochastic matrix M from input graph G (should be symmetric/undirected)
	  var n = nodes.length,
	    n2 = n * n;
	  var M = new Array(n2),
	    _M;
	  for (var _i = 0; _i < n2; _i++) {
	    M[_i] = 0;
	  }
	  for (var e = 0; e < edges.length; e++) {
	    var edge = edges[e];
	    var _i2 = id2position[edge.source().id()];
	    var j = id2position[edge.target().id()];
	    var sim = getSimilarity$1(edge, opts.attributes);
	    M[_i2 * n + j] += sim; // G should be symmetric and undirected
	    M[j * n + _i2] += sim;
	  }

	  // Begin Markov cluster algorithm

	  // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal
	  addLoops(M, n, opts.multFactor);

	  // Step 2: M = normalize( M );
	  normalize(M, n);
	  var isStillMoving = true;
	  var iterations = 0;
	  while (isStillMoving && iterations < opts.maxIterations) {
	    isStillMoving = false;

	    // Step 3:
	    _M = expand(M, n, opts.expandFactor);

	    // Step 4:
	    M = inflate(_M, n, opts.inflateFactor);

	    // Step 5: check to see if ~steady state has been reached
	    if (!hasConverged(M, _M, n2, 4)) {
	      isStillMoving = true;
	    }
	    iterations++;
	  }

	  // Build clusters from matrix
	  var clusters = assign$2(M, n, nodes, cy);

	  // Remove duplicate clusters due to symmetry of graph and M matrix
	  clusters = removeDuplicates(clusters);
	  return clusters;
	};
	var markovClustering$1 = {
	  markovClustering: markovClustering,
	  mcl: markovClustering
	};

	// Common distance metrics for clustering algorithms
	var identity = function identity(x) {
	  return x;
	};
	var absDiff = function absDiff(p, q) {
	  return Math.abs(q - p);
	};
	var addAbsDiff = function addAbsDiff(total, p, q) {
	  return total + absDiff(p, q);
	};
	var addSquaredDiff = function addSquaredDiff(total, p, q) {
	  return total + Math.pow(q - p, 2);
	};
	var sqrt = function sqrt(x) {
	  return Math.sqrt(x);
	};
	var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
	  return Math.max(currentMax, absDiff(p, q));
	};
	var getDistance = function getDistance(length, getP, getQ, init, visit) {
	  var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
	  var ret = init;
	  var p, q;
	  for (var dim = 0; dim < length; dim++) {
	    p = getP(dim);
	    q = getQ(dim);
	    ret = visit(ret, p, q);
	  }
	  return post(ret);
	};
	var distances = {
	  euclidean: function euclidean(length, getP, getQ) {
	    if (length >= 2) {
	      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
	    } else {
	      // for single attr case, more efficient to avoid sqrt
	      return getDistance(length, getP, getQ, 0, addAbsDiff);
	    }
	  },
	  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
	    return getDistance(length, getP, getQ, 0, addSquaredDiff);
	  },
	  manhattan: function manhattan(length, getP, getQ) {
	    return getDistance(length, getP, getQ, 0, addAbsDiff);
	  },
	  max: function max(length, getP, getQ) {
	    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
	  }
	};

	// in case the user accidentally doesn't use camel case
	distances['squared-euclidean'] = distances['squaredEuclidean'];
	distances['squaredeuclidean'] = distances['squaredEuclidean'];
	function clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {
	  var impl;
	  if (fn$6(method)) {
	    impl = method;
	  } else {
	    impl = distances[method] || distances.euclidean;
	  }
	  if (length === 0 && fn$6(method)) {
	    return impl(nodeP, nodeQ);
	  } else {
	    return impl(length, getP, getQ, nodeP, nodeQ);
	  }
	}

	var defaults$b = defaults$g({
	  k: 2,
	  m: 2,
	  sensitivityThreshold: 0.0001,
	  distance: 'euclidean',
	  maxIterations: 10,
	  attributes: [],
	  testMode: false,
	  testCentroids: null
	});
	var setOptions$2 = function setOptions(options) {
	  return defaults$b(options);
	};

	var getDist = function getDist(type, node, centroid, attributes, mode) {
	  var noNodeP = mode !== 'kMedoids';
	  var getP = noNodeP ? function (i) {
	    return centroid[i];
	  } : function (i) {
	    return attributes[i](centroid);
	  };
	  var getQ = function getQ(i) {
	    return attributes[i](node);
	  };
	  var nodeP = centroid;
	  var nodeQ = node;
	  return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
	};
	var randomCentroids = function randomCentroids(nodes, k, attributes) {
	  var ndim = attributes.length;
	  var min = new Array(ndim);
	  var max = new Array(ndim);
	  var centroids = new Array(k);
	  var centroid = null;

	  // Find min, max values for each attribute dimension
	  for (var i = 0; i < ndim; i++) {
	    min[i] = nodes.min(attributes[i]).value;
	    max[i] = nodes.max(attributes[i]).value;
	  }

	  // Build k centroids, each represented as an n-dim feature vector
	  for (var c = 0; c < k; c++) {
	    centroid = [];
	    for (var _i = 0; _i < ndim; _i++) {
	      centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
	    }

	    centroids[c] = centroid;
	  }
	  return centroids;
	};
	var classify = function classify(node, centroids, distance, attributes, type) {
	  var min = Infinity;
	  var index = 0;
	  for (var i = 0; i < centroids.length; i++) {
	    var dist = getDist(distance, node, centroids[i], attributes, type);
	    if (dist < min) {
	      min = dist;
	      index = i;
	    }
	  }
	  return index;
	};
	var buildCluster = function buildCluster(centroid, nodes, assignment) {
	  var cluster = [];
	  var node = null;
	  for (var n = 0; n < nodes.length; n++) {
	    node = nodes[n];
	    if (assignment[node.id()] === centroid) {
	      //console.log("Node " + node.id() + " is associated with medoid #: " + m);
	      cluster.push(node);
	    }
	  }
	  return cluster;
	};
	var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
	  return Math.abs(v2 - v1) <= sensitivityThreshold;
	};
	var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
	  for (var i = 0; i < v1.length; i++) {
	    for (var j = 0; j < v1[i].length; j++) {
	      var diff = Math.abs(v1[i][j] - v2[i][j]);
	      if (diff > sensitivityThreshold) {
	        return false;
	      }
	    }
	  }
	  return true;
	};
	var seenBefore = function seenBefore(node, medoids, n) {
	  for (var i = 0; i < n; i++) {
	    if (node === medoids[i]) return true;
	  }
	  return false;
	};
	var randomMedoids = function randomMedoids(nodes, k) {
	  var medoids = new Array(k);

	  // For small data sets, the probability of medoid conflict is greater,
	  // so we need to check to see if we've already seen or chose this node before.
	  if (nodes.length < 50) {
	    // Randomly select k medoids from the n nodes
	    for (var i = 0; i < k; i++) {
	      var node = nodes[Math.floor(Math.random() * nodes.length)];

	      // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
	      // Instead choose a different random node.
	      while (seenBefore(node, medoids, i)) {
	        node = nodes[Math.floor(Math.random() * nodes.length)];
	      }
	      medoids[i] = node;
	    }
	  } else {
	    // Relatively large data set, so pretty safe to not check and just select random nodes
	    for (var _i2 = 0; _i2 < k; _i2++) {
	      medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
	    }
	  }
	  return medoids;
	};
	var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
	  var cost = 0;
	  for (var n = 0; n < cluster.length; n++) {
	    cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
	  }
	  return cost;
	};
	var kMeans = function kMeans(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var node = null;

	  // Set parameters of algorithm: # of clusters, distance metric, etc.
	  var opts = setOptions$2(options);

	  // Begin k-means algorithm
	  var clusters = new Array(opts.k);
	  var assignment = {};
	  var centroids;

	  // Step 1: Initialize centroid positions
	  if (opts.testMode) {
	    if (typeof opts.testCentroids === 'number') {
	      // TODO: implement a seeded random number generator.
	      opts.testCentroids;
	      centroids = randomCentroids(nodes, opts.k, opts.attributes);
	    } else if (_typeof(opts.testCentroids) === 'object') {
	      centroids = opts.testCentroids;
	    } else {
	      centroids = randomCentroids(nodes, opts.k, opts.attributes);
	    }
	  } else {
	    centroids = randomCentroids(nodes, opts.k, opts.attributes);
	  }
	  var isStillMoving = true;
	  var iterations = 0;
	  while (isStillMoving && iterations < opts.maxIterations) {
	    // Step 2: Assign nodes to the nearest centroid
	    for (var n = 0; n < nodes.length; n++) {
	      node = nodes[n];
	      // Determine which cluster this node belongs to: node id => cluster #
	      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
	    }

	    // Step 3: For each of the k clusters, update its centroid
	    isStillMoving = false;
	    for (var c = 0; c < opts.k; c++) {
	      // Get all nodes that belong to this cluster
	      var cluster = buildCluster(c, nodes, assignment);
	      if (cluster.length === 0) {
	        // If cluster is empty, break out early & move to next cluster
	        continue;
	      }

	      // Update centroids by calculating avg of all nodes within the cluster.
	      var ndim = opts.attributes.length;
	      var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]
	      var newCentroid = new Array(ndim);
	      var sum = new Array(ndim);
	      for (var d = 0; d < ndim; d++) {
	        sum[d] = 0.0;
	        for (var i = 0; i < cluster.length; i++) {
	          node = cluster[i];
	          sum[d] += opts.attributes[d](node);
	        }
	        newCentroid[d] = sum[d] / cluster.length;

	        // Check to see if algorithm has converged, i.e. when centroids no longer change
	        if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
	          isStillMoving = true;
	        }
	      }
	      centroids[c] = newCentroid;
	      clusters[c] = cy.collection(cluster);
	    }
	    iterations++;
	  }
	  return clusters;
	};
	var kMedoids = function kMedoids(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var node = null;
	  var opts = setOptions$2(options);

	  // Begin k-medoids algorithm
	  var clusters = new Array(opts.k);
	  var medoids;
	  var assignment = {};
	  var curCost;
	  var minCosts = new Array(opts.k); // minimum cost configuration for each cluster

	  // Step 1: Initialize k medoids
	  if (opts.testMode) {
	    if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {
	      medoids = opts.testCentroids;
	    } else {
	      medoids = randomMedoids(nodes, opts.k);
	    }
	  } else {
	    medoids = randomMedoids(nodes, opts.k);
	  }
	  var isStillMoving = true;
	  var iterations = 0;
	  while (isStillMoving && iterations < opts.maxIterations) {
	    // Step 2: Assign nodes to the nearest medoid
	    for (var n = 0; n < nodes.length; n++) {
	      node = nodes[n];
	      // Determine which cluster this node belongs to: node id => cluster #
	      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
	    }
	    isStillMoving = false;
	    // Step 3: For each medoid m, and for each node associated with mediod m,
	    // select the node with the lowest configuration cost as new medoid.
	    for (var m = 0; m < medoids.length; m++) {
	      // Get all nodes that belong to this medoid
	      var cluster = buildCluster(m, nodes, assignment);
	      if (cluster.length === 0) {
	        // If cluster is empty, break out early & move to next cluster
	        continue;
	      }
	      minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost

	      // Select different medoid if its configuration has the lowest cost
	      for (var _n = 0; _n < cluster.length; _n++) {
	        curCost = findCost(cluster[_n], cluster, opts.attributes);
	        if (curCost < minCosts[m]) {
	          minCosts[m] = curCost;
	          medoids[m] = cluster[_n];
	          isStillMoving = true;
	        }
	      }
	      clusters[m] = cy.collection(cluster);
	    }
	    iterations++;
	  }
	  return clusters;
	};
	var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
	  var numerator, denominator;
	  for (var n = 0; n < nodes.length; n++) {
	    for (var c = 0; c < centroids.length; c++) {
	      weight[n][c] = Math.pow(U[n][c], opts.m);
	    }
	  }
	  for (var _c = 0; _c < centroids.length; _c++) {
	    for (var dim = 0; dim < opts.attributes.length; dim++) {
	      numerator = 0;
	      denominator = 0;
	      for (var _n2 = 0; _n2 < nodes.length; _n2++) {
	        numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
	        denominator += weight[_n2][_c];
	      }
	      centroids[_c][dim] = numerator / denominator;
	    }
	  }
	};
	var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
	  // Save previous step
	  for (var i = 0; i < U.length; i++) {
	    _U[i] = U[i].slice();
	  }
	  var sum, numerator, denominator;
	  var pow = 2 / (opts.m - 1);
	  for (var c = 0; c < centroids.length; c++) {
	    for (var n = 0; n < nodes.length; n++) {
	      sum = 0;
	      for (var k = 0; k < centroids.length; k++) {
	        // against all other centroids
	        numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
	        denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
	        sum += Math.pow(numerator / denominator, pow);
	      }
	      U[n][c] = 1 / sum;
	    }
	  }
	};
	var assign$1 = function assign(nodes, U, opts, cy) {
	  var clusters = new Array(opts.k);
	  for (var c = 0; c < clusters.length; c++) {
	    clusters[c] = [];
	  }
	  var max;
	  var index;
	  for (var n = 0; n < U.length; n++) {
	    // for each node (U is N x C matrix)
	    max = -Infinity;
	    index = -1;
	    // Determine which cluster the node is most likely to belong in
	    for (var _c2 = 0; _c2 < U[0].length; _c2++) {
	      if (U[n][_c2] > max) {
	        max = U[n][_c2];
	        index = _c2;
	      }
	    }
	    clusters[index].push(nodes[n]);
	  }

	  // Turn every array into a collection of nodes
	  for (var _c3 = 0; _c3 < clusters.length; _c3++) {
	    clusters[_c3] = cy.collection(clusters[_c3]);
	  }
	  return clusters;
	};
	var fuzzyCMeans = function fuzzyCMeans(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var opts = setOptions$2(options);

	  // Begin fuzzy c-means algorithm
	  var clusters;
	  var centroids;
	  var U;
	  var _U;
	  var weight;

	  // Step 1: Initialize letiables.
	  _U = new Array(nodes.length);
	  for (var i = 0; i < nodes.length; i++) {
	    // N x C matrix
	    _U[i] = new Array(opts.k);
	  }
	  U = new Array(nodes.length);
	  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
	    // N x C matrix
	    U[_i3] = new Array(opts.k);
	  }
	  for (var _i4 = 0; _i4 < nodes.length; _i4++) {
	    var total = 0;
	    for (var j = 0; j < opts.k; j++) {
	      U[_i4][j] = Math.random();
	      total += U[_i4][j];
	    }
	    for (var _j = 0; _j < opts.k; _j++) {
	      U[_i4][_j] = U[_i4][_j] / total;
	    }
	  }
	  centroids = new Array(opts.k);
	  for (var _i5 = 0; _i5 < opts.k; _i5++) {
	    centroids[_i5] = new Array(opts.attributes.length);
	  }
	  weight = new Array(nodes.length);
	  for (var _i6 = 0; _i6 < nodes.length; _i6++) {
	    // N x C matrix
	    weight[_i6] = new Array(opts.k);
	  }
	  // end init FCM

	  var isStillMoving = true;
	  var iterations = 0;
	  while (isStillMoving && iterations < opts.maxIterations) {
	    isStillMoving = false;

	    // Step 2: Calculate the centroids for each step.
	    updateCentroids(centroids, nodes, U, weight, opts);

	    // Step 3: Update the partition matrix U.
	    updateMembership(U, _U, centroids, nodes, opts);

	    // Step 4: Check for convergence.
	    if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
	      isStillMoving = true;
	    }
	    iterations++;
	  }

	  // Assign nodes to clusters with highest probability.
	  clusters = assign$1(nodes, U, opts, cy);
	  return {
	    clusters: clusters,
	    degreeOfMembership: U
	  };
	};
	var kClustering = {
	  kMeans: kMeans,
	  kMedoids: kMedoids,
	  fuzzyCMeans: fuzzyCMeans,
	  fcm: fuzzyCMeans
	};

	// Implemented by Zoe Xi @zoexi for GSOC 2016
	var defaults$a = defaults$g({
	  distance: 'euclidean',
	  // distance metric to compare nodes
	  linkage: 'min',
	  // linkage criterion : how to determine the distance between clusters of nodes
	  mode: 'threshold',
	  // mode:'threshold' => clusters must be threshold distance apart
	  threshold: Infinity,
	  // the distance threshold
	  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
	  addDendrogram: false,
	  // whether to add the dendrogram to the graph for viz
	  dendrogramDepth: 0,
	  // depth at which dendrogram branches are merged into the returned clusters
	  attributes: [] // array of attr functions
	});

	var linkageAliases = {
	  'single': 'min',
	  'complete': 'max'
	};
	var setOptions$1 = function setOptions(options) {
	  var opts = defaults$a(options);
	  var preferredAlias = linkageAliases[opts.linkage];
	  if (preferredAlias != null) {
	    opts.linkage = preferredAlias;
	  }
	  return opts;
	};
	var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
	  // Find two closest clusters from cached mins
	  var minKey = 0;
	  var min = Infinity;
	  var dist;
	  var attrs = opts.attributes;
	  var getDist = function getDist(n1, n2) {
	    return clusteringDistance(opts.distance, attrs.length, function (i) {
	      return attrs[i](n1);
	    }, function (i) {
	      return attrs[i](n2);
	    }, n1, n2);
	  };
	  for (var i = 0; i < clusters.length; i++) {
	    var key = clusters[i].key;
	    var _dist = dists[key][mins[key]];
	    if (_dist < min) {
	      minKey = key;
	      min = _dist;
	    }
	  }
	  if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
	    return false;
	  }
	  var c1 = index[minKey];
	  var c2 = index[mins[minKey]];
	  var merged;

	  // Merge two closest clusters
	  if (opts.mode === 'dendrogram') {
	    merged = {
	      left: c1,
	      right: c2,
	      key: c1.key
	    };
	  } else {
	    merged = {
	      value: c1.value.concat(c2.value),
	      key: c1.key
	    };
	  }
	  clusters[c1.index] = merged;
	  clusters.splice(c2.index, 1);
	  index[c1.key] = merged;

	  // Update distances with new merged cluster
	  for (var _i = 0; _i < clusters.length; _i++) {
	    var cur = clusters[_i];
	    if (c1.key === cur.key) {
	      dist = Infinity;
	    } else if (opts.linkage === 'min') {
	      dist = dists[c1.key][cur.key];
	      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
	        dist = dists[c2.key][cur.key];
	      }
	    } else if (opts.linkage === 'max') {
	      dist = dists[c1.key][cur.key];
	      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
	        dist = dists[c2.key][cur.key];
	      }
	    } else if (opts.linkage === 'mean') {
	      dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
	    } else {
	      if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
	    }
	    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
	  }

	  // Update cached mins
	  for (var _i2 = 0; _i2 < clusters.length; _i2++) {
	    var key1 = clusters[_i2].key;
	    if (mins[key1] === c1.key || mins[key1] === c2.key) {
	      var _min = key1;
	      for (var j = 0; j < clusters.length; j++) {
	        var key2 = clusters[j].key;
	        if (dists[key1][key2] < dists[key1][_min]) {
	          _min = key2;
	        }
	      }
	      mins[key1] = _min;
	    }
	    clusters[_i2].index = _i2;
	  }

	  // Clean up meta data used for clustering
	  c1.key = c2.key = c1.index = c2.index = null;
	  return true;
	};
	var getAllChildren = function getAllChildren(root, arr, cy) {
	  if (!root) return;
	  if (root.value) {
	    arr.push(root.value);
	  } else {
	    if (root.left) getAllChildren(root.left, arr);
	    if (root.right) getAllChildren(root.right, arr);
	  }
	};
	var buildDendrogram = function buildDendrogram(root, cy) {
	  if (!root) return '';
	  if (root.left && root.right) {
	    var leftStr = buildDendrogram(root.left, cy);
	    var rightStr = buildDendrogram(root.right, cy);
	    var node = cy.add({
	      group: 'nodes',
	      data: {
	        id: leftStr + ',' + rightStr
	      }
	    });
	    cy.add({
	      group: 'edges',
	      data: {
	        source: leftStr,
	        target: node.id()
	      }
	    });
	    cy.add({
	      group: 'edges',
	      data: {
	        source: rightStr,
	        target: node.id()
	      }
	    });
	    return node.id();
	  } else if (root.value) {
	    return root.value.id();
	  }
	};
	var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
	  if (!root) return [];
	  var left = [],
	    right = [],
	    leaves = [];
	  if (k === 0) {
	    // don't cut tree, simply return all nodes as 1 single cluster
	    if (root.left) getAllChildren(root.left, left);
	    if (root.right) getAllChildren(root.right, right);
	    leaves = left.concat(right);
	    return [cy.collection(leaves)];
	  } else if (k === 1) {
	    // cut at root

	    if (root.value) {
	      // leaf node
	      return [cy.collection(root.value)];
	    } else {
	      if (root.left) getAllChildren(root.left, left);
	      if (root.right) getAllChildren(root.right, right);
	      return [cy.collection(left), cy.collection(right)];
	    }
	  } else {
	    if (root.value) {
	      return [cy.collection(root.value)];
	    } else {
	      if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
	      if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
	      return left.concat(right);
	    }
	  }
	};

	var hierarchicalClustering = function hierarchicalClustering(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();

	  // Set parameters of algorithm: linkage type, distance metric, etc.
	  var opts = setOptions$1(options);
	  var attrs = opts.attributes;
	  var getDist = function getDist(n1, n2) {
	    return clusteringDistance(opts.distance, attrs.length, function (i) {
	      return attrs[i](n1);
	    }, function (i) {
	      return attrs[i](n2);
	    }, n1, n2);
	  };

	  // Begin hierarchical algorithm
	  var clusters = [];
	  var dists = []; // distances between each pair of clusters
	  var mins = []; // closest cluster for each cluster
	  var index = []; // hash of all clusters by key

	  // In agglomerative (bottom-up) clustering, each node starts as its own cluster
	  for (var n = 0; n < nodes.length; n++) {
	    var cluster = {
	      value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
	      key: n,
	      index: n
	    };
	    clusters[n] = cluster;
	    index[n] = cluster;
	    dists[n] = [];
	    mins[n] = 0;
	  }

	  // Calculate the distance between each pair of clusters
	  for (var i = 0; i < clusters.length; i++) {
	    for (var j = 0; j <= i; j++) {
	      var dist = void 0;
	      if (opts.mode === 'dendrogram') {
	        // modes store cluster values differently
	        dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
	      } else {
	        dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
	      }
	      dists[i][j] = dist;
	      dists[j][i] = dist;
	      if (dist < dists[i][mins[i]]) {
	        mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
	      }
	    }
	  }

	  // Find the closest pair of clusters and merge them into a single cluster.
	  // Update distances between new cluster and each of the old clusters, and loop until threshold reached.
	  var merged = mergeClosest(clusters, index, dists, mins, opts);
	  while (merged) {
	    merged = mergeClosest(clusters, index, dists, mins, opts);
	  }
	  var retClusters;

	  // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
	  // in addition to returning the clusters.
	  if (opts.mode === 'dendrogram') {
	    retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
	    if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
	  } else {
	    // Regular mode simply returns the clusters

	    retClusters = new Array(clusters.length);
	    clusters.forEach(function (cluster, i) {
	      // Clean up meta data used for clustering
	      cluster.key = cluster.index = null;
	      retClusters[i] = cy.collection(cluster.value);
	    });
	  }
	  return retClusters;
	};
	var hierarchicalClustering$1 = {
	  hierarchicalClustering: hierarchicalClustering,
	  hca: hierarchicalClustering
	};

	// Implemented by Zoe Xi @zoexi for GSOC 2016
	var defaults$9 = defaults$g({
	  distance: 'euclidean',
	  // distance metric to compare attributes between two nodes
	  preference: 'median',
	  // suitability of a data point to serve as an exemplar
	  damping: 0.8,
	  // damping factor between [0.5, 1)
	  maxIterations: 1000,
	  // max number of iterations to run
	  minIterations: 100,
	  // min number of iterations to run in order for clustering to stop
	  attributes: [// functions to quantify the similarity between any two points
	    // e.g. node => node.data('weight')
	  ]
	});
	var setOptions = function setOptions(options) {
	  var dmp = options.damping;
	  var pref = options.preference;
	  if (!(0.5 <= dmp && dmp < 1)) {
	    error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
	  }
	  var validPrefs = ['median', 'mean', 'min', 'max'];
	  if (!(validPrefs.some(function (v) {
	    return v === pref;
	  }) || number$1(pref))) {
	    error("Preference must be one of [".concat(validPrefs.map(function (p) {
	      return "'".concat(p, "'");
	    }).join(', '), "] or a number.  Got: ").concat(pref));
	  }
	  return defaults$9(options);
	};

	var getSimilarity = function getSimilarity(type, n1, n2, attributes) {
	  var attr = function attr(n, i) {
	    return attributes[i](n);
	  };

	  // nb negative because similarity should have an inverse relationship to distance
	  return -clusteringDistance(type, attributes.length, function (i) {
	    return attr(n1, i);
	  }, function (i) {
	    return attr(n2, i);
	  }, n1, n2);
	};
	var getPreference = function getPreference(S, preference) {
	  // larger preference = greater # of clusters
	  var p = null;
	  if (preference === 'median') {
	    p = median(S);
	  } else if (preference === 'mean') {
	    p = mean(S);
	  } else if (preference === 'min') {
	    p = min(S);
	  } else if (preference === 'max') {
	    p = max(S);
	  } else {
	    // Custom preference number, as set by user
	    p = preference;
	  }
	  return p;
	};
	var findExemplars = function findExemplars(n, R, A) {
	  var indices = [];
	  for (var i = 0; i < n; i++) {
	    if (R[i * n + i] + A[i * n + i] > 0) {
	      indices.push(i);
	    }
	  }
	  return indices;
	};
	var assignClusters = function assignClusters(n, S, exemplars) {
	  var clusters = [];
	  for (var i = 0; i < n; i++) {
	    var index = -1;
	    var max = -Infinity;
	    for (var ei = 0; ei < exemplars.length; ei++) {
	      var e = exemplars[ei];
	      if (S[i * n + e] > max) {
	        index = e;
	        max = S[i * n + e];
	      }
	    }
	    if (index > 0) {
	      clusters.push(index);
	    }
	  }
	  for (var _ei = 0; _ei < exemplars.length; _ei++) {
	    clusters[exemplars[_ei]] = exemplars[_ei];
	  }
	  return clusters;
	};
	var assign = function assign(n, S, exemplars) {
	  var clusters = assignClusters(n, S, exemplars);
	  for (var ei = 0; ei < exemplars.length; ei++) {
	    var ii = [];
	    for (var c = 0; c < clusters.length; c++) {
	      if (clusters[c] === exemplars[ei]) {
	        ii.push(c);
	      }
	    }
	    var maxI = -1;
	    var maxSum = -Infinity;
	    for (var i = 0; i < ii.length; i++) {
	      var sum = 0;
	      for (var j = 0; j < ii.length; j++) {
	        sum += S[ii[j] * n + ii[i]];
	      }
	      if (sum > maxSum) {
	        maxI = i;
	        maxSum = sum;
	      }
	    }
	    exemplars[ei] = ii[maxI];
	  }
	  clusters = assignClusters(n, S, exemplars);
	  return clusters;
	};
	var affinityPropagation = function affinityPropagation(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var opts = setOptions(options);

	  // Map each node to its position in node array
	  var id2position = {};
	  for (var i = 0; i < nodes.length; i++) {
	    id2position[nodes[i].id()] = i;
	  }

	  // Begin affinity propagation algorithm

	  var n; // number of data points
	  var n2; // size of matrices
	  var S; // similarity matrix (1D array)
	  var p; // preference/suitability of a data point to serve as an exemplar
	  var R; // responsibility matrix (1D array)
	  var A; // availability matrix (1D array)

	  n = nodes.length;
	  n2 = n * n;

	  // Initialize and build S similarity matrix
	  S = new Array(n2);
	  for (var _i = 0; _i < n2; _i++) {
	    S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
	  }

	  for (var _i2 = 0; _i2 < n; _i2++) {
	    for (var j = 0; j < n; j++) {
	      if (_i2 !== j) {
	        S[_i2 * n + j] = getSimilarity(opts.distance, nodes[_i2], nodes[j], opts.attributes);
	      }
	    }
	  }

	  // Place preferences on the diagonal of S
	  p = getPreference(S, opts.preference);
	  for (var _i3 = 0; _i3 < n; _i3++) {
	    S[_i3 * n + _i3] = p;
	  }

	  // Initialize R responsibility matrix
	  R = new Array(n2);
	  for (var _i4 = 0; _i4 < n2; _i4++) {
	    R[_i4] = 0.0;
	  }

	  // Initialize A availability matrix
	  A = new Array(n2);
	  for (var _i5 = 0; _i5 < n2; _i5++) {
	    A[_i5] = 0.0;
	  }
	  var old = new Array(n);
	  var Rp = new Array(n);
	  var se = new Array(n);
	  for (var _i6 = 0; _i6 < n; _i6++) {
	    old[_i6] = 0.0;
	    Rp[_i6] = 0.0;
	    se[_i6] = 0;
	  }
	  var e = new Array(n * opts.minIterations);
	  for (var _i7 = 0; _i7 < e.length; _i7++) {
	    e[_i7] = 0;
	  }
	  var iter;
	  for (iter = 0; iter < opts.maxIterations; iter++) {
	    // main algorithmic loop

	    // Update R responsibility matrix
	    for (var _i8 = 0; _i8 < n; _i8++) {
	      var max = -Infinity,
	        max2 = -Infinity,
	        maxI = -1,
	        AS = 0.0;
	      for (var _j = 0; _j < n; _j++) {
	        old[_j] = R[_i8 * n + _j];
	        AS = A[_i8 * n + _j] + S[_i8 * n + _j];
	        if (AS >= max) {
	          max2 = max;
	          max = AS;
	          maxI = _j;
	        } else if (AS > max2) {
	          max2 = AS;
	        }
	      }
	      for (var _j2 = 0; _j2 < n; _j2++) {
	        R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];
	      }
	      R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
	    }

	    // Update A availability matrix
	    for (var _i9 = 0; _i9 < n; _i9++) {
	      var sum = 0;
	      for (var _j3 = 0; _j3 < n; _j3++) {
	        old[_j3] = A[_j3 * n + _i9];
	        Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
	        sum += Rp[_j3];
	      }
	      sum -= Rp[_i9];
	      Rp[_i9] = R[_i9 * n + _i9];
	      sum += Rp[_i9];
	      for (var _j4 = 0; _j4 < n; _j4++) {
	        A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
	      }
	      A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
	    }

	    // Check for convergence
	    var K = 0;
	    for (var _i10 = 0; _i10 < n; _i10++) {
	      var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
	      e[iter % opts.minIterations * n + _i10] = E;
	      K += E;
	    }
	    if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
	      var _sum = 0;
	      for (var _i11 = 0; _i11 < n; _i11++) {
	        se[_i11] = 0;
	        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
	          se[_i11] += e[_j5 * n + _i11];
	        }
	        if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
	          _sum++;
	        }
	      }
	      if (_sum === n) {
	        // then we have convergence
	        break;
	      }
	    }
	  }

	  // Identify exemplars (cluster centers)
	  var exemplarsIndices = findExemplars(n, R, A);

	  // Assign nodes to clusters
	  var clusterIndices = assign(n, S, exemplarsIndices);
	  var clusters = {};
	  for (var c = 0; c < exemplarsIndices.length; c++) {
	    clusters[exemplarsIndices[c]] = [];
	  }
	  for (var _i12 = 0; _i12 < nodes.length; _i12++) {
	    var pos = id2position[nodes[_i12].id()];
	    var clusterIndex = clusterIndices[pos];
	    if (clusterIndex != null) {
	      // the node may have not been assigned a cluster if no valid attributes were specified
	      clusters[clusterIndex].push(nodes[_i12]);
	    }
	  }
	  var retClusters = new Array(exemplarsIndices.length);
	  for (var _c = 0; _c < exemplarsIndices.length; _c++) {
	    retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
	  }
	  return retClusters;
	};
	var affinityPropagation$1 = {
	  affinityPropagation: affinityPropagation,
	  ap: affinityPropagation
	};

	var hierholzerDefaults = defaults$g({
	  root: undefined,
	  directed: false
	});
	var elesfn$k = {
	  hierholzer: function hierholzer(options) {
	    if (!plainObject(options)) {
	      var args = arguments;
	      options = {
	        root: args[0],
	        directed: args[1]
	      };
	    }
	    var _hierholzerDefaults = hierholzerDefaults(options),
	      root = _hierholzerDefaults.root,
	      directed = _hierholzerDefaults.directed;
	    var eles = this;
	    var dflag = false;
	    var oddIn;
	    var oddOut;
	    var startVertex;
	    if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
	    var nodes = {};
	    var edges = {};
	    if (directed) {
	      eles.forEach(function (ele) {
	        var id = ele.id();
	        if (ele.isNode()) {
	          var ind = ele.indegree(true);
	          var outd = ele.outdegree(true);
	          var d1 = ind - outd;
	          var d2 = outd - ind;
	          if (d1 == 1) {
	            if (oddIn) dflag = true;else oddIn = id;
	          } else if (d2 == 1) {
	            if (oddOut) dflag = true;else oddOut = id;
	          } else if (d2 > 1 || d1 > 1) {
	            dflag = true;
	          }
	          nodes[id] = [];
	          ele.outgoers().forEach(function (e) {
	            if (e.isEdge()) nodes[id].push(e.id());
	          });
	        } else {
	          edges[id] = [undefined, ele.target().id()];
	        }
	      });
	    } else {
	      eles.forEach(function (ele) {
	        var id = ele.id();
	        if (ele.isNode()) {
	          var d = ele.degree(true);
	          if (d % 2) {
	            if (!oddIn) oddIn = id;else if (!oddOut) oddOut = id;else dflag = true;
	          }
	          nodes[id] = [];
	          ele.connectedEdges().forEach(function (e) {
	            return nodes[id].push(e.id());
	          });
	        } else {
	          edges[id] = [ele.source().id(), ele.target().id()];
	        }
	      });
	    }
	    var result = {
	      found: false,
	      trail: undefined
	    };
	    if (dflag) return result;else if (oddOut && oddIn) {
	      if (directed) {
	        if (startVertex && oddOut != startVertex) {
	          return result;
	        }
	        startVertex = oddOut;
	      } else {
	        if (startVertex && oddOut != startVertex && oddIn != startVertex) {
	          return result;
	        } else if (!startVertex) {
	          startVertex = oddOut;
	        }
	      }
	    } else {
	      if (!startVertex) startVertex = eles[0].id();
	    }
	    var walk = function walk(v) {
	      var currentNode = v;
	      var subtour = [v];
	      var adj, adjTail, adjHead;
	      while (nodes[currentNode].length) {
	        adj = nodes[currentNode].shift();
	        adjTail = edges[adj][0];
	        adjHead = edges[adj][1];
	        if (currentNode != adjHead) {
	          nodes[adjHead] = nodes[adjHead].filter(function (e) {
	            return e != adj;
	          });
	          currentNode = adjHead;
	        } else if (!directed && currentNode != adjTail) {
	          nodes[adjTail] = nodes[adjTail].filter(function (e) {
	            return e != adj;
	          });
	          currentNode = adjTail;
	        }
	        subtour.unshift(adj);
	        subtour.unshift(currentNode);
	      }
	      return subtour;
	    };
	    var trail = [];
	    var subtour = [];
	    subtour = walk(startVertex);
	    while (subtour.length != 1) {
	      if (nodes[subtour[0]].length == 0) {
	        trail.unshift(eles.getElementById(subtour.shift()));
	        trail.unshift(eles.getElementById(subtour.shift()));
	      } else {
	        subtour = walk(subtour.shift()).concat(subtour);
	      }
	    }
	    trail.unshift(eles.getElementById(subtour.shift())); // final node

	    for (var d in nodes) {
	      if (nodes[d].length) {
	        return result;
	      }
	    }
	    result.found = true;
	    result.trail = this.spawn(trail, true);
	    return result;
	  }
	};

	var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected() {
	  var eles = this;
	  var nodes = {};
	  var id = 0;
	  var edgeCount = 0;
	  var components = [];
	  var stack = [];
	  var visitedEdges = {};
	  var buildComponent = function buildComponent(x, y) {
	    var i = stack.length - 1;
	    var cutset = [];
	    var component = eles.spawn();
	    while (stack[i].x != x || stack[i].y != y) {
	      cutset.push(stack.pop().edge);
	      i--;
	    }
	    cutset.push(stack.pop().edge);
	    cutset.forEach(function (edge) {
	      var connectedNodes = edge.connectedNodes().intersection(eles);
	      component.merge(edge);
	      connectedNodes.forEach(function (node) {
	        var nodeId = node.id();
	        var connectedEdges = node.connectedEdges().intersection(eles);
	        component.merge(node);
	        if (!nodes[nodeId].cutVertex) {
	          component.merge(connectedEdges);
	        } else {
	          component.merge(connectedEdges.filter(function (edge) {
	            return edge.isLoop();
	          }));
	        }
	      });
	    });
	    components.push(component);
	  };
	  var biconnectedSearch = function biconnectedSearch(root, currentNode, parent) {
	    if (root === parent) edgeCount += 1;
	    nodes[currentNode] = {
	      id: id,
	      low: id++,
	      cutVertex: false
	    };
	    var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);
	    if (edges.size() === 0) {
	      components.push(eles.spawn(eles.getElementById(currentNode)));
	    } else {
	      var sourceId, targetId, otherNodeId, edgeId;
	      edges.forEach(function (edge) {
	        sourceId = edge.source().id();
	        targetId = edge.target().id();
	        otherNodeId = sourceId === currentNode ? targetId : sourceId;
	        if (otherNodeId !== parent) {
	          edgeId = edge.id();
	          if (!visitedEdges[edgeId]) {
	            visitedEdges[edgeId] = true;
	            stack.push({
	              x: currentNode,
	              y: otherNodeId,
	              edge: edge
	            });
	          }
	          if (!(otherNodeId in nodes)) {
	            biconnectedSearch(root, otherNodeId, currentNode);
	            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);
	            if (nodes[currentNode].id <= nodes[otherNodeId].low) {
	              nodes[currentNode].cutVertex = true;
	              buildComponent(currentNode, otherNodeId);
	            }
	          } else {
	            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);
	          }
	        }
	      });
	    }
	  };
	  eles.forEach(function (ele) {
	    if (ele.isNode()) {
	      var nodeId = ele.id();
	      if (!(nodeId in nodes)) {
	        edgeCount = 0;
	        biconnectedSearch(nodeId, nodeId);
	        nodes[nodeId].cutVertex = edgeCount > 1;
	      }
	    }
	  });
	  var cutVertices = Object.keys(nodes).filter(function (id) {
	    return nodes[id].cutVertex;
	  }).map(function (id) {
	    return eles.getElementById(id);
	  });
	  return {
	    cut: eles.spawn(cutVertices),
	    components: components
	  };
	};
	var hopcroftTarjanBiconnected$1 = {
	  hopcroftTarjanBiconnected: hopcroftTarjanBiconnected,
	  htbc: hopcroftTarjanBiconnected,
	  htb: hopcroftTarjanBiconnected,
	  hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
	};

	var tarjanStronglyConnected = function tarjanStronglyConnected() {
	  var eles = this;
	  var nodes = {};
	  var index = 0;
	  var components = [];
	  var stack = [];
	  var cut = eles.spawn(eles);
	  var stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {
	    stack.push(sourceNodeId);
	    nodes[sourceNodeId] = {
	      index: index,
	      low: index++,
	      explored: false
	    };
	    var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
	    connectedEdges.forEach(function (edge) {
	      var targetNodeId = edge.target().id();
	      if (targetNodeId !== sourceNodeId) {
	        if (!(targetNodeId in nodes)) {
	          stronglyConnectedSearch(targetNodeId);
	        }
	        if (!nodes[targetNodeId].explored) {
	          nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);
	        }
	      }
	    });
	    if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {
	      var componentNodes = eles.spawn();
	      for (;;) {
	        var nodeId = stack.pop();
	        componentNodes.merge(eles.getElementById(nodeId));
	        nodes[nodeId].low = nodes[sourceNodeId].index;
	        nodes[nodeId].explored = true;
	        if (nodeId === sourceNodeId) {
	          break;
	        }
	      }
	      var componentEdges = componentNodes.edgesWith(componentNodes);
	      var component = componentNodes.merge(componentEdges);
	      components.push(component);
	      cut = cut.difference(component);
	    }
	  };
	  eles.forEach(function (ele) {
	    if (ele.isNode()) {
	      var nodeId = ele.id();
	      if (!(nodeId in nodes)) {
	        stronglyConnectedSearch(nodeId);
	      }
	    }
	  });
	  return {
	    cut: cut,
	    components: components
	  };
	};
	var tarjanStronglyConnected$1 = {
	  tarjanStronglyConnected: tarjanStronglyConnected,
	  tsc: tarjanStronglyConnected,
	  tscc: tarjanStronglyConnected,
	  tarjanStronglyConnectedComponents: tarjanStronglyConnected
	};

	var elesfn$j = {};
	[elesfn$v, elesfn$u, elesfn$t, elesfn$s, elesfn$r, elesfn$q, elesfn$p, elesfn$o, elesfn$n, elesfn$m, elesfn$l, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$k, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function (props) {
	  extend(elesfn$j, props);
	});

	/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING = 0; /*  [Promises/A+ 2.1.1]  */
	var STATE_FULFILLED = 1; /*  [Promises/A+ 2.1.2]  */
	var STATE_REJECTED = 2; /*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */
	var api = function api(executor) {
	  /*  optionally support non-constructor/plain-function call  */
	  if (!(this instanceof api)) return new api(executor);

	  /*  initialize object  */
	  this.id = 'Thenable/1.0.7';
	  this.state = STATE_PENDING; /*  initial state  */
	  this.fulfillValue = undefined; /*  initial value  */ /*  [Promises/A+ 1.3, 2.1.2.2]  */
	  this.rejectReason = undefined; /*  initial reason */ /*  [Promises/A+ 1.5, 2.1.3.2]  */
	  this.onFulfilled = []; /*  initial handlers  */
	  this.onRejected = []; /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */
	  this.proxy = {
	    then: this.then.bind(this)
	  };

	  /*  support optional executor function  */
	  if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
	};

	/*  promise API methods  */
	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function fulfill(value) {
	    return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
	  },
	  reject: function reject(value) {
	    return deliver(this, STATE_REJECTED, 'rejectReason', value);
	  },
	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function then(onFulfilled, onRejected) {
	    var curr = this;
	    var next = new api(); /*  [Promises/A+ 2.2.7]  */
	    curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill')); /*  [Promises/A+ 2.2.2/2.2.6]  */
	    curr.onRejected.push(resolver(onRejected, next, 'reject')); /*  [Promises/A+ 2.2.3/2.2.6]  */
	    execute(curr);
	    return next.proxy; /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};

	/*  deliver an action  */
	var deliver = function deliver(curr, state, name, value) {
	  if (curr.state === STATE_PENDING) {
	    curr.state = state; /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
	    curr[name] = value; /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
	    execute(curr);
	  }
	  return curr;
	};

	/*  execute all handlers  */
	var execute = function execute(curr) {
	  if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
	};

	/*  execute particular set of handlers  */
	var execute_handlers = function execute_handlers(curr, name, value) {
	  /* global setImmediate: true */
	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if (curr[name].length === 0) return;

	  /*  iterate over all handlers, exactly once  */
	  var handlers = curr[name];
	  curr[name] = []; /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
	  var func = function func() {
	    for (var i = 0; i < handlers.length; i++) {
	      handlers[i](value);
	    } /*  [Promises/A+ 2.2.5]  */
	  };

	  /*  execute procedure asynchronously  */ /*  [Promises/A+ 2.2.4, 3.1]  */
	  if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
	};

	/*  generate a resolver function  */
	var resolver = function resolver(cb, next, method) {
	  return function (value) {
	    if (typeof cb !== 'function') /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[method].call(next, value); /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */else {
	      var result;
	      try {
	        result = cb(value);
	      } /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */ catch (e) {
	        next.reject(e); /*  [Promises/A+ 2.2.7.2]  */
	        return;
	      }
	      resolve(next, result); /*  [Promises/A+ 2.2.7.1]  */
	    }
	  };
	};

	/*  "Promise Resolution Procedure"  */ /*  [Promises/A+ 2.3]  */
	var resolve = function resolve(promise, x) {
	  /*  sanity check arguments  */ /*  [Promises/A+ 2.3.1]  */
	  if (promise === x || promise.proxy === x) {
	    promise.reject(new TypeError('cannot resolve promise with itself'));
	    return;
	  }

	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */
	  var then;
	  if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
	    try {
	      then = x.then;
	    } /*  [Promises/A+ 2.3.3.1, 3.5]  */ catch (e) {
	      promise.reject(e); /*  [Promises/A+ 2.3.3.2]  */
	      return;
	    }
	  }

	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */
	  if (typeof then === 'function') {
	    var resolved = false;
	    try {
	      /*  call retrieved "then" method */ /*  [Promises/A+ 2.3.3.3]  */
	      then.call(x, /*  resolvePromise  */ /*  [Promises/A+ 2.3.3.3.1]  */
	      function (y) {
	        if (resolved) return;
	        resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
	        if (y === x) /*  [Promises/A+ 3.6]  */
	          promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
	      }, /*  rejectPromise  */ /*  [Promises/A+ 2.3.3.3.2]  */
	      function (r) {
	        if (resolved) return;
	        resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(r);
	      });
	    } catch (e) {
	      if (!resolved) /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(e); /*  [Promises/A+ 2.3.3.3.4]  */
	    }

	    return;
	  }

	  /*  handle other values  */
	  promise.fulfill(x); /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	};

	// so we always have Promise.all()
	api.all = function (ps) {
	  return new api(function (resolveAll, rejectAll) {
	    var vals = new Array(ps.length);
	    var doneCount = 0;
	    var fulfill = function fulfill(i, val) {
	      vals[i] = val;
	      doneCount++;
	      if (doneCount === ps.length) {
	        resolveAll(vals);
	      }
	    };
	    for (var i = 0; i < ps.length; i++) {
	      (function (i) {
	        var p = ps[i];
	        var isPromise = p != null && p.then != null;
	        if (isPromise) {
	          p.then(function (val) {
	            fulfill(i, val);
	          }, function (err) {
	            rejectAll(err);
	          });
	        } else {
	          var val = p;
	          fulfill(i, val);
	        }
	      })(i);
	    }
	  });
	};
	api.resolve = function (val) {
	  return new api(function (resolve, reject) {
	    resolve(val);
	  });
	};
	api.reject = function (val) {
	  return new api(function (resolve, reject) {
	    reject(val);
	  });
	};
	var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

	var Animation = function Animation(target, opts, opts2) {
	  var isCore = core(target);
	  var isEle = !isCore;
	  var _p = this._private = extend({
	    duration: 1000
	  }, opts, opts2);
	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];
	  if (_p.complete && fn$6(_p.complete)) {
	    _p.completes.push(_p.complete);
	  }
	  if (isEle) {
	    var pos = target.position();
	    _p.startPosition = _p.startPosition || {
	      x: pos.x,
	      y: pos.y
	    };
	    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
	  }
	  if (isCore) {
	    var pan = target.pan();
	    _p.startPan = {
	      x: pan.x,
	      y: pan.y
	    };
	    _p.startZoom = target.zoom();
	  }

	  // for future timeline/animations impl
	  this.length = 1;
	  this[0] = this;
	};
	var anifn = Animation.prototype;
	extend(anifn, {
	  instanceString: function instanceString() {
	    return 'animation';
	  },
	  hook: function hook() {
	    var _p = this._private;
	    if (!_p.hooked) {
	      // add to target's animation queue
	      var q;
	      var tAni = _p.target._private.animation;
	      if (_p.queue) {
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }
	      q.push(this);

	      // add to the animation loop pool
	      if (elementOrCollection(_p.target)) {
	        _p.target.cy().addToAnimationPool(_p.target);
	      }
	      _p.hooked = true;
	    }
	    return this;
	  },
	  play: function play() {
	    var _p = this._private;

	    // autorewind
	    if (_p.progress === 1) {
	      _p.progress = 0;
	    }
	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;
	    this.hook();

	    // the animation loop will start the animation...

	    return this;
	  },
	  playing: function playing() {
	    return this._private.playing;
	  },
	  apply: function apply() {
	    var _p = this._private;
	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;
	    this.hook();

	    // the animation loop will apply the animation at this progress

	    return this;
	  },
	  applying: function applying() {
	    return this._private.applying;
	  },
	  pause: function pause() {
	    var _p = this._private;
	    _p.playing = false;
	    _p.started = false;
	    return this;
	  },
	  stop: function stop() {
	    var _p = this._private;
	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },
	  rewind: function rewind() {
	    return this.progress(0);
	  },
	  fastforward: function fastforward() {
	    return this.progress(1);
	  },
	  time: function time(t) {
	    var _p = this._private;
	    if (t === undefined) {
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress(t / _p.duration);
	    }
	  },
	  progress: function progress(p) {
	    var _p = this._private;
	    var wasPlaying = _p.playing;
	    if (p === undefined) {
	      return _p.progress;
	    } else {
	      if (wasPlaying) {
	        this.pause();
	      }
	      _p.progress = p;
	      _p.started = false;
	      if (wasPlaying) {
	        this.play();
	      }
	    }
	    return this;
	  },
	  completed: function completed() {
	    return this._private.progress === 1;
	  },
	  reverse: function reverse() {
	    var _p = this._private;
	    var wasPlaying = _p.playing;
	    if (wasPlaying) {
	      this.pause();
	    }
	    _p.progress = 1 - _p.progress;
	    _p.started = false;
	    var swap = function swap(a, b) {
	      var _pa = _p[a];
	      if (_pa == null) {
	        return;
	      }
	      _p[a] = _p[b];
	      _p[b] = _pa;
	    };
	    swap('zoom', 'startZoom');
	    swap('pan', 'startPan');
	    swap('position', 'startPosition');

	    // swap styles
	    if (_p.style) {
	      for (var i = 0; i < _p.style.length; i++) {
	        var prop = _p.style[i];
	        var name = prop.name;
	        var startStyleProp = _p.startStyle[name];
	        _p.startStyle[name] = prop;
	        _p.style[i] = startStyleProp;
	      }
	    }
	    if (wasPlaying) {
	      this.play();
	    }
	    return this;
	  },
	  promise: function promise(type) {
	    var _p = this._private;
	    var arr;
	    switch (type) {
	      case 'frame':
	        arr = _p.frames;
	        break;
	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }
	    return new Promise$1(function (resolve, reject) {
	      arr.push(function () {
	        resolve();
	      });
	    });
	  }
	});
	anifn.complete = anifn.completed;
	anifn.run = anifn.play;
	anifn.running = anifn.playing;

	var define$3 = {
	  animated: function animated() {
	    return function animatedImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return false;
	      }
	      var ele = all[0];
	      if (ele) {
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  },
	  // animated

	  clearQueue: function clearQueue() {
	    return function clearQueueImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        ele._private.animation.queue = [];
	      }
	      return this;
	    };
	  },
	  // clearQueue

	  delay: function delay() {
	    return function delayImpl(time, complete) {
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      return this.animate({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  },
	  // delay

	  delayAnimation: function delayAnimation() {
	    return function delayAnimationImpl(time, complete) {
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      return this.animation({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  },
	  // delay

	  animation: function animation() {
	    return function animationImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      var style = cy.style();
	      properties = extend({}, properties, params);
	      var propertiesEmpty = Object.keys(properties).length === 0;
	      if (propertiesEmpty) {
	        return new Animation(all[0], properties); // nothing to animate
	      }

	      if (properties.duration === undefined) {
	        properties.duration = 400;
	      }
	      switch (properties.duration) {
	        case 'slow':
	          properties.duration = 600;
	          break;
	        case 'fast':
	          properties.duration = 200;
	          break;
	      }
	      if (isEles) {
	        properties.style = style.getPropsList(properties.style || properties.css);
	        properties.css = undefined;
	      }
	      if (isEles && properties.renderedPosition != null) {
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();
	        properties.position = renderedToModelPosition(rpos, zoom, pan);
	      }

	      // override pan w/ panBy if set
	      if (isCore && properties.panBy != null) {
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();
	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      }

	      // override pan w/ center if set
	      var center = properties.center || properties.centre;
	      if (isCore && center != null) {
	        var centerPan = cy.getCenterPan(center.eles, properties.zoom);
	        if (centerPan != null) {
	          properties.pan = centerPan;
	        }
	      }

	      // override pan & zoom w/ fit if set
	      if (isCore && properties.fit != null) {
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);
	        if (fitVp != null) {
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      }

	      // override zoom (& potentially pan) w/ zoom obj if set
	      if (isCore && plainObject(properties.zoom)) {
	        var vp = cy.getZoomedViewport(properties.zoom);
	        if (vp != null) {
	          if (vp.zoomed) {
	            properties.zoom = vp.zoom;
	          }
	          if (vp.panned) {
	            properties.pan = vp.pan;
	          }
	        } else {
	          properties.zoom = null; // an inavalid zoom (e.g. no delta) gets automatically destroyed
	        }
	      }

	      return new Animation(all[0], properties);
	    };
	  },
	  // animate

	  animate: function animate() {
	    return function animateImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      if (params) {
	        properties = extend({}, properties, params);
	      }

	      // manually hook and run the animation
	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);
	        var ani = ele.animation(properties, queue ? {
	          queue: true
	        } : undefined);
	        ani.play();
	      }
	      return this; // chaining
	    };
	  },

	  // animate

	  stop: function stop() {
	    return function stopImpl(clearQueue, jumpToEnd) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      if (!cy.styleEnabled()) {
	        return this;
	      }
	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var _p = ele._private;
	        var anis = _p.animation.current;
	        for (var j = 0; j < anis.length; j++) {
	          var ani = anis[j];
	          var ani_p = ani._private;
	          if (jumpToEnd) {
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        }

	        // clear the queue of future animations
	        if (clearQueue) {
	          _p.animation.queue = [];
	        }
	        if (!jumpToEnd) {
	          _p.animation.current = [];
	        }
	      }

	      // we have to notify (the animation loop doesn't do it for us on `stop`)
	      cy.notify('draw');
	      return this;
	    };
	  } // stop
	}; // define

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	var isArray_1 = isArray;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray_1(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol_1(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	var _isKey = isKey;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto$3 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue$1;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$1 ? undefined : result;
	  }
	  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$1.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/* Built-in method references that are verified to be native. */
	var Map$1 = _getNative(_root, 'Map');

	var _Map = Map$1;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || _MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = _MapCache;

	var memoize_1 = memoize;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize_1(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	var _memoizeCapped = memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = _memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	var _stringToPath = stringToPath;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$1(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString$1;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray_1(value)) {
	    return value;
	  }
	  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
	}

	var _castPath = castPath;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol_1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _toKey = toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = _castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[_toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : _baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get;

	var defineProperty = (function() {
	  try {
	    var func = _getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty = defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && _defineProperty) {
	    _defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq_1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    _baseAssignValue(object, key, value);
	  }
	}

	var _assignValue = assignValue;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject_1(object)) {
	    return object;
	  }
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = _toKey(path[index]),
	        newValue = value;

	    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	      return object;
	    }

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject_1(objValue)
	          ? objValue
	          : (_isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    _assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	var _baseSet = baseSet;

	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `_.setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, ['x', '0', 'y', 'z'], 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */
	function set(object, path, value) {
	  return object == null ? object : _baseSet(object, path, value);
	}

	var set_1 = set;

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	var _copyArray = copyArray;

	/**
	 * Converts `value` to a property path array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the new property path array.
	 * @example
	 *
	 * _.toPath('a.b.c');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toPath('a[0].b.c');
	 * // => ['a', '0', 'b', 'c']
	 */
	function toPath(value) {
	  if (isArray_1(value)) {
	    return _arrayMap(value, _toKey);
	  }
	  return isSymbol_1(value) ? [value] : _copyArray(_stringToPath(toString_1(value)));
	}

	var toPath_1 = toPath;

	var define$2 = {
	  // access data field
	  data: function data(params) {
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {},
	      // key => true if immutable
	      updateStyle: false,
	      beforeGet: function beforeGet(self) {},
	      beforeSet: function beforeSet(self, obj) {},
	      onSet: function onSet(self) {},
	      canSet: function canSet(self) {
	        return true;
	      }
	    };
	    params = extend({}, defaults, params);
	    return function dataImpl(name, value) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var single = selfIsArrayLike ? self[0] : self;

	      // .data('foo', ...)
	      if (string(name)) {
	        // set or get property
	        var isPathLike = name.indexOf('.') !== -1; // there might be a normal field with a dot 
	        var path = isPathLike && toPath_1(name);

	        // .data('foo')
	        if (p.allowGetting && value === undefined) {
	          // get

	          var ret;
	          if (single) {
	            p.beforeGet(single);

	            // check if it's path and a field with the same name doesn't exist
	            if (path && single._private[p.field][name] === undefined) {
	              ret = get_1(single._private[p.field], path);
	            } else {
	              ret = single._private[p.field][name];
	            }
	          }
	          return ret;

	          // .data('foo', 'bar')
	        } else if (p.allowSetting && value !== undefined) {
	          // set
	          var valid = !p.immutableKeys[name];
	          if (valid) {
	            var change = _defineProperty$1({}, name, value);
	            p.beforeSet(self, change);
	            for (var i = 0, l = all.length; i < l; i++) {
	              var ele = all[i];
	              if (p.canSet(ele)) {
	                if (path && single._private[p.field][name] === undefined) {
	                  set_1(ele._private[p.field], path, value);
	                } else {
	                  ele._private[p.field][name] = value;
	                }
	              }
	            }

	            // update mappers if asked
	            if (p.updateStyle) {
	              self.updateStyle();
	            }

	            // call onSet callback
	            p.onSet(self);
	            if (p.settingTriggersEvent) {
	              self[p.triggerFnName](p.settingEvent);
	            }
	          }
	        }

	        // .data({ 'foo': 'bar' })
	      } else if (p.allowSetting && plainObject(name)) {
	        // extend
	        var obj = name;
	        var k, v;
	        var keys = Object.keys(obj);
	        p.beforeSet(self, obj);
	        for (var _i = 0; _i < keys.length; _i++) {
	          k = keys[_i];
	          v = obj[k];
	          var _valid = !p.immutableKeys[k];
	          if (_valid) {
	            for (var j = 0; j < all.length; j++) {
	              var _ele = all[j];
	              if (p.canSet(_ele)) {
	                _ele._private[p.field][k] = v;
	              }
	            }
	          }
	        }

	        // update mappers if asked
	        if (p.updateStyle) {
	          self.updateStyle();
	        }

	        // call onSet callback
	        p.onSet(self);
	        if (p.settingTriggersEvent) {
	          self[p.triggerFnName](p.settingEvent);
	        }

	        // .data(function(){ ... })
	      } else if (p.allowBinding && fn$6(name)) {
	        // bind to event
	        var fn = name;
	        self.on(p.bindingEvent, fn);

	        // .data()
	      } else if (p.allowGetting && name === undefined) {
	        // get whole object
	        var _ret;
	        if (single) {
	          p.beforeGet(single);
	          _ret = single._private[p.field];
	        }
	        return _ret;
	      }
	      return self; // maintain chainability
	    }; // function
	  },

	  // data

	  // remove data field
	  removeData: function removeData(params) {
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable
	    };

	    params = extend({}, defaults, params);
	    return function removeDataImpl(names) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      // .removeData('foo bar')
	      if (string(names)) {
	        // then get the list of keys, and delete them
	        var keys = names.split(/\s+/);
	        var l = keys.length;
	        for (var i = 0; i < l; i++) {
	          // delete each non-empty key
	          var key = keys[i];
	          if (emptyString(key)) {
	            continue;
	          }
	          var valid = !p.immutableKeys[key]; // not valid if immutable
	          if (valid) {
	            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
	              all[i_a]._private[p.field][key] = undefined;
	            }
	          }
	        }
	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        }

	        // .removeData()
	      } else if (names === undefined) {
	        // then delete all keys

	        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
	          var _privateFields = all[_i_a]._private[p.field];
	          var _keys = Object.keys(_privateFields);
	          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
	            var _key = _keys[_i2];
	            var validKeyToDelete = !p.immutableKeys[_key];
	            if (validKeyToDelete) {
	              _privateFields[_key] = undefined;
	            }
	          }
	        }
	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        }
	      }
	      return self; // maintain chaining
	    }; // function
	  } // removeData
	}; // define

	var define$1 = {
	  eventAliasesOn: function eventAliasesOn(proto) {
	    var p = proto;
	    p.addListener = p.listen = p.bind = p.on;
	    p.unlisten = p.unbind = p.off = p.removeListener;
	    p.trigger = p.emit;

	    // this is just a wrapper alias of .on()
	    p.pon = p.promiseOn = function (events, selector) {
	      var self = this;
	      var args = Array.prototype.slice.call(arguments, 0);
	      return new Promise$1(function (resolve, reject) {
	        var callback = function callback(e) {
	          self.off.apply(self, offArgs);
	          resolve(e);
	        };
	        var onArgs = args.concat([callback]);
	        var offArgs = onArgs.concat([]);
	        self.on.apply(self, onArgs);
	      });
	    };
	  }
	}; // define

	// use this module to cherry pick functions into your prototype
	var define = {};
	[define$3, define$2, define$1].forEach(function (m) {
	  extend(define, m);
	});

	var elesfn$i = {
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop()
	};

	var elesfn$h = {
	  classes: function classes(_classes) {
	    var self = this;
	    if (_classes === undefined) {
	      var ret = [];
	      self[0]._private.classes.forEach(function (cls) {
	        return ret.push(cls);
	      });
	      return ret;
	    } else if (!array(_classes)) {
	      // extract classes from string
	      _classes = (_classes || '').match(/\S+/g) || [];
	    }
	    var changed = [];
	    var classesSet = new Set$1(_classes);

	    // check and update each ele
	    for (var j = 0; j < self.length; j++) {
	      var ele = self[j];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false;

	      // check if ele has all of the passed classes
	      for (var i = 0; i < _classes.length; i++) {
	        var cls = _classes[i];
	        var eleHasClass = eleClasses.has(cls);
	        if (!eleHasClass) {
	          changedEle = true;
	          break;
	        }
	      }

	      // check if ele has classes outside of those passed
	      if (!changedEle) {
	        changedEle = eleClasses.size !== _classes.length;
	      }
	      if (changedEle) {
	        _p.classes = classesSet;
	        changed.push(ele);
	      }
	    }

	    // trigger update style on those eles that had class changes
	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }
	    return self;
	  },
	  addClass: function addClass(classes) {
	    return this.toggleClass(classes, true);
	  },
	  hasClass: function hasClass(className) {
	    var ele = this[0];
	    return ele != null && ele._private.classes.has(className);
	  },
	  toggleClass: function toggleClass(classes, toggle) {
	    if (!array(classes)) {
	      // extract classes from string
	      classes = classes.match(/\S+/g) || [];
	    }
	    var self = this;
	    var toggleUndefd = toggle === undefined;
	    var changed = []; // eles who had classes changed

	    for (var i = 0, il = self.length; i < il; i++) {
	      var ele = self[i];
	      var eleClasses = ele._private.classes;
	      var changedEle = false;
	      for (var j = 0; j < classes.length; j++) {
	        var cls = classes[j];
	        var hasClass = eleClasses.has(cls);
	        var changedNow = false;
	        if (toggle || toggleUndefd && !hasClass) {
	          eleClasses.add(cls);
	          changedNow = true;
	        } else if (!toggle || toggleUndefd && hasClass) {
	          eleClasses["delete"](cls);
	          changedNow = true;
	        }
	        if (!changedEle && changedNow) {
	          changed.push(ele);
	          changedEle = true;
	        }
	      } // for j classes
	    } // for i eles

	    // trigger update style on those eles that had class changes
	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }
	    return self;
	  },
	  removeClass: function removeClass(classes) {
	    return this.toggleClass(classes, false);
	  },
	  flashClass: function flashClass(classes, duration) {
	    var self = this;
	    if (duration == null) {
	      duration = 250;
	    } else if (duration === 0) {
	      return self; // nothing to do really
	    }

	    self.addClass(classes);
	    setTimeout(function () {
	      self.removeClass(classes);
	    }, duration);
	    return self;
	  }
	};
	elesfn$h.className = elesfn$h.classNames = elesfn$h.classes;

	// tokens in the query language
	var tokens = {
	  metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
	  // chars we need to escape in let names, etc
	  comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
	  // binary comparison op (used in data selectors)
	  boolOp: '\\?|\\!|\\^',
	  // boolean (unary) operators (used in data selectors)
	  string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
	  // string literals (used in data selectors) -- doublequotes | singlequotes
	  number: number,
	  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	  meta: 'degree|indegree|outdegree',
	  // allowed metadata fields (i.e. allowed functions to use from Collection)
	  separator: '\\s*,\\s*',
	  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	  descendant: '\\s+',
	  child: '\\s+>\\s+',
	  subject: '\\$',
	  group: 'node|edge|\\*',
	  directedEdge: '\\s+->\\s+',
	  undirectedEdge: '\\s+<->\\s+'
	};
	tokens.variable = '(?:[\\w-.]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name can have letters, numbers, dashes, and periods
	tokens.className = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a class name has the same rules as a variable except it can't have a '.' in the name
	tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
	tokens.id = tokens.variable; // an element id (follows variable conventions)

	(function () {
	  var ops, op, i;

	  // add @ variants to comparatorOp
	  ops = tokens.comparatorOp.split('|');
	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];
	    tokens.comparatorOp += '|@' + op;
	  }

	  // add ! variants to comparatorOp
	  ops = tokens.comparatorOp.split('|');
	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];
	    if (op.indexOf('!') >= 0) {
	      continue;
	    } // skip ops that explicitly contain !
	    if (op === '=') {
	      continue;
	    } // skip = b/c != is explicitly defined

	    tokens.comparatorOp += '|\\!' + op;
	  }
	})();

	/**
	 * Make a new query object
	 *
	 * @prop type {Type} The type enum (int) of the query
	 * @prop checks List of checks to make against an ele to test for a match
	 */
	var newQuery = function newQuery() {
	  return {
	    checks: []
	  };
	};

	/**
	 * A check type enum-like object.  Uses integer values for fast match() lookup.
	 * The ordering does not matter as long as the ints are unique.
	 */
	var Type = {
	  /** E.g. node */
	  GROUP: 0,
	  /** A collection of elements */
	  COLLECTION: 1,
	  /** A filter(ele) function */
	  FILTER: 2,
	  /** E.g. [foo > 1] */
	  DATA_COMPARE: 3,
	  /** E.g. [foo] */
	  DATA_EXIST: 4,
	  /** E.g. [?foo] */
	  DATA_BOOL: 5,
	  /** E.g. [[degree > 2]] */
	  META_COMPARE: 6,
	  /** E.g. :selected */
	  STATE: 7,
	  /** E.g. #foo */
	  ID: 8,
	  /** E.g. .foo */
	  CLASS: 9,
	  /** E.g. #foo <-> #bar */
	  UNDIRECTED_EDGE: 10,
	  /** E.g. #foo -> #bar */
	  DIRECTED_EDGE: 11,
	  /** E.g. $#foo -> #bar */
	  NODE_SOURCE: 12,
	  /** E.g. #foo -> $#bar */
	  NODE_TARGET: 13,
	  /** E.g. $#foo <-> #bar */
	  NODE_NEIGHBOR: 14,
	  /** E.g. #foo > #bar */
	  CHILD: 15,
	  /** E.g. #foo #bar */
	  DESCENDANT: 16,
	  /** E.g. $#foo > #bar */
	  PARENT: 17,
	  /** E.g. $#foo #bar */
	  ANCESTOR: 18,
	  /** E.g. #foo > $bar > #baz */
	  COMPOUND_SPLIT: 19,
	  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
	  TRUE: 20
	};

	var stateSelectors = [{
	  selector: ':selected',
	  matches: function matches(ele) {
	    return ele.selected();
	  }
	}, {
	  selector: ':unselected',
	  matches: function matches(ele) {
	    return !ele.selected();
	  }
	}, {
	  selector: ':selectable',
	  matches: function matches(ele) {
	    return ele.selectable();
	  }
	}, {
	  selector: ':unselectable',
	  matches: function matches(ele) {
	    return !ele.selectable();
	  }
	}, {
	  selector: ':locked',
	  matches: function matches(ele) {
	    return ele.locked();
	  }
	}, {
	  selector: ':unlocked',
	  matches: function matches(ele) {
	    return !ele.locked();
	  }
	}, {
	  selector: ':visible',
	  matches: function matches(ele) {
	    return ele.visible();
	  }
	}, {
	  selector: ':hidden',
	  matches: function matches(ele) {
	    return !ele.visible();
	  }
	}, {
	  selector: ':transparent',
	  matches: function matches(ele) {
	    return ele.transparent();
	  }
	}, {
	  selector: ':grabbed',
	  matches: function matches(ele) {
	    return ele.grabbed();
	  }
	}, {
	  selector: ':free',
	  matches: function matches(ele) {
	    return !ele.grabbed();
	  }
	}, {
	  selector: ':removed',
	  matches: function matches(ele) {
	    return ele.removed();
	  }
	}, {
	  selector: ':inside',
	  matches: function matches(ele) {
	    return !ele.removed();
	  }
	}, {
	  selector: ':grabbable',
	  matches: function matches(ele) {
	    return ele.grabbable();
	  }
	}, {
	  selector: ':ungrabbable',
	  matches: function matches(ele) {
	    return !ele.grabbable();
	  }
	}, {
	  selector: ':animated',
	  matches: function matches(ele) {
	    return ele.animated();
	  }
	}, {
	  selector: ':unanimated',
	  matches: function matches(ele) {
	    return !ele.animated();
	  }
	}, {
	  selector: ':parent',
	  matches: function matches(ele) {
	    return ele.isParent();
	  }
	}, {
	  selector: ':childless',
	  matches: function matches(ele) {
	    return ele.isChildless();
	  }
	}, {
	  selector: ':child',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':orphan',
	  matches: function matches(ele) {
	    return ele.isOrphan();
	  }
	}, {
	  selector: ':nonorphan',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':compound',
	  matches: function matches(ele) {
	    if (ele.isNode()) {
	      return ele.isParent();
	    } else {
	      return ele.source().isParent() || ele.target().isParent();
	    }
	  }
	}, {
	  selector: ':loop',
	  matches: function matches(ele) {
	    return ele.isLoop();
	  }
	}, {
	  selector: ':simple',
	  matches: function matches(ele) {
	    return ele.isSimple();
	  }
	}, {
	  selector: ':active',
	  matches: function matches(ele) {
	    return ele.active();
	  }
	}, {
	  selector: ':inactive',
	  matches: function matches(ele) {
	    return !ele.active();
	  }
	}, {
	  selector: ':backgrounding',
	  matches: function matches(ele) {
	    return ele.backgrounding();
	  }
	}, {
	  selector: ':nonbackgrounding',
	  matches: function matches(ele) {
	    return !ele.backgrounding();
	  }
	}].sort(function (a, b) {
	  // n.b. selectors that are starting substrings of others must have the longer ones first
	  return descending(a.selector, b.selector);
	});
	var lookup = function () {
	  var selToFn = {};
	  var s;
	  for (var i = 0; i < stateSelectors.length; i++) {
	    s = stateSelectors[i];
	    selToFn[s.selector] = s.matches;
	  }
	  return selToFn;
	}();
	var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
	  return lookup[sel](ele);
	};
	var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
	  return s.selector;
	}).join('|') + ')';

	// when a token like a variable has escaped meta characters, we need to clean the backslashes out
	// so that values get compared properly in Selector.filter()
	var cleanMetaChars = function cleanMetaChars(str) {
	  return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
	    return $1;
	  });
	};
	var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
	  selector[selector.length - 1] = replacementQuery;
	};

	// NOTE: add new expression syntax here to have it recognised by the parser;
	// - a query contains all adjacent (i.e. no separator in between) expressions;
	// - the current query is stored in selector[i]
	// - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward
	var exprs = [{
	  name: 'group',
	  // just used for identifying when debugging
	  query: true,
	  regex: '(' + tokens.group + ')',
	  populate: function populate(selector, query, _ref) {
	    var _ref2 = _slicedToArray(_ref, 1),
	      group = _ref2[0];
	    query.checks.push({
	      type: Type.GROUP,
	      value: group === '*' ? group : group + 's'
	    });
	  }
	}, {
	  name: 'state',
	  query: true,
	  regex: stateSelectorRegex,
	  populate: function populate(selector, query, _ref3) {
	    var _ref4 = _slicedToArray(_ref3, 1),
	      state = _ref4[0];
	    query.checks.push({
	      type: Type.STATE,
	      value: state
	    });
	  }
	}, {
	  name: 'id',
	  query: true,
	  regex: '\\#(' + tokens.id + ')',
	  populate: function populate(selector, query, _ref5) {
	    var _ref6 = _slicedToArray(_ref5, 1),
	      id = _ref6[0];
	    query.checks.push({
	      type: Type.ID,
	      value: cleanMetaChars(id)
	    });
	  }
	}, {
	  name: 'className',
	  query: true,
	  regex: '\\.(' + tokens.className + ')',
	  populate: function populate(selector, query, _ref7) {
	    var _ref8 = _slicedToArray(_ref7, 1),
	      className = _ref8[0];
	    query.checks.push({
	      type: Type.CLASS,
	      value: cleanMetaChars(className)
	    });
	  }
	}, {
	  name: 'dataExists',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref9) {
	    var _ref10 = _slicedToArray(_ref9, 1),
	      variable = _ref10[0];
	    query.checks.push({
	      type: Type.DATA_EXIST,
	      field: cleanMetaChars(variable)
	    });
	  }
	}, {
	  name: 'dataCompare',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
	  populate: function populate(selector, query, _ref11) {
	    var _ref12 = _slicedToArray(_ref11, 3),
	      variable = _ref12[0],
	      comparatorOp = _ref12[1],
	      value = _ref12[2];
	    var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;
	    if (valueIsString) {
	      value = value.substring(1, value.length - 1);
	    } else {
	      value = parseFloat(value);
	    }
	    query.checks.push({
	      type: Type.DATA_COMPARE,
	      field: cleanMetaChars(variable),
	      operator: comparatorOp,
	      value: value
	    });
	  }
	}, {
	  name: 'dataBool',
	  query: true,
	  regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref13) {
	    var _ref14 = _slicedToArray(_ref13, 2),
	      boolOp = _ref14[0],
	      variable = _ref14[1];
	    query.checks.push({
	      type: Type.DATA_BOOL,
	      field: cleanMetaChars(variable),
	      operator: boolOp
	    });
	  }
	}, {
	  name: 'metaCompare',
	  query: true,
	  regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
	  populate: function populate(selector, query, _ref15) {
	    var _ref16 = _slicedToArray(_ref15, 3),
	      meta = _ref16[0],
	      comparatorOp = _ref16[1],
	      number = _ref16[2];
	    query.checks.push({
	      type: Type.META_COMPARE,
	      field: cleanMetaChars(meta),
	      operator: comparatorOp,
	      value: parseFloat(number)
	    });
	  }
	}, {
	  name: 'nextQuery',
	  separator: true,
	  regex: tokens.separator,
	  populate: function populate(selector, query) {
	    var currentSubject = selector.currentSubject;
	    var edgeCount = selector.edgeCount;
	    var compoundCount = selector.compoundCount;
	    var lastQ = selector[selector.length - 1];
	    if (currentSubject != null) {
	      lastQ.subject = currentSubject;
	      selector.currentSubject = null;
	    }
	    lastQ.edgeCount = edgeCount;
	    lastQ.compoundCount = compoundCount;
	    selector.edgeCount = 0;
	    selector.compoundCount = 0;

	    // go on to next query
	    var nextQuery = selector[selector.length++] = newQuery();
	    return nextQuery; // this is the new query to be filled by the following exprs
	  }
	}, {
	  name: 'directedEdge',
	  separator: true,
	  regex: tokens.directedEdge,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // undirected edge
	      var edgeQuery = newQuery();
	      var source = query;
	      var target = newQuery();
	      edgeQuery.checks.push({
	        type: Type.DIRECTED_EDGE,
	        source: source,
	        target: target
	      });

	      // the query in the selector should be the edge rather than the source
	      replaceLastQuery(selector, query, edgeQuery);
	      selector.edgeCount++;

	      // we're now populating the target query with expressions that follow
	      return target;
	    } else {
	      // source/target
	      var srcTgtQ = newQuery();
	      var _source = query;
	      var _target = newQuery();
	      srcTgtQ.checks.push({
	        type: Type.NODE_SOURCE,
	        source: _source,
	        target: _target
	      });

	      // the query in the selector should be the neighbourhood rather than the node
	      replaceLastQuery(selector, query, srcTgtQ);
	      selector.edgeCount++;
	      return _target; // now populating the target with the following expressions
	    }
	  }
	}, {
	  name: 'undirectedEdge',
	  separator: true,
	  regex: tokens.undirectedEdge,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // undirected edge
	      var edgeQuery = newQuery();
	      var source = query;
	      var target = newQuery();
	      edgeQuery.checks.push({
	        type: Type.UNDIRECTED_EDGE,
	        nodes: [source, target]
	      });

	      // the query in the selector should be the edge rather than the source
	      replaceLastQuery(selector, query, edgeQuery);
	      selector.edgeCount++;

	      // we're now populating the target query with expressions that follow
	      return target;
	    } else {
	      // neighbourhood
	      var nhoodQ = newQuery();
	      var node = query;
	      var neighbor = newQuery();
	      nhoodQ.checks.push({
	        type: Type.NODE_NEIGHBOR,
	        node: node,
	        neighbor: neighbor
	      });

	      // the query in the selector should be the neighbourhood rather than the node
	      replaceLastQuery(selector, query, nhoodQ);
	      return neighbor; // now populating the neighbor with following expressions
	    }
	  }
	}, {
	  name: 'child',
	  separator: true,
	  regex: tokens.child,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // default: child query
	      var parentChildQuery = newQuery();
	      var child = newQuery();
	      var parent = selector[selector.length - 1];
	      parentChildQuery.checks.push({
	        type: Type.CHILD,
	        parent: parent,
	        child: child
	      });

	      // the query in the selector should be the '>' itself
	      replaceLastQuery(selector, query, parentChildQuery);
	      selector.compoundCount++;

	      // we're now populating the child query with expressions that follow
	      return child;
	    } else if (selector.currentSubject === query) {
	      // compound split query
	      var compound = newQuery();
	      var left = selector[selector.length - 1];
	      var right = newQuery();
	      var subject = newQuery();
	      var _child = newQuery();
	      var _parent = newQuery();

	      // set up the root compound q
	      compound.checks.push({
	        type: Type.COMPOUND_SPLIT,
	        left: left,
	        right: right,
	        subject: subject
	      });

	      // populate the subject and replace the q at the old spot (within left) with TRUE
	      subject.checks = query.checks; // take the checks from the left
	      query.checks = [{
	        type: Type.TRUE
	      }]; // checks under left refs the subject implicitly

	      // set up the right q
	      _parent.checks.push({
	        type: Type.TRUE
	      }); // parent implicitly refs the subject
	      right.checks.push({
	        type: Type.PARENT,
	        // type is swapped on right side queries
	        parent: _parent,
	        child: _child // empty for now
	      });

	      replaceLastQuery(selector, left, compound);

	      // update the ref since we moved things around for `query`
	      selector.currentSubject = subject;
	      selector.compoundCount++;
	      return _child; // now populating the right side's child
	    } else {
	      // parent query
	      // info for parent query
	      var _parent2 = newQuery();
	      var _child2 = newQuery();
	      var pcQChecks = [{
	        type: Type.PARENT,
	        parent: _parent2,
	        child: _child2
	      }];

	      // the parent-child query takes the place of the query previously being populated
	      _parent2.checks = query.checks; // the previous query contains the checks for the parent
	      query.checks = pcQChecks; // pc query takes over

	      selector.compoundCount++;
	      return _child2; // we're now populating the child
	    }
	  }
	}, {
	  name: 'descendant',
	  separator: true,
	  regex: tokens.descendant,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // default: descendant query
	      var ancChQuery = newQuery();
	      var descendant = newQuery();
	      var ancestor = selector[selector.length - 1];
	      ancChQuery.checks.push({
	        type: Type.DESCENDANT,
	        ancestor: ancestor,
	        descendant: descendant
	      });

	      // the query in the selector should be the '>' itself
	      replaceLastQuery(selector, query, ancChQuery);
	      selector.compoundCount++;

	      // we're now populating the descendant query with expressions that follow
	      return descendant;
	    } else if (selector.currentSubject === query) {
	      // compound split query
	      var compound = newQuery();
	      var left = selector[selector.length - 1];
	      var right = newQuery();
	      var subject = newQuery();
	      var _descendant = newQuery();
	      var _ancestor = newQuery();

	      // set up the root compound q
	      compound.checks.push({
	        type: Type.COMPOUND_SPLIT,
	        left: left,
	        right: right,
	        subject: subject
	      });

	      // populate the subject and replace the q at the old spot (within left) with TRUE
	      subject.checks = query.checks; // take the checks from the left
	      query.checks = [{
	        type: Type.TRUE
	      }]; // checks under left refs the subject implicitly

	      // set up the right q
	      _ancestor.checks.push({
	        type: Type.TRUE
	      }); // ancestor implicitly refs the subject
	      right.checks.push({
	        type: Type.ANCESTOR,
	        // type is swapped on right side queries
	        ancestor: _ancestor,
	        descendant: _descendant // empty for now
	      });

	      replaceLastQuery(selector, left, compound);

	      // update the ref since we moved things around for `query`
	      selector.currentSubject = subject;
	      selector.compoundCount++;
	      return _descendant; // now populating the right side's descendant
	    } else {
	      // ancestor query
	      // info for parent query
	      var _ancestor2 = newQuery();
	      var _descendant2 = newQuery();
	      var adQChecks = [{
	        type: Type.ANCESTOR,
	        ancestor: _ancestor2,
	        descendant: _descendant2
	      }];

	      // the parent-child query takes the place of the query previously being populated
	      _ancestor2.checks = query.checks; // the previous query contains the checks for the parent
	      query.checks = adQChecks; // pc query takes over

	      selector.compoundCount++;
	      return _descendant2; // we're now populating the child
	    }
	  }
	}, {
	  name: 'subject',
	  modifier: true,
	  regex: tokens.subject,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject != null && selector.currentSubject !== query) {
	      warn('Redefinition of subject in selector `' + selector.toString() + '`');
	      return false;
	    }
	    selector.currentSubject = query;
	    var topQ = selector[selector.length - 1];
	    var topChk = topQ.checks[0];
	    var topType = topChk == null ? null : topChk.type;
	    if (topType === Type.DIRECTED_EDGE) {
	      // directed edge with subject on the target

	      // change to target node check
	      topChk.type = Type.NODE_TARGET;
	    } else if (topType === Type.UNDIRECTED_EDGE) {
	      // undirected edge with subject on the second node

	      // change to neighbor check
	      topChk.type = Type.NODE_NEIGHBOR;
	      topChk.node = topChk.nodes[1]; // second node is subject
	      topChk.neighbor = topChk.nodes[0];

	      // clean up unused fields for new type
	      topChk.nodes = null;
	    }
	  }
	}];
	exprs.forEach(function (e) {
	  return e.regexObj = new RegExp('^' + e.regex);
	});

	/**
	 * Of all the expressions, find the first match in the remaining text.
	 * @param {string} remaining The remaining text to parse
	 * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
	 */
	var consumeExpr = function consumeExpr(remaining) {
	  var expr;
	  var match;
	  var name;
	  for (var j = 0; j < exprs.length; j++) {
	    var e = exprs[j];
	    var n = e.name;
	    var m = remaining.match(e.regexObj);
	    if (m != null) {
	      match = m;
	      expr = e;
	      name = n;
	      var consumed = m[0];
	      remaining = remaining.substring(consumed.length);
	      break; // we've consumed one expr, so we can return now
	    }
	  }

	  return {
	    expr: expr,
	    match: match,
	    name: name,
	    remaining: remaining
	  };
	};

	/**
	 * Consume all the leading whitespace
	 * @param {string} remaining The text to consume
	 * @returns The text with the leading whitespace removed
	 */
	var consumeWhitespace = function consumeWhitespace(remaining) {
	  var match = remaining.match(/^\s+/);
	  if (match) {
	    var consumed = match[0];
	    remaining = remaining.substring(consumed.length);
	  }
	  return remaining;
	};

	/**
	 * Parse the string and store the parsed representation in the Selector.
	 * @param {string} selector The selector string
	 * @returns `true` if the selector was successfully parsed, `false` otherwise
	 */
	var parse = function parse(selector) {
	  var self = this;
	  var remaining = self.inputText = selector;
	  var currentQuery = self[0] = newQuery();
	  self.length = 1;
	  remaining = consumeWhitespace(remaining); // get rid of leading whitespace

	  for (;;) {
	    var exprInfo = consumeExpr(remaining);
	    if (exprInfo.expr == null) {
	      warn('The selector `' + selector + '`is invalid');
	      return false;
	    } else {
	      var args = exprInfo.match.slice(1);

	      // let the token populate the selector object in currentQuery
	      var ret = exprInfo.expr.populate(self, currentQuery, args);
	      if (ret === false) {
	        return false; // exit if population failed
	      } else if (ret != null) {
	        currentQuery = ret; // change the current query to be filled if the expr specifies
	      }
	    }

	    remaining = exprInfo.remaining;

	    // we're done when there's nothing left to parse
	    if (remaining.match(/^\s*$/)) {
	      break;
	    }
	  }
	  var lastQ = self[self.length - 1];
	  if (self.currentSubject != null) {
	    lastQ.subject = self.currentSubject;
	  }
	  lastQ.edgeCount = self.edgeCount;
	  lastQ.compoundCount = self.compoundCount;
	  for (var i = 0; i < self.length; i++) {
	    var q = self[i];

	    // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations
	    if (q.compoundCount > 0 && q.edgeCount > 0) {
	      warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
	      return false;
	    }
	    if (q.edgeCount > 1) {
	      warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
	      return false;
	    } else if (q.edgeCount === 1) {
	      warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
	    }
	  }
	  return true; // success
	};

	/**
	 * Get the selector represented as a string.  This value uses default formatting,
	 * so things like spacing may differ from the input text passed to the constructor.
	 * @returns {string} The selector string
	 */
	var toString = function toString() {
	  if (this.toStringCache != null) {
	    return this.toStringCache;
	  }
	  var clean = function clean(obj) {
	    if (obj == null) {
	      return '';
	    } else {
	      return obj;
	    }
	  };
	  var cleanVal = function cleanVal(val) {
	    if (string(val)) {
	      return '"' + val + '"';
	    } else {
	      return clean(val);
	    }
	  };
	  var space = function space(val) {
	    return ' ' + val + ' ';
	  };
	  var checkToString = function checkToString(check, subject) {
	    var type = check.type,
	      value = check.value;
	    switch (type) {
	      case Type.GROUP:
	        {
	          var group = clean(value);
	          return group.substring(0, group.length - 1);
	        }
	      case Type.DATA_COMPARE:
	        {
	          var field = check.field,
	            operator = check.operator;
	          return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
	        }
	      case Type.DATA_BOOL:
	        {
	          var _operator = check.operator,
	            _field = check.field;
	          return '[' + clean(_operator) + _field + ']';
	        }
	      case Type.DATA_EXIST:
	        {
	          var _field2 = check.field;
	          return '[' + _field2 + ']';
	        }
	      case Type.META_COMPARE:
	        {
	          var _operator2 = check.operator,
	            _field3 = check.field;
	          return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
	        }
	      case Type.STATE:
	        {
	          return value;
	        }
	      case Type.ID:
	        {
	          return '#' + value;
	        }
	      case Type.CLASS:
	        {
	          return '.' + value;
	        }
	      case Type.PARENT:
	      case Type.CHILD:
	        {
	          return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
	        }
	      case Type.ANCESTOR:
	      case Type.DESCENDANT:
	        {
	          return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
	        }
	      case Type.COMPOUND_SPLIT:
	        {
	          var lhs = queryToString(check.left, subject);
	          var sub = queryToString(check.subject, subject);
	          var rhs = queryToString(check.right, subject);
	          return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
	        }
	      case Type.TRUE:
	        {
	          return '';
	        }
	    }
	  };
	  var queryToString = function queryToString(query, subject) {
	    return query.checks.reduce(function (str, chk, i) {
	      return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
	    }, '');
	  };
	  var str = '';
	  for (var i = 0; i < this.length; i++) {
	    var query = this[i];
	    str += queryToString(query, query.subject);
	    if (this.length > 1 && i < this.length - 1) {
	      str += ', ';
	    }
	  }
	  this.toStringCache = str;
	  return str;
	};
	var parse$1 = {
	  parse: parse,
	  toString: toString
	};

	var valCmp = function valCmp(fieldVal, operator, value) {
	  var matches;
	  var isFieldStr = string(fieldVal);
	  var isFieldNum = number$1(fieldVal);
	  var isValStr = string(value);
	  var fieldStr, valStr;
	  var caseInsensitive = false;
	  var notExpr = false;
	  var isIneqCmp = false;
	  if (operator.indexOf('!') >= 0) {
	    operator = operator.replace('!', '');
	    notExpr = true;
	  }
	  if (operator.indexOf('@') >= 0) {
	    operator = operator.replace('@', '');
	    caseInsensitive = true;
	  }
	  if (isFieldStr || isValStr || caseInsensitive) {
	    fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
	    valStr = '' + value;
	  }

	  // if we're doing a case insensitive comparison, then we're using a STRING comparison
	  // even if we're comparing numbers
	  if (caseInsensitive) {
	    fieldVal = fieldStr = fieldStr.toLowerCase();
	    value = valStr = valStr.toLowerCase();
	  }
	  switch (operator) {
	    case '*=':
	      matches = fieldStr.indexOf(valStr) >= 0;
	      break;
	    case '$=':
	      matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
	      break;
	    case '^=':
	      matches = fieldStr.indexOf(valStr) === 0;
	      break;
	    case '=':
	      matches = fieldVal === value;
	      break;
	    case '>':
	      isIneqCmp = true;
	      matches = fieldVal > value;
	      break;
	    case '>=':
	      isIneqCmp = true;
	      matches = fieldVal >= value;
	      break;
	    case '<':
	      isIneqCmp = true;
	      matches = fieldVal < value;
	      break;
	    case '<=':
	      isIneqCmp = true;
	      matches = fieldVal <= value;
	      break;
	    default:
	      matches = false;
	      break;
	  }

	  // apply the not op, but null vals for inequalities should always stay non-matching
	  if (notExpr && (fieldVal != null || !isIneqCmp)) {
	    matches = !matches;
	  }
	  return matches;
	};
	var boolCmp = function boolCmp(fieldVal, operator) {
	  switch (operator) {
	    case '?':
	      return fieldVal ? true : false;
	    case '!':
	      return fieldVal ? false : true;
	    case '^':
	      return fieldVal === undefined;
	  }
	};
	var existCmp = function existCmp(fieldVal) {
	  return fieldVal !== undefined;
	};
	var data$1 = function data(ele, field) {
	  return ele.data(field);
	};
	var meta = function meta(ele, field) {
	  return ele[field]();
	};

	/** A lookup of `match(check, ele)` functions by `Type` int */
	var match = [];

	/**
	 * Returns whether the query matches for the element
	 * @param query The `{ type, value, ... }` query object
	 * @param ele The element to compare against
	*/
	var matches$1 = function matches(query, ele) {
	  return query.checks.every(function (chk) {
	    return match[chk.type](chk, ele);
	  });
	};
	match[Type.GROUP] = function (check, ele) {
	  var group = check.value;
	  return group === '*' || group === ele.group();
	};
	match[Type.STATE] = function (check, ele) {
	  var stateSelector = check.value;
	  return stateSelectorMatches(stateSelector, ele);
	};
	match[Type.ID] = function (check, ele) {
	  var id = check.value;
	  return ele.id() === id;
	};
	match[Type.CLASS] = function (check, ele) {
	  var cls = check.value;
	  return ele.hasClass(cls);
	};
	match[Type.META_COMPARE] = function (check, ele) {
	  var field = check.field,
	    operator = check.operator,
	    value = check.value;
	  return valCmp(meta(ele, field), operator, value);
	};
	match[Type.DATA_COMPARE] = function (check, ele) {
	  var field = check.field,
	    operator = check.operator,
	    value = check.value;
	  return valCmp(data$1(ele, field), operator, value);
	};
	match[Type.DATA_BOOL] = function (check, ele) {
	  var field = check.field,
	    operator = check.operator;
	  return boolCmp(data$1(ele, field), operator);
	};
	match[Type.DATA_EXIST] = function (check, ele) {
	  var field = check.field;
	    check.operator;
	  return existCmp(data$1(ele, field));
	};
	match[Type.UNDIRECTED_EDGE] = function (check, ele) {
	  var qA = check.nodes[0];
	  var qB = check.nodes[1];
	  var src = ele.source();
	  var tgt = ele.target();
	  return matches$1(qA, src) && matches$1(qB, tgt) || matches$1(qB, src) && matches$1(qA, tgt);
	};
	match[Type.NODE_NEIGHBOR] = function (check, ele) {
	  return matches$1(check.node, ele) && ele.neighborhood().some(function (n) {
	    return n.isNode() && matches$1(check.neighbor, n);
	  });
	};
	match[Type.DIRECTED_EDGE] = function (check, ele) {
	  return matches$1(check.source, ele.source()) && matches$1(check.target, ele.target());
	};
	match[Type.NODE_SOURCE] = function (check, ele) {
	  return matches$1(check.source, ele) && ele.outgoers().some(function (n) {
	    return n.isNode() && matches$1(check.target, n);
	  });
	};
	match[Type.NODE_TARGET] = function (check, ele) {
	  return matches$1(check.target, ele) && ele.incomers().some(function (n) {
	    return n.isNode() && matches$1(check.source, n);
	  });
	};
	match[Type.CHILD] = function (check, ele) {
	  return matches$1(check.child, ele) && matches$1(check.parent, ele.parent());
	};
	match[Type.PARENT] = function (check, ele) {
	  return matches$1(check.parent, ele) && ele.children().some(function (c) {
	    return matches$1(check.child, c);
	  });
	};
	match[Type.DESCENDANT] = function (check, ele) {
	  return matches$1(check.descendant, ele) && ele.ancestors().some(function (a) {
	    return matches$1(check.ancestor, a);
	  });
	};
	match[Type.ANCESTOR] = function (check, ele) {
	  return matches$1(check.ancestor, ele) && ele.descendants().some(function (d) {
	    return matches$1(check.descendant, d);
	  });
	};
	match[Type.COMPOUND_SPLIT] = function (check, ele) {
	  return matches$1(check.subject, ele) && matches$1(check.left, ele) && matches$1(check.right, ele);
	};
	match[Type.TRUE] = function () {
	  return true;
	};
	match[Type.COLLECTION] = function (check, ele) {
	  var collection = check.value;
	  return collection.has(ele);
	};
	match[Type.FILTER] = function (check, ele) {
	  var filter = check.value;
	  return filter(ele);
	};

	// filter an existing collection
	var filter = function filter(collection) {
	  var self = this;

	  // for 1 id #foo queries, just get the element
	  if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
	    return collection.getElementById(self[0].checks[0].value).collection();
	  }
	  var selectorFunction = function selectorFunction(element) {
	    for (var j = 0; j < self.length; j++) {
	      var query = self[j];
	      if (matches$1(query, element)) {
	        return true;
	      }
	    }
	    return false;
	  };
	  if (self.text() == null) {
	    selectorFunction = function selectorFunction() {
	      return true;
	    };
	  }
	  return collection.filter(selectorFunction);
	}; // filter

	// does selector match a single element?
	var matches = function matches(ele) {
	  var self = this;
	  for (var j = 0; j < self.length; j++) {
	    var query = self[j];
	    if (matches$1(query, ele)) {
	      return true;
	    }
	  }
	  return false;
	}; // matches

	var matching = {
	  matches: matches,
	  filter: filter
	};

	var Selector = function Selector(selector) {
	  this.inputText = selector;
	  this.currentSubject = null;
	  this.compoundCount = 0;
	  this.edgeCount = 0;
	  this.length = 0;
	  if (selector == null || string(selector) && selector.match(/^\s*$/)) ; else if (elementOrCollection(selector)) {
	    this.addQuery({
	      checks: [{
	        type: Type.COLLECTION,
	        value: selector.collection()
	      }]
	    });
	  } else if (fn$6(selector)) {
	    this.addQuery({
	      checks: [{
	        type: Type.FILTER,
	        value: selector
	      }]
	    });
	  } else if (string(selector)) {
	    if (!this.parse(selector)) {
	      this.invalid = true;
	    }
	  } else {
	    error('A selector must be created from a string; found ');
	  }
	};
	var selfn = Selector.prototype;
	[parse$1, matching].forEach(function (p) {
	  return extend(selfn, p);
	});
	selfn.text = function () {
	  return this.inputText;
	};
	selfn.size = function () {
	  return this.length;
	};
	selfn.eq = function (i) {
	  return this[i];
	};
	selfn.sameText = function (otherSel) {
	  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
	};
	selfn.addQuery = function (q) {
	  this[this.length++] = q;
	};
	selfn.selector = selfn.toString;

	var elesfn$g = {
	  allAre: function allAre(selector) {
	    var selObj = new Selector(selector);
	    return this.every(function (ele) {
	      return selObj.matches(ele);
	    });
	  },
	  is: function is(selector) {
	    var selObj = new Selector(selector);
	    return this.some(function (ele) {
	      return selObj.matches(ele);
	    });
	  },
	  some: function some(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);
	      if (ret) {
	        return true;
	      }
	    }
	    return false;
	  },
	  every: function every(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);
	      if (!ret) {
	        return false;
	      }
	    }
	    return true;
	  },
	  same: function same(collection) {
	    // cheap collection ref check
	    if (this === collection) {
	      return true;
	    }
	    collection = this.cy().collection(collection);
	    var thisLength = this.length;
	    var collectionLength = collection.length;

	    // cheap length check
	    if (thisLength !== collectionLength) {
	      return false;
	    }

	    // cheap element ref check
	    if (thisLength === 1) {
	      return this[0] === collection[0];
	    }
	    return this.every(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },
	  anySame: function anySame(collection) {
	    collection = this.cy().collection(collection);
	    return this.some(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },
	  allAreNeighbors: function allAreNeighbors(collection) {
	    collection = this.cy().collection(collection);
	    var nhood = this.neighborhood();
	    return collection.every(function (ele) {
	      return nhood.hasElementWithId(ele.id());
	    });
	  },
	  contains: function contains(collection) {
	    collection = this.cy().collection(collection);
	    var self = this;
	    return collection.every(function (ele) {
	      return self.hasElementWithId(ele.id());
	    });
	  }
	};
	elesfn$g.allAreNeighbours = elesfn$g.allAreNeighbors;
	elesfn$g.has = elesfn$g.contains;
	elesfn$g.equal = elesfn$g.equals = elesfn$g.same;

	var cache = function cache(fn, name) {
	  return function traversalCache(arg1, arg2, arg3, arg4) {
	    var selectorOrEles = arg1;
	    var eles = this;
	    var key;
	    if (selectorOrEles == null) {
	      key = '';
	    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
	      key = selectorOrEles.id();
	    }
	    if (eles.length === 1 && key) {
	      var _p = eles[0]._private;
	      var tch = _p.traversalCache = _p.traversalCache || {};
	      var ch = tch[name] = tch[name] || [];
	      var hash = hashString(key);
	      var cacheHit = ch[hash];
	      if (cacheHit) {
	        return cacheHit;
	      } else {
	        return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);
	      }
	    } else {
	      return fn.call(eles, arg1, arg2, arg3, arg4);
	    }
	  };
	};

	var elesfn$f = {
	  parent: function parent(selector) {
	    var parents = [];

	    // optimisation for single ele call
	    if (this.length === 1) {
	      var parent = this[0]._private.parent;
	      if (parent) {
	        return parent;
	      }
	    }
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _parent = ele._private.parent;
	      if (_parent) {
	        parents.push(_parent);
	      }
	    }
	    return this.spawn(parents, true).filter(selector);
	  },
	  parents: function parents(selector) {
	    var parents = [];
	    var eles = this.parent();
	    while (eles.nonempty()) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        parents.push(ele);
	      }
	      eles = eles.parent();
	    }
	    return this.spawn(parents, true).filter(selector);
	  },
	  commonAncestors: function commonAncestors(selector) {
	    var ancestors;
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var parents = ele.parents();
	      ancestors = ancestors || parents;
	      ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
	    }

	    return ancestors.filter(selector);
	  },
	  orphans: function orphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isOrphan();
	    }).filter(selector);
	  },
	  nonorphans: function nonorphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isChild();
	    }).filter(selector);
	  },
	  children: cache(function (selector) {
	    var children = [];
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var eleChildren = ele._private.children;
	      for (var j = 0; j < eleChildren.length; j++) {
	        children.push(eleChildren[j]);
	      }
	    }
	    return this.spawn(children, true).filter(selector);
	  }, 'children'),
	  siblings: function siblings(selector) {
	    return this.parent().children().not(this).filter(selector);
	  },
	  isParent: function isParent() {
	    var ele = this[0];
	    if (ele) {
	      return ele.isNode() && ele._private.children.length !== 0;
	    }
	  },
	  isChildless: function isChildless() {
	    var ele = this[0];
	    if (ele) {
	      return ele.isNode() && ele._private.children.length === 0;
	    }
	  },
	  isChild: function isChild() {
	    var ele = this[0];
	    if (ele) {
	      return ele.isNode() && ele._private.parent != null;
	    }
	  },
	  isOrphan: function isOrphan() {
	    var ele = this[0];
	    if (ele) {
	      return ele.isNode() && ele._private.parent == null;
	    }
	  },
	  descendants: function descendants(selector) {
	    var elements = [];
	    function add(eles) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        elements.push(ele);
	        if (ele.children().nonempty()) {
	          add(ele.children());
	        }
	      }
	    }
	    add(this.children());
	    return this.spawn(elements, true).filter(selector);
	  }
	};
	function forEachCompound(eles, fn, includeSelf, recursiveStep) {
	  var q = [];
	  var did = new Set$1();
	  var cy = eles.cy();
	  var hasCompounds = cy.hasCompoundNodes();
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    if (includeSelf) {
	      q.push(ele);
	    } else if (hasCompounds) {
	      recursiveStep(q, did, ele);
	    }
	  }
	  while (q.length > 0) {
	    var _ele = q.shift();
	    fn(_ele);
	    did.add(_ele.id());
	    if (hasCompounds) {
	      recursiveStep(q, did, _ele);
	    }
	  }
	  return eles;
	}
	function addChildren(q, did, ele) {
	  if (ele.isParent()) {
	    var children = ele._private.children;
	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	      if (!did.has(child.id())) {
	        q.push(child);
	      }
	    }
	  }
	}

	// very efficient version of eles.add( eles.descendants() ).forEach()
	// for internal use
	elesfn$f.forEachDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addChildren);
	};
	function addParent(q, did, ele) {
	  if (ele.isChild()) {
	    var parent = ele._private.parent;
	    if (!did.has(parent.id())) {
	      q.push(parent);
	    }
	  }
	}
	elesfn$f.forEachUp = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addParent);
	};
	function addParentAndChildren(q, did, ele) {
	  addParent(q, did, ele);
	  addChildren(q, did, ele);
	}
	elesfn$f.forEachUpAndDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addParentAndChildren);
	};

	// aliases
	elesfn$f.ancestors = elesfn$f.parents;

	var fn$5, elesfn$e;
	fn$5 = elesfn$e = {
	  data: define.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),
	  removeData: define.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),
	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),
	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),
	  rscratch: define.data({
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  }),
	  removeRscratch: define.removeData({
	    field: 'rscratch',
	    triggerEvent: false
	  }),
	  id: function id() {
	    var ele = this[0];
	    if (ele) {
	      return ele._private.data.id;
	    }
	  }
	};

	// aliases
	fn$5.attr = fn$5.data;
	fn$5.removeAttr = fn$5.removeData;
	var data = elesfn$e;

	var elesfn$d = {};
	function defineDegreeFunction(callback) {
	  return function (includeLoops) {
	    var self = this;
	    if (includeLoops === undefined) {
	      includeLoops = true;
	    }
	    if (self.length === 0) {
	      return;
	    }
	    if (self.isNode() && !self.removed()) {
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;
	      for (var i = 0; i < connectedEdges.length; i++) {
	        var edge = connectedEdges[i];
	        if (!includeLoops && edge.isLoop()) {
	          continue;
	        }
	        degree += callback(node, edge);
	      }
	      return degree;
	    } else {
	      return;
	    }
	  };
	}
	extend(elesfn$d, {
	  degree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(edge.target())) {
	      return 2;
	    } else {
	      return 1;
	    }
	  }),
	  indegree: defineDegreeFunction(function (node, edge) {
	    if (edge.target().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  }),
	  outdegree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  })
	});
	function defineDegreeBoundsFunction(degreeFn, callback) {
	  return function (includeLoops) {
	    var ret;
	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++) {
	      var ele = nodes[i];
	      var degree = ele[degreeFn](includeLoops);
	      if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
	        ret = degree;
	      }
	    }
	    return ret;
	  };
	}
	extend(elesfn$d, {
	  minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
	    return degree < min;
	  }),
	  maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
	    return degree > max;
	  }),
	  minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
	    return degree < min;
	  }),
	  maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
	    return degree > max;
	  }),
	  minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
	    return degree < min;
	  }),
	  maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
	    return degree > max;
	  })
	});
	extend(elesfn$d, {
	  totalDegree: function totalDegree(includeLoops) {
	    var total = 0;
	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++) {
	      total += nodes[i].degree(includeLoops);
	    }
	    return total;
	  }
	});

	var fn$4, elesfn$c;
	var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    if (!ele.locked()) {
	      var oldPos = ele._private.position;
	      var delta = {
	        x: newPos.x != null ? newPos.x - oldPos.x : 0,
	        y: newPos.y != null ? newPos.y - oldPos.y : 0
	      };
	      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
	        ele.children().shift(delta, silent);
	      }
	      ele.dirtyBoundingBoxCache();
	    }
	  }
	};
	var positionDef = {
	  field: 'position',
	  bindingEvent: 'position',
	  allowBinding: true,
	  allowSetting: true,
	  settingEvent: 'position',
	  settingTriggersEvent: true,
	  triggerFnName: 'emitAndNotify',
	  allowGetting: true,
	  validKeys: ['x', 'y'],
	  beforeGet: function beforeGet(ele) {
	    ele.updateCompoundBounds();
	  },
	  beforeSet: function beforeSet(eles, newPos) {
	    beforePositionSet(eles, newPos, false);
	  },
	  onSet: function onSet(eles) {
	    eles.dirtyCompoundBoundsCache();
	  },
	  canSet: function canSet(ele) {
	    return !ele.locked();
	  }
	};
	fn$4 = elesfn$c = {
	  position: define.data(positionDef),
	  // position but no notification to renderer
	  silentPosition: define.data(extend({}, positionDef, {
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: false,
	    beforeSet: function beforeSet(eles, newPos) {
	      beforePositionSet(eles, newPos, true);
	    },
	    onSet: function onSet(eles) {
	      eles.dirtyCompoundBoundsCache();
	    }
	  })),
	  positions: function positions(pos, silent) {
	    if (plainObject(pos)) {
	      if (silent) {
	        this.silentPosition(pos);
	      } else {
	        this.position(pos);
	      }
	    } else if (fn$6(pos)) {
	      var _fn = pos;
	      var cy = this.cy();
	      cy.startBatch();
	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var _pos = void 0;
	        if (_pos = _fn(ele, i)) {
	          if (silent) {
	            ele.silentPosition(_pos);
	          } else {
	            ele.position(_pos);
	          }
	        }
	      }
	      cy.endBatch();
	    }
	    return this; // chaining
	  },

	  silentPositions: function silentPositions(pos) {
	    return this.positions(pos, true);
	  },
	  shift: function shift(dim, val, silent) {
	    var delta;
	    if (plainObject(dim)) {
	      delta = {
	        x: number$1(dim.x) ? dim.x : 0,
	        y: number$1(dim.y) ? dim.y : 0
	      };
	      silent = val;
	    } else if (string(dim) && number$1(val)) {
	      delta = {
	        x: 0,
	        y: 0
	      };
	      delta[dim] = val;
	    }
	    if (delta != null) {
	      var cy = this.cy();
	      cy.startBatch();
	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];

	        // exclude any node that is a descendant of the calling collection
	        if (cy.hasCompoundNodes() && ele.isChild() && ele.ancestors().anySame(this)) {
	          continue;
	        }
	        var pos = ele.position();
	        var newPos = {
	          x: pos.x + delta.x,
	          y: pos.y + delta.y
	        };
	        if (silent) {
	          ele.silentPosition(newPos);
	        } else {
	          ele.position(newPos);
	        }
	      }
	      cy.endBatch();
	    }
	    return this;
	  },
	  silentShift: function silentShift(dim, val) {
	    if (plainObject(dim)) {
	      this.shift(dim, true);
	    } else if (string(dim) && number$1(val)) {
	      this.shift(dim, val, true);
	    }
	    return this;
	  },
	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function renderedPosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = plainObject(dim) ? dim : undefined;
	    var setting = rpos !== undefined || val !== undefined && string(dim);
	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele = this[i];
	          if (val !== undefined) {
	            // set one dimension
	            _ele.position(dim, (val - pan[dim]) / zoom);
	          } else if (rpos !== undefined) {
	            // set whole position
	            _ele.position(renderedToModelPosition(rpos, zoom, pan));
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();
	        rpos = modelToRenderedPosition(pos, zoom, pan);
	        if (dim === undefined) {
	          // then return the whole rendered position
	          return rpos;
	        } else {
	          // then return the specified dimension
	          return rpos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  // get/set the position relative to the parent
	  relativePosition: function relativePosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = plainObject(dim) ? dim : undefined;
	    var setting = ppos !== undefined || val !== undefined && string(dim);
	    var hasCompoundNodes = cy.hasCompoundNodes();
	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele2 = this[i];
	          var parent = hasCompoundNodes ? _ele2.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;
	          if (hasParent) {
	            parent = parent[0];
	          }
	          var origin = relativeToParent ? parent.position() : {
	            x: 0,
	            y: 0
	          };
	          if (val !== undefined) {
	            // set one dimension
	            _ele2.position(dim, val + origin[dim]);
	          } else if (ppos !== undefined) {
	            // set whole position
	            _ele2.position({
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            });
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();
	        var _parent = hasCompoundNodes ? ele.parent() : null;
	        var _hasParent = _parent && _parent.length > 0;
	        var _relativeToParent = _hasParent;
	        if (_hasParent) {
	          _parent = _parent[0];
	        }
	        var _origin = _relativeToParent ? _parent.position() : {
	          x: 0,
	          y: 0
	        };
	        ppos = {
	          x: pos.x - _origin.x,
	          y: pos.y - _origin.y
	        };
	        if (dim === undefined) {
	          // then return the whole rendered position
	          return ppos;
	        } else {
	          // then return the specified dimension
	          return ppos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  }
	};

	// aliases
	fn$4.modelPosition = fn$4.point = fn$4.position;
	fn$4.modelPositions = fn$4.points = fn$4.positions;
	fn$4.renderedPoint = fn$4.renderedPosition;
	fn$4.relativePoint = fn$4.relativePosition;
	var position = elesfn$c;

	var fn$3, elesfn$b;
	fn$3 = elesfn$b = {};
	elesfn$b.renderedBoundingBox = function (options) {
	  var bb = this.boundingBox(options);
	  var cy = this.cy();
	  var zoom = cy.zoom();
	  var pan = cy.pan();
	  var x1 = bb.x1 * zoom + pan.x;
	  var x2 = bb.x2 * zoom + pan.x;
	  var y1 = bb.y1 * zoom + pan.y;
	  var y2 = bb.y2 * zoom + pan.y;
	  return {
	    x1: x1,
	    x2: x2,
	    y1: y1,
	    y2: y2,
	    w: x2 - x1,
	    h: y2 - y1
	  };
	};
	elesfn$b.dirtyCompoundBoundsCache = function () {
	  var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	  var cy = this.cy();
	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  }
	  this.forEachUp(function (ele) {
	    if (ele.isParent()) {
	      var _p = ele._private;
	      _p.compoundBoundsClean = false;
	      _p.bbCache = null;
	      if (!silent) {
	        ele.emitAndNotify('bounds');
	      }
	    }
	  });
	  return this;
	};
	elesfn$b.updateCompoundBounds = function () {
	  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	  var cy = this.cy();

	  // not possible to do on non-compound graphs or with the style disabled
	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  }

	  // save cycles when batching -- but bounds will be stale (or not exist yet)
	  if (!force && cy.batching()) {
	    return this;
	  }
	  function update(parent) {
	    if (!parent.isParent()) {
	      return;
	    }
	    var _p = parent._private;
	    var children = parent.children();
	    var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
	    var min = {
	      width: {
	        val: parent.pstyle('min-width').pfValue,
	        left: parent.pstyle('min-width-bias-left'),
	        right: parent.pstyle('min-width-bias-right')
	      },
	      height: {
	        val: parent.pstyle('min-height').pfValue,
	        top: parent.pstyle('min-height-bias-top'),
	        bottom: parent.pstyle('min-height-bias-bottom')
	      }
	    };
	    var bb = children.boundingBox({
	      includeLabels: includeLabels,
	      includeOverlays: false,
	      // updating the compound bounds happens outside of the regular
	      // cache cycle (i.e. before fired events)
	      useCache: false
	    });
	    var pos = _p.position;

	    // if children take up zero area then keep position and fall back on stylesheet w/h
	    if (bb.w === 0 || bb.h === 0) {
	      bb = {
	        w: parent.pstyle('width').pfValue,
	        h: parent.pstyle('height').pfValue
	      };
	      bb.x1 = pos.x - bb.w / 2;
	      bb.x2 = pos.x + bb.w / 2;
	      bb.y1 = pos.y - bb.h / 2;
	      bb.y2 = pos.y + bb.h / 2;
	    }
	    function computeBiasValues(propDiff, propBias, propBiasComplement) {
	      var biasDiff = 0;
	      var biasComplementDiff = 0;
	      var biasTotal = propBias + propBiasComplement;
	      if (propDiff > 0 && biasTotal > 0) {
	        biasDiff = propBias / biasTotal * propDiff;
	        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
	      }
	      return {
	        biasDiff: biasDiff,
	        biasComplementDiff: biasComplementDiff
	      };
	    }
	    function computePaddingValues(width, height, paddingObject, relativeTo) {
	      // Assuming percentage is number from 0 to 1
	      if (paddingObject.units === '%') {
	        switch (relativeTo) {
	          case 'width':
	            return width > 0 ? paddingObject.pfValue * width : 0;
	          case 'height':
	            return height > 0 ? paddingObject.pfValue * height : 0;
	          case 'average':
	            return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;
	          case 'min':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;
	          case 'max':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;
	          default:
	            return 0;
	        }
	      } else if (paddingObject.units === 'px') {
	        return paddingObject.pfValue;
	      } else {
	        return 0;
	      }
	    }
	    var leftVal = min.width.left.value;
	    if (min.width.left.units === 'px' && min.width.val > 0) {
	      leftVal = leftVal * 100 / min.width.val;
	    }
	    var rightVal = min.width.right.value;
	    if (min.width.right.units === 'px' && min.width.val > 0) {
	      rightVal = rightVal * 100 / min.width.val;
	    }
	    var topVal = min.height.top.value;
	    if (min.height.top.units === 'px' && min.height.val > 0) {
	      topVal = topVal * 100 / min.height.val;
	    }
	    var bottomVal = min.height.bottom.value;
	    if (min.height.bottom.units === 'px' && min.height.val > 0) {
	      bottomVal = bottomVal * 100 / min.height.val;
	    }
	    var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
	    var diffLeft = widthBiasDiffs.biasDiff;
	    var diffRight = widthBiasDiffs.biasComplementDiff;
	    var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
	    var diffTop = heightBiasDiffs.biasDiff;
	    var diffBottom = heightBiasDiffs.biasComplementDiff;
	    _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
	    _p.autoWidth = Math.max(bb.w, min.width.val);
	    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
	    _p.autoHeight = Math.max(bb.h, min.height.val);
	    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
	  }
	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var _p = ele._private;
	    if (!_p.compoundBoundsClean || force) {
	      update(ele);
	      if (!cy.batching()) {
	        _p.compoundBoundsClean = true;
	      }
	    }
	  }
	  return this;
	};
	var noninf = function noninf(x) {
	  if (x === Infinity || x === -Infinity) {
	    return 0;
	  }
	  return x;
	};
	var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
	  // don't update with zero area boxes
	  if (x2 - x1 === 0 || y2 - y1 === 0) {
	    return;
	  }

	  // don't update with null dim
	  if (x1 == null || y1 == null || x2 == null || y2 == null) {
	    return;
	  }
	  b.x1 = x1 < b.x1 ? x1 : b.x1;
	  b.x2 = x2 > b.x2 ? x2 : b.x2;
	  b.y1 = y1 < b.y1 ? y1 : b.y1;
	  b.y2 = y2 > b.y2 ? y2 : b.y2;
	  b.w = b.x2 - b.x1;
	  b.h = b.y2 - b.y1;
	};
	var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
	  if (b2 == null) {
	    return b;
	  }
	  return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
	};
	var prefixedProperty = function prefixedProperty(obj, field, prefix) {
	  return getPrefixedProperty(obj, field, prefix);
	};
	var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }
	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var halfArW = rstyle.arrowWidth / 2;
	  var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
	  var x;
	  var y;
	  if (arrowType !== 'none') {
	    if (prefix === 'source') {
	      x = rstyle.srcX;
	      y = rstyle.srcY;
	    } else if (prefix === 'target') {
	      x = rstyle.tgtX;
	      y = rstyle.tgtY;
	    } else {
	      x = rstyle.midX;
	      y = rstyle.midY;
	    }

	    // always store the individual arrow bounds
	    var bbs = _p.arrowBounds = _p.arrowBounds || {};
	    var bb = bbs[prefix] = bbs[prefix] || {};
	    bb.x1 = x - halfArW;
	    bb.y1 = y - halfArW;
	    bb.x2 = x + halfArW;
	    bb.y2 = y + halfArW;
	    bb.w = bb.x2 - bb.x1;
	    bb.h = bb.y2 - bb.y1;
	    expandBoundingBox(bb, 1);
	    updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
	  }
	};
	var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }
	  var prefixDash;
	  if (prefix) {
	    prefixDash = prefix + '-';
	  } else {
	    prefixDash = '';
	  }
	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var label = ele.pstyle(prefixDash + 'label').strValue;
	  if (label) {
	    var halign = ele.pstyle('text-halign');
	    var valign = ele.pstyle('text-valign');
	    var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
	    var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
	    var labelX = prefixedProperty(rstyle, 'labelX', prefix);
	    var labelY = prefixedProperty(rstyle, 'labelY', prefix);
	    var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
	    var isEdge = ele.isEdge();
	    var rotation = ele.pstyle(prefixDash + 'text-rotation');
	    var outlineWidth = ele.pstyle('text-outline-width').pfValue;
	    var borderWidth = ele.pstyle('text-border-width').pfValue;
	    var halfBorderWidth = borderWidth / 2;
	    var padding = ele.pstyle('text-background-padding').pfValue;
	    var marginOfError = 2; // expand to work around browser dimension inaccuracies

	    var lh = labelHeight;
	    var lw = labelWidth;
	    var lw_2 = lw / 2;
	    var lh_2 = lh / 2;
	    var lx1, lx2, ly1, ly2;
	    if (isEdge) {
	      lx1 = labelX - lw_2;
	      lx2 = labelX + lw_2;
	      ly1 = labelY - lh_2;
	      ly2 = labelY + lh_2;
	    } else {
	      switch (halign.value) {
	        case 'left':
	          lx1 = labelX - lw;
	          lx2 = labelX;
	          break;
	        case 'center':
	          lx1 = labelX - lw_2;
	          lx2 = labelX + lw_2;
	          break;
	        case 'right':
	          lx1 = labelX;
	          lx2 = labelX + lw;
	          break;
	      }
	      switch (valign.value) {
	        case 'top':
	          ly1 = labelY - lh;
	          ly2 = labelY;
	          break;
	        case 'center':
	          ly1 = labelY - lh_2;
	          ly2 = labelY + lh_2;
	          break;
	        case 'bottom':
	          ly1 = labelY;
	          ly2 = labelY + lh;
	          break;
	      }
	    }

	    // shift by margin and expand by outline and border
	    lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
	    lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
	    ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
	    ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;

	    // always store the unrotated label bounds separately
	    var bbPrefix = prefix || 'main';
	    var bbs = _p.labelBounds;
	    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
	    bb.x1 = lx1;
	    bb.y1 = ly1;
	    bb.x2 = lx2;
	    bb.y2 = ly2;
	    bb.w = lx2 - lx1;
	    bb.h = ly2 - ly1;
	    var isAutorotate = isEdge && rotation.strValue === 'autorotate';
	    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;
	    if (isAutorotate || isPfValue) {
	      var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta);

	      // rotation point (default value for center-center)
	      var xo = (lx1 + lx2) / 2;
	      var yo = (ly1 + ly2) / 2;
	      if (!isEdge) {
	        switch (halign.value) {
	          case 'left':
	            xo = lx2;
	            break;
	          case 'right':
	            xo = lx1;
	            break;
	        }
	        switch (valign.value) {
	          case 'top':
	            yo = ly2;
	            break;
	          case 'bottom':
	            yo = ly1;
	            break;
	        }
	      }
	      var rotate = function rotate(x, y) {
	        x = x - xo;
	        y = y - yo;
	        return {
	          x: x * cos - y * sin + xo,
	          y: x * sin + y * cos + yo
	        };
	      };
	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);
	      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	    }
	    var bbPrefixRot = bbPrefix + 'Rot';
	    var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
	    bbRot.x1 = lx1;
	    bbRot.y1 = ly1;
	    bbRot.x2 = lx2;
	    bbRot.y2 = ly2;
	    bbRot.w = lx2 - lx1;
	    bbRot.h = ly2 - ly1;
	    updateBounds(bounds, lx1, ly1, lx2, ly2);
	    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
	  }
	  return bounds;
	};
	var updateBoundsFromOutline = function updateBoundsFromOutline(bounds, ele) {
	  if (ele.cy().headless()) {
	    return;
	  }
	  var outlineOpacity = ele.pstyle('outline-opacity').value;
	  var outlineWidth = ele.pstyle('outline-width').value;
	  if (outlineOpacity > 0 && outlineWidth > 0) {
	    var outlineOffset = ele.pstyle('outline-offset').value;
	    var nodeShape = ele.pstyle('shape').value;
	    var outlineSize = outlineWidth + outlineOffset;
	    var scaleX = (bounds.w + outlineSize * 2) / bounds.w;
	    var scaleY = (bounds.h + outlineSize * 2) / bounds.h;
	    var xOffset = 0;
	    var yOffset = 0;
	    if (["diamond", "pentagon", "round-triangle"].includes(nodeShape)) {
	      scaleX = (bounds.w + outlineSize * 2.4) / bounds.w;
	      yOffset = -outlineSize / 3.6;
	    } else if (["concave-hexagon", "rhomboid", "right-rhomboid"].includes(nodeShape)) {
	      scaleX = (bounds.w + outlineSize * 2.4) / bounds.w;
	    } else if (nodeShape === "star") {
	      scaleX = (bounds.w + outlineSize * 2.8) / bounds.w;
	      scaleY = (bounds.h + outlineSize * 2.6) / bounds.h;
	      yOffset = -outlineSize / 3.8;
	    } else if (nodeShape === "triangle") {
	      scaleX = (bounds.w + outlineSize * 2.8) / bounds.w;
	      scaleY = (bounds.h + outlineSize * 2.4) / bounds.h;
	      yOffset = -outlineSize / 1.4;
	    } else if (nodeShape === "vee") {
	      scaleX = (bounds.w + outlineSize * 4.4) / bounds.w;
	      scaleY = (bounds.h + outlineSize * 3.8) / bounds.h;
	      yOffset = -outlineSize * .5;
	    }
	    var hDelta = bounds.h * scaleY - bounds.h;
	    var wDelta = bounds.w * scaleX - bounds.w;
	    expandBoundingBoxSides(bounds, [Math.ceil(hDelta / 2), Math.ceil(wDelta / 2)]);
	    if (xOffset != 0 || yOffset !== 0) {
	      var oBounds = shiftBoundingBox(bounds, xOffset, yOffset);
	      updateBoundingBox(bounds, oBounds);
	    }
	  }
	};

	// get the bounding box of the elements (in raw model position)
	var boundingBoxImpl = function boundingBoxImpl(ele, options) {
	  var cy = ele._private.cy;
	  var styleEnabled = cy.styleEnabled();
	  var headless = cy.headless();
	  var bounds = makeBoundingBox();
	  var _p = ele._private;
	  var isNode = ele.isNode();
	  var isEdge = ele.isEdge();
	  var ex1, ex2, ey1, ey2; // extrema of body / lines
	  var x, y; // node pos
	  var rstyle = _p.rstyle;
	  var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : [0];

	  // must use `display` prop only, as reading `compound.width()` causes recursion
	  // (other factors like width values will be considered later in this function anyway)
	  var isDisplayed = function isDisplayed(ele) {
	    return ele.pstyle('display').value !== 'none';
	  };
	  var displayed = !styleEnabled || isDisplayed(ele)

	  // must take into account connected nodes b/c of implicit edge hiding on display:none node
	  && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));
	  if (displayed) {
	    // displayed suffices, since we will find zero area eles anyway
	    var overlayOpacity = 0;
	    var overlayPadding = 0;
	    if (styleEnabled && options.includeOverlays) {
	      overlayOpacity = ele.pstyle('overlay-opacity').value;
	      if (overlayOpacity !== 0) {
	        overlayPadding = ele.pstyle('overlay-padding').value;
	      }
	    }
	    var underlayOpacity = 0;
	    var underlayPadding = 0;
	    if (styleEnabled && options.includeUnderlays) {
	      underlayOpacity = ele.pstyle('underlay-opacity').value;
	      if (underlayOpacity !== 0) {
	        underlayPadding = ele.pstyle('underlay-padding').value;
	      }
	    }
	    var padding = Math.max(overlayPadding, underlayPadding);
	    var w = 0;
	    var wHalf = 0;
	    if (styleEnabled) {
	      w = ele.pstyle('width').pfValue;
	      wHalf = w / 2;
	    }
	    if (isNode && options.includeNodes) {
	      var pos = ele.position();
	      x = pos.x;
	      y = pos.y;
	      var _w = ele.outerWidth();
	      var halfW = _w / 2;
	      var h = ele.outerHeight();
	      var halfH = h / 2;

	      // handle node dimensions
	      /////////////////////////

	      ex1 = x - halfW;
	      ex2 = x + halfW;
	      ey1 = y - halfH;
	      ey2 = y + halfH;
	      updateBounds(bounds, ex1, ey1, ex2, ey2);
	      if (styleEnabled && options.includeOutlines) {
	        updateBoundsFromOutline(bounds, ele);
	      }
	    } else if (isEdge && options.includeEdges) {
	      if (styleEnabled && !headless) {
	        var curveStyle = ele.pstyle('curve-style').strValue;

	        // handle edge dimensions (rough box estimate)
	        //////////////////////////////////////////////

	        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
	        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;
	        updateBounds(bounds, ex1, ey1, ex2, ey2);

	        // precise edges
	        ////////////////

	        if (curveStyle === 'haystack') {
	          var hpts = rstyle.haystackPts;
	          if (hpts && hpts.length === 2) {
	            ex1 = hpts[0].x;
	            ey1 = hpts[0].y;
	            ex2 = hpts[1].x;
	            ey2 = hpts[1].y;
	            if (ex1 > ex2) {
	              var temp = ex1;
	              ex1 = ex2;
	              ex2 = temp;
	            }
	            if (ey1 > ey2) {
	              var _temp = ey1;
	              ey1 = ey2;
	              ey2 = _temp;
	            }
	            updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
	          }
	        } else if (curveStyle === 'bezier' || curveStyle === 'unbundled-bezier' || curveStyle.endsWith('segments') || curveStyle.endsWith('taxi')) {
	          var pts;
	          switch (curveStyle) {
	            case 'bezier':
	            case 'unbundled-bezier':
	              pts = rstyle.bezierPts;
	              break;
	            case 'segments':
	            case 'taxi':
	            case 'round-segments':
	            case 'round-taxi':
	              pts = rstyle.linePts;
	              break;
	          }
	          if (pts != null) {
	            for (var j = 0; j < pts.length; j++) {
	              var pt = pts[j];
	              ex1 = pt.x - wHalf;
	              ex2 = pt.x + wHalf;
	              ey1 = pt.y - wHalf;
	              ey2 = pt.y + wHalf;
	              updateBounds(bounds, ex1, ey1, ex2, ey2);
	            }
	          }
	        } // bezier-like or segment-like edge
	      } else {
	        // headless or style disabled

	        // fallback on source and target positions
	        //////////////////////////////////////////

	        var n1 = ele.source();
	        var n1pos = n1.position();
	        var n2 = ele.target();
	        var n2pos = n2.position();
	        ex1 = n1pos.x;
	        ex2 = n2pos.x;
	        ey1 = n1pos.y;
	        ey2 = n2pos.y;
	        if (ex1 > ex2) {
	          var _temp2 = ex1;
	          ex1 = ex2;
	          ex2 = _temp2;
	        }
	        if (ey1 > ey2) {
	          var _temp3 = ey1;
	          ey1 = ey2;
	          ey2 = _temp3;
	        }

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;
	        updateBounds(bounds, ex1, ey1, ex2, ey2);
	      } // headless or style disabled
	    } // edges

	    // handle edge arrow size
	    /////////////////////////

	    if (styleEnabled && options.includeEdges && isEdge) {
	      updateBoundsFromArrow(bounds, ele, 'mid-source');
	      updateBoundsFromArrow(bounds, ele, 'mid-target');
	      updateBoundsFromArrow(bounds, ele, 'source');
	      updateBoundsFromArrow(bounds, ele, 'target');
	    }

	    // ghost
	    ////////

	    if (styleEnabled) {
	      var ghost = ele.pstyle('ghost').value === 'yes';
	      if (ghost) {
	        var gx = ele.pstyle('ghost-offset-x').pfValue;
	        var gy = ele.pstyle('ghost-offset-y').pfValue;
	        updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
	      }
	    }

	    // always store the body bounds separately from the labels
	    var bbBody = _p.bodyBounds = _p.bodyBounds || {};
	    assignBoundingBox(bbBody, bounds);
	    expandBoundingBoxSides(bbBody, manualExpansion);
	    expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies

	    // overlay
	    //////////

	    if (styleEnabled) {
	      ex1 = bounds.x1;
	      ex2 = bounds.x2;
	      ey1 = bounds.y1;
	      ey2 = bounds.y2;
	      updateBounds(bounds, ex1 - padding, ey1 - padding, ex2 + padding, ey2 + padding);
	    }

	    // always store the body bounds separately from the labels
	    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
	    assignBoundingBox(bbOverlay, bounds);
	    expandBoundingBoxSides(bbOverlay, manualExpansion);
	    expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies

	    // handle label dimensions
	    //////////////////////////

	    var bbLabels = _p.labelBounds = _p.labelBounds || {};
	    if (bbLabels.all != null) {
	      clearBoundingBox(bbLabels.all);
	    } else {
	      bbLabels.all = makeBoundingBox();
	    }
	    if (styleEnabled && options.includeLabels) {
	      if (options.includeMainLabels) {
	        updateBoundsFromLabel(bounds, ele, null);
	      }
	      if (isEdge) {
	        if (options.includeSourceLabels) {
	          updateBoundsFromLabel(bounds, ele, 'source');
	        }
	        if (options.includeTargetLabels) {
	          updateBoundsFromLabel(bounds, ele, 'target');
	        }
	      }
	    } // style enabled for labels
	  } // if displayed

	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);
	  if (bounds.w > 0 && bounds.h > 0 && displayed) {
	    expandBoundingBoxSides(bounds, manualExpansion);

	    // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides
	    expandBoundingBox(bounds, 1);
	  }
	  return bounds;
	};
	var getKey = function getKey(opts) {
	  var i = 0;
	  var tf = function tf(val) {
	    return (val ? 1 : 0) << i++;
	  };
	  var key = 0;
	  key += tf(opts.incudeNodes);
	  key += tf(opts.includeEdges);
	  key += tf(opts.includeLabels);
	  key += tf(opts.includeMainLabels);
	  key += tf(opts.includeSourceLabels);
	  key += tf(opts.includeTargetLabels);
	  key += tf(opts.includeOverlays);
	  key += tf(opts.includeOutlines);
	  return key;
	};
	var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
	  if (ele.isEdge()) {
	    var p1 = ele.source().position();
	    var p2 = ele.target().position();
	    var r = function r(x) {
	      return Math.round(x);
	    };
	    return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
	  } else {
	    return 0;
	  }
	};
	var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
	  var _p = ele._private;
	  var bb;
	  var isEdge = ele.isEdge();
	  var key = opts == null ? defBbOptsKey : getKey(opts);
	  var usingDefOpts = key === defBbOptsKey;
	  var currPosKey = getBoundingBoxPosKey(ele);
	  var isPosKeySame = _p.bbCachePosKey === currPosKey;
	  var useCache = opts.useCache && isPosKeySame;
	  var isDirty = function isDirty(ele) {
	    return ele._private.bbCache == null || ele._private.styleDirty;
	  };
	  var needRecalc = !useCache || isDirty(ele) || isEdge && isDirty(ele.source()) || isDirty(ele.target());
	  if (needRecalc) {
	    if (!isPosKeySame) {
	      ele.recalculateRenderedStyle(useCache);
	    }
	    bb = boundingBoxImpl(ele, defBbOpts);
	    _p.bbCache = bb;
	    _p.bbCachePosKey = currPosKey;
	  } else {
	    bb = _p.bbCache;
	  }

	  // not using def opts => need to build up bb from combination of sub bbs
	  if (!usingDefOpts) {
	    var isNode = ele.isNode();
	    bb = makeBoundingBox();
	    if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
	      if (opts.includeOverlays) {
	        updateBoundsFromBox(bb, _p.overlayBounds);
	      } else {
	        updateBoundsFromBox(bb, _p.bodyBounds);
	      }
	    }
	    if (opts.includeLabels) {
	      if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {
	        updateBoundsFromBox(bb, _p.labelBounds.all);
	      } else {
	        if (opts.includeMainLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.mainRot);
	        }
	        if (opts.includeSourceLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
	        }
	        if (opts.includeTargetLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.targetRot);
	        }
	      }
	    }
	    bb.w = bb.x2 - bb.x1;
	    bb.h = bb.y2 - bb.y1;
	  }
	  return bb;
	};
	var defBbOpts = {
	  includeNodes: true,
	  includeEdges: true,
	  includeLabels: true,
	  includeMainLabels: true,
	  includeSourceLabels: true,
	  includeTargetLabels: true,
	  includeOverlays: true,
	  includeUnderlays: true,
	  includeOutlines: true,
	  useCache: true
	};
	var defBbOptsKey = getKey(defBbOpts);
	var filledBbOpts = defaults$g(defBbOpts);
	elesfn$b.boundingBox = function (options) {
	  var bounds;

	  // the main usecase is ele.boundingBox() for a single element with no/def options
	  // specified s.t. the cache is used, so check for this case to make it faster by
	  // avoiding the overhead of the rest of the function
	  if (this.length === 1 && this[0]._private.bbCache != null && !this[0]._private.styleDirty && (options === undefined || options.useCache === undefined || options.useCache === true)) {
	    if (options === undefined) {
	      options = defBbOpts;
	    } else {
	      options = filledBbOpts(options);
	    }
	    bounds = cachedBoundingBoxImpl(this[0], options);
	  } else {
	    bounds = makeBoundingBox();
	    options = options || defBbOpts;
	    var opts = filledBbOpts(options);
	    var eles = this;
	    var cy = eles.cy();
	    var styleEnabled = cy.styleEnabled();
	    if (styleEnabled) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var _p = ele._private;
	        var currPosKey = getBoundingBoxPosKey(ele);
	        var isPosKeySame = _p.bbCachePosKey === currPosKey;
	        var useCache = opts.useCache && isPosKeySame && !_p.styleDirty;
	        ele.recalculateRenderedStyle(useCache);
	      }
	    }
	    this.updateCompoundBounds(!options.useCache);
	    for (var _i = 0; _i < eles.length; _i++) {
	      var _ele = eles[_i];
	      updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
	    }
	  }
	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);
	  return bounds;
	};
	elesfn$b.dirtyBoundingBoxCache = function () {
	  for (var i = 0; i < this.length; i++) {
	    var _p = this[i]._private;
	    _p.bbCache = null;
	    _p.bbCachePosKey = null;
	    _p.bodyBounds = null;
	    _p.overlayBounds = null;
	    _p.labelBounds.all = null;
	    _p.labelBounds.source = null;
	    _p.labelBounds.target = null;
	    _p.labelBounds.main = null;
	    _p.labelBounds.sourceRot = null;
	    _p.labelBounds.targetRot = null;
	    _p.labelBounds.mainRot = null;
	    _p.arrowBounds.source = null;
	    _p.arrowBounds.target = null;
	    _p.arrowBounds['mid-source'] = null;
	    _p.arrowBounds['mid-target'] = null;
	  }
	  this.emitAndNotify('bounds');
	  return this;
	};

	// private helper to get bounding box for custom node positions
	// - good for perf in certain cases but currently requires dirtying the rendered style
	// - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
	// - try to use for only things like discrete layouts where the node position would change anyway
	elesfn$b.boundingBoxAt = function (fn) {
	  var nodes = this.nodes();
	  var cy = this.cy();
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var parents = cy.collection();
	  if (hasCompoundNodes) {
	    parents = nodes.filter(function (node) {
	      return node.isParent();
	    });
	    nodes = nodes.not(parents);
	  }
	  if (plainObject(fn)) {
	    var obj = fn;
	    fn = function fn() {
	      return obj;
	    };
	  }
	  var storeOldPos = function storeOldPos(node, i) {
	    return node._private.bbAtOldPos = fn(node, i);
	  };
	  var getOldPos = function getOldPos(node) {
	    return node._private.bbAtOldPos;
	  };
	  cy.startBatch();
	  nodes.forEach(storeOldPos).silentPositions(fn);
	  if (hasCompoundNodes) {
	    parents.dirtyCompoundBoundsCache();
	    parents.dirtyBoundingBoxCache();
	    parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
	  }

	  var bb = copyBoundingBox(this.boundingBox({
	    useCache: false
	  }));
	  nodes.silentPositions(getOldPos);
	  if (hasCompoundNodes) {
	    parents.dirtyCompoundBoundsCache();
	    parents.dirtyBoundingBoxCache();
	    parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
	  }

	  cy.endBatch();
	  return bb;
	};
	fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
	fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
	var bounds = elesfn$b;

	var fn$2, elesfn$a;
	fn$2 = elesfn$a = {};
	var defineDimFns = function defineDimFns(opts) {
	  opts.uppercaseName = capitalize(opts.name);
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = capitalize(opts.outerName);
	  fn$2[opts.name] = function dimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;
	    if (ele) {
	      if (styleEnabled) {
	        if (ele.isParent()) {
	          ele.updateCompoundBounds();
	          return _p[opts.autoName] || 0;
	        }
	        var d = ele.pstyle(opts.name);
	        switch (d.strValue) {
	          case 'label':
	            ele.recalculateRenderedStyle();
	            return _p.rstyle[opts.labelName] || 0;
	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };
	  fn$2['outer' + opts.uppercaseName] = function outerDimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;
	    if (ele) {
	      if (styleEnabled) {
	        var dim = ele[opts.name]();
	        var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side
	        var padding = 2 * ele.padding();
	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };
	  fn$2['rendered' + opts.uppercaseName] = function renderedDimImpl() {
	    var ele = this[0];
	    if (ele) {
	      var d = ele[opts.name]();
	      return d * this.cy().zoom();
	    }
	  };
	  fn$2['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
	    var ele = this[0];
	    if (ele) {
	      var od = ele[opts.outerName]();
	      return od * this.cy().zoom();
	    }
	  };
	};
	defineDimFns({
	  name: 'width'
	});
	defineDimFns({
	  name: 'height'
	});
	elesfn$a.padding = function () {
	  var ele = this[0];
	  var _p = ele._private;
	  if (ele.isParent()) {
	    ele.updateCompoundBounds();
	    if (_p.autoPadding !== undefined) {
	      return _p.autoPadding;
	    } else {
	      return ele.pstyle('padding').pfValue;
	    }
	  } else {
	    return ele.pstyle('padding').pfValue;
	  }
	};
	elesfn$a.paddedHeight = function () {
	  var ele = this[0];
	  return ele.height() + 2 * ele.padding();
	};
	elesfn$a.paddedWidth = function () {
	  var ele = this[0];
	  return ele.width() + 2 * ele.padding();
	};
	var widthHeight = elesfn$a;

	var ifEdge = function ifEdge(ele, getValue) {
	  if (ele.isEdge()) {
	    return getValue(ele);
	  }
	};
	var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
	  if (ele.isEdge()) {
	    var cy = ele.cy();
	    return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
	  }
	};
	var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
	  if (ele.isEdge()) {
	    var cy = ele.cy();
	    var pan = cy.pan();
	    var zoom = cy.zoom();
	    return getPoints(ele).map(function (p) {
	      return modelToRenderedPosition(p, zoom, pan);
	    });
	  }
	};
	var controlPoints = function controlPoints(ele) {
	  return ele.renderer().getControlPoints(ele);
	};
	var segmentPoints = function segmentPoints(ele) {
	  return ele.renderer().getSegmentPoints(ele);
	};
	var sourceEndpoint = function sourceEndpoint(ele) {
	  return ele.renderer().getSourceEndpoint(ele);
	};
	var targetEndpoint = function targetEndpoint(ele) {
	  return ele.renderer().getTargetEndpoint(ele);
	};
	var midpoint = function midpoint(ele) {
	  return ele.renderer().getEdgeMidpoint(ele);
	};
	var pts = {
	  controlPoints: {
	    get: controlPoints,
	    mult: true
	  },
	  segmentPoints: {
	    get: segmentPoints,
	    mult: true
	  },
	  sourceEndpoint: {
	    get: sourceEndpoint
	  },
	  targetEndpoint: {
	    get: targetEndpoint
	  },
	  midpoint: {
	    get: midpoint
	  }
	};
	var renderedName = function renderedName(name) {
	  return 'rendered' + name[0].toUpperCase() + name.substr(1);
	};
	var edgePoints = Object.keys(pts).reduce(function (obj, name) {
	  var spec = pts[name];
	  var rName = renderedName(name);
	  obj[name] = function () {
	    return ifEdge(this, spec.get);
	  };
	  if (spec.mult) {
	    obj[rName] = function () {
	      return ifEdgeRenderedPositions(this, spec.get);
	    };
	  } else {
	    obj[rName] = function () {
	      return ifEdgeRenderedPosition(this, spec.get);
	    };
	  }
	  return obj;
	}, {});

	var dimensions = extend({}, position, bounds, widthHeight, edgePoints);

	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/

	var Event = function Event(src, props) {
	  this.recycle(src, props);
	};
	function returnFalse() {
	  return false;
	}
	function returnTrue() {
	  return true;
	}

	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	Event.prototype = {
	  instanceString: function instanceString() {
	    return 'event';
	  },
	  recycle: function recycle(src, props) {
	    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;
	    if (src != null && src.preventDefault) {
	      // Browser Event object
	      this.type = src.type;

	      // Events bubbling up the document may have been marked as prevented
	      // by a handler lower down the tree; reflect the correct value.
	      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
	    } else if (src != null && src.type) {
	      // Plain object containing all event details
	      props = src;
	    } else {
	      // Event string
	      this.type = src;
	    }

	    // Put explicitly provided properties onto the event object
	    if (props != null) {
	      // more efficient to manually copy fields we use
	      this.originalEvent = props.originalEvent;
	      this.type = props.type != null ? props.type : this.type;
	      this.cy = props.cy;
	      this.target = props.target;
	      this.position = props.position;
	      this.renderedPosition = props.renderedPosition;
	      this.namespace = props.namespace;
	      this.layout = props.layout;
	    }
	    if (this.cy != null && this.position != null && this.renderedPosition == null) {
	      // create a rendered position based on the passed position
	      var pos = this.position;
	      var zoom = this.cy.zoom();
	      var pan = this.cy.pan();
	      this.renderedPosition = {
	        x: pos.x * zoom + pan.x,
	        y: pos.y * zoom + pan.y
	      };
	    }

	    // Create a timestamp if incoming event doesn't have one
	    this.timeStamp = src && src.timeStamp || Date.now();
	  },
	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	    var e = this.originalEvent;
	    if (!e) {
	      return;
	    }

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	  },
	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	    var e = this.originalEvent;
	    if (!e) {
	      return;
	    }

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  },
	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },
	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")
	var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

	var defaults$8 = {
	  qualifierCompare: function qualifierCompare(q1, q2) {
	    return q1 === q2;
	  },
	  eventMatches: function eventMatches( /*context, listener, eventObj*/
	  ) {
	    return true;
	  },
	  addEventFields: function addEventFields( /*context, evt*/
	  ) {},
	  callbackContext: function callbackContext(context /*, listener, eventObj*/) {
	    return context;
	  },
	  beforeEmit: function beforeEmit( /* context, listener, eventObj */
	  ) {},
	  afterEmit: function afterEmit( /* context, listener, eventObj */
	  ) {},
	  bubble: function bubble( /*context*/
	  ) {
	    return false;
	  },
	  parent: function parent( /*context*/
	  ) {
	    return null;
	  },
	  context: null
	};
	var defaultsKeys = Object.keys(defaults$8);
	var emptyOpts = {};
	function Emitter() {
	  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyOpts;
	  var context = arguments.length > 1 ? arguments[1] : undefined;
	  // micro-optimisation vs Object.assign() -- reduces Element instantiation time
	  for (var i = 0; i < defaultsKeys.length; i++) {
	    var key = defaultsKeys[i];
	    this[key] = opts[key] || defaults$8[key];
	  }
	  this.context = context || this.context;
	  this.listeners = [];
	  this.emitting = 0;
	}
	var p = Emitter.prototype;
	var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
	  if (fn$6(qualifier)) {
	    callback = qualifier;
	    qualifier = null;
	  }
	  if (confOverrides) {
	    if (conf == null) {
	      conf = confOverrides;
	    } else {
	      conf = extend({}, conf, confOverrides);
	    }
	  }
	  var eventList = array(events) ? events : events.split(/\s+/);
	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];
	    if (emptyString(evt)) {
	      continue;
	    }
	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var ret = handler(self, evt, type, namespace, qualifier, callback, conf);
	      if (ret === false) {
	        break;
	      } // allow exiting early
	    }
	  }
	};

	var makeEventObj = function makeEventObj(self, obj) {
	  self.addEventFields(self.context, obj);
	  return new Event(obj.type, obj);
	};
	var forEachEventObj = function forEachEventObj(self, handler, events) {
	  if (event(events)) {
	    handler(self, events);
	    return;
	  } else if (plainObject(events)) {
	    handler(self, makeEventObj(self, events));
	    return;
	  }
	  var eventList = array(events) ? events : events.split(/\s+/);
	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];
	    if (emptyString(evt)) {
	      continue;
	    }
	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var eventObj = makeEventObj(self, {
	        type: type,
	        namespace: namespace,
	        target: self.context
	      });
	      handler(self, eventObj);
	    }
	  }
	};
	p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
	  forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
	    if (fn$6(callback)) {
	      self.listeners.push({
	        event: event,
	        // full event string
	        callback: callback,
	        // callback to run
	        type: type,
	        // the event type (e.g. 'click')
	        namespace: namespace,
	        // the event namespace (e.g. ".foo")
	        qualifier: qualifier,
	        // a restriction on whether to match this emitter
	        conf: conf // additional configuration
	      });
	    }
	  }, events, qualifier, callback, conf, confOverrides);
	  return this;
	};
	p.one = function (events, qualifier, callback, conf) {
	  return this.on(events, qualifier, callback, conf, {
	    one: true
	  });
	};
	p.removeListener = p.off = function (events, qualifier, callback, conf) {
	  var _this = this;
	  if (this.emitting !== 0) {
	    this.listeners = copyArray$1(this.listeners);
	  }
	  var listeners = this.listeners;
	  var _loop = function _loop(i) {
	    var listener = listeners[i];
	    forEachEvent(_this, function (self, event, type, namespace, qualifier, callback /*, conf*/) {
	      if ((listener.type === type || events === '*') && (!namespace && listener.namespace !== '.*' || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
	        listeners.splice(i, 1);
	        return false;
	      }
	    }, events, qualifier, callback, conf);
	  };
	  for (var i = listeners.length - 1; i >= 0; i--) {
	    _loop(i);
	  }
	  return this;
	};
	p.removeAllListeners = function () {
	  return this.removeListener('*');
	};
	p.emit = p.trigger = function (events, extraParams, manualCallback) {
	  var listeners = this.listeners;
	  var numListenersBeforeEmit = listeners.length;
	  this.emitting++;
	  if (!array(extraParams)) {
	    extraParams = [extraParams];
	  }
	  forEachEventObj(this, function (self, eventObj) {
	    if (manualCallback != null) {
	      listeners = [{
	        event: eventObj.event,
	        type: eventObj.type,
	        namespace: eventObj.namespace,
	        callback: manualCallback
	      }];
	      numListenersBeforeEmit = listeners.length;
	    }
	    var _loop2 = function _loop2(i) {
	      var listener = listeners[i];
	      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
	        var args = [eventObj];
	        if (extraParams != null) {
	          push(args, extraParams);
	        }
	        self.beforeEmit(self.context, listener, eventObj);
	        if (listener.conf && listener.conf.one) {
	          self.listeners = self.listeners.filter(function (l) {
	            return l !== listener;
	          });
	        }
	        var context = self.callbackContext(self.context, listener, eventObj);
	        var ret = listener.callback.apply(context, args);
	        self.afterEmit(self.context, listener, eventObj);
	        if (ret === false) {
	          eventObj.stopPropagation();
	          eventObj.preventDefault();
	        }
	      } // if listener matches
	    };
	    for (var i = 0; i < numListenersBeforeEmit; i++) {
	      _loop2(i);
	    } // for listener

	    if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
	      self.parent(self.context).emit(eventObj, extraParams);
	    }
	  }, events);
	  this.emitting--;
	  return this;
	};

	var emitterOptions$1 = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(ele, listener, eventObj) {
	    var selector = listener.qualifier;
	    if (selector != null) {
	      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
	    }
	    return true;
	  },
	  addEventFields: function addEventFields(ele, evt) {
	    evt.cy = ele.cy();
	    evt.target = ele;
	  },
	  callbackContext: function callbackContext(ele, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : ele;
	  },
	  beforeEmit: function beforeEmit(context, listener /*, eventObj*/) {
	    if (listener.conf && listener.conf.once) {
	      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
	    }
	  },
	  bubble: function bubble() {
	    return true;
	  },
	  parent: function parent(ele) {
	    return ele.isChild() ? ele.parent() : ele.cy();
	  }
	};
	var argSelector$1 = function argSelector(arg) {
	  if (string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};
	var elesfn$9 = {
	  createEmitter: function createEmitter() {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _p = ele._private;
	      if (!_p.emitter) {
	        _p.emitter = new Emitter(emitterOptions$1, ele);
	      }
	    }
	    return this;
	  },
	  emitter: function emitter() {
	    return this._private.emitter;
	  },
	  on: function on(events, selector, callback) {
	    var argSel = argSelector$1(selector);
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().on(events, argSel, callback);
	    }
	    return this;
	  },
	  removeListener: function removeListener(events, selector, callback) {
	    var argSel = argSelector$1(selector);
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().removeListener(events, argSel, callback);
	    }
	    return this;
	  },
	  removeAllListeners: function removeAllListeners() {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().removeAllListeners();
	    }
	    return this;
	  },
	  one: function one(events, selector, callback) {
	    var argSel = argSelector$1(selector);
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().one(events, argSel, callback);
	    }
	    return this;
	  },
	  once: function once(events, selector, callback) {
	    var argSel = argSelector$1(selector);
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().on(events, argSel, callback, {
	        once: true,
	        onceCollection: this
	      });
	    }
	  },
	  emit: function emit(events, extraParams) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().emit(events, extraParams);
	    }
	    return this;
	  },
	  emitAndNotify: function emitAndNotify(event, extraParams) {
	    // for internal use only
	    if (this.length === 0) {
	      return;
	    } // empty collections don't need to notify anything

	    // notify renderer
	    this.cy().notify(event, this);
	    this.emit(event, extraParams);
	    return this;
	  }
	};
	define.eventAliasesOn(elesfn$9);

	var elesfn$8 = {
	  nodes: function nodes(selector) {
	    return this.filter(function (ele) {
	      return ele.isNode();
	    }).filter(selector);
	  },
	  edges: function edges(selector) {
	    return this.filter(function (ele) {
	      return ele.isEdge();
	    }).filter(selector);
	  },
	  // internal helper to get nodes and edges as separate collections with single iteration over elements
	  byGroup: function byGroup() {
	    var nodes = this.spawn();
	    var edges = this.spawn();
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      if (ele.isNode()) {
	        nodes.push(ele);
	      } else {
	        edges.push(ele);
	      }
	    }
	    return {
	      nodes: nodes,
	      edges: edges
	    };
	  },
	  filter: function filter(_filter, thisArg) {
	    if (_filter === undefined) {
	      // check this first b/c it's the most common/performant case
	      return this;
	    } else if (string(_filter) || elementOrCollection(_filter)) {
	      return new Selector(_filter).filter(this);
	    } else if (fn$6(_filter)) {
	      var filterEles = this.spawn();
	      var eles = this;
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);
	        if (include) {
	          filterEles.push(ele);
	        }
	      }
	      return filterEles;
	    }
	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },

	  not: function not(toRemove) {
	    if (!toRemove) {
	      return this;
	    } else {
	      if (string(toRemove)) {
	        toRemove = this.filter(toRemove);
	      }
	      var elements = this.spawn();
	      for (var i = 0; i < this.length; i++) {
	        var element = this[i];
	        var remove = toRemove.has(element);
	        if (!remove) {
	          elements.push(element);
	        }
	      }
	      return elements;
	    }
	  },
	  absoluteComplement: function absoluteComplement() {
	    var cy = this.cy();
	    return cy.mutableElements().not(this);
	  },
	  intersect: function intersect(other) {
	    // if a selector is specified, then filter by it instead
	    if (string(other)) {
	      var selector = other;
	      return this.filter(selector);
	    }
	    var elements = this.spawn();
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    var colS = col1Smaller ? col1 : col2;
	    var colL = col1Smaller ? col2 : col1;
	    for (var i = 0; i < colS.length; i++) {
	      var ele = colS[i];
	      if (colL.has(ele)) {
	        elements.push(ele);
	      }
	    }
	    return elements;
	  },
	  xor: function xor(other) {
	    var cy = this._private.cy;
	    if (string(other)) {
	      other = cy.$(other);
	    }
	    var elements = this.spawn();
	    var col1 = this;
	    var col2 = other;
	    var add = function add(col, other) {
	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);
	        if (!inOther) {
	          elements.push(ele);
	        }
	      }
	    };
	    add(col1, col2);
	    add(col2, col1);
	    return elements;
	  },
	  diff: function diff(other) {
	    var cy = this._private.cy;
	    if (string(other)) {
	      other = cy.$(other);
	    }
	    var left = this.spawn();
	    var right = this.spawn();
	    var both = this.spawn();
	    var col1 = this;
	    var col2 = other;
	    var add = function add(col, other, retEles) {
	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);
	        if (inOther) {
	          both.merge(ele);
	        } else {
	          retEles.push(ele);
	        }
	      }
	    };
	    add(col1, col2, left);
	    add(col2, col1, right);
	    return {
	      left: left,
	      right: right,
	      both: both
	    };
	  },
	  add: function add(toAdd) {
	    var cy = this._private.cy;
	    if (!toAdd) {
	      return this;
	    }
	    if (string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }
	    var elements = this.spawnSelf();
	    for (var i = 0; i < toAdd.length; i++) {
	      var ele = toAdd[i];
	      var add = !this.has(ele);
	      if (add) {
	        elements.push(ele);
	      }
	    }
	    return elements;
	  },
	  // in place merge on calling collection
	  merge: function merge(toAdd) {
	    var _p = this._private;
	    var cy = _p.cy;
	    if (!toAdd) {
	      return this;
	    }
	    if (toAdd && string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }
	    var map = _p.map;
	    for (var i = 0; i < toAdd.length; i++) {
	      var toAddEle = toAdd[i];
	      var id = toAddEle._private.data.id;
	      var add = !map.has(id);
	      if (add) {
	        var index = this.length++;
	        this[index] = toAddEle;
	        map.set(id, {
	          ele: toAddEle,
	          index: index
	        });
	      }
	    }
	    return this; // chaining
	  },

	  unmergeAt: function unmergeAt(i) {
	    var ele = this[i];
	    var id = ele.id();
	    var _p = this._private;
	    var map = _p.map;

	    // remove ele
	    this[i] = undefined;
	    map["delete"](id);
	    var unmergedLastEle = i === this.length - 1;

	    // replace empty spot with last ele in collection
	    if (this.length > 1 && !unmergedLastEle) {
	      var lastEleI = this.length - 1;
	      var lastEle = this[lastEleI];
	      var lastEleId = lastEle._private.data.id;
	      this[lastEleI] = undefined;
	      this[i] = lastEle;
	      map.set(lastEleId, {
	        ele: lastEle,
	        index: i
	      });
	    }

	    // the collection is now 1 ele smaller
	    this.length--;
	    return this;
	  },
	  // remove single ele in place in calling collection
	  unmergeOne: function unmergeOne(ele) {
	    ele = ele[0];
	    var _p = this._private;
	    var id = ele._private.data.id;
	    var map = _p.map;
	    var entry = map.get(id);
	    if (!entry) {
	      return this; // no need to remove
	    }

	    var i = entry.index;
	    this.unmergeAt(i);
	    return this;
	  },
	  // remove eles in place on calling collection
	  unmerge: function unmerge(toRemove) {
	    var cy = this._private.cy;
	    if (!toRemove) {
	      return this;
	    }
	    if (toRemove && string(toRemove)) {
	      var selector = toRemove;
	      toRemove = cy.mutableElements().filter(selector);
	    }
	    for (var i = 0; i < toRemove.length; i++) {
	      this.unmergeOne(toRemove[i]);
	    }
	    return this; // chaining
	  },

	  unmergeBy: function unmergeBy(toRmFn) {
	    for (var i = this.length - 1; i >= 0; i--) {
	      var ele = this[i];
	      if (toRmFn(ele)) {
	        this.unmergeAt(i);
	      }
	    }
	    return this;
	  },
	  map: function map(mapFn, thisArg) {
	    var arr = [];
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
	      arr.push(ret);
	    }
	    return arr;
	  },
	  reduce: function reduce(fn, initialValue) {
	    var val = initialValue;
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      val = fn(val, eles[i], i, eles);
	    }
	    return val;
	  },
	  max: function max(valFn, thisArg) {
	    var max = -Infinity;
	    var maxEle;
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);
	      if (val > max) {
	        max = val;
	        maxEle = ele;
	      }
	    }
	    return {
	      value: max,
	      ele: maxEle
	    };
	  },
	  min: function min(valFn, thisArg) {
	    var min = Infinity;
	    var minEle;
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);
	      if (val < min) {
	        min = val;
	        minEle = ele;
	      }
	    }
	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	};

	// aliases
	var fn$1 = elesfn$8;
	fn$1['u'] = fn$1['|'] = fn$1['+'] = fn$1.union = fn$1.or = fn$1.add;
	fn$1['\\'] = fn$1['!'] = fn$1['-'] = fn$1.difference = fn$1.relativeComplement = fn$1.subtract = fn$1.not;
	fn$1['n'] = fn$1['&'] = fn$1['.'] = fn$1.and = fn$1.intersection = fn$1.intersect;
	fn$1['^'] = fn$1['(+)'] = fn$1['(-)'] = fn$1.symmetricDifference = fn$1.symdiff = fn$1.xor;
	fn$1.fnFilter = fn$1.filterFn = fn$1.stdFilter = fn$1.filter;
	fn$1.complement = fn$1.abscomp = fn$1.absoluteComplement;

	var elesfn$7 = {
	  isNode: function isNode() {
	    return this.group() === 'nodes';
	  },
	  isEdge: function isEdge() {
	    return this.group() === 'edges';
	  },
	  isLoop: function isLoop() {
	    return this.isEdge() && this.source()[0] === this.target()[0];
	  },
	  isSimple: function isSimple() {
	    return this.isEdge() && this.source()[0] !== this.target()[0];
	  },
	  group: function group() {
	    var ele = this[0];
	    if (ele) {
	      return ele._private.group;
	    }
	  }
	};

	/**
	 *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
	 *  and z-index (low to high).  These styles affect how this applies:
	 *
	 *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
	 *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
	 *      root to leaves of the compound graph.  The last drawn is `top`.
	 *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
	 *      `manual` ignores this convention and draws based on the `z-index` value setting.
	 *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
	 *      `z-index` will be drawn on top of an element with a lower `z-index`.
	 */
	var zIndexSort = function zIndexSort(a, b) {
	  var cy = a.cy();
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  function getDepth(ele) {
	    var style = ele.pstyle('z-compound-depth');
	    if (style.value === 'auto') {
	      return hasCompoundNodes ? ele.zDepth() : 0;
	    } else if (style.value === 'bottom') {
	      return -1;
	    } else if (style.value === 'top') {
	      return MAX_INT$1;
	    }
	    // 'orphan'
	    return 0;
	  }
	  var depthDiff = getDepth(a) - getDepth(b);
	  if (depthDiff !== 0) {
	    return depthDiff;
	  }
	  function getEleDepth(ele) {
	    var style = ele.pstyle('z-index-compare');
	    if (style.value === 'auto') {
	      return ele.isNode() ? 1 : 0;
	    }
	    // 'manual'
	    return 0;
	  }
	  var eleDiff = getEleDepth(a) - getEleDepth(b);
	  if (eleDiff !== 0) {
	    return eleDiff;
	  }
	  var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;
	  if (zDiff !== 0) {
	    return zDiff;
	  }
	  // compare indices in the core (order added to graph w/ last on top)
	  return a.poolIndex() - b.poolIndex();
	};

	var elesfn$6 = {
	  forEach: function forEach(fn, thisArg) {
	    if (fn$6(fn)) {
	      var N = this.length;
	      for (var i = 0; i < N; i++) {
	        var ele = this[i];
	        var ret = thisArg ? fn.apply(thisArg, [ele, i, this]) : fn(ele, i, this);
	        if (ret === false) {
	          break;
	        } // exit each early on return false
	      }
	    }

	    return this;
	  },
	  toArray: function toArray() {
	    var array = [];
	    for (var i = 0; i < this.length; i++) {
	      array.push(this[i]);
	    }
	    return array;
	  },
	  slice: function slice(start, end) {
	    var array = [];
	    var thisSize = this.length;
	    if (end == null) {
	      end = thisSize;
	    }
	    if (start == null) {
	      start = 0;
	    }
	    if (start < 0) {
	      start = thisSize + start;
	    }
	    if (end < 0) {
	      end = thisSize + end;
	    }
	    for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
	      array.push(this[i]);
	    }
	    return this.spawn(array);
	  },
	  size: function size() {
	    return this.length;
	  },
	  eq: function eq(i) {
	    return this[i] || this.spawn();
	  },
	  first: function first() {
	    return this[0] || this.spawn();
	  },
	  last: function last() {
	    return this[this.length - 1] || this.spawn();
	  },
	  empty: function empty() {
	    return this.length === 0;
	  },
	  nonempty: function nonempty() {
	    return !this.empty();
	  },
	  sort: function sort(sortFn) {
	    if (!fn$6(sortFn)) {
	      return this;
	    }
	    var sorted = this.toArray().sort(sortFn);
	    return this.spawn(sorted);
	  },
	  sortByZIndex: function sortByZIndex() {
	    return this.sort(zIndexSort);
	  },
	  zDepth: function zDepth() {
	    var ele = this[0];
	    if (!ele) {
	      return undefined;
	    }

	    // let cy = ele.cy();
	    var _p = ele._private;
	    var group = _p.group;
	    if (group === 'nodes') {
	      var depth = _p.data.parent ? ele.parents().size() : 0;
	      if (!ele.isParent()) {
	        return MAX_INT$1 - 1; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();
	      return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
	    }
	  }
	};

	elesfn$6.each = elesfn$6.forEach;
	var defineSymbolIterator = function defineSymbolIterator() {
	  var typeofUndef = "undefined" ;
	  var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef; // eslint-disable-line no-undef

	  if (isIteratorSupported) {
	    elesfn$6[Symbol.iterator] = function () {
	      var _this = this;
	      // eslint-disable-line no-undef
	      var entry = {
	        value: undefined,
	        done: false
	      };
	      var i = 0;
	      var length = this.length;
	      return _defineProperty$1({
	        next: function next() {
	          if (i < length) {
	            entry.value = _this[i++];
	          } else {
	            entry.value = undefined;
	            entry.done = true;
	          }
	          return entry;
	        }
	      }, Symbol.iterator, function () {
	        // eslint-disable-line no-undef
	        return this;
	      });
	    };
	  }
	};
	defineSymbolIterator();

	var getLayoutDimensionOptions = defaults$g({
	  nodeDimensionsIncludeLabels: false
	});
	var elesfn$5 = {
	  // Calculates and returns node dimensions { x, y } based on options given
	  layoutDimensions: function layoutDimensions(options) {
	    options = getLayoutDimensionOptions(options);
	    var dims;
	    if (!this.takesUpSpace()) {
	      dims = {
	        w: 0,
	        h: 0
	      };
	    } else if (options.nodeDimensionsIncludeLabels) {
	      var bbDim = this.boundingBox();
	      dims = {
	        w: bbDim.w,
	        h: bbDim.h
	      };
	    } else {
	      dims = {
	        w: this.outerWidth(),
	        h: this.outerHeight()
	      };
	    }

	    // sanitise the dimensions for external layouts (avoid division by zero)
	    if (dims.w === 0 || dims.h === 0) {
	      dims.w = dims.h = 1;
	    }
	    return dims;
	  },
	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function layoutPositions(layout, options, fn) {
	    var nodes = this.nodes().filter(function (n) {
	      return !n.isParent();
	    });
	    var cy = this.cy();
	    var layoutEles = options.eles; // nodes & edges
	    var getMemoizeKey = function getMemoizeKey(node) {
	      return node.id();
	    };
	    var fnMem = memoize$1(fn, getMemoizeKey); // memoized version of position function

	    layout.emit({
	      type: 'layoutstart',
	      layout: layout
	    });
	    layout.animations = [];
	    var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
	      var center = {
	        x: nodesBb.x1 + nodesBb.w / 2,
	        y: nodesBb.y1 + nodesBb.h / 2
	      };
	      var spacingVector = {
	        // scale from center of bounding box (not necessarily 0,0)
	        x: (pos.x - center.x) * spacing,
	        y: (pos.y - center.y) * spacing
	      };
	      return {
	        x: center.x + spacingVector.x,
	        y: center.y + spacingVector.y
	      };
	    };
	    var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;
	    var spacingBb = function spacingBb() {
	      if (!useSpacingFactor) {
	        return null;
	      }
	      var bb = makeBoundingBox();
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = fnMem(node, i);
	        expandBoundingBoxByPoint(bb, pos.x, pos.y);
	      }
	      return bb;
	    };
	    var bb = spacingBb();
	    var getFinalPos = memoize$1(function (node, i) {
	      var newPos = fnMem(node, i);
	      if (useSpacingFactor) {
	        var spacing = Math.abs(options.spacingFactor);
	        newPos = calculateSpacing(spacing, bb, newPos);
	      }
	      if (options.transform != null) {
	        newPos = options.transform(node, newPos);
	      }
	      return newPos;
	    }, getMemoizeKey);
	    if (options.animate) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var newPos = getFinalPos(node, i);
	        var animateNode = options.animateFilter == null || options.animateFilter(node, i);
	        if (animateNode) {
	          var ani = node.animation({
	            position: newPos,
	            duration: options.animationDuration,
	            easing: options.animationEasing
	          });
	          layout.animations.push(ani);
	        } else {
	          node.position(newPos);
	        }
	      }
	      if (options.fit) {
	        var fitAni = cy.animation({
	          fit: {
	            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
	            padding: options.padding
	          },
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });
	        layout.animations.push(fitAni);
	      } else if (options.zoom !== undefined && options.pan !== undefined) {
	        var zoomPanAni = cy.animation({
	          zoom: options.zoom,
	          pan: options.pan,
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });
	        layout.animations.push(zoomPanAni);
	      }
	      layout.animations.forEach(function (ani) {
	        return ani.play();
	      });
	      layout.one('layoutready', options.ready);
	      layout.emit({
	        type: 'layoutready',
	        layout: layout
	      });
	      Promise$1.all(layout.animations.map(function (ani) {
	        return ani.promise();
	      })).then(function () {
	        layout.one('layoutstop', options.stop);
	        layout.emit({
	          type: 'layoutstop',
	          layout: layout
	        });
	      });
	    } else {
	      nodes.positions(getFinalPos);
	      if (options.fit) {
	        cy.fit(options.eles, options.padding);
	      }
	      if (options.zoom != null) {
	        cy.zoom(options.zoom);
	      }
	      if (options.pan) {
	        cy.pan(options.pan);
	      }
	      layout.one('layoutready', options.ready);
	      layout.emit({
	        type: 'layoutready',
	        layout: layout
	      });
	      layout.one('layoutstop', options.stop);
	      layout.emit({
	        type: 'layoutstop',
	        layout: layout
	      });
	    }
	    return this; // chaining
	  },

	  layout: function layout(options) {
	    var cy = this.cy();
	    return cy.makeLayout(extend({}, options, {
	      eles: this
	    }));
	  }
	};

	// aliases:
	elesfn$5.createLayout = elesfn$5.makeLayout = elesfn$5.layout;

	function styleCache(key, fn, ele) {
	  var _p = ele._private;
	  var cache = _p.styleCache = _p.styleCache || [];
	  var val;
	  if ((val = cache[key]) != null) {
	    return val;
	  } else {
	    val = cache[key] = fn(ele);
	    return val;
	  }
	}
	function cacheStyleFunction(key, fn) {
	  key = hashString(key);
	  return function cachedStyleFunction(ele) {
	    return styleCache(key, fn, ele);
	  };
	}
	function cachePrototypeStyleFunction(key, fn) {
	  key = hashString(key);
	  var selfFn = function selfFn(ele) {
	    return fn.call(ele);
	  };
	  return function cachedPrototypeStyleFunction() {
	    var ele = this[0];
	    if (ele) {
	      return styleCache(key, selfFn, ele);
	    }
	  };
	}
	var elesfn$4 = {
	  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
	    var cy = this.cy();
	    var renderer = cy.renderer();
	    var styleEnabled = cy.styleEnabled();
	    if (renderer && styleEnabled) {
	      renderer.recalculateRenderedStyle(this, useCache);
	    }
	    return this;
	  },
	  dirtyStyleCache: function dirtyStyleCache() {
	    var cy = this.cy();
	    var dirty = function dirty(ele) {
	      return ele._private.styleCache = null;
	    };
	    if (cy.hasCompoundNodes()) {
	      var eles;
	      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
	      eles.merge(eles.connectedEdges());
	      eles.forEach(dirty);
	    } else {
	      this.forEach(function (ele) {
	        dirty(ele);
	        ele.connectedEdges().forEach(dirty);
	      });
	    }
	    return this;
	  },
	  // fully updates (recalculates) the style for the elements
	  updateStyle: function updateStyle(notifyRenderer) {
	    var cy = this._private.cy;
	    if (!cy.styleEnabled()) {
	      return this;
	    }
	    if (cy.batching()) {
	      var bEles = cy._private.batchStyleEles;
	      bEles.merge(this);
	      return this; // chaining and exit early when batching
	    }

	    var hasCompounds = cy.hasCompoundNodes();
	    var updatedEles = this;
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;
	    if (hasCompounds) {
	      // then add everything up and down for compound selector checks
	      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
	    }

	    // let changedEles = style.apply( updatedEles );
	    var changedEles = updatedEles;
	    if (notifyRenderer) {
	      changedEles.emitAndNotify('style'); // let renderer know we changed style
	    } else {
	      changedEles.emit('style'); // just fire the event
	    }

	    updatedEles.forEach(function (ele) {
	      return ele._private.styleDirty = true;
	    });
	    return this; // chaining
	  },

	  // private: clears dirty flag and recalculates style
	  cleanStyle: function cleanStyle() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return;
	    }
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      if (ele._private.styleDirty) {
	        // n.b. this flag should be set before apply() to avoid potential infinite recursion
	        ele._private.styleDirty = false;
	        cy.style().apply(ele);
	      }
	    }
	  },
	  // get the internal parsed style object for the specified property
	  parsedStyle: function parsedStyle(property) {
	    var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    var ele = this[0];
	    var cy = ele.cy();
	    if (!cy.styleEnabled()) {
	      return;
	    }
	    if (ele) {
	      this.cleanStyle();
	      var overriddenStyle = ele._private.style[property];
	      if (overriddenStyle != null) {
	        return overriddenStyle;
	      } else if (includeNonDefault) {
	        return cy.style().getDefaultProperty(property);
	      } else {
	        return null;
	      }
	    }
	  },
	  numericStyle: function numericStyle(property) {
	    var ele = this[0];
	    if (!ele.cy().styleEnabled()) {
	      return;
	    }
	    if (ele) {
	      var pstyle = ele.pstyle(property);
	      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
	    }
	  },
	  numericStyleUnits: function numericStyleUnits(property) {
	    var ele = this[0];
	    if (!ele.cy().styleEnabled()) {
	      return;
	    }
	    if (ele) {
	      return ele.pstyle(property).units;
	    }
	  },
	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedStyle: function renderedStyle(property) {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return this;
	    }
	    var ele = this[0];
	    if (ele) {
	      return cy.style().getRenderedStyle(ele, property);
	    }
	  },
	  // read the calculated css style of the element or override the style (via a bypass)
	  style: function style(name, value) {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return this;
	    }
	    var updateTransitions = false;
	    var style = cy.style();
	    if (plainObject(name)) {
	      // then extend the bypass
	      var props = name;
	      style.applyBypass(this, props, updateTransitions);
	      this.emitAndNotify('style'); // let the renderer know we've updated style
	    } else if (string(name)) {
	      if (value === undefined) {
	        // then get the property from the style
	        var ele = this[0];
	        if (ele) {
	          return style.getStylePropertyValue(ele, name);
	        } else {
	          // empty collection => can't get any value
	          return;
	        }
	      } else {
	        // then set the bypass with the property value
	        style.applyBypass(this, name, value, updateTransitions);
	        this.emitAndNotify('style'); // let the renderer know we've updated style
	      }
	    } else if (name === undefined) {
	      var _ele = this[0];
	      if (_ele) {
	        return style.getRawStyle(_ele);
	      } else {
	        // empty collection => can't get any value
	        return;
	      }
	    }
	    return this; // chaining
	  },

	  removeStyle: function removeStyle(names) {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return this;
	    }
	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;
	    if (names === undefined) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        style.removeAllBypasses(ele, updateTransitions);
	      }
	    } else {
	      names = names.split(/\s+/);
	      for (var _i = 0; _i < eles.length; _i++) {
	        var _ele2 = eles[_i];
	        style.removeBypasses(_ele2, names, updateTransitions);
	      }
	    }
	    this.emitAndNotify('style'); // let the renderer know we've updated style

	    return this; // chaining
	  },

	  show: function show() {
	    this.css('display', 'element');
	    return this; // chaining
	  },

	  hide: function hide() {
	    this.css('display', 'none');
	    return this; // chaining
	  },

	  effectiveOpacity: function effectiveOpacity() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return 1;
	    }
	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];
	    if (ele) {
	      var _p = ele._private;
	      var parentOpacity = ele.pstyle('opacity').value;
	      if (!hasCompoundNodes) {
	        return parentOpacity;
	      }
	      var parents = !_p.data.parent ? null : ele.parents();
	      if (parents) {
	        for (var i = 0; i < parents.length; i++) {
	          var parent = parents[i];
	          var opacity = parent.pstyle('opacity').value;
	          parentOpacity = opacity * parentOpacity;
	        }
	      }
	      return parentOpacity;
	    }
	  },
	  transparent: function transparent() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return false;
	    }
	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();
	    if (ele) {
	      if (!hasCompoundNodes) {
	        return ele.pstyle('opacity').value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },
	  backgrounding: function backgrounding() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return false;
	    }
	    var ele = this[0];
	    return ele._private.backgrounding ? true : false;
	  }
	};
	function checkCompound(ele, parentOk) {
	  var _p = ele._private;
	  var parents = _p.data.parent ? ele.parents() : null;
	  if (parents) {
	    for (var i = 0; i < parents.length; i++) {
	      var parent = parents[i];
	      if (!parentOk(parent)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	function defineDerivedStateFunction(specs) {
	  var ok = specs.ok;
	  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
	  var parentOk = specs.parentOk || specs.ok;
	  return function () {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return true;
	    }
	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();
	    if (ele) {
	      var _p = ele._private;
	      if (!ok(ele)) {
	        return false;
	      }
	      if (ele.isNode()) {
	        return !hasCompoundNodes || checkCompound(ele, parentOk);
	      } else {
	        var src = _p.source;
	        var tgt = _p.target;
	        return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
	      }
	    }
	  };
	}
	var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
	  return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
	});
	elesfn$4.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
	  ok: eleTakesUpSpace
	}));
	var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
	  return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
	});
	var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
	  return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
	});
	elesfn$4.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
	  ok: eleInteractive,
	  parentOk: parentInteractive,
	  edgeOkViaNode: eleTakesUpSpace
	}));
	elesfn$4.noninteractive = function () {
	  var ele = this[0];
	  if (ele) {
	    return !ele.interactive();
	  }
	};
	var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
	  return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
	});
	var edgeVisibleViaNode = eleTakesUpSpace;
	elesfn$4.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
	  ok: eleVisible,
	  edgeOkViaNode: edgeVisibleViaNode
	}));
	elesfn$4.hidden = function () {
	  var ele = this[0];
	  if (ele) {
	    return !ele.visible();
	  }
	};
	elesfn$4.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {
	  if (!this.cy().styleEnabled()) {
	    return false;
	  }
	  return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();
	});
	elesfn$4.bypass = elesfn$4.css = elesfn$4.style;
	elesfn$4.renderedCss = elesfn$4.renderedStyle;
	elesfn$4.removeBypass = elesfn$4.removeCss = elesfn$4.removeStyle;
	elesfn$4.pstyle = elesfn$4.parsedStyle;

	var elesfn$3 = {};
	function defineSwitchFunction(params) {
	  return function () {
	    var args = arguments;
	    var changedEles = [];

	    // e.g. cy.nodes().select( data, handler )
	    if (args.length === 2) {
	      var data = args[0];
	      var handler = args[1];
	      this.on(params.event, data, handler);
	    }

	    // e.g. cy.nodes().select( handler )
	    else if (args.length === 1 && fn$6(args[0])) {
	      var _handler = args[0];
	      this.on(params.event, _handler);
	    }

	    // e.g. cy.nodes().select()
	    // e.g. (private) cy.nodes().select(['tapselect'])
	    else if (args.length === 0 || args.length === 1 && array(args[0])) {
	      var addlEvents = args.length === 1 ? args[0] : null;
	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var able = !params.ableField || ele._private[params.ableField];
	        var changed = ele._private[params.field] != params.value;
	        if (params.overrideAble) {
	          var overrideAble = params.overrideAble(ele);
	          if (overrideAble !== undefined) {
	            able = overrideAble;
	            if (!overrideAble) {
	              return this;
	            } // to save cycles assume not able for all on override
	          }
	        }

	        if (able) {
	          ele._private[params.field] = params.value;
	          if (changed) {
	            changedEles.push(ele);
	          }
	        }
	      }
	      var changedColl = this.spawn(changedEles);
	      changedColl.updateStyle(); // change of state => possible change of style
	      changedColl.emit(params.event);
	      if (addlEvents) {
	        changedColl.emit(addlEvents);
	      }
	    }
	    return this;
	  };
	}
	function defineSwitchSet(params) {
	  elesfn$3[params.field] = function () {
	    var ele = this[0];
	    if (ele) {
	      if (params.overrideField) {
	        var val = params.overrideField(ele);
	        if (val !== undefined) {
	          return val;
	        }
	      }
	      return ele._private[params.field];
	    }
	  };
	  elesfn$3[params.on] = defineSwitchFunction({
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  });
	  elesfn$3[params.off] = defineSwitchFunction({
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  });
	}
	defineSwitchSet({
	  field: 'locked',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	});
	defineSwitchSet({
	  field: 'grabbable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autoungrabify() || ele.pannable() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	});
	defineSwitchSet({
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function overrideAble(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	});
	defineSwitchSet({
	  field: 'selectable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	});
	elesfn$3.deselect = elesfn$3.unselect;
	elesfn$3.grabbed = function () {
	  var ele = this[0];
	  if (ele) {
	    return ele._private.grabbed;
	  }
	};
	defineSwitchSet({
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	});
	defineSwitchSet({
	  field: 'pannable',
	  on: 'panify',
	  off: 'unpanify'
	});
	elesfn$3.inactive = function () {
	  var ele = this[0];
	  if (ele) {
	    return !ele._private.active;
	  }
	};

	var elesfn$2 = {};

	// DAG functions
	////////////////

	var defineDagExtremity = function defineDagExtremity(params) {
	  return function dagExtremityImpl(selector) {
	    var eles = this;
	    var ret = [];
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      if (!ele.isNode()) {
	        continue;
	      }
	      var disqualified = false;
	      var edges = ele.connectedEdges();
	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();
	        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
	          disqualified = true;
	          break;
	        }
	      }
	      if (!disqualified) {
	        ret.push(ele);
	      }
	    }
	    return this.spawn(ret, true).filter(selector);
	  };
	};
	var defineDagOneHop = function defineDagOneHop(params) {
	  return function (selector) {
	    var eles = this;
	    var oEles = [];
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      if (!ele.isNode()) {
	        continue;
	      }
	      var edges = ele.connectedEdges();
	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();
	        if (params.outgoing && src === ele) {
	          oEles.push(edge);
	          oEles.push(tgt);
	        } else if (params.incoming && tgt === ele) {
	          oEles.push(edge);
	          oEles.push(src);
	        }
	      }
	    }
	    return this.spawn(oEles, true).filter(selector);
	  };
	};
	var defineDagAllHops = function defineDagAllHops(params) {
	  return function (selector) {
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};
	    for (;;) {
	      var next = params.outgoing ? eles.outgoers() : eles.incomers();
	      if (next.length === 0) {
	        break;
	      } // done if none left

	      var newNext = false;
	      for (var i = 0; i < next.length; i++) {
	        var n = next[i];
	        var nid = n.id();
	        if (!sElesIds[nid]) {
	          sElesIds[nid] = true;
	          sEles.push(n);
	          newNext = true;
	        }
	      }
	      if (!newNext) {
	        break;
	      } // done if touched all outgoers already

	      eles = next;
	    }
	    return this.spawn(sEles, true).filter(selector);
	  };
	};
	elesfn$2.clearTraversalCache = function () {
	  for (var i = 0; i < this.length; i++) {
	    this[i]._private.traversalCache = null;
	  }
	};
	extend(elesfn$2, {
	  // get the root nodes in the DAG
	  roots: defineDagExtremity({
	    noIncomingEdges: true
	  }),
	  // get the leaf nodes in the DAG
	  leaves: defineDagExtremity({
	    noOutgoingEdges: true
	  }),
	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: cache(defineDagOneHop({
	    outgoing: true
	  }), 'outgoers'),
	  // aka DAG descendants
	  successors: defineDagAllHops({
	    outgoing: true
	  }),
	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: cache(defineDagOneHop({
	    incoming: true
	  }), 'incomers'),
	  // aka DAG ancestors
	  predecessors: defineDagAllHops({
	    incoming: true
	  })
	});

	// Neighbourhood functions
	//////////////////////////

	extend(elesfn$2, {
	  neighborhood: cache(function (selector) {
	    var elements = [];
	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++) {
	      // for all nodes
	      var node = nodes[i];
	      var connectedEdges = node.connectedEdges();

	      // for each connected edge, add the edge and the other node
	      for (var j = 0; j < connectedEdges.length; j++) {
	        var edge = connectedEdges[j];
	        var src = edge.source();
	        var tgt = edge.target();
	        var otherNode = node === src ? tgt : src;

	        // need check in case of loop
	        if (otherNode.length > 0) {
	          elements.push(otherNode[0]); // add node 1 hop away
	        }

	        // add connected edge
	        elements.push(edge[0]);
	      }
	    }
	    return this.spawn(elements, true).filter(selector);
	  }, 'neighborhood'),
	  closedNeighborhood: function closedNeighborhood(selector) {
	    return this.neighborhood().add(this).filter(selector);
	  },
	  openNeighborhood: function openNeighborhood(selector) {
	    return this.neighborhood(selector);
	  }
	});

	// aliases
	elesfn$2.neighbourhood = elesfn$2.neighborhood;
	elesfn$2.closedNeighbourhood = elesfn$2.closedNeighborhood;
	elesfn$2.openNeighbourhood = elesfn$2.openNeighborhood;

	// Edge functions
	/////////////////

	extend(elesfn$2, {
	  source: cache(function sourceImpl(selector) {
	    var ele = this[0];
	    var src;
	    if (ele) {
	      src = ele._private.source || ele.cy().collection();
	    }
	    return src && selector ? src.filter(selector) : src;
	  }, 'source'),
	  target: cache(function targetImpl(selector) {
	    var ele = this[0];
	    var tgt;
	    if (ele) {
	      tgt = ele._private.target || ele.cy().collection();
	    }
	    return tgt && selector ? tgt.filter(selector) : tgt;
	  }, 'target'),
	  sources: defineSourceFunction({
	    attr: 'source'
	  }),
	  targets: defineSourceFunction({
	    attr: 'target'
	  })
	});
	function defineSourceFunction(params) {
	  return function sourceImpl(selector) {
	    var sources = [];
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var src = ele._private[params.attr];
	      if (src) {
	        sources.push(src);
	      }
	    }
	    return this.spawn(sources, true).filter(selector);
	  };
	}
	extend(elesfn$2, {
	  edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
	  edgesTo: cache(defineEdgesWithFunction({
	    thisIsSrc: true
	  }), 'edgesTo')
	});
	function defineEdgesWithFunction(params) {
	  return function edgesWithImpl(otherNodes) {
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {};

	    // get elements if a selector is specified
	    if (string(otherNodes)) {
	      otherNodes = cy.$(otherNodes);
	    }
	    for (var h = 0; h < otherNodes.length; h++) {
	      var edges = otherNodes[h]._private.edges;
	      for (var i = 0; i < edges.length; i++) {
	        var edge = edges[i];
	        var edgeData = edge._private.data;
	        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
	        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;
	        if (!edgeConnectsThisAndOther) {
	          continue;
	        }
	        if (p.thisIsSrc || p.thisIsTgt) {
	          if (p.thisIsSrc && !thisToOther) {
	            continue;
	          }
	          if (p.thisIsTgt && !otherToThis) {
	            continue;
	          }
	        }
	        elements.push(edge);
	      }
	    }
	    return this.spawn(elements, true);
	  };
	}
	extend(elesfn$2, {
	  connectedEdges: cache(function (selector) {
	    var retEles = [];
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var node = eles[i];
	      if (!node.isNode()) {
	        continue;
	      }
	      var edges = node._private.edges;
	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        retEles.push(edge);
	      }
	    }
	    return this.spawn(retEles, true).filter(selector);
	  }, 'connectedEdges'),
	  connectedNodes: cache(function (selector) {
	    var retEles = [];
	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var edge = eles[i];
	      if (!edge.isEdge()) {
	        continue;
	      }
	      retEles.push(edge.source()[0]);
	      retEles.push(edge.target()[0]);
	    }
	    return this.spawn(retEles, true).filter(selector);
	  }, 'connectedNodes'),
	  parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
	  codirectedEdges: cache(defineParallelEdgesFunction({
	    codirected: true
	  }), 'codirectedEdges')
	});
	function defineParallelEdgesFunction(params) {
	  var defaults = {
	    codirected: false
	  };
	  params = extend({}, defaults, params);
	  return function parallelEdgesImpl(selector) {
	    // micro-optimised for renderer
	    var elements = [];
	    var edges = this.edges();
	    var p = params;

	    // look at all the edges in the collection
	    for (var i = 0; i < edges.length; i++) {
	      var edge1 = edges[i];
	      var edge1_p = edge1._private;
	      var src1 = edge1_p.source;
	      var srcid1 = src1._private.data.id;
	      var tgtid1 = edge1_p.data.target;
	      var srcEdges1 = src1._private.edges;

	      // look at edges connected to the src node of this edge
	      for (var j = 0; j < srcEdges1.length; j++) {
	        var edge2 = srcEdges1[j];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;
	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;
	        if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
	          elements.push(edge2);
	        }
	      }
	    }
	    return this.spawn(elements, true).filter(selector);
	  };
	}

	// Misc functions
	/////////////////

	extend(elesfn$2, {
	  components: function components(root) {
	    var self = this;
	    var cy = self.cy();
	    var visited = cy.collection();
	    var unvisited = root == null ? self.nodes() : root.nodes();
	    var components = [];
	    if (root != null && unvisited.empty()) {
	      // root may contain only edges
	      unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
	    }

	    var visitInComponent = function visitInComponent(node, component) {
	      visited.merge(node);
	      unvisited.unmerge(node);
	      component.merge(node);
	    };
	    if (unvisited.empty()) {
	      return self.spawn();
	    }
	    var _loop = function _loop() {
	      // each iteration yields a component
	      var cmpt = cy.collection();
	      components.push(cmpt);
	      var root = unvisited[0];
	      visitInComponent(root, cmpt);
	      self.bfs({
	        directed: false,
	        roots: root,
	        visit: function visit(v) {
	          return visitInComponent(v, cmpt);
	        }
	      });
	      cmpt.forEach(function (node) {
	        node.connectedEdges().forEach(function (e) {
	          // connectedEdges() usually cached
	          if (self.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
	            // has() is cheap
	            cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
	          }
	        });
	      });
	    };
	    do {
	      _loop();
	    } while (unvisited.length > 0);
	    return components;
	  },
	  component: function component() {
	    var ele = this[0];
	    return ele.cy().mutableElements().components(ele)[0];
	  }
	});
	elesfn$2.componentsOf = elesfn$2.components;

	// represents a set of nodes, edges, or both together
	var Collection = function Collection(cy, elements) {
	  var unique = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	  var removed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  if (cy === undefined) {
	    error('A collection must have a reference to the core');
	    return;
	  }
	  var map = new Map$2();
	  var createdElements = false;
	  if (!elements) {
	    elements = [];
	  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
	    createdElements = true;

	    // make elements from json and restore all at once later
	    var eles = [];
	    var elesIds = new Set$1();
	    for (var i = 0, l = elements.length; i < l; i++) {
	      var json = elements[i];
	      if (json.data == null) {
	        json.data = {};
	      }
	      var _data = json.data;

	      // make sure newly created elements have valid ids
	      if (_data.id == null) {
	        _data.id = uuid();
	      } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element(cy, json, false);
	      eles.push(ele);
	      elesIds.add(_data.id);
	    }
	    elements = eles;
	  }
	  this.length = 0;
	  for (var _i = 0, _l = elements.length; _i < _l; _i++) {
	    var element$1 = elements[_i][0]; // [0] in case elements is an array of collections, rather than array of elements
	    if (element$1 == null) {
	      continue;
	    }
	    var id = element$1._private.data.id;
	    if (!unique || !map.has(id)) {
	      if (unique) {
	        map.set(id, {
	          index: this.length,
	          ele: element$1
	        });
	      }
	      this[this.length] = element$1;
	      this.length++;
	    }
	  }
	  this._private = {
	    eles: this,
	    cy: cy,
	    get map() {
	      if (this.lazyMap == null) {
	        this.rebuildMap();
	      }
	      return this.lazyMap;
	    },
	    set map(m) {
	      this.lazyMap = m;
	    },
	    rebuildMap: function rebuildMap() {
	      var m = this.lazyMap = new Map$2();
	      var eles = this.eles;
	      for (var _i2 = 0; _i2 < eles.length; _i2++) {
	        var _ele = eles[_i2];
	        m.set(_ele.id(), {
	          index: _i2,
	          ele: _ele
	        });
	      }
	    }
	  };
	  if (unique) {
	    this._private.map = map;
	  }

	  // restore the elements if we created them from json
	  if (createdElements && !removed) {
	    this.restore();
	  }
	};

	// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////

	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes
	var elesfn$1 = Element.prototype = Collection.prototype = Object.create(Array.prototype);
	elesfn$1.instanceString = function () {
	  return 'collection';
	};
	elesfn$1.spawn = function (eles, unique) {
	  return new Collection(this.cy(), eles, unique);
	};
	elesfn$1.spawnSelf = function () {
	  return this.spawn(this);
	};
	elesfn$1.cy = function () {
	  return this._private.cy;
	};
	elesfn$1.renderer = function () {
	  return this._private.cy.renderer();
	};
	elesfn$1.element = function () {
	  return this[0];
	};
	elesfn$1.collection = function () {
	  if (collection(this)) {
	    return this;
	  } else {
	    // an element
	    return new Collection(this._private.cy, [this]);
	  }
	};
	elesfn$1.unique = function () {
	  return new Collection(this._private.cy, this, true);
	};
	elesfn$1.hasElementWithId = function (id) {
	  id = '' + id; // id must be string

	  return this._private.map.has(id);
	};
	elesfn$1.getElementById = function (id) {
	  id = '' + id; // id must be string

	  var cy = this._private.cy;
	  var entry = this._private.map.get(id);
	  return entry ? entry.ele : new Collection(cy); // get ele or empty collection
	};

	elesfn$1.$id = elesfn$1.getElementById;
	elesfn$1.poolIndex = function () {
	  var cy = this._private.cy;
	  var eles = cy._private.elements;
	  var id = this[0]._private.data.id;
	  return eles._private.map.get(id).index;
	};
	elesfn$1.indexOf = function (ele) {
	  var id = ele[0]._private.data.id;
	  return this._private.map.get(id).index;
	};
	elesfn$1.indexOfId = function (id) {
	  id = '' + id; // id must be string

	  return this._private.map.get(id).index;
	};
	elesfn$1.json = function (obj) {
	  var ele = this.element();
	  var cy = this.cy();
	  if (ele == null && obj) {
	    return this;
	  } // can't set to no eles

	  if (ele == null) {
	    return undefined;
	  } // can't get from no eles

	  var p = ele._private;
	  if (plainObject(obj)) {
	    // set

	    cy.startBatch();
	    if (obj.data) {
	      ele.data(obj.data);
	      var _data2 = p.data;
	      if (ele.isEdge()) {
	        // source and target are immutable via data()
	        var move = false;
	        var spec = {};
	        var src = obj.data.source;
	        var tgt = obj.data.target;
	        if (src != null && src != _data2.source) {
	          spec.source = '' + src; // id must be string
	          move = true;
	        }
	        if (tgt != null && tgt != _data2.target) {
	          spec.target = '' + tgt; // id must be string
	          move = true;
	        }
	        if (move) {
	          ele = ele.move(spec);
	        }
	      } else {
	        // parent is immutable via data()
	        var newParentValSpecd = ('parent' in obj.data);
	        var parent = obj.data.parent;
	        if (newParentValSpecd && (parent != null || _data2.parent != null) && parent != _data2.parent) {
	          if (parent === undefined) {
	            // can't set undefined imperatively, so use null
	            parent = null;
	          }
	          if (parent != null) {
	            parent = '' + parent; // id must be string
	          }

	          ele = ele.move({
	            parent: parent
	          });
	        }
	      }
	    }
	    if (obj.position) {
	      ele.position(obj.position);
	    }

	    // ignore group -- immutable

	    var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
	      var obj_k = obj[k];
	      if (obj_k != null && obj_k !== p[k]) {
	        if (obj_k) {
	          ele[trueFnName]();
	        } else {
	          ele[falseFnName]();
	        }
	      }
	    };
	    checkSwitch('removed', 'remove', 'restore');
	    checkSwitch('selected', 'select', 'unselect');
	    checkSwitch('selectable', 'selectify', 'unselectify');
	    checkSwitch('locked', 'lock', 'unlock');
	    checkSwitch('grabbable', 'grabify', 'ungrabify');
	    checkSwitch('pannable', 'panify', 'unpanify');
	    if (obj.classes != null) {
	      ele.classes(obj.classes);
	    }
	    cy.endBatch();
	    return this;
	  } else if (obj === undefined) {
	    // get

	    var json = {
	      data: copy(p.data),
	      position: copy(p.position),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      pannable: p.pannable,
	      classes: null
	    };
	    json.classes = '';
	    var i = 0;
	    p.classes.forEach(function (cls) {
	      return json.classes += i++ === 0 ? cls : ' ' + cls;
	    });
	    return json;
	  }
	};
	elesfn$1.jsons = function () {
	  var jsons = [];
	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();
	    jsons.push(json);
	  }
	  return jsons;
	};
	elesfn$1.clone = function () {
	  var cy = this.cy();
	  var elesArr = [];
	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();
	    var clone = new Element(cy, json, false); // NB no restore

	    elesArr.push(clone);
	  }
	  return new Collection(cy, elesArr);
	};
	elesfn$1.copy = elesfn$1.clone;
	elesfn$1.restore = function () {
	  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var self = this;
	  var cy = self.cy();
	  var cy_p = cy._private;

	  // create arrays of nodes and edges, since we need to
	  // restore the nodes first
	  var nodes = [];
	  var edges = [];
	  var elements;
	  for (var _i3 = 0, l = self.length; _i3 < l; _i3++) {
	    var ele = self[_i3];
	    if (addToPool && !ele.removed()) {
	      // don't need to handle this ele
	      continue;
	    }

	    // keep nodes first in the array and edges after
	    if (ele.isNode()) {
	      // put to front of array if node
	      nodes.push(ele);
	    } else {
	      // put to end of array if edge
	      edges.push(ele);
	    }
	  }
	  elements = nodes.concat(edges);
	  var i;
	  var removeFromElements = function removeFromElements() {
	    elements.splice(i, 1);
	    i--;
	  };

	  // now, restore each element
	  for (i = 0; i < elements.length; i++) {
	    var _ele2 = elements[i];
	    var _private = _ele2._private;
	    var _data3 = _private.data;

	    // the traversal cache should start fresh when ele is added
	    _ele2.clearTraversalCache();

	    // set id and validate
	    if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {
	      _data3.id = uuid();
	    } else if (number$1(_data3.id)) {
	      _data3.id = '' + _data3.id; // now it's a string
	    } else if (emptyString(_data3.id) || !string(_data3.id)) {
	      error('Can not create element with invalid string ID `' + _data3.id + '`');

	      // can't create element if it has empty string as id or non-string id
	      removeFromElements();
	      continue;
	    } else if (cy.hasElementWithId(_data3.id)) {
	      error('Can not create second element with ID `' + _data3.id + '`');

	      // can't create element if one already has that id
	      removeFromElements();
	      continue;
	    }
	    var id = _data3.id; // id is finalised, now let's keep a ref

	    if (_ele2.isNode()) {
	      // extra checks for nodes
	      var pos = _private.position;

	      // make sure the nodes have a defined position

	      if (pos.x == null) {
	        pos.x = 0;
	      }
	      if (pos.y == null) {
	        pos.y = 0;
	      }
	    }
	    if (_ele2.isEdge()) {
	      // extra checks for edges

	      var edge = _ele2;
	      var fields = ['source', 'target'];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;
	      for (var j = 0; j < fieldsLength; j++) {
	        var field = fields[j];
	        var val = _data3[field];
	        if (number$1(val)) {
	          val = _data3[field] = '' + _data3[field]; // now string
	        }

	        if (val == null || val === '') {
	          // can't create if source or target is not defined properly
	          error('Can not create edge `' + id + '` with unspecified ' + field);
	          badSourceOrTarget = true;
	        } else if (!cy.hasElementWithId(val)) {
	          // can't create edge if one of its nodes doesn't exist
	          error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
	          badSourceOrTarget = true;
	        }
	      }
	      if (badSourceOrTarget) {
	        removeFromElements();
	        continue;
	      } // can't create this

	      var src = cy.getElementById(_data3.source);
	      var tgt = cy.getElementById(_data3.target);

	      // only one edge in node if loop
	      if (src.same(tgt)) {
	        src._private.edges.push(edge);
	      } else {
	        src._private.edges.push(edge);
	        tgt._private.edges.push(edge);
	      }
	      edge._private.source = src;
	      edge._private.target = tgt;
	    } // if is edge

	    // create mock ids / indexes maps for element so it can be used like collections
	    _private.map = new Map$2();
	    _private.map.set(id, {
	      ele: _ele2,
	      index: 0
	    });
	    _private.removed = false;
	    if (addToPool) {
	      cy.addToPool(_ele2);
	    }
	  } // for each element

	  // do compound node sanity checks
	  for (var _i4 = 0; _i4 < nodes.length; _i4++) {
	    // each node
	    var node = nodes[_i4];
	    var _data4 = node._private.data;
	    if (number$1(_data4.parent)) {
	      // then automake string
	      _data4.parent = '' + _data4.parent;
	    }
	    var parentId = _data4.parent;
	    var specifiedParent = parentId != null;
	    if (specifiedParent || node._private.parent) {
	      var parent = node._private.parent ? cy.collection().merge(node._private.parent) : cy.getElementById(parentId);
	      if (parent.empty()) {
	        // non-existant parent; just remove it
	        _data4.parent = undefined;
	      } else if (parent[0].removed()) {
	        warn('Node added with missing parent, reference to parent removed');
	        _data4.parent = undefined;
	        node._private.parent = null;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;
	        while (!ancestor.empty()) {
	          if (node.same(ancestor)) {
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            _data4.parent = undefined; // remove parent reference

	            // exit or we loop forever
	            break;
	          }
	          ancestor = ancestor.parent();
	        }
	        if (!selfAsParent) {
	          // connect with children
	          parent[0]._private.children.push(node);
	          node._private.parent = parent[0];

	          // let the core know we have a compound graph
	          cy_p.hasCompoundNodes = true;
	        }
	      } // else
	    } // if specified parent
	  } // for each node

	  if (elements.length > 0) {
	    var restored = elements.length === self.length ? self : new Collection(cy, elements);
	    for (var _i5 = 0; _i5 < restored.length; _i5++) {
	      var _ele3 = restored[_i5];
	      if (_ele3.isNode()) {
	        continue;
	      }

	      // adding an edge invalidates the traversal caches for the parallel edges
	      _ele3.parallelEdges().clearTraversalCache();

	      // adding an edge invalidates the traversal cache for the connected nodes
	      _ele3.source().clearTraversalCache();
	      _ele3.target().clearTraversalCache();
	    }
	    var toUpdateStyle;
	    if (cy_p.hasCompoundNodes) {
	      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
	    } else {
	      toUpdateStyle = restored;
	    }
	    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);
	    if (notifyRenderer) {
	      restored.emitAndNotify('add');
	    } else if (addToPool) {
	      restored.emit('add');
	    }
	  }
	  return self; // chainability
	};

	elesfn$1.removed = function () {
	  var ele = this[0];
	  return ele && ele._private.removed;
	};
	elesfn$1.inside = function () {
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};
	elesfn$1.remove = function () {
	  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var self = this;
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy;

	  // add connected edges
	  function addConnectedEdges(node) {
	    var edges = node._private.edges;
	    for (var i = 0; i < edges.length; i++) {
	      add(edges[i]);
	    }
	  }

	  // add descendant nodes
	  function addChildren(node) {
	    var children = node._private.children;
	    for (var i = 0; i < children.length; i++) {
	      add(children[i]);
	    }
	  }
	  function add(ele) {
	    var alreadyAdded = elesToRemoveIds[ele.id()];
	    if (removeFromPool && ele.removed() || alreadyAdded) {
	      return;
	    } else {
	      elesToRemoveIds[ele.id()] = true;
	    }
	    if (ele.isNode()) {
	      elesToRemove.push(ele); // nodes are removed last

	      addConnectedEdges(ele);
	      addChildren(ele);
	    } else {
	      elesToRemove.unshift(ele); // edges are removed first
	    }
	  }

	  // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)

	  for (var i = 0, l = self.length; i < l; i++) {
	    var ele = self[i];
	    add(ele);
	  }
	  function removeEdgeRef(node, edge) {
	    var connectedEdges = node._private.edges;
	    removeFromArray(connectedEdges, edge);

	    // removing an edges invalidates the traversal cache for its nodes
	    node.clearTraversalCache();
	  }
	  function removeParallelRef(pllEdge) {
	    // removing an edge invalidates the traversal caches for the parallel edges
	    pllEdge.clearTraversalCache();
	  }
	  var alteredParents = [];
	  alteredParents.ids = {};
	  function removeChildRef(parent, ele) {
	    ele = ele[0];
	    parent = parent[0];
	    var children = parent._private.children;
	    var pid = parent.id();
	    removeFromArray(children, ele); // remove parent => child ref

	    ele._private.parent = null; // remove child => parent ref

	    if (!alteredParents.ids[pid]) {
	      alteredParents.ids[pid] = true;
	      alteredParents.push(parent);
	    }
	  }
	  self.dirtyCompoundBoundsCache();
	  if (removeFromPool) {
	    cy.removeFromPool(elesToRemove); // remove from core pool
	  }

	  for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {
	    var _ele4 = elesToRemove[_i6];
	    if (_ele4.isEdge()) {
	      // remove references to this edge in its connected nodes
	      var src = _ele4.source()[0];
	      var tgt = _ele4.target()[0];
	      removeEdgeRef(src, _ele4);
	      removeEdgeRef(tgt, _ele4);
	      var pllEdges = _ele4.parallelEdges();
	      for (var j = 0; j < pllEdges.length; j++) {
	        var pllEdge = pllEdges[j];
	        removeParallelRef(pllEdge);
	        if (pllEdge.isBundledBezier()) {
	          pllEdge.dirtyBoundingBoxCache();
	        }
	      }
	    } else {
	      // remove reference to parent
	      var parent = _ele4.parent();
	      if (parent.length !== 0) {
	        removeChildRef(parent, _ele4);
	      }
	    }
	    if (removeFromPool) {
	      // mark as removed
	      _ele4._private.removed = true;
	    }
	  }

	  // check to see if we have a compound graph or not
	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;
	  for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {
	    var _ele5 = elesStillInside[_i7];
	    if (_ele5.isParent()) {
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }
	  var removedElements = new Collection(this.cy(), elesToRemove);
	  if (removedElements.size() > 0) {
	    // must manually notify since trigger won't do this automatically once removed

	    if (notifyRenderer) {
	      removedElements.emitAndNotify('remove');
	    } else if (removeFromPool) {
	      removedElements.emit('remove');
	    }
	  }

	  // the parents who were modified by the removal need their style updated
	  for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {
	    var _ele6 = alteredParents[_i8];
	    if (!removeFromPool || !_ele6.removed()) {
	      _ele6.updateStyle();
	    }
	  }
	  return removedElements;
	};
	elesfn$1.move = function (struct) {
	  var cy = this._private.cy;
	  var eles = this;

	  // just clean up refs, caches, etc. in the same way as when removing and then restoring
	  // (our calls to remove/restore do not remove from the graph or make events)
	  var notifyRenderer = false;
	  var modifyPool = false;
	  var toString = function toString(id) {
	    return id == null ? id : '' + id;
	  }; // id must be string

	  if (struct.source !== undefined || struct.target !== undefined) {
	    var srcId = toString(struct.source);
	    var tgtId = toString(struct.target);
	    var srcExists = srcId != null && cy.hasElementWithId(srcId);
	    var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);
	    if (srcExists || tgtExists) {
	      cy.batch(function () {
	        // avoid duplicate style updates
	        eles.remove(notifyRenderer, modifyPool); // clean up refs etc.
	        eles.emitAndNotify('moveout');
	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          var _data5 = ele._private.data;
	          if (ele.isEdge()) {
	            if (srcExists) {
	              _data5.source = srcId;
	            }
	            if (tgtExists) {
	              _data5.target = tgtId;
	            }
	          }
	        }
	        eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
	      });

	      eles.emitAndNotify('move');
	    }
	  } else if (struct.parent !== undefined) {
	    // move node to new parent
	    var parentId = toString(struct.parent);
	    var parentExists = parentId === null || cy.hasElementWithId(parentId);
	    if (parentExists) {
	      var pidToAssign = parentId === null ? undefined : parentId;
	      cy.batch(function () {
	        // avoid duplicate style updates
	        var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.
	        updated.emitAndNotify('moveout');
	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          var _data6 = ele._private.data;
	          if (ele.isNode()) {
	            _data6.parent = pidToAssign;
	          }
	        }
	        updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
	      });

	      eles.emitAndNotify('move');
	    }
	  }
	  return this;
	};
	[elesfn$j, elesfn$i, elesfn$h, elesfn$g, elesfn$f, data, elesfn$d, dimensions, elesfn$9, elesfn$8, elesfn$7, elesfn$6, elesfn$5, elesfn$4, elesfn$3, elesfn$2].forEach(function (props) {
	  extend(elesfn$1, props);
	});

	var corefn$9 = {
	  add: function add(opts) {
	    var elements;
	    var cy = this;

	    // add the elements
	    if (elementOrCollection(opts)) {
	      var eles = opts;
	      if (eles._private.cy === cy) {
	        // same instance => just restore
	        elements = eles.restore();
	      } else {
	        // otherwise, copy from json
	        var jsons = [];
	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          jsons.push(ele.json());
	        }
	        elements = new Collection(cy, jsons);
	      }
	    }

	    // specify an array of options
	    else if (array(opts)) {
	      var _jsons = opts;
	      elements = new Collection(cy, _jsons);
	    }

	    // specify via opts.nodes and opts.edges
	    else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
	      var elesByGroup = opts;
	      var _jsons2 = [];
	      var grs = ['nodes', 'edges'];
	      for (var _i = 0, il = grs.length; _i < il; _i++) {
	        var group = grs[_i];
	        var elesArray = elesByGroup[group];
	        if (array(elesArray)) {
	          for (var j = 0, jl = elesArray.length; j < jl; j++) {
	            var json = extend({
	              group: group
	            }, elesArray[j]);
	            _jsons2.push(json);
	          }
	        }
	      }
	      elements = new Collection(cy, _jsons2);
	    }

	    // specify options for one element
	    else {
	      var _json = opts;
	      elements = new Element(cy, _json).collection();
	    }
	    return elements;
	  },
	  remove: function remove(collection) {
	    if (elementOrCollection(collection)) ; else if (string(collection)) {
	      var selector = collection;
	      collection = this.$(selector);
	    }
	    return collection.remove();
	  }
	};

	/* global Float32Array */

	/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	function generateCubicBezier(mX1, mY1, mX2, mY2) {
	  var NEWTON_ITERATIONS = 4,
	    NEWTON_MIN_SLOPE = 0.001,
	    SUBDIVISION_PRECISION = 0.0000001,
	    SUBDIVISION_MAX_ITERATIONS = 10,
	    kSplineTableSize = 11,
	    kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
	    float32ArraySupported = typeof Float32Array !== 'undefined';

	  /* Must contain four arguments. */
	  if (arguments.length !== 4) {
	    return false;
	  }

	  /* Arguments must be numbers. */
	  for (var i = 0; i < 4; ++i) {
	    if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
	      return false;
	    }
	  }

	  /* X values must be in the [0, 1] range. */
	  mX1 = Math.min(mX1, 1);
	  mX2 = Math.min(mX2, 1);
	  mX1 = Math.max(mX1, 0);
	  mX2 = Math.max(mX2, 0);
	  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
	  function A(aA1, aA2) {
	    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	  }
	  function B(aA1, aA2) {
	    return 3.0 * aA2 - 6.0 * aA1;
	  }
	  function C(aA1) {
	    return 3.0 * aA1;
	  }
	  function calcBezier(aT, aA1, aA2) {
	    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
	  }
	  function getSlope(aT, aA1, aA2) {
	    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	  }
	  function newtonRaphsonIterate(aX, aGuessT) {
	    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
	      var currentSlope = getSlope(aGuessT, mX1, mX2);
	      if (currentSlope === 0.0) {
	        return aGuessT;
	      }
	      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	      aGuessT -= currentX / currentSlope;
	    }
	    return aGuessT;
	  }
	  function calcSampleValues() {
	    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
	      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
	    }
	  }
	  function binarySubdivide(aX, aA, aB) {
	    var currentX,
	      currentT,
	      i = 0;
	    do {
	      currentT = aA + (aB - aA) / 2.0;
	      currentX = calcBezier(currentT, mX1, mX2) - aX;
	      if (currentX > 0.0) {
	        aB = currentT;
	      } else {
	        aA = currentT;
	      }
	    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
	    return currentT;
	  }
	  function getTForX(aX) {
	    var intervalStart = 0.0,
	      currentSample = 1,
	      lastSample = kSplineTableSize - 1;
	    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	      intervalStart += kSampleStepSize;
	    }
	    --currentSample;
	    var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
	      guessForT = intervalStart + dist * kSampleStepSize,
	      initialSlope = getSlope(guessForT, mX1, mX2);
	    if (initialSlope >= NEWTON_MIN_SLOPE) {
	      return newtonRaphsonIterate(aX, guessForT);
	    } else if (initialSlope === 0.0) {
	      return guessForT;
	    } else {
	      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
	    }
	  }
	  var _precomputed = false;
	  function precompute() {
	    _precomputed = true;
	    if (mX1 !== mY1 || mX2 !== mY2) {
	      calcSampleValues();
	    }
	  }
	  var f = function f(aX) {
	    if (!_precomputed) {
	      precompute();
	    }
	    if (mX1 === mY1 && mX2 === mY2) {
	      return aX;
	    }
	    if (aX === 0) {
	      return 0;
	    }
	    if (aX === 1) {
	      return 1;
	    }
	    return calcBezier(getTForX(aX), mY1, mY2);
	  };
	  f.getControlPoints = function () {
	    return [{
	      x: mX1,
	      y: mY1
	    }, {
	      x: mX2,
	      y: mY2
	    }];
	  };
	  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
	  f.toString = function () {
	    return str;
	  };
	  return f;
	}

	/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	var generateSpringRK4 = function () {
	  function springAccelerationForState(state) {
	    return -state.tension * state.x - state.friction * state.v;
	  }
	  function springEvaluateStateWithDerivative(initialState, dt, derivative) {
	    var state = {
	      x: initialState.x + derivative.dx * dt,
	      v: initialState.v + derivative.dv * dt,
	      tension: initialState.tension,
	      friction: initialState.friction
	    };
	    return {
	      dx: state.v,
	      dv: springAccelerationForState(state)
	    };
	  }
	  function springIntegrateState(state, dt) {
	    var a = {
	        dx: state.v,
	        dv: springAccelerationForState(state)
	      },
	      b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	      c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	      d = springEvaluateStateWithDerivative(state, dt, c),
	      dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	      dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
	    state.x = state.x + dxdt * dt;
	    state.v = state.v + dvdt * dt;
	    return state;
	  }
	  return function springRK4Factory(tension, friction, duration) {
	    var initState = {
	        x: -1,
	        v: 0,
	        tension: null,
	        friction: null
	      },
	      path = [0],
	      time_lapsed = 0,
	      tolerance = 1 / 10000,
	      DT = 16 / 1000,
	      have_duration,
	      dt,
	      last_state;
	    tension = parseFloat(tension) || 500;
	    friction = parseFloat(friction) || 20;
	    duration = duration || null;
	    initState.tension = tension;
	    initState.friction = friction;
	    have_duration = duration !== null;

	    /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	    if (have_duration) {
	      /* Run the simulation without a duration. */
	      time_lapsed = springRK4Factory(tension, friction);
	      /* Compute the adjusted time delta. */
	      dt = time_lapsed / duration * DT;
	    } else {
	      dt = DT;
	    }
	    for (;;) {
	      /* Next/step function .*/
	      last_state = springIntegrateState(last_state || initState, dt);
	      /* Store the position. */
	      path.push(1 + last_state.x);
	      time_lapsed += 16;
	      /* If the change threshold is reached, break. */
	      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	        break;
	      }
	    }

	    /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	       computed path and returns a snapshot of the position according to a given percentComplete. */
	    return !have_duration ? time_lapsed : function (percentComplete) {
	      return path[percentComplete * (path.length - 1) | 0];
	    };
	  };
	}();

	var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
	  var bezier = generateCubicBezier(t1, p1, t2, p2);
	  return function (start, end, percent) {
	    return start + (end - start) * bezier(percent);
	  };
	};
	var easings = {
	  'linear': function linear(start, end, percent) {
	    return start + (end - start) * percent;
	  },
	  // default easings
	  'ease': cubicBezier(0.25, 0.1, 0.25, 1),
	  'ease-in': cubicBezier(0.42, 0, 1, 1),
	  'ease-out': cubicBezier(0, 0, 0.58, 1),
	  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
	  // sine
	  'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
	  'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
	  'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
	  // quad
	  'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
	  'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
	  'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
	  // cubic
	  'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
	  'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
	  'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
	  // quart
	  'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
	  'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
	  'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
	  // quint
	  'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
	  'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
	  'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
	  // expo
	  'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
	  'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
	  'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
	  // circ
	  'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
	  'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
	  'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
	  // user param easings...

	  'spring': function spring(tension, friction, duration) {
	    if (duration === 0) {
	      // can't get a spring w/ duration 0
	      return easings.linear; // duration 0 => jump to end so impl doesn't matter
	    }

	    var spring = generateSpringRK4(tension, friction, duration);
	    return function (start, end, percent) {
	      return start + (end - start) * spring(percent);
	    };
	  },
	  'cubic-bezier': cubicBezier
	};

	function getEasedValue(type, start, end, percent, easingFn) {
	  if (percent === 1) {
	    return end;
	  }
	  if (start === end) {
	    return end;
	  }
	  var val = easingFn(start, end, percent);
	  if (type == null) {
	    return val;
	  }
	  if (type.roundValue || type.color) {
	    val = Math.round(val);
	  }
	  if (type.min !== undefined) {
	    val = Math.max(val, type.min);
	  }
	  if (type.max !== undefined) {
	    val = Math.min(val, type.max);
	  }
	  return val;
	}
	function getValue(prop, spec) {
	  if (prop.pfValue != null || prop.value != null) {
	    if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
	      return prop.pfValue;
	    } else {
	      return prop.value;
	    }
	  } else {
	    return prop;
	  }
	}
	function ease(startProp, endProp, percent, easingFn, propSpec) {
	  var type = propSpec != null ? propSpec.type : null;
	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }
	  var start = getValue(startProp, propSpec);
	  var end = getValue(endProp, propSpec);
	  if (number$1(start) && number$1(end)) {
	    return getEasedValue(type, start, end, percent, easingFn);
	  } else if (array(start) && array(end)) {
	    var easedArr = [];
	    for (var i = 0; i < end.length; i++) {
	      var si = start[i];
	      var ei = end[i];
	      if (si != null && ei != null) {
	        var val = getEasedValue(type, si, ei, percent, easingFn);
	        easedArr.push(val);
	      } else {
	        easedArr.push(ei);
	      }
	    }
	    return easedArr;
	  }
	  return undefined;
	}

	function step$1(self, ani, now, isCore) {
	  var isEles = !isCore;
	  var _p = self._private;
	  var ani_p = ani._private;
	  var pEasing = ani_p.easing;
	  var startTime = ani_p.startTime;
	  var cy = isCore ? self : self.cy();
	  var style = cy.style();
	  if (!ani_p.easingImpl) {
	    if (pEasing == null) {
	      // use default
	      ani_p.easingImpl = easings['linear'];
	    } else {
	      // then define w/ name
	      var easingVals;
	      if (string(pEasing)) {
	        var easingProp = style.parse('transition-timing-function', pEasing);
	        easingVals = easingProp.value;
	      } else {
	        // then assume preparsed array
	        easingVals = pEasing;
	      }
	      var name, args;
	      if (string(easingVals)) {
	        name = easingVals;
	        args = [];
	      } else {
	        name = easingVals[1];
	        args = easingVals.slice(2).map(function (n) {
	          return +n;
	        });
	      }
	      if (args.length > 0) {
	        // create with args
	        if (name === 'spring') {
	          args.push(ani_p.duration); // need duration to generate spring
	        }

	        ani_p.easingImpl = easings[name].apply(null, args);
	      } else {
	        // static impl by name
	        ani_p.easingImpl = easings[name];
	      }
	    }
	  }
	  var easing = ani_p.easingImpl;
	  var percent;
	  if (ani_p.duration === 0) {
	    percent = 1;
	  } else {
	    percent = (now - startTime) / ani_p.duration;
	  }
	  if (ani_p.applying) {
	    percent = ani_p.progress;
	  }
	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }
	  if (ani_p.delay == null) {
	    // then update

	    var startPos = ani_p.startPosition;
	    var endPos = ani_p.position;
	    if (endPos && isEles && !self.locked()) {
	      var newPos = {};
	      if (valid(startPos.x, endPos.x)) {
	        newPos.x = ease(startPos.x, endPos.x, percent, easing);
	      }
	      if (valid(startPos.y, endPos.y)) {
	        newPos.y = ease(startPos.y, endPos.y, percent, easing);
	      }
	      self.position(newPos);
	    }
	    var startPan = ani_p.startPan;
	    var endPan = ani_p.pan;
	    var pan = _p.pan;
	    var animatingPan = endPan != null && isCore;
	    if (animatingPan) {
	      if (valid(startPan.x, endPan.x)) {
	        pan.x = ease(startPan.x, endPan.x, percent, easing);
	      }
	      if (valid(startPan.y, endPan.y)) {
	        pan.y = ease(startPan.y, endPan.y, percent, easing);
	      }
	      self.emit('pan');
	    }
	    var startZoom = ani_p.startZoom;
	    var endZoom = ani_p.zoom;
	    var animatingZoom = endZoom != null && isCore;
	    if (animatingZoom) {
	      if (valid(startZoom, endZoom)) {
	        _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
	      }
	      self.emit('zoom');
	    }
	    if (animatingPan || animatingZoom) {
	      self.emit('viewport');
	    }
	    var props = ani_p.style;
	    if (props && props.length > 0 && isEles) {
	      for (var i = 0; i < props.length; i++) {
	        var prop = props[i];
	        var _name = prop.name;
	        var end = prop;
	        var start = ani_p.startStyle[_name];
	        var propSpec = style.properties[start.name];
	        var easedVal = ease(start, end, percent, easing, propSpec);
	        style.overrideBypass(self, _name, easedVal);
	      } // for props

	      self.emit('style');
	    } // if
	  }

	  ani_p.progress = percent;
	  return percent;
	}
	function valid(start, end) {
	  if (start == null || end == null) {
	    return false;
	  }
	  if (number$1(start) && number$1(end)) {
	    return true;
	  } else if (start && end) {
	    return true;
	  }
	  return false;
	}

	function startAnimation(self, ani, now, isCore) {
	  var ani_p = ani._private;
	  ani_p.started = true;
	  ani_p.startTime = now - ani_p.progress * ani_p.duration;
	}

	function stepAll(now, cy) {
	  var eles = cy._private.aniEles;
	  var doneEles = [];
	  function stepOne(ele, isCore) {
	    var _p = ele._private;
	    var current = _p.animation.current;
	    var queue = _p.animation.queue;
	    var ranAnis = false;

	    // if nothing currently animating, get something from the queue
	    if (current.length === 0) {
	      var next = queue.shift();
	      if (next) {
	        current.push(next);
	      }
	    }
	    var callbacks = function callbacks(_callbacks) {
	      for (var j = _callbacks.length - 1; j >= 0; j--) {
	        var cb = _callbacks[j];
	        cb();
	      }
	      _callbacks.splice(0, _callbacks.length);
	    };

	    // step and remove if done
	    for (var i = current.length - 1; i >= 0; i--) {
	      var ani = current[i];
	      var ani_p = ani._private;
	      if (ani_p.stopped) {
	        current.splice(i, 1);
	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;
	        callbacks(ani_p.frames);
	        continue;
	      }
	      if (!ani_p.playing && !ani_p.applying) {
	        continue;
	      }

	      // an apply() while playing shouldn't do anything
	      if (ani_p.playing && ani_p.applying) {
	        ani_p.applying = false;
	      }
	      if (!ani_p.started) {
	        startAnimation(ele, ani, now);
	      }
	      step$1(ele, ani, now, isCore);
	      if (ani_p.applying) {
	        ani_p.applying = false;
	      }
	      callbacks(ani_p.frames);
	      if (ani_p.step != null) {
	        ani_p.step(now);
	      }
	      if (ani.completed()) {
	        current.splice(i, 1);
	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;
	        callbacks(ani_p.completes);
	      }
	      ranAnis = true;
	    }
	    if (!isCore && current.length === 0 && queue.length === 0) {
	      doneEles.push(ele);
	    }
	    return ranAnis;
	  } // stepElement

	  // handle all eles
	  var ranEleAni = false;
	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];
	    var handledThisEle = stepOne(ele);
	    ranEleAni = ranEleAni || handledThisEle;
	  } // each element

	  var ranCoreAni = stepOne(cy, true);

	  // notify renderer
	  if (ranEleAni || ranCoreAni) {
	    if (eles.length > 0) {
	      cy.notify('draw', eles);
	    } else {
	      cy.notify('draw');
	    }
	  }

	  // remove elements from list of currently animating if its queues are empty
	  eles.unmerge(doneEles);
	  cy.emit('step');
	} // stepAll

	var corefn$8 = {
	  // pull in animation functions
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop(),
	  addToAnimationPool: function addToAnimationPool(eles) {
	    var cy = this;
	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used

	    cy._private.aniEles.merge(eles);
	  },
	  stopAnimationLoop: function stopAnimationLoop() {
	    this._private.animationsRunning = false;
	  },
	  startAnimationLoop: function startAnimationLoop() {
	    var cy = this;
	    cy._private.animationsRunning = true;
	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used

	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop

	    function headlessStep() {
	      if (!cy._private.animationsRunning) {
	        return;
	      }
	      requestAnimationFrame(function animationStep(now) {
	        stepAll(now, cy);
	        headlessStep();
	      });
	    }
	    var renderer = cy.renderer();
	    if (renderer && renderer.beforeRender) {
	      // let the renderer schedule animations
	      renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
	        stepAll(now, cy);
	      }, renderer.beforeRenderPriorities.animations);
	    } else {
	      // manage the animation loop ourselves
	      headlessStep(); // first call
	    }
	  }
	};

	var emitterOptions = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(cy, listener, eventObj) {
	    var selector = listener.qualifier;
	    if (selector != null) {
	      return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
	    }
	    return true;
	  },
	  addEventFields: function addEventFields(cy, evt) {
	    evt.cy = cy;
	    evt.target = cy;
	  },
	  callbackContext: function callbackContext(cy, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : cy;
	  }
	};
	var argSelector = function argSelector(arg) {
	  if (string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};
	var elesfn = {
	  createEmitter: function createEmitter() {
	    var _p = this._private;
	    if (!_p.emitter) {
	      _p.emitter = new Emitter(emitterOptions, this);
	    }
	    return this;
	  },
	  emitter: function emitter() {
	    return this._private.emitter;
	  },
	  on: function on(events, selector, callback) {
	    this.emitter().on(events, argSelector(selector), callback);
	    return this;
	  },
	  removeListener: function removeListener(events, selector, callback) {
	    this.emitter().removeListener(events, argSelector(selector), callback);
	    return this;
	  },
	  removeAllListeners: function removeAllListeners() {
	    this.emitter().removeAllListeners();
	    return this;
	  },
	  one: function one(events, selector, callback) {
	    this.emitter().one(events, argSelector(selector), callback);
	    return this;
	  },
	  once: function once(events, selector, callback) {
	    this.emitter().one(events, argSelector(selector), callback);
	    return this;
	  },
	  emit: function emit(events, extraParams) {
	    this.emitter().emit(events, extraParams);
	    return this;
	  },
	  emitAndNotify: function emitAndNotify(event, eles) {
	    this.emit(event);
	    this.notify(event, eles);
	    return this;
	  }
	};
	define.eventAliasesOn(elesfn);

	var corefn$7 = {
	  png: function png(options) {
	    var renderer = this._private.renderer;
	    options = options || {};
	    return renderer.png(options);
	  },
	  jpg: function jpg(options) {
	    var renderer = this._private.renderer;
	    options = options || {};
	    options.bg = options.bg || '#fff';
	    return renderer.jpg(options);
	  }
	};
	corefn$7.jpeg = corefn$7.jpg;

	var corefn$6 = {
	  layout: function layout(options) {
	    var cy = this;
	    if (options == null) {
	      error('Layout options must be specified to make a layout');
	      return;
	    }
	    if (options.name == null) {
	      error('A `name` must be specified to make a layout');
	      return;
	    }
	    var name = options.name;
	    var Layout = cy.extension('layout', name);
	    if (Layout == null) {
	      error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
	      return;
	    }
	    var eles;
	    if (string(options.eles)) {
	      eles = cy.$(options.eles);
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }
	    var layout = new Layout(extend({}, options, {
	      cy: cy,
	      eles: eles
	    }));
	    return layout;
	  }
	};
	corefn$6.createLayout = corefn$6.makeLayout = corefn$6.layout;

	var corefn$5 = {
	  notify: function notify(eventName, eventEles) {
	    var _p = this._private;
	    if (this.batching()) {
	      _p.batchNotifications = _p.batchNotifications || {};
	      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();
	      if (eventEles != null) {
	        eles.merge(eventEles);
	      }
	      return; // notifications are disabled during batching
	    }

	    if (!_p.notificationsEnabled) {
	      return;
	    } // exit on disabled

	    var renderer = this.renderer();

	    // exit if destroy() called on core or renderer in between frames #1499 #1528
	    if (this.destroyed() || !renderer) {
	      return;
	    }
	    renderer.notify(eventName, eventEles);
	  },
	  notifications: function notifications(bool) {
	    var p = this._private;
	    if (bool === undefined) {
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }
	    return this;
	  },
	  noNotifications: function noNotifications(callback) {
	    this.notifications(false);
	    callback();
	    this.notifications(true);
	  },
	  batching: function batching() {
	    return this._private.batchCount > 0;
	  },
	  startBatch: function startBatch() {
	    var _p = this._private;
	    if (_p.batchCount == null) {
	      _p.batchCount = 0;
	    }
	    if (_p.batchCount === 0) {
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifications = {};
	    }
	    _p.batchCount++;
	    return this;
	  },
	  endBatch: function endBatch() {
	    var _p = this._private;
	    if (_p.batchCount === 0) {
	      return this;
	    }
	    _p.batchCount--;
	    if (_p.batchCount === 0) {
	      // update style for dirty eles
	      _p.batchStyleEles.updateStyle();
	      var renderer = this.renderer();

	      // notify the renderer of queued eles and event types
	      Object.keys(_p.batchNotifications).forEach(function (eventName) {
	        var eles = _p.batchNotifications[eventName];
	        if (eles.empty()) {
	          renderer.notify(eventName);
	        } else {
	          renderer.notify(eventName, eles);
	        }
	      });
	    }
	    return this;
	  },
	  batch: function batch(callback) {
	    this.startBatch();
	    callback();
	    this.endBatch();
	    return this;
	  },
	  // for backwards compatibility
	  batchData: function batchData(map) {
	    var cy = this;
	    return this.batch(function () {
	      var ids = Object.keys(map);
	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        var data = map[id];
	        var ele = cy.getElementById(id);
	        ele.data(data);
	      }
	    });
	  }
	};

	var rendererDefaults = defaults$g({
	  hideEdgesOnViewport: false,
	  textureOnViewport: false,
	  motionBlur: false,
	  motionBlurOpacity: 0.05,
	  pixelRatio: undefined,
	  desktopTapThreshold: 4,
	  touchTapThreshold: 8,
	  wheelSensitivity: 1,
	  debug: false,
	  showFps: false
	});
	var corefn$4 = {
	  renderTo: function renderTo(context, zoom, pan, pxRatio) {
	    var r = this._private.renderer;
	    r.renderTo(context, zoom, pan, pxRatio);
	    return this;
	  },
	  renderer: function renderer() {
	    return this._private.renderer;
	  },
	  forceRender: function forceRender() {
	    this.notify('draw');
	    return this;
	  },
	  resize: function resize() {
	    this.invalidateSize();
	    this.emitAndNotify('resize');
	    return this;
	  },
	  initRenderer: function initRenderer(options) {
	    var cy = this;
	    var RendererProto = cy.extension('renderer', options.name);
	    if (RendererProto == null) {
	      error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
	      return;
	    }
	    if (options.wheelSensitivity !== undefined) {
	      warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
	    }
	    var rOpts = rendererDefaults(options);
	    rOpts.cy = cy;
	    cy._private.renderer = new RendererProto(rOpts);
	    this.notify('init');
	  },
	  destroyRenderer: function destroyRenderer() {
	    var cy = this;
	    cy.notify('destroy'); // destroy the renderer

	    var domEle = cy.container();
	    if (domEle) {
	      domEle._cyreg = null;
	      while (domEle.childNodes.length > 0) {
	        domEle.removeChild(domEle.childNodes[0]);
	      }
	    }
	    cy._private.renderer = null; // to be extra safe, remove the ref
	    cy.mutableElements().forEach(function (ele) {
	      var _p = ele._private;
	      _p.rscratch = {};
	      _p.rstyle = {};
	      _p.animation.current = [];
	      _p.animation.queue = [];
	    });
	  },
	  onRender: function onRender(fn) {
	    return this.on('render', fn);
	  },
	  offRender: function offRender(fn) {
	    return this.off('render', fn);
	  }
	};
	corefn$4.invalidateDimensions = corefn$4.resize;

	var corefn$3 = {
	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function collection(eles, opts) {
	    if (string(eles)) {
	      return this.$(eles);
	    } else if (elementOrCollection(eles)) {
	      return eles.collection();
	    } else if (array(eles)) {
	      if (!opts) {
	        opts = {};
	      }
	      return new Collection(this, eles, opts.unique, opts.removed);
	    }
	    return new Collection(this);
	  },
	  nodes: function nodes(selector) {
	    var nodes = this.$(function (ele) {
	      return ele.isNode();
	    });
	    if (selector) {
	      return nodes.filter(selector);
	    }
	    return nodes;
	  },
	  edges: function edges(selector) {
	    var edges = this.$(function (ele) {
	      return ele.isEdge();
	    });
	    if (selector) {
	      return edges.filter(selector);
	    }
	    return edges;
	  },
	  // search the graph like jQuery
	  $: function $(selector) {
	    var eles = this._private.elements;
	    if (selector) {
	      return eles.filter(selector);
	    } else {
	      return eles.spawnSelf();
	    }
	  },
	  mutableElements: function mutableElements() {
	    return this._private.elements;
	  }
	};

	// aliases
	corefn$3.elements = corefn$3.filter = corefn$3.$;

	var styfn$8 = {};

	// keys for style blocks, e.g. ttfftt
	var TRUE = 't';
	var FALSE = 'f';

	// (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it
	styfn$8.apply = function (eles) {
	  var self = this;
	  var _p = self._private;
	  var cy = _p.cy;
	  var updatedEles = cy.collection();
	  for (var ie = 0; ie < eles.length; ie++) {
	    var ele = eles[ie];
	    var cxtMeta = self.getContextMeta(ele);
	    if (cxtMeta.empty) {
	      continue;
	    }
	    var cxtStyle = self.getContextStyle(cxtMeta);
	    var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);
	    if (ele._private.appliedInitStyle) {
	      self.updateTransitions(ele, app.diffProps);
	    } else {
	      ele._private.appliedInitStyle = true;
	    }
	    var hintsDiff = self.updateStyleHints(ele);
	    if (hintsDiff) {
	      updatedEles.push(ele);
	    }
	  } // for elements

	  return updatedEles;
	};
	styfn$8.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[dualCxtKey];
	  if (cachedVal) {
	    return cachedVal;
	  }
	  var diffProps = [];
	  var addedProp = {};
	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var oldHasCxt = oldCxtKey[i] === TRUE;
	    var newHasCxt = newCxtKey[i] === TRUE;
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;
	    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
	      var props = void 0;
	      if (cxtHasDiffed && cxtHasMappedProps) {
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if (cxtHasDiffed) {
	        props = cxt.properties; // need to check them all
	      } else if (cxtHasMappedProps) {
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for (var j = 0; j < props.length; j++) {
	        var prop = props[j];
	        var name = prop.name;

	        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)
	        var laterCxtOverrides = false;
	        for (var k = i + 1; k < self.length; k++) {
	          var laterCxt = self[k];
	          var hasLaterCxt = newCxtKey[k] === TRUE;
	          if (!hasLaterCxt) {
	            continue;
	          } // can't override unless the context is active

	          laterCxtOverrides = laterCxt.properties[prop.name] != null;
	          if (laterCxtOverrides) {
	            break;
	          } // exit early as long as one later context overrides
	        }

	        if (!addedProp[name] && !laterCxtOverrides) {
	          addedProp[name] = true;
	          diffProps.push(name);
	        }
	      } // for props
	    } // if
	  } // for contexts

	  cache[dualCxtKey] = diffProps;
	  return diffProps;
	};
	styfn$8.getContextMeta = function (ele) {
	  var self = this;
	  var cxtKey = '';
	  var diffProps;
	  var prevKey = ele._private.styleCxtKey || '';

	  // get the cxt key
	  for (var i = 0; i < self.length; i++) {
	    var context = self[i];
	    var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

	    if (contextSelectorMatches) {
	      cxtKey += TRUE;
	    } else {
	      cxtKey += FALSE;
	    }
	  } // for context

	  diffProps = self.getPropertiesDiff(prevKey, cxtKey);
	  ele._private.styleCxtKey = cxtKey;
	  return {
	    key: cxtKey,
	    diffPropNames: diffProps,
	    empty: diffProps.length === 0
	  };
	};

	// gets a computed ele style object based on matched contexts
	styfn$8.getContextStyle = function (cxtMeta) {
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

	  // if already computed style, returned cached copy
	  if (cxtStyles[cxtKey]) {
	    return cxtStyles[cxtKey];
	  }
	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };
	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var hasCxt = cxtKey[i] === TRUE;
	    if (!hasCxt) {
	      continue;
	    }
	    for (var j = 0; j < cxt.properties.length; j++) {
	      var prop = cxt.properties[j];
	      style[prop.name] = prop;
	    }
	  }
	  cxtStyles[cxtKey] = style;
	  return style;
	};
	styfn$8.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};
	  var types = self.types;
	  for (var i = 0; i < diffProps.length; i++) {
	    var diffPropName = diffProps[i];
	    var cxtProp = cxtStyle[diffPropName];
	    var eleProp = ele.pstyle(diffPropName);
	    if (!cxtProp) {
	      // no context prop means delete
	      if (!eleProp) {
	        continue; // no existing prop means nothing needs to be removed
	        // nb affects initial application on mapped values like control-point-distances
	      } else if (eleProp.bypass) {
	        cxtProp = {
	          name: diffPropName,
	          deleteBypassed: true
	        };
	      } else {
	        cxtProp = {
	          name: diffPropName,
	          "delete": true
	        };
	      }
	    }

	    // save cycles when the context prop doesn't need to be applied
	    if (eleProp === cxtProp) {
	      continue;
	    }

	    // save cycles when a mapped context prop doesn't need to be applied
	    if (cxtProp.mapped === types.fn // context prop is function mapper
	    && eleProp != null // some props can be null even by default (e.g. a prop that overrides another one)
	    && eleProp.mapping != null // ele prop is a concrete value from from a mapper
	    && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
	    ) {
	      // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
	      var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy
	      var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

	      if (fnValue === mapping.prevFnValue) {
	        continue;
	      }
	    }
	    var retDiffProp = retDiffProps[diffPropName] = {
	      prev: eleProp
	    };
	    self.applyParsedProperty(ele, cxtProp);
	    retDiffProp.next = ele.pstyle(diffPropName);
	    if (retDiffProp.next && retDiffProp.next.bypass) {
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }
	  return {
	    diffProps: retDiffProps
	  };
	};
	styfn$8.updateStyleHints = function (ele) {
	  var _p = ele._private;
	  var self = this;
	  var propNames = self.propertyGroupNames;
	  var propGrKeys = self.propertyGroupKeys;
	  var propHash = function propHash(ele, propNames, seedKey) {
	    return self.getPropertiesHash(ele, propNames, seedKey);
	  };
	  var oldStyleKey = _p.styleKey;
	  if (ele.removed()) {
	    return false;
	  }
	  var isNode = _p.group === 'nodes';

	  // get the style key hashes per prop group
	  // but lazily -- only use non-default prop values to reduce the number of hashes
	  //

	  var overriddenStyles = ele._private.style;
	  propNames = Object.keys(overriddenStyles);
	  for (var i = 0; i < propGrKeys.length; i++) {
	    var grKey = propGrKeys[i];
	    _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
	  }
	  var updateGrKey1 = function updateGrKey1(val, grKey) {
	    return _p.styleKeys[grKey][0] = hashInt(val, _p.styleKeys[grKey][0]);
	  };
	  var updateGrKey2 = function updateGrKey2(val, grKey) {
	    return _p.styleKeys[grKey][1] = hashIntAlt(val, _p.styleKeys[grKey][1]);
	  };
	  var updateGrKey = function updateGrKey(val, grKey) {
	    updateGrKey1(val, grKey);
	    updateGrKey2(val, grKey);
	  };
	  var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {
	    for (var j = 0; j < strVal.length; j++) {
	      var ch = strVal.charCodeAt(j);
	      updateGrKey1(ch, grKey);
	      updateGrKey2(ch, grKey);
	    }
	  };

	  // - hashing works on 32 bit ints b/c we use bitwise ops
	  // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
	  // - raise up small numbers so more significant digits are seen by hashing
	  // - make small numbers larger than a normal value to avoid collisions
	  // - works in practice and it's relatively cheap
	  var N = 2000000000;
	  var cleanNum = function cleanNum(val) {
	    return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;
	  };
	  for (var _i = 0; _i < propNames.length; _i++) {
	    var name = propNames[_i];
	    var parsedProp = overriddenStyles[name];
	    if (parsedProp == null) {
	      continue;
	    }
	    var propInfo = this.properties[name];
	    var type = propInfo.type;
	    var _grKey = propInfo.groupKey;
	    var normalizedNumberVal = void 0;
	    if (propInfo.hashOverride != null) {
	      normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
	    } else if (parsedProp.pfValue != null) {
	      normalizedNumberVal = parsedProp.pfValue;
	    }

	    // might not be a number if it allows enums
	    var numberVal = propInfo.enums == null ? parsedProp.value : null;
	    var haveNormNum = normalizedNumberVal != null;
	    var haveUnitedNum = numberVal != null;
	    var haveNum = haveNormNum || haveUnitedNum;
	    var units = parsedProp.units;

	    // numbers are cheaper to hash than strings
	    // 1 hash op vs n hash ops (for length n string)
	    if (type.number && haveNum && !type.multiple) {
	      var v = haveNormNum ? normalizedNumberVal : numberVal;
	      updateGrKey(cleanNum(v), _grKey);
	      if (!haveNormNum && units != null) {
	        updateGrKeyWStr(units, _grKey);
	      }
	    } else {
	      updateGrKeyWStr(parsedProp.strValue, _grKey);
	    }
	  }

	  // overall style key
	  //

	  var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
	  for (var _i2 = 0; _i2 < propGrKeys.length; _i2++) {
	    var _grKey2 = propGrKeys[_i2];
	    var grHash = _p.styleKeys[_grKey2];
	    hash[0] = hashInt(grHash[0], hash[0]);
	    hash[1] = hashIntAlt(grHash[1], hash[1]);
	  }
	  _p.styleKey = combineHashes(hash[0], hash[1]);

	  // label dims
	  //

	  var sk = _p.styleKeys;
	  _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
	  var labelKeys = propHash(ele, ['label'], sk.labelDimensions);
	  _p.labelKey = combineHashesArray(labelKeys);
	  _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));
	  if (!isNode) {
	    var sourceLabelKeys = propHash(ele, ['source-label'], sk.labelDimensions);
	    _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
	    _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
	    var targetLabelKeys = propHash(ele, ['target-label'], sk.labelDimensions);
	    _p.targetLabelKey = combineHashesArray(targetLabelKeys);
	    _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
	  }

	  // node
	  //

	  if (isNode) {
	    var _p$styleKeys = _p.styleKeys,
	      nodeBody = _p$styleKeys.nodeBody,
	      nodeBorder = _p$styleKeys.nodeBorder,
	      nodeOutline = _p$styleKeys.nodeOutline,
	      backgroundImage = _p$styleKeys.backgroundImage,
	      compound = _p$styleKeys.compound,
	      pie = _p$styleKeys.pie;
	    var nodeKeys = [nodeBody, nodeBorder, nodeOutline, backgroundImage, compound, pie].filter(function (k) {
	      return k != null;
	    }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);
	    _p.nodeKey = combineHashesArray(nodeKeys);
	    _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
	  }
	  return oldStyleKey !== _p.styleKey;
	};
	styfn$8.clearStyleHints = function (ele) {
	  var _p = ele._private;
	  _p.styleCxtKey = '';
	  _p.styleKeys = {};
	  _p.styleKey = null;
	  _p.labelKey = null;
	  _p.labelStyleKey = null;
	  _p.sourceLabelKey = null;
	  _p.sourceLabelStyleKey = null;
	  _p.targetLabelKey = null;
	  _p.targetLabelStyleKey = null;
	  _p.nodeKey = null;
	  _p.hasPie = null;
	};

	// apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }
	styfn$8.applyParsedProperty = function (ele, parsedProp) {
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var flatProp;
	  var types = self.types;
	  var type = self.properties[prop.name].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[prop.name];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;
	  var flatPropMapping = 'mapping';
	  var getVal = function getVal(p) {
	    if (p == null) {
	      return null;
	    } else if (p.pfValue != null) {
	      return p.pfValue;
	    } else {
	      return p.value;
	    }
	  };
	  var checkTriggers = function checkTriggers() {
	    var fromVal = getVal(origProp);
	    var toVal = getVal(prop);
	    self.checkTriggers(ele, prop.name, fromVal, toVal);
	  };

	  // edge sanity checks to prevent the client from making serious mistakes
	  if (parsedProp.name === 'curve-style' && ele.isEdge() && (
	  // loops must be bundled beziers
	  parsedProp.value !== 'bezier' && ele.isLoop() ||
	  // edges connected to compound nodes can not be haystacks
	  parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
	    prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
	  }
	  if (prop["delete"]) {
	    // delete the property and use the default value on falsey value
	    style[prop.name] = undefined;
	    checkTriggers();
	    return true;
	  }
	  if (prop.deleteBypassed) {
	    // delete the property that the
	    if (!origProp) {
	      checkTriggers();
	      return true; // can't delete if no prop
	    } else if (origProp.bypass) {
	      // delete bypassed
	      origProp.bypassed = undefined;
	      checkTriggers();
	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypassed
	    }
	  }

	  // check if we need to delete the current bypass
	  if (prop.deleteBypass) {
	    // then this property is just here to indicate we need to delete
	    if (!origProp) {
	      checkTriggers();
	      return true; // property is already not defined
	    } else if (origProp.bypass) {
	      // then replace the bypass property with the original
	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[prop.name] = origProp.bypassed;
	      checkTriggers();
	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function printMappingErr() {
	    warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
	  };

	  // put the property in the style objects
	  switch (prop.mapped) {
	    // flatten the property if mapped
	    case types.mapData:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var fields = prop.field.split('.');
	        var fieldVal = _p.data;
	        for (var i = 0; i < fields.length && fieldVal; i++) {
	          var field = fields[i];
	          fieldVal = fieldVal[field];
	        }
	        if (fieldVal == null) {
	          printMappingErr();
	          return false;
	        }
	        var percent;
	        if (!number$1(fieldVal)) {
	          // then don't apply and fall back on the existing style
	          warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
	          return false;
	        } else {
	          var fieldWidth = prop.fieldMax - prop.fieldMin;
	          if (fieldWidth === 0) {
	            // safety check -- not strictly necessary as no props of zero range should be passed here
	            percent = 0;
	          } else {
	            percent = (fieldVal - prop.fieldMin) / fieldWidth;
	          }
	        }

	        // make sure to bound percent value
	        if (percent < 0) {
	          percent = 0;
	        } else if (percent > 1) {
	          percent = 1;
	        }
	        if (type.color) {
	          var r1 = prop.valueMin[0];
	          var r2 = prop.valueMax[0];
	          var g1 = prop.valueMin[1];
	          var g2 = prop.valueMax[1];
	          var b1 = prop.valueMin[2];
	          var b2 = prop.valueMax[2];
	          var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	          var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
	          var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
	          flatProp = {
	            // colours are simple, so just create the flat property instead of expensive string parsing
	            bypass: prop.bypass,
	            // we're a bypass if the mapping property is a bypass
	            name: prop.name,
	            value: clr,
	            strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	          };
	        } else if (type.number) {
	          var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	          flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
	        } else {
	          return false; // can only map to colours and numbers
	        }

	        if (!flatProp) {
	          // if we can't flatten the property, then don't apply the property and fall back on the existing style
	          printMappingErr();
	          return false;
	        }
	        flatProp.mapping = prop; // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    // direct mapping
	    case types.data:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var _fields = prop.field.split('.');
	        var _fieldVal = _p.data;
	        for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {
	          var _field = _fields[_i3];
	          _fieldVal = _fieldVal[_field];
	        }
	        if (_fieldVal != null) {
	          flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
	        }
	        if (!flatProp) {
	          // if we can't flatten the property, then don't apply and fall back on the existing style
	          printMappingErr();
	          return false;
	        }
	        flatProp.mapping = prop; // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }
	    case types.fn:
	      {
	        var fn = prop.value;
	        var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function

	        prop.prevFnValue = fnRetVal;
	        if (fnRetVal == null) {
	          warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
	          return false;
	        }
	        flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
	        if (!flatProp) {
	          warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
	          return false;
	        }
	        flatProp.mapping = copy(prop); // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }
	    case undefined:
	      break;
	    // just set the property

	    default:
	      return false;
	    // not a valid mapping
	  }

	  // if the property is a bypass property, then link the resultant property to the original one
	  if (propIsBypass) {
	    if (origPropIsBypass) {
	      // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else {
	      // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }
	    style[prop.name] = prop; // and set
	  } else {
	    // prop is not bypass
	    if (origPropIsBypass) {
	      // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else {
	      // then just replace the old prop with the new one
	      style[prop.name] = prop;
	    }
	  }
	  checkTriggers();
	  return true;
	};
	styfn$8.cleanElements = function (eles, keepBypasses) {
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    this.clearStyleHints(ele);
	    ele.dirtyCompoundBoundsCache();
	    ele.dirtyBoundingBoxCache();
	    if (!keepBypasses) {
	      ele._private.style = {};
	    } else {
	      var style = ele._private.style;
	      var propNames = Object.keys(style);
	      for (var j = 0; j < propNames.length; j++) {
	        var propName = propNames[j];
	        var eleProp = style[propName];
	        if (eleProp != null) {
	          if (eleProp.bypass) {
	            eleProp.bypassed = null;
	          } else {
	            style[propName] = null;
	          }
	        }
	      }
	    }
	  }
	};

	// updates the visual style for all elements (useful for manual style modification after init)
	styfn$8.update = function () {
	  var cy = this._private.cy;
	  var eles = cy.mutableElements();
	  eles.updateStyle();
	};

	// diffProps : { name => { prev, next } }
	styfn$8.updateTransitions = function (ele, diffProps) {
	  var self = this;
	  var _p = ele._private;
	  var props = ele.pstyle('transition-property').value;
	  var duration = ele.pstyle('transition-duration').pfValue;
	  var delay = ele.pstyle('transition-delay').pfValue;
	  if (props.length > 0 && duration > 0) {
	    var style = {};

	    // build up the style to animate towards
	    var anyPrev = false;
	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var styProp = ele.pstyle(prop);
	      var diffProp = diffProps[prop];
	      if (!diffProp) {
	        continue;
	      }
	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal = void 0;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if (!fromProp) {
	        continue;
	      }

	      // consider px values
	      if (number$1(fromProp.pfValue) && number$1(toProp.pfValue)) {
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
	        initVal = fromProp.pfValue + initDt * diff;

	        // consider numerical values
	      } else if (number$1(fromProp.value) && number$1(toProp.value)) {
	        diff = toProp.value - fromProp.value; // nonzero is truthy
	        initVal = fromProp.value + initDt * diff;

	        // consider colour values
	      } else if (array(fromProp.value) && array(toProp.value)) {
	        diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
	        initVal = fromProp.strValue;
	      }

	      // the previous value is good for an animation only if it's different
	      if (diff) {
	        style[prop] = toProp.strValue; // to val
	        this.applyBypass(ele, prop, initVal); // from val
	        anyPrev = true;
	      }
	    } // end if props allow ani

	    // can't transition if there's nothing previous to transition from
	    if (!anyPrev) {
	      return;
	    }
	    _p.transitioning = true;
	    new Promise$1(function (resolve) {
	      if (delay > 0) {
	        ele.delayAnimation(delay).play().promise().then(resolve);
	      } else {
	        resolve();
	      }
	    }).then(function () {
	      return ele.animation({
	        style: style,
	        duration: duration,
	        easing: ele.pstyle('transition-timing-function').value,
	        queue: false
	      }).play().promise();
	    }).then(function () {
	      // if( !isBypass ){
	      self.removeBypasses(ele, props);
	      ele.emitAndNotify('style');
	      // }

	      _p.transitioning = false;
	    });
	  } else if (_p.transitioning) {
	    this.removeBypasses(ele, props);
	    ele.emitAndNotify('style');
	    _p.transitioning = false;
	  }
	};
	styfn$8.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
	  var prop = this.properties[name];
	  var triggerCheck = getTrigger(prop);
	  if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
	    onTrigger(prop);
	  }
	};
	styfn$8.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
	  var _this = this;
	  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
	    return prop.triggersZOrder;
	  }, function () {
	    _this._private.cy.notify('zorder', ele);
	  });
	};
	styfn$8.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
	  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
	    return prop.triggersBounds;
	  }, function (prop) {
	    ele.dirtyCompoundBoundsCache();
	    ele.dirtyBoundingBoxCache();

	    // if the prop change makes the bb of pll bezier edges invalid,
	    // then dirty the pll edge bb cache as well
	    if (
	    // only for beziers -- so performance of other edges isn't affected
	    prop.triggersBoundsOfParallelBeziers && name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier')) {
	      ele.parallelEdges().forEach(function (pllEdge) {
	        if (pllEdge.isBundledBezier()) {
	          pllEdge.dirtyBoundingBoxCache();
	        }
	      });
	    }
	    if (prop.triggersBoundsOfConnectedEdges && name === 'display' && (fromValue === 'none' || toValue === 'none')) {
	      ele.connectedEdges().forEach(function (edge) {
	        edge.dirtyBoundingBoxCache();
	      });
	    }
	  });
	};
	styfn$8.checkTriggers = function (ele, name, fromValue, toValue) {
	  ele.dirtyStyleCache();
	  this.checkZOrderTrigger(ele, name, fromValue, toValue);
	  this.checkBoundsTrigger(ele, name, fromValue, toValue);
	};

	var styfn$7 = {};

	// bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property
	styfn$7.applyBypass = function (eles, name, value, updateTransitions) {
	  var self = this;
	  var props = [];
	  var isBypass = true;

	  // put all the properties (can specify one or many) in an array after parsing them
	  if (name === '*' || name === '**') {
	    // apply to all property names

	    if (value !== undefined) {
	      for (var i = 0; i < self.properties.length; i++) {
	        var prop = self.properties[i];
	        var _name = prop.name;
	        var parsedProp = this.parse(_name, value, true);
	        if (parsedProp) {
	          props.push(parsedProp);
	        }
	      }
	    }
	  } else if (string(name)) {
	    // then parse the single property
	    var _parsedProp = this.parse(name, value, true);
	    if (_parsedProp) {
	      props.push(_parsedProp);
	    }
	  } else if (plainObject(name)) {
	    // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;
	    var names = Object.keys(specifiedProps);
	    for (var _i = 0; _i < names.length; _i++) {
	      var _name2 = names[_i];
	      var _value = specifiedProps[_name2];
	      if (_value === undefined) {
	        // try camel case name too
	        _value = specifiedProps[dash2camel(_name2)];
	      }
	      if (_value !== undefined) {
	        var _parsedProp2 = this.parse(_name2, _value, true);
	        if (_parsedProp2) {
	          props.push(_parsedProp2);
	        }
	      }
	    }
	  } else {
	    // can't do anything without well defined properties
	    return false;
	  }

	  // we've failed if there are no valid properties
	  if (props.length === 0) {
	    return false;
	  }

	  // now, apply the bypass properties on the elements
	  var ret = false; // return true if at least one succesful bypass applied
	  for (var _i2 = 0; _i2 < eles.length; _i2++) {
	    // for each ele
	    var ele = eles[_i2];
	    var diffProps = {};
	    var diffProp = void 0;
	    for (var j = 0; j < props.length; j++) {
	      // for each prop
	      var _prop = props[j];
	      if (updateTransitions) {
	        var prevProp = ele.pstyle(_prop.name);
	        diffProp = diffProps[_prop.name] = {
	          prev: prevProp
	        };
	      }
	      ret = this.applyParsedProperty(ele, copy(_prop)) || ret;
	      if (updateTransitions) {
	        diffProp.next = ele.pstyle(_prop.name);
	      }
	    } // for props

	    if (ret) {
	      this.updateStyleHints(ele);
	    }
	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles

	  return ret;
	};

	// only useful in specific cases like animation
	styfn$7.overrideBypass = function (eles, name, value) {
	  name = camel2dash(name);
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var prop = ele._private.style[name];
	    var type = this.properties[name].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;
	    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;
	    if (!prop || !prop.bypass) {
	      // need a bypass if one doesn't exist
	      this.applyBypass(ele, name, value);
	    } else {
	      prop.value = value;
	      if (prop.pfValue != null) {
	        prop.pfValue = value;
	      }
	      if (isColor) {
	        prop.strValue = 'rgb(' + value.join(',') + ')';
	      } else if (isMulti) {
	        prop.strValue = value.join(' ');
	      } else {
	        prop.strValue = '' + value;
	      }
	      this.updateStyleHints(ele);
	    }
	    this.checkTriggers(ele, name, oldValue, value);
	  }
	};
	styfn$7.removeAllBypasses = function (eles, updateTransitions) {
	  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
	};
	styfn$7.removeBypasses = function (eles, props, updateTransitions) {
	  var isBypass = true;
	  for (var j = 0; j < eles.length; j++) {
	    var ele = eles[j];
	    var diffProps = {};
	    for (var i = 0; i < props.length; i++) {
	      var name = props[i];
	      var prop = this.properties[name];
	      var prevProp = ele.pstyle(prop.name);
	      if (!prevProp || !prevProp.bypass) {
	        // if a bypass doesn't exist for the prop, nothing needs to be removed
	        continue;
	      }
	      var value = ''; // empty => remove bypass
	      var parsedProp = this.parse(name, value, true);
	      var diffProp = diffProps[prop.name] = {
	        prev: prevProp
	      };
	      this.applyParsedProperty(ele, parsedProp);
	      diffProp.next = ele.pstyle(prop.name);
	    } // for props

	    this.updateStyleHints(ele);
	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles
	};

	var styfn$6 = {};

	// gets what an em size corresponds to in pixels relative to a dom element
	styfn$6.getEmSizeInPixels = function () {
	  var px = this.containerCss('font-size');
	  if (px != null) {
	    return parseFloat(px);
	  } else {
	    return 1; // for headless
	  }
	};

	// gets css property from the core container
	styfn$6.containerCss = function (propName) {
	  var cy = this._private.cy;
	  var domElement = cy.container();
	  var containerWindow = cy.window();
	  if (containerWindow && domElement && containerWindow.getComputedStyle) {
	    return containerWindow.getComputedStyle(domElement).getPropertyValue(propName);
	  }
	};

	var styfn$5 = {};

	// gets the rendered style for an element
	styfn$5.getRenderedStyle = function (ele, prop) {
	  if (prop) {
	    return this.getStylePropertyValue(ele, prop, true);
	  } else {
	    return this.getRawStyle(ele, true);
	  }
	};

	// gets the raw style for an element
	styfn$5.getRawStyle = function (ele, isRenderedVal) {
	  var self = this;
	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var rstyle = {};
	    for (var i = 0; i < self.properties.length; i++) {
	      var prop = self.properties[i];
	      var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);
	      if (val != null) {
	        rstyle[prop.name] = val;
	        rstyle[dash2camel(prop.name)] = val;
	      }
	    }
	    return rstyle;
	  }
	};
	styfn$5.getIndexedStyle = function (ele, property, subproperty, index) {
	  var pstyle = ele.pstyle(property)[subproperty][index];
	  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
	};
	styfn$5.getStylePropertyValue = function (ele, propName, isRenderedVal) {
	  var self = this;
	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var prop = self.properties[propName];
	    if (prop.alias) {
	      prop = prop.pointsTo;
	    }
	    var type = prop.type;
	    var styleProp = ele.pstyle(prop.name);
	    if (styleProp) {
	      var value = styleProp.value,
	        units = styleProp.units,
	        strValue = styleProp.strValue;
	      if (isRenderedVal && type.number && value != null && number$1(value)) {
	        var zoom = ele.cy().zoom();
	        var getRenderedValue = function getRenderedValue(val) {
	          return val * zoom;
	        };
	        var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
	          return getRenderedValue(val) + units;
	        };
	        var isArrayValue = array(value);
	        var haveUnits = isArrayValue ? units.every(function (u) {
	          return u != null;
	        }) : units != null;
	        if (haveUnits) {
	          if (isArrayValue) {
	            return value.map(function (v, i) {
	              return getValueStringWithUnits(v, units[i]);
	            }).join(' ');
	          } else {
	            return getValueStringWithUnits(value, units);
	          }
	        } else {
	          if (isArrayValue) {
	            return value.map(function (v) {
	              return string(v) ? v : '' + getRenderedValue(v);
	            }).join(' ');
	          } else {
	            return '' + getRenderedValue(value);
	          }
	        }
	      } else if (strValue != null) {
	        return strValue;
	      }
	    }
	    return null;
	  }
	};
	styfn$5.getAnimationStartStyle = function (ele, aniProps) {
	  var rstyle = {};
	  for (var i = 0; i < aniProps.length; i++) {
	    var aniProp = aniProps[i];
	    var name = aniProp.name;
	    var styleProp = ele.pstyle(name);
	    if (styleProp !== undefined) {
	      // then make a prop of it
	      if (plainObject(styleProp)) {
	        styleProp = this.parse(name, styleProp.strValue);
	      } else {
	        styleProp = this.parse(name, styleProp);
	      }
	    }
	    if (styleProp) {
	      rstyle[name] = styleProp;
	    }
	  }
	  return rstyle;
	};
	styfn$5.getPropsList = function (propsObj) {
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;
	  if (style) {
	    var names = Object.keys(style);
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      var val = style[name];
	      var prop = props[name] || props[camel2dash(name)];
	      var styleProp = this.parse(prop.name, val);
	      if (styleProp) {
	        rstyle.push(styleProp);
	      }
	    }
	  }
	  return rstyle;
	};
	styfn$5.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
	  var hash = seed.slice();
	  var name, val, strVal, chVal;
	  var i, j;
	  for (i = 0; i < propNames.length; i++) {
	    name = propNames[i];
	    val = ele.pstyle(name, false);
	    if (val == null) {
	      continue;
	    } else if (val.pfValue != null) {
	      hash[0] = hashInt(chVal, hash[0]);
	      hash[1] = hashIntAlt(chVal, hash[1]);
	    } else {
	      strVal = val.strValue;
	      for (j = 0; j < strVal.length; j++) {
	        chVal = strVal.charCodeAt(j);
	        hash[0] = hashInt(chVal, hash[0]);
	        hash[1] = hashIntAlt(chVal, hash[1]);
	      }
	    }
	  }
	  return hash;
	};
	styfn$5.getPropertiesHash = styfn$5.getNonDefaultPropertiesHash;

	var styfn$4 = {};
	styfn$4.appendFromJson = function (json) {
	  var style = this;
	  for (var i = 0; i < json.length; i++) {
	    var context = json[i];
	    var selector = context.selector;
	    var props = context.style || context.css;
	    var names = Object.keys(props);
	    style.selector(selector); // apply selector

	    for (var j = 0; j < names.length; j++) {
	      var name = names[j];
	      var value = props[name];
	      style.css(name, value); // apply property
	    }
	  }

	  return style;
	};

	// accessible cy.style() function
	styfn$4.fromJson = function (json) {
	  var style = this;
	  style.resetToDefault();
	  style.appendFromJson(json);
	  return style;
	};

	// get json from cy.style() api
	styfn$4.json = function () {
	  var json = [];
	  for (var i = this.defaultLength; i < this.length; i++) {
	    var cxt = this[i];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};
	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];
	      css[prop.name] = prop.strValue;
	    }
	    json.push({
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    });
	  }
	  return json;
	};

	var styfn$3 = {};
	styfn$3.appendFromString = function (string) {
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr;
	  var blockRem;
	  var propAndValStr;

	  // remove comments from the style string
	  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');
	  function removeSelAndBlockFromRemaining() {
	    // remove the parsed selector and block from the remaining text to parse
	    if (remaining.length > selAndBlockStr.length) {
	      remaining = remaining.substr(selAndBlockStr.length);
	    } else {
	      remaining = '';
	    }
	  }
	  function removePropAndValFromRem() {
	    // remove the parsed property and value from the remaining block text to parse
	    if (blockRem.length > propAndValStr.length) {
	      blockRem = blockRem.substr(propAndValStr.length);
	    } else {
	      blockRem = '';
	    }
	  }
	  for (;;) {
	    var nothingLeftToParse = remaining.match(/^\s*$/);
	    if (nothingLeftToParse) {
	      break;
	    }
	    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);
	    if (!selAndBlock) {
	      warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
	      break;
	    }
	    selAndBlockStr = selAndBlock[0];

	    // parse the selector
	    var selectorStr = selAndBlock[1];
	    if (selectorStr !== 'core') {
	      var selector = new Selector(selectorStr);
	      if (selector.invalid) {
	        warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);

	        // skip this selector and block
	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    }

	    // parse the block of properties and values
	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];
	    for (;;) {
	      var _nothingLeftToParse = blockRem.match(/^\s*$/);
	      if (_nothingLeftToParse) {
	        break;
	      }
	      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)(?:\s*;|\s*$)/);
	      if (!propAndVal) {
	        warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
	        invalidBlock = true;
	        break;
	      }
	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];
	      var prop = self.properties[propStr];
	      if (!prop) {
	        warn('Skipping property: Invalid property name in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }
	      var parsedProp = style.parse(propStr, valStr);
	      if (!parsedProp) {
	        warn('Skipping property: Invalid property definition in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }
	      props.push({
	        name: propStr,
	        val: valStr
	      });
	      removePropAndValFromRem();
	    }
	    if (invalidBlock) {
	      removeSelAndBlockFromRemaining();
	      break;
	    }

	    // put the parsed block in the style
	    style.selector(selectorStr);
	    for (var i = 0; i < props.length; i++) {
	      var _prop = props[i];
	      style.css(_prop.name, _prop.val);
	    }
	    removeSelAndBlockFromRemaining();
	  }
	  return style;
	};
	styfn$3.fromString = function (string) {
	  var style = this;
	  style.resetToDefault();
	  style.appendFromString(string);
	  return style;
	};

	var styfn$2 = {};
	(function () {
	  var number$1 = number;
	  var rgba = rgbaNoBackRefs;
	  var hsla = hslaNoBackRefs;
	  var hex3$1 = hex3;
	  var hex6$1 = hex6;
	  var data = function data(prefix) {
	    return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
	  };
	  var mapData = function mapData(prefix) {
	    var mapArg = number$1 + '|\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number$1 + ')\\s*\\,\\s*(' + number$1 + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };
	  var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$'];

	  // each visual style property has a type and needs to be validated according to it
	  styfn$2.types = {
	    time: {
	      number: true,
	      min: 0,
	      units: 's|ms',
	      implicitUnits: 'ms'
	    },
	    percent: {
	      number: true,
	      min: 0,
	      max: 100,
	      units: '%',
	      implicitUnits: '%'
	    },
	    percentages: {
	      number: true,
	      min: 0,
	      max: 100,
	      units: '%',
	      implicitUnits: '%',
	      multiple: true
	    },
	    zeroOneNumber: {
	      number: true,
	      min: 0,
	      max: 1,
	      unitless: true
	    },
	    zeroOneNumbers: {
	      number: true,
	      min: 0,
	      max: 1,
	      unitless: true,
	      multiple: true
	    },
	    nOneOneNumber: {
	      number: true,
	      min: -1,
	      max: 1,
	      unitless: true
	    },
	    nonNegativeInt: {
	      number: true,
	      min: 0,
	      integer: true,
	      unitless: true
	    },
	    nonNegativeNumber: {
	      number: true,
	      min: 0,
	      unitless: true
	    },
	    position: {
	      enums: ['parent', 'origin']
	    },
	    nodeSize: {
	      number: true,
	      min: 0,
	      enums: ['label']
	    },
	    number: {
	      number: true,
	      unitless: true
	    },
	    numbers: {
	      number: true,
	      unitless: true,
	      multiple: true
	    },
	    positiveNumber: {
	      number: true,
	      unitless: true,
	      min: 0,
	      strictMin: true
	    },
	    size: {
	      number: true,
	      min: 0
	    },
	    bidirectionalSize: {
	      number: true
	    },
	    // allows negative
	    bidirectionalSizeMaybePercent: {
	      number: true,
	      allowPercent: true
	    },
	    // allows negative
	    bidirectionalSizes: {
	      number: true,
	      multiple: true
	    },
	    // allows negative
	    sizeMaybePercent: {
	      number: true,
	      min: 0,
	      allowPercent: true
	    },
	    axisDirection: {
	      enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']
	    },
	    paddingRelativeTo: {
	      enums: ['width', 'height', 'average', 'min', 'max']
	    },
	    bgWH: {
	      number: true,
	      min: 0,
	      allowPercent: true,
	      enums: ['auto'],
	      multiple: true
	    },
	    bgPos: {
	      number: true,
	      allowPercent: true,
	      multiple: true
	    },
	    bgRelativeTo: {
	      enums: ['inner', 'include-padding'],
	      multiple: true
	    },
	    bgRepeat: {
	      enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
	      multiple: true
	    },
	    bgFit: {
	      enums: ['none', 'contain', 'cover'],
	      multiple: true
	    },
	    bgCrossOrigin: {
	      enums: ['anonymous', 'use-credentials', 'null'],
	      multiple: true
	    },
	    bgClip: {
	      enums: ['none', 'node'],
	      multiple: true
	    },
	    bgContainment: {
	      enums: ['inside', 'over'],
	      multiple: true
	    },
	    color: {
	      color: true
	    },
	    colors: {
	      color: true,
	      multiple: true
	    },
	    fill: {
	      enums: ['solid', 'linear-gradient', 'radial-gradient']
	    },
	    bool: {
	      enums: ['yes', 'no']
	    },
	    bools: {
	      enums: ['yes', 'no'],
	      multiple: true
	    },
	    lineStyle: {
	      enums: ['solid', 'dotted', 'dashed']
	    },
	    lineCap: {
	      enums: ['butt', 'round', 'square']
	    },
	    linePosition: {
	      enums: ['center', 'inside', 'outside']
	    },
	    lineJoin: {
	      enums: ['round', 'bevel', 'miter']
	    },
	    borderStyle: {
	      enums: ['solid', 'dotted', 'dashed', 'double']
	    },
	    curveStyle: {
	      enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'straight-triangle', 'taxi', 'round-segments', 'round-taxi']
	    },
	    radiusType: {
	      enums: ['arc-radius', 'influence-radius'],
	      multiple: true
	    },
	    fontFamily: {
	      regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
	    },
	    fontStyle: {
	      enums: ['italic', 'normal', 'oblique']
	    },
	    fontWeight: {
	      enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
	    },
	    textDecoration: {
	      enums: ['none', 'underline', 'overline', 'line-through']
	    },
	    textTransform: {
	      enums: ['none', 'uppercase', 'lowercase']
	    },
	    textWrap: {
	      enums: ['none', 'wrap', 'ellipsis']
	    },
	    textOverflowWrap: {
	      enums: ['whitespace', 'anywhere']
	    },
	    textBackgroundShape: {
	      enums: ['rectangle', 'roundrectangle', 'round-rectangle']
	    },
	    nodeShape: {
	      enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'round-triangle', 'square', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'tag', 'round-tag', 'star', 'diamond', 'round-diamond', 'vee', 'rhomboid', 'right-rhomboid', 'polygon']
	    },
	    overlayShape: {
	      enums: ['roundrectangle', 'round-rectangle', 'ellipse']
	    },
	    cornerRadius: {
	      number: true,
	      min: 0,
	      units: 'px|em',
	      implicitUnits: 'px',
	      enums: ['auto']
	    },
	    compoundIncludeLabels: {
	      enums: ['include', 'exclude']
	    },
	    arrowShape: {
	      enums: ['tee', 'triangle', 'triangle-tee', 'circle-triangle', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
	    },
	    arrowFill: {
	      enums: ['filled', 'hollow']
	    },
	    arrowWidth: {
	      number: true,
	      units: '%|px|em',
	      implicitUnits: 'px',
	      enums: ['match-line']
	    },
	    display: {
	      enums: ['element', 'none']
	    },
	    visibility: {
	      enums: ['hidden', 'visible']
	    },
	    zCompoundDepth: {
	      enums: ['bottom', 'orphan', 'auto', 'top']
	    },
	    zIndexCompare: {
	      enums: ['auto', 'manual']
	    },
	    valign: {
	      enums: ['top', 'center', 'bottom']
	    },
	    halign: {
	      enums: ['left', 'center', 'right']
	    },
	    justification: {
	      enums: ['left', 'center', 'right', 'auto']
	    },
	    text: {
	      string: true
	    },
	    data: {
	      mapping: true,
	      regex: data('data')
	    },
	    layoutData: {
	      mapping: true,
	      regex: data('layoutData')
	    },
	    scratch: {
	      mapping: true,
	      regex: data('scratch')
	    },
	    mapData: {
	      mapping: true,
	      regex: mapData('mapData')
	    },
	    mapLayoutData: {
	      mapping: true,
	      regex: mapData('mapLayoutData')
	    },
	    mapScratch: {
	      mapping: true,
	      regex: mapData('mapScratch')
	    },
	    fn: {
	      mapping: true,
	      fn: true
	    },
	    url: {
	      regexes: urlRegexes,
	      singleRegexMatchValue: true
	    },
	    urls: {
	      regexes: urlRegexes,
	      singleRegexMatchValue: true,
	      multiple: true
	    },
	    propList: {
	      propList: true
	    },
	    angle: {
	      number: true,
	      units: 'deg|rad',
	      implicitUnits: 'rad'
	    },
	    textRotation: {
	      number: true,
	      units: 'deg|rad',
	      implicitUnits: 'rad',
	      enums: ['none', 'autorotate']
	    },
	    polygonPointList: {
	      number: true,
	      multiple: true,
	      evenMultiple: true,
	      min: -1,
	      max: 1,
	      unitless: true
	    },
	    edgeDistances: {
	      enums: ['intersection', 'node-position', 'endpoints']
	    },
	    edgeEndpoint: {
	      number: true,
	      multiple: true,
	      units: '%|px|em|deg|rad',
	      implicitUnits: 'px',
	      enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
	      singleEnum: true,
	      validate: function validate(valArr, unitsArr) {
	        switch (valArr.length) {
	          case 2:
	            // can be % or px only
	            return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';
	          case 1:
	            // can be enum, deg, or rad only
	            return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';
	          default:
	            return false;
	        }
	      }
	    },
	    easing: {
	      regexes: ['^(spring)\\s*\\(\\s*(' + number$1 + ')\\s*,\\s*(' + number$1 + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number$1 + ')\\s*,\\s*(' + number$1 + ')\\s*,\\s*(' + number$1 + ')\\s*,\\s*(' + number$1 + ')\\s*\\)$'],
	      enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
	    },
	    gradientDirection: {
	      enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top' // different order
	      ]
	    },

	    boundsExpansion: {
	      number: true,
	      multiple: true,
	      min: 0,
	      validate: function validate(valArr) {
	        var length = valArr.length;
	        return length === 1 || length === 2 || length === 4;
	      }
	    }
	  };
	  var diff = {
	    zeroNonZero: function zeroNonZero(val1, val2) {
	      if ((val1 == null || val2 == null) && val1 !== val2) {
	        return true; // null cases could represent any value
	      }
	      if (val1 == 0 && val2 != 0) {
	        return true;
	      } else if (val1 != 0 && val2 == 0) {
	        return true;
	      } else {
	        return false;
	      }
	    },
	    any: function any(val1, val2) {
	      return val1 != val2;
	    },
	    emptyNonEmpty: function emptyNonEmpty(str1, str2) {
	      var empty1 = emptyString(str1);
	      var empty2 = emptyString(str2);
	      return empty1 && !empty2 || !empty1 && empty2;
	    }
	  };

	  // define visual style properties
	  //
	  // - n.b. adding a new group of props may require updates to updateStyleHints()
	  // - adding new props to an existing group gets handled automatically

	  var t = styfn$2.types;
	  var mainLabel = [{
	    name: 'label',
	    type: t.text,
	    triggersBounds: diff.any,
	    triggersZOrder: diff.emptyNonEmpty
	  }, {
	    name: 'text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }];
	  var sourceLabel = [{
	    name: 'source-label',
	    type: t.text,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-offset',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var targetLabel = [{
	    name: 'target-label',
	    type: t.text,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-offset',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var labelDimensions = [{
	    name: 'font-family',
	    type: t.fontFamily,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-style',
	    type: t.fontStyle,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-weight',
	    type: t.fontWeight,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-size',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-transform',
	    type: t.textTransform,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-wrap',
	    type: t.textWrap,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-overflow-wrap',
	    type: t.textOverflowWrap,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-max-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-outline-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'line-height',
	    type: t.positiveNumber,
	    triggersBounds: diff.any
	  }];
	  var commonLabel = [{
	    name: 'text-valign',
	    type: t.valign,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-halign',
	    type: t.halign,
	    triggersBounds: diff.any
	  }, {
	    name: 'color',
	    type: t.color
	  }, {
	    name: 'text-outline-color',
	    type: t.color
	  }, {
	    name: 'text-outline-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-background-color',
	    type: t.color
	  }, {
	    name: 'text-background-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-background-padding',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-border-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-border-color',
	    type: t.color
	  }, {
	    name: 'text-border-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-border-style',
	    type: t.borderStyle,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-background-shape',
	    type: t.textBackgroundShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-justification',
	    type: t.justification
	  }];
	  var behavior = [{
	    name: 'events',
	    type: t.bool,
	    triggersZOrder: diff.any
	  }, {
	    name: 'text-events',
	    type: t.bool,
	    triggersZOrder: diff.any
	  }];
	  var visibility = [{
	    name: 'display',
	    type: t.display,
	    triggersZOrder: diff.any,
	    triggersBounds: diff.any,
	    triggersBoundsOfConnectedEdges: true
	  }, {
	    name: 'visibility',
	    type: t.visibility,
	    triggersZOrder: diff.any
	  }, {
	    name: 'opacity',
	    type: t.zeroOneNumber,
	    triggersZOrder: diff.zeroNonZero
	  }, {
	    name: 'text-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'min-zoomed-font-size',
	    type: t.size
	  }, {
	    name: 'z-compound-depth',
	    type: t.zCompoundDepth,
	    triggersZOrder: diff.any
	  }, {
	    name: 'z-index-compare',
	    type: t.zIndexCompare,
	    triggersZOrder: diff.any
	  }, {
	    name: 'z-index',
	    type: t.number,
	    triggersZOrder: diff.any
	  }];
	  var overlay = [{
	    name: 'overlay-padding',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'overlay-color',
	    type: t.color
	  }, {
	    name: 'overlay-opacity',
	    type: t.zeroOneNumber,
	    triggersBounds: diff.zeroNonZero
	  }, {
	    name: 'overlay-shape',
	    type: t.overlayShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'overlay-corner-radius',
	    type: t.cornerRadius
	  }];
	  var underlay = [{
	    name: 'underlay-padding',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'underlay-color',
	    type: t.color
	  }, {
	    name: 'underlay-opacity',
	    type: t.zeroOneNumber,
	    triggersBounds: diff.zeroNonZero
	  }, {
	    name: 'underlay-shape',
	    type: t.overlayShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'underlay-corner-radius',
	    type: t.cornerRadius
	  }];
	  var transition = [{
	    name: 'transition-property',
	    type: t.propList
	  }, {
	    name: 'transition-duration',
	    type: t.time
	  }, {
	    name: 'transition-delay',
	    type: t.time
	  }, {
	    name: 'transition-timing-function',
	    type: t.easing
	  }];
	  var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {
	    if (parsedProp.value === 'label') {
	      return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)
	    } else {
	      return parsedProp.pfValue;
	    }
	  };
	  var nodeBody = [{
	    name: 'height',
	    type: t.nodeSize,
	    triggersBounds: diff.any,
	    hashOverride: nodeSizeHashOverride
	  }, {
	    name: 'width',
	    type: t.nodeSize,
	    triggersBounds: diff.any,
	    hashOverride: nodeSizeHashOverride
	  }, {
	    name: 'shape',
	    type: t.nodeShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'shape-polygon-points',
	    type: t.polygonPointList,
	    triggersBounds: diff.any
	  }, {
	    name: 'corner-radius',
	    type: t.cornerRadius
	  }, {
	    name: 'background-color',
	    type: t.color
	  }, {
	    name: 'background-fill',
	    type: t.fill
	  }, {
	    name: 'background-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'background-blacken',
	    type: t.nOneOneNumber
	  }, {
	    name: 'background-gradient-stop-colors',
	    type: t.colors
	  }, {
	    name: 'background-gradient-stop-positions',
	    type: t.percentages
	  }, {
	    name: 'background-gradient-direction',
	    type: t.gradientDirection
	  }, {
	    name: 'padding',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'padding-relative-to',
	    type: t.paddingRelativeTo,
	    triggersBounds: diff.any
	  }, {
	    name: 'bounds-expansion',
	    type: t.boundsExpansion,
	    triggersBounds: diff.any
	  }];
	  var nodeBorder = [{
	    name: 'border-color',
	    type: t.color
	  }, {
	    name: 'border-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'border-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'border-style',
	    type: t.borderStyle
	  }, {
	    name: 'border-cap',
	    type: t.lineCap
	  }, {
	    name: 'border-join',
	    type: t.lineJoin
	  }, {
	    name: 'border-dash-pattern',
	    type: t.numbers
	  }, {
	    name: 'border-dash-offset',
	    type: t.number
	  }, {
	    name: 'border-position',
	    type: t.linePosition
	  }];
	  var nodeOutline = [{
	    name: 'outline-color',
	    type: t.color
	  }, {
	    name: 'outline-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'outline-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'outline-style',
	    type: t.borderStyle
	  }, {
	    name: 'outline-offset',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var backgroundImage = [{
	    name: 'background-image',
	    type: t.urls
	  }, {
	    name: 'background-image-crossorigin',
	    type: t.bgCrossOrigin
	  }, {
	    name: 'background-image-opacity',
	    type: t.zeroOneNumbers
	  }, {
	    name: 'background-image-containment',
	    type: t.bgContainment
	  }, {
	    name: 'background-image-smoothing',
	    type: t.bools
	  }, {
	    name: 'background-position-x',
	    type: t.bgPos
	  }, {
	    name: 'background-position-y',
	    type: t.bgPos
	  }, {
	    name: 'background-width-relative-to',
	    type: t.bgRelativeTo
	  }, {
	    name: 'background-height-relative-to',
	    type: t.bgRelativeTo
	  }, {
	    name: 'background-repeat',
	    type: t.bgRepeat
	  }, {
	    name: 'background-fit',
	    type: t.bgFit
	  }, {
	    name: 'background-clip',
	    type: t.bgClip
	  }, {
	    name: 'background-width',
	    type: t.bgWH
	  }, {
	    name: 'background-height',
	    type: t.bgWH
	  }, {
	    name: 'background-offset-x',
	    type: t.bgPos
	  }, {
	    name: 'background-offset-y',
	    type: t.bgPos
	  }];
	  var compound = [{
	    name: 'position',
	    type: t.position,
	    triggersBounds: diff.any
	  }, {
	    name: 'compound-sizing-wrt-labels',
	    type: t.compoundIncludeLabels,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width-bias-left',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width-bias-right',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height-bias-top',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height-bias-bottom',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }];
	  var edgeLine = [{
	    name: 'line-style',
	    type: t.lineStyle
	  }, {
	    name: 'line-color',
	    type: t.color
	  }, {
	    name: 'line-fill',
	    type: t.fill
	  }, {
	    name: 'line-cap',
	    type: t.lineCap
	  }, {
	    name: 'line-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'line-dash-pattern',
	    type: t.numbers
	  }, {
	    name: 'line-dash-offset',
	    type: t.number
	  }, {
	    name: 'line-gradient-stop-colors',
	    type: t.colors
	  }, {
	    name: 'line-gradient-stop-positions',
	    type: t.percentages
	  }, {
	    name: 'curve-style',
	    type: t.curveStyle,
	    triggersBounds: diff.any,
	    triggersBoundsOfParallelBeziers: true
	  }, {
	    name: 'haystack-radius',
	    type: t.zeroOneNumber,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-endpoint',
	    type: t.edgeEndpoint,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-endpoint',
	    type: t.edgeEndpoint,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-step-size',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-distances',
	    type: t.bidirectionalSizes,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-weights',
	    type: t.numbers,
	    triggersBounds: diff.any
	  }, {
	    name: 'segment-distances',
	    type: t.bidirectionalSizes,
	    triggersBounds: diff.any
	  }, {
	    name: 'segment-weights',
	    type: t.numbers,
	    triggersBounds: diff.any
	  }, {
	    name: 'segment-radii',
	    type: t.numbers,
	    triggersBounds: diff.any
	  }, {
	    name: 'radius-type',
	    type: t.radiusType,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-turn',
	    type: t.bidirectionalSizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-turn-min-distance',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-direction',
	    type: t.axisDirection,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-radius',
	    type: t.number,
	    triggersBounds: diff.any
	  }, {
	    name: 'edge-distances',
	    type: t.edgeDistances,
	    triggersBounds: diff.any
	  }, {
	    name: 'arrow-scale',
	    type: t.positiveNumber,
	    triggersBounds: diff.any
	  }, {
	    name: 'loop-direction',
	    type: t.angle,
	    triggersBounds: diff.any
	  }, {
	    name: 'loop-sweep',
	    type: t.angle,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-distance-from-node',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-distance-from-node',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var ghost = [{
	    name: 'ghost',
	    type: t.bool,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-offset-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-offset-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-opacity',
	    type: t.zeroOneNumber
	  }];
	  var core = [{
	    name: 'selection-box-color',
	    type: t.color
	  }, {
	    name: 'selection-box-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'selection-box-border-color',
	    type: t.color
	  }, {
	    name: 'selection-box-border-width',
	    type: t.size
	  }, {
	    name: 'active-bg-color',
	    type: t.color
	  }, {
	    name: 'active-bg-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'active-bg-size',
	    type: t.size
	  }, {
	    name: 'outside-texture-bg-color',
	    type: t.color
	  }, {
	    name: 'outside-texture-bg-opacity',
	    type: t.zeroOneNumber
	  }];

	  // pie backgrounds for nodes
	  var pie = [];
	  styfn$2.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
	  pie.push({
	    name: 'pie-size',
	    type: t.sizeMaybePercent
	  });
	  for (var i = 1; i <= styfn$2.pieBackgroundN; i++) {
	    pie.push({
	      name: 'pie-' + i + '-background-color',
	      type: t.color
	    });
	    pie.push({
	      name: 'pie-' + i + '-background-size',
	      type: t.percent
	    });
	    pie.push({
	      name: 'pie-' + i + '-background-opacity',
	      type: t.zeroOneNumber
	    });
	  }

	  // edge arrows
	  var edgeArrow = [];
	  var arrowPrefixes = styfn$2.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
	  [{
	    name: 'arrow-shape',
	    type: t.arrowShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'arrow-color',
	    type: t.color
	  }, {
	    name: 'arrow-fill',
	    type: t.arrowFill
	  }, {
	    name: 'arrow-width',
	    type: t.arrowWidth
	  }].forEach(function (prop) {
	    arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var type = prop.type,
	        triggersBounds = prop.triggersBounds;
	      edgeArrow.push({
	        name: name,
	        type: type,
	        triggersBounds: triggersBounds
	      });
	    });
	  }, {});
	  var props = styfn$2.properties = [].concat(behavior, transition, visibility, overlay, underlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, nodeOutline, backgroundImage, pie, compound, edgeLine, edgeArrow, core);
	  var propGroups = styfn$2.propertyGroups = {
	    // common to all eles
	    behavior: behavior,
	    transition: transition,
	    visibility: visibility,
	    overlay: overlay,
	    underlay: underlay,
	    ghost: ghost,
	    // labels
	    commonLabel: commonLabel,
	    labelDimensions: labelDimensions,
	    mainLabel: mainLabel,
	    sourceLabel: sourceLabel,
	    targetLabel: targetLabel,
	    // node props
	    nodeBody: nodeBody,
	    nodeBorder: nodeBorder,
	    nodeOutline: nodeOutline,
	    backgroundImage: backgroundImage,
	    pie: pie,
	    compound: compound,
	    // edge props
	    edgeLine: edgeLine,
	    edgeArrow: edgeArrow,
	    core: core
	  };
	  var propGroupNames = styfn$2.propertyGroupNames = {};
	  var propGroupKeys = styfn$2.propertyGroupKeys = Object.keys(propGroups);
	  propGroupKeys.forEach(function (key) {
	    propGroupNames[key] = propGroups[key].map(function (prop) {
	      return prop.name;
	    });
	    propGroups[key].forEach(function (prop) {
	      return prop.groupKey = key;
	    });
	  });

	  // define aliases
	  var aliases = styfn$2.aliases = [{
	    name: 'content',
	    pointsTo: 'label'
	  }, {
	    name: 'control-point-distance',
	    pointsTo: 'control-point-distances'
	  }, {
	    name: 'control-point-weight',
	    pointsTo: 'control-point-weights'
	  }, {
	    name: 'segment-distance',
	    pointsTo: 'segment-distances'
	  }, {
	    name: 'segment-weight',
	    pointsTo: 'segment-weights'
	  }, {
	    name: 'segment-radius',
	    pointsTo: 'segment-radii'
	  }, {
	    name: 'edge-text-rotation',
	    pointsTo: 'text-rotation'
	  }, {
	    name: 'padding-left',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-right',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-top',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-bottom',
	    pointsTo: 'padding'
	  }];

	  // list of property names
	  styfn$2.propertyNames = props.map(function (p) {
	    return p.name;
	  });

	  // allow access of properties by name ( e.g. style.properties.height )
	  for (var _i = 0; _i < props.length; _i++) {
	    var prop = props[_i];
	    props[prop.name] = prop; // allow lookup by name
	  }

	  // map aliases
	  for (var _i2 = 0; _i2 < aliases.length; _i2++) {
	    var alias = aliases[_i2];
	    var pointsToProp = props[alias.pointsTo];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    };

	    // add alias prop for parsing
	    props.push(aliasProp);
	    props[alias.name] = aliasProp; // allow lookup by name
	  }
	})();

	styfn$2.getDefaultProperty = function (name) {
	  return this.getDefaultProperties()[name];
	};
	styfn$2.getDefaultProperties = function () {
	  var _p = this._private;
	  if (_p.defaultProperties != null) {
	    return _p.defaultProperties;
	  }
	  var rawProps = extend({
	    // core props
	    'selection-box-color': '#ddd',
	    'selection-box-opacity': 0.65,
	    'selection-box-border-color': '#aaa',
	    'selection-box-border-width': 1,
	    'active-bg-color': 'black',
	    'active-bg-opacity': 0.15,
	    'active-bg-size': 30,
	    'outside-texture-bg-color': '#000',
	    'outside-texture-bg-opacity': 0.125,
	    // common node/edge props
	    'events': 'yes',
	    'text-events': 'no',
	    'text-valign': 'top',
	    'text-halign': 'center',
	    'text-justification': 'auto',
	    'line-height': 1,
	    'color': '#000',
	    'text-outline-color': '#000',
	    'text-outline-width': 0,
	    'text-outline-opacity': 1,
	    'text-opacity': 1,
	    'text-decoration': 'none',
	    'text-transform': 'none',
	    'text-wrap': 'none',
	    'text-overflow-wrap': 'whitespace',
	    'text-max-width': 9999,
	    'text-background-color': '#000',
	    'text-background-opacity': 0,
	    'text-background-shape': 'rectangle',
	    'text-background-padding': 0,
	    'text-border-opacity': 0,
	    'text-border-width': 0,
	    'text-border-style': 'solid',
	    'text-border-color': '#000',
	    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	    'font-style': 'normal',
	    'font-weight': 'normal',
	    'font-size': 16,
	    'min-zoomed-font-size': 0,
	    'text-rotation': 'none',
	    'source-text-rotation': 'none',
	    'target-text-rotation': 'none',
	    'visibility': 'visible',
	    'display': 'element',
	    'opacity': 1,
	    'z-compound-depth': 'auto',
	    'z-index-compare': 'auto',
	    'z-index': 0,
	    'label': '',
	    'text-margin-x': 0,
	    'text-margin-y': 0,
	    'source-label': '',
	    'source-text-offset': 0,
	    'source-text-margin-x': 0,
	    'source-text-margin-y': 0,
	    'target-label': '',
	    'target-text-offset': 0,
	    'target-text-margin-x': 0,
	    'target-text-margin-y': 0,
	    'overlay-opacity': 0,
	    'overlay-color': '#000',
	    'overlay-padding': 10,
	    'overlay-shape': 'round-rectangle',
	    'overlay-corner-radius': 'auto',
	    'underlay-opacity': 0,
	    'underlay-color': '#000',
	    'underlay-padding': 10,
	    'underlay-shape': 'round-rectangle',
	    'underlay-corner-radius': 'auto',
	    'transition-property': 'none',
	    'transition-duration': 0,
	    'transition-delay': 0,
	    'transition-timing-function': 'linear',
	    // node props
	    'background-blacken': 0,
	    'background-color': '#999',
	    'background-fill': 'solid',
	    'background-opacity': 1,
	    'background-image': 'none',
	    'background-image-crossorigin': 'anonymous',
	    'background-image-opacity': 1,
	    'background-image-containment': 'inside',
	    'background-image-smoothing': 'yes',
	    'background-position-x': '50%',
	    'background-position-y': '50%',
	    'background-offset-x': 0,
	    'background-offset-y': 0,
	    'background-width-relative-to': 'include-padding',
	    'background-height-relative-to': 'include-padding',
	    'background-repeat': 'no-repeat',
	    'background-fit': 'none',
	    'background-clip': 'node',
	    'background-width': 'auto',
	    'background-height': 'auto',
	    'border-color': '#000',
	    'border-opacity': 1,
	    'border-width': 0,
	    'border-style': 'solid',
	    'border-dash-pattern': [4, 2],
	    'border-dash-offset': 0,
	    'border-cap': 'butt',
	    'border-join': 'miter',
	    'border-position': 'center',
	    'outline-color': '#999',
	    'outline-opacity': 1,
	    'outline-width': 0,
	    'outline-offset': 0,
	    'outline-style': 'solid',
	    'height': 30,
	    'width': 30,
	    'shape': 'ellipse',
	    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
	    'corner-radius': 'auto',
	    'bounds-expansion': 0,
	    // node gradient
	    'background-gradient-direction': 'to-bottom',
	    'background-gradient-stop-colors': '#999',
	    'background-gradient-stop-positions': '0%',
	    // ghost props
	    'ghost': 'no',
	    'ghost-offset-y': 0,
	    'ghost-offset-x': 0,
	    'ghost-opacity': 0,
	    // compound props
	    'padding': 0,
	    'padding-relative-to': 'width',
	    'position': 'origin',
	    'compound-sizing-wrt-labels': 'include',
	    'min-width': 0,
	    'min-width-bias-left': 0,
	    'min-width-bias-right': 0,
	    'min-height': 0,
	    'min-height-bias-top': 0,
	    'min-height-bias-bottom': 0
	  }, {
	    // node pie bg
	    'pie-size': '100%'
	  }, [{
	    name: 'pie-{{i}}-background-color',
	    value: 'black'
	  }, {
	    name: 'pie-{{i}}-background-size',
	    value: '0%'
	  }, {
	    name: 'pie-{{i}}-background-opacity',
	    value: 1
	  }].reduce(function (css, prop) {
	    for (var i = 1; i <= styfn$2.pieBackgroundN; i++) {
	      var name = prop.name.replace('{{i}}', i);
	      var val = prop.value;
	      css[name] = val;
	    }
	    return css;
	  }, {}), {
	    // edge props
	    'line-style': 'solid',
	    'line-color': '#999',
	    'line-fill': 'solid',
	    'line-cap': 'butt',
	    'line-opacity': 1,
	    'line-gradient-stop-colors': '#999',
	    'line-gradient-stop-positions': '0%',
	    'control-point-step-size': 40,
	    'control-point-weights': 0.5,
	    'segment-weights': 0.5,
	    'segment-distances': 20,
	    'segment-radii': 15,
	    'radius-type': 'arc-radius',
	    'taxi-turn': '50%',
	    'taxi-radius': 15,
	    'taxi-turn-min-distance': 10,
	    'taxi-direction': 'auto',
	    'edge-distances': 'intersection',
	    'curve-style': 'haystack',
	    'haystack-radius': 0,
	    'arrow-scale': 1,
	    'loop-direction': '-45deg',
	    'loop-sweep': '-90deg',
	    'source-distance-from-node': 0,
	    'target-distance-from-node': 0,
	    'source-endpoint': 'outside-to-node',
	    'target-endpoint': 'outside-to-node',
	    'line-dash-pattern': [6, 3],
	    'line-dash-offset': 0
	  }, [{
	    name: 'arrow-shape',
	    value: 'none'
	  }, {
	    name: 'arrow-color',
	    value: '#999'
	  }, {
	    name: 'arrow-fill',
	    value: 'filled'
	  }, {
	    name: 'arrow-width',
	    value: 1
	  }].reduce(function (css, prop) {
	    styfn$2.arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var val = prop.value;
	      css[name] = val;
	    });
	    return css;
	  }, {}));
	  var parsedProps = {};
	  for (var i = 0; i < this.properties.length; i++) {
	    var prop = this.properties[i];
	    if (prop.pointsTo) {
	      continue;
	    }
	    var name = prop.name;
	    var val = rawProps[name];
	    var parsedProp = this.parse(name, val);
	    parsedProps[name] = parsedProp;
	  }
	  _p.defaultProperties = parsedProps;
	  return _p.defaultProperties;
	};
	styfn$2.addDefaultStylesheet = function () {
	  this.selector(':parent').css({
	    'shape': 'rectangle',
	    'padding': 10,
	    'background-color': '#eee',
	    'border-color': '#ccc',
	    'border-width': 1
	  }).selector('edge').css({
	    'width': 3
	  }).selector(':loop').css({
	    'curve-style': 'bezier'
	  }).selector('edge:compound').css({
	    'curve-style': 'bezier',
	    'source-endpoint': 'outside-to-line',
	    'target-endpoint': 'outside-to-line'
	  }).selector(':selected').css({
	    'background-color': '#0169D9',
	    'line-color': '#0169D9',
	    'source-arrow-color': '#0169D9',
	    'target-arrow-color': '#0169D9',
	    'mid-source-arrow-color': '#0169D9',
	    'mid-target-arrow-color': '#0169D9'
	  }).selector(':parent:selected').css({
	    'background-color': '#CCE1F9',
	    'border-color': '#aec8e5'
	  }).selector(':active').css({
	    'overlay-color': 'black',
	    'overlay-padding': 10,
	    'overlay-opacity': 0.25
	  });
	  this.defaultLength = this.length;
	};

	var styfn$1 = {};

	// a caching layer for property parsing
	styfn$1.parse = function (name, value, propIsBypass, propIsFlat) {
	  var self = this;

	  // function values can't be cached in all cases, and there isn't much benefit of caching them anyway
	  if (fn$6(value)) {
	    return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  }
	  var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
	  var bypassKey = propIsBypass ? 't' : 'f';
	  var valueKey = '' + value;
	  var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
	  var propCache = self.propCache = self.propCache || [];
	  var ret;
	  if (!(ret = propCache[argHash])) {
	    ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  }

	  // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
	  // - mappings can't be shared b/c mappings are per-element
	  if (propIsBypass || propIsFlat === 'mapping') {
	    // need a copy since props are mutated later in their lifecycles
	    ret = copy(ret);
	    if (ret) {
	      ret.value = copy(ret.value); // because it could be an array, e.g. colour
	    }
	  }

	  return ret;
	};
	styfn$1.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
	  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);
	  if (!prop && value != null) {
	    warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
	  }
	  if (prop && (prop.name === 'width' || prop.name === 'height') && value === 'label') {
	    warn('The style value of `label` is deprecated for `' + prop.name + '`');
	  }
	  return prop;
	};

	// parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property
	styfn$1.parseImpl = function (name, value, propIsBypass, propIsFlat) {
	  var self = this;
	  name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[name];
	  var passedValue = value;
	  var types = self.types;
	  if (!property) {
	    return null;
	  } // return null on property of unknown name
	  if (value === undefined) {
	    return null;
	  } // can't assign undefined

	  // the property may be an alias
	  if (property.alias) {
	    property = property.pointsTo;
	    name = property.name;
	  }
	  var valueIsString = string(value);
	  if (valueIsString) {
	    // trim the value to make parsing easier
	    value = value.trim();
	  }
	  var type = property.type;
	  if (!type) {
	    return null;
	  } // no type, no luck

	  // check if bypass is null or empty string (i.e. indication to delete bypass property)
	  if (propIsBypass && (value === '' || value === null)) {
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  }

	  // check if value is a function used as a mapper
	  if (fn$6(value)) {
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  }

	  // check if value is mapped
	  var data, mapData;
	  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass

	    var mapped = types.data;
	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };
	  } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass
	    if (type.multiple) {
	      return false;
	    } // impossible to map to num

	    var _mapped = types.mapData;

	    // we can map only if the type is a colour or a number
	    if (!(type.color || type.number)) {
	      return false;
	    }
	    var valueMin = this.parse(name, mapData[4]); // parse to validate
	    if (!valueMin || valueMin.mapped) {
	      return false;
	    } // can't be invalid or mapped

	    var valueMax = this.parse(name, mapData[5]); // parse to validate
	    if (!valueMax || valueMax.mapped) {
	      return false;
	    } // can't be invalid or mapped

	    // check if valueMin and valueMax are the same
	    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
	      warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
	      return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
	    } else if (type.color) {
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;
	      var same = c1[0] === c2[0] // red
	      && c1[1] === c2[1] // green
	      && c1[2] === c2[2] // blue
	      && (
	      // optional alpha
	      c1[3] === c2[3] // same alpha outright
	      || (c1[3] == null || c1[3] === 1 // full opacity for colour 1?
	      ) && (c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	      );

	      if (same) {
	        return false;
	      } // can't make a mapper without a range
	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: _mapped,
	      field: mapData[1],
	      fieldMin: parseFloat(mapData[2]),
	      // min & max are numeric
	      fieldMax: parseFloat(mapData[3]),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }
	  if (type.multiple && propIsFlat !== 'multiple') {
	    var vals;
	    if (valueIsString) {
	      vals = value.split(/\s+/);
	    } else if (array(value)) {
	      vals = value;
	    } else {
	      vals = [value];
	    }
	    if (type.evenMultiple && vals.length % 2 !== 0) {
	      return null;
	    }
	    var valArr = [];
	    var unitsArr = [];
	    var pfValArr = [];
	    var strVal = '';
	    var hasEnum = false;
	    for (var i = 0; i < vals.length; i++) {
	      var p = self.parse(name, vals[i], propIsBypass, 'multiple');
	      hasEnum = hasEnum || string(p.value);
	      valArr.push(p.value);
	      pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
	      unitsArr.push(p.units);
	      strVal += (i > 0 ? ' ' : '') + p.strValue;
	    }
	    if (type.validate && !type.validate(valArr, unitsArr)) {
	      return null;
	    }
	    if (type.singleEnum && hasEnum) {
	      if (valArr.length === 1 && string(valArr[0])) {
	        return {
	          name: name,
	          value: valArr[0],
	          strValue: valArr[0],
	          bypass: propIsBypass
	        };
	      } else {
	        return null;
	      }
	    }
	    return {
	      name: name,
	      value: valArr,
	      pfValue: pfValArr,
	      strValue: strVal,
	      bypass: propIsBypass,
	      units: unitsArr
	    };
	  }

	  // several types also allow enums
	  var checkEnums = function checkEnums() {
	    for (var _i = 0; _i < type.enums.length; _i++) {
	      var en = type.enums[_i];
	      if (en === value) {
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }
	    return null;
	  };

	  // check the type and return the appropriate object
	  if (type.number) {
	    var units;
	    var implicitUnits = 'px'; // not set => px

	    if (type.units) {
	      // use specified units if set
	      units = type.units;
	    }
	    if (type.implicitUnits) {
	      implicitUnits = type.implicitUnits;
	    }
	    if (!type.unitless) {
	      if (valueIsString) {
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
	        if (units) {
	          unitsRegex = units;
	        } // only allow explicit units if so set
	        var match = value.match('^(' + number + ')(' + unitsRegex + ')?' + '$');
	        if (match) {
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }
	      } else if (!units || type.implicitUnits) {
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat(value);

	    // if not a number and enums not allowed, then the value is invalid
	    if (isNaN(value) && type.enums === undefined) {
	      return null;
	    }

	    // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)
	    if (isNaN(value) && type.enums !== undefined) {
	      value = passedValue;
	      return checkEnums();
	    }

	    // check if value must be an integer
	    if (type.integer && !integer(value)) {
	      return null;
	    }

	    // check value is within range
	    if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
	      return null;
	    }
	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    };

	    // normalise value in pixels
	    if (type.unitless || units !== 'px' && units !== 'em') {
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
	    }

	    // normalise value in ms
	    if (units === 'ms' || units === 's') {
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    }

	    // normalise value in rad
	    if (units === 'deg' || units === 'rad') {
	      ret.pfValue = units === 'rad' ? value : deg2rad(value);
	    }

	    // normalize value in %
	    if (units === '%') {
	      ret.pfValue = value / 100;
	    }
	    return ret;
	  } else if (type.propList) {
	    var props = [];
	    var propsStr = '' + value;
	    if (propsStr === 'none') ; else {
	      // go over each prop

	      var propsSplit = propsStr.split(/\s*,\s*|\s+/);
	      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
	        var propName = propsSplit[_i2].trim();
	        if (self.properties[propName]) {
	          props.push(propName);
	        } else {
	          warn('`' + propName + '` is not a valid property name');
	        }
	      }
	      if (props.length === 0) {
	        return null;
	      }
	    }
	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join(' '),
	      bypass: propIsBypass
	    };
	  } else if (type.color) {
	    var tuple = color2tuple(value);
	    if (!tuple) {
	      return null;
	    }
	    return {
	      name: name,
	      value: tuple,
	      pfValue: tuple,
	      strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
	      // n.b. no spaces b/c of multiple support
	      bypass: propIsBypass
	    };
	  } else if (type.regex || type.regexes) {
	    // first check enums
	    if (type.enums) {
	      var enumProp = checkEnums();
	      if (enumProp) {
	        return enumProp;
	      }
	    }
	    var regexes = type.regexes ? type.regexes : [type.regex];
	    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
	      var regex = new RegExp(regexes[_i3]); // make a regex from the type string
	      var m = regex.exec(value);
	      if (m) {
	        // regex matches
	        return {
	          name: name,
	          value: type.singleRegexMatchValue ? m[1] : m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }
	    return null; // didn't match any
	  } else if (type.string) {
	    // just return
	    return {
	      name: name,
	      value: '' + value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };
	  } else if (type.enums) {
	    // check enums last because it's a combo type in others
	    return checkEnums();
	  } else {
	    return null; // not a type we can handle
	  }
	};

	var Style = function Style(cy) {
	  if (!(this instanceof Style)) {
	    return new Style(cy);
	  }
	  if (!core(cy)) {
	    error('A style must have a core reference');
	    return;
	  }
	  this._private = {
	    cy: cy,
	    coreStyle: {}
	  };
	  this.length = 0;
	  this.resetToDefault();
	};
	var styfn = Style.prototype;
	styfn.instanceString = function () {
	  return 'style';
	};

	// remove all contexts
	styfn.clear = function () {
	  var _p = this._private;
	  var cy = _p.cy;
	  var eles = cy.elements();
	  for (var i = 0; i < this.length; i++) {
	    this[i] = undefined;
	  }
	  this.length = 0;
	  _p.contextStyles = {};
	  _p.propDiffs = {};
	  this.cleanElements(eles, true);
	  eles.forEach(function (ele) {
	    var ele_p = ele[0]._private;
	    ele_p.styleDirty = true;
	    ele_p.appliedInitStyle = false;
	  });
	  return this; // chaining
	};

	styfn.resetToDefault = function () {
	  this.clear();
	  this.addDefaultStylesheet();
	  return this;
	};

	// builds a style object for the 'core' selector
	styfn.core = function (propName) {
	  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
	};

	// create a new context from the specified selector string and switch to that context
	styfn.selector = function (selectorStr) {
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
	  var i = this.length++; // new context means new index
	  this[i] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };
	  return this; // chaining
	};

	// add one or many css rules to the current context
	styfn.css = function () {
	  var self = this;
	  var args = arguments;
	  if (args.length === 1) {
	    var map = args[0];
	    for (var i = 0; i < self.properties.length; i++) {
	      var prop = self.properties[i];
	      var mapVal = map[prop.name];
	      if (mapVal === undefined) {
	        mapVal = map[dash2camel(prop.name)];
	      }
	      if (mapVal !== undefined) {
	        this.cssRule(prop.name, mapVal);
	      }
	    }
	  } else if (args.length === 2) {
	    this.cssRule(args[0], args[1]);
	  }

	  // do nothing if args are invalid

	  return this; // chaining
	};

	styfn.style = styfn.css;

	// add a single css rule to the current context
	styfn.cssRule = function (name, value) {
	  // name-value pair
	  var property = this.parse(name, value);

	  // add property to current context if valid
	  if (property) {
	    var i = this.length - 1;
	    this[i].properties.push(property);
	    this[i].properties[property.name] = property; // allow access by name as well

	    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
	      this._private.hasPie = true;
	    }
	    if (property.mapped) {
	      this[i].mappedProperties.push(property);
	    }

	    // add to core style if necessary
	    var currentSelectorIsCore = !this[i].selector;
	    if (currentSelectorIsCore) {
	      this._private.coreStyle[property.name] = property;
	    }
	  }
	  return this; // chaining
	};

	styfn.append = function (style) {
	  if (stylesheet(style)) {
	    style.appendToStyle(this);
	  } else if (array(style)) {
	    this.appendFromJson(style);
	  } else if (string(style)) {
	    this.appendFromString(style);
	  } // you probably wouldn't want to append a Style, since you'd duplicate the default parts

	  return this;
	};

	// static function
	Style.fromJson = function (cy, json) {
	  var style = new Style(cy);
	  style.fromJson(json);
	  return style;
	};
	Style.fromString = function (cy, string) {
	  return new Style(cy).fromString(string);
	};
	[styfn$8, styfn$7, styfn$6, styfn$5, styfn$4, styfn$3, styfn$2, styfn$1].forEach(function (props) {
	  extend(styfn, props);
	});
	Style.types = styfn.types;
	Style.properties = styfn.properties;
	Style.propertyGroups = styfn.propertyGroups;
	Style.propertyGroupNames = styfn.propertyGroupNames;
	Style.propertyGroupKeys = styfn.propertyGroupKeys;

	var corefn$2 = {
	  style: function style(newStyle) {
	    if (newStyle) {
	      var s = this.setStyle(newStyle);
	      s.update();
	    }
	    return this._private.style;
	  },
	  setStyle: function setStyle(style) {
	    var _p = this._private;
	    if (stylesheet(style)) {
	      _p.style = style.generateStyle(this);
	    } else if (array(style)) {
	      _p.style = Style.fromJson(this, style);
	    } else if (string(style)) {
	      _p.style = Style.fromString(this, style);
	    } else {
	      _p.style = Style(this);
	    }
	    return _p.style;
	  },
	  // e.g. cy.data() changed => recalc ele mappers
	  updateStyle: function updateStyle() {
	    this.mutableElements().updateStyle(); // just send to all eles
	  }
	};

	var defaultSelectionType = 'single';
	var corefn$1 = {
	  autolock: function autolock(bool) {
	    if (bool !== undefined) {
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }
	    return this; // chaining
	  },

	  autoungrabify: function autoungrabify(bool) {
	    if (bool !== undefined) {
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }
	    return this; // chaining
	  },

	  autounselectify: function autounselectify(bool) {
	    if (bool !== undefined) {
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }
	    return this; // chaining
	  },

	  selectionType: function selectionType(selType) {
	    var _p = this._private;
	    if (_p.selectionType == null) {
	      _p.selectionType = defaultSelectionType;
	    }
	    if (selType !== undefined) {
	      if (selType === 'additive' || selType === 'single') {
	        _p.selectionType = selType;
	      }
	    } else {
	      return _p.selectionType;
	    }
	    return this;
	  },
	  panningEnabled: function panningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }
	    return this; // chaining
	  },

	  userPanningEnabled: function userPanningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }
	    return this; // chaining
	  },

	  zoomingEnabled: function zoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }
	    return this; // chaining
	  },

	  userZoomingEnabled: function userZoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }
	    return this; // chaining
	  },

	  boxSelectionEnabled: function boxSelectionEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }
	    return this; // chaining
	  },

	  pan: function pan() {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;
	    switch (args.length) {
	      case 0:
	        // .pan()
	        return pan;
	      case 1:
	        if (string(args[0])) {
	          // .pan('x')
	          dim = args[0];
	          return pan[dim];
	        } else if (plainObject(args[0])) {
	          // .pan({ x: 0, y: 100 })
	          if (!this._private.panningEnabled) {
	            return this;
	          }
	          dims = args[0];
	          x = dims.x;
	          y = dims.y;
	          if (number$1(x)) {
	            pan.x = x;
	          }
	          if (number$1(y)) {
	            pan.y = y;
	          }
	          this.emit('pan viewport');
	        }
	        break;
	      case 2:
	        // .pan('x', 100)
	        if (!this._private.panningEnabled) {
	          return this;
	        }
	        dim = args[0];
	        val = args[1];
	        if ((dim === 'x' || dim === 'y') && number$1(val)) {
	          pan[dim] = val;
	        }
	        this.emit('pan viewport');
	        break;
	      // invalid
	    }

	    this.notify('viewport');
	    return this; // chaining
	  },

	  panBy: function panBy(arg0, arg1) {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;
	    if (!this._private.panningEnabled) {
	      return this;
	    }
	    switch (args.length) {
	      case 1:
	        if (plainObject(arg0)) {
	          // .panBy({ x: 0, y: 100 })
	          dims = args[0];
	          x = dims.x;
	          y = dims.y;
	          if (number$1(x)) {
	            pan.x += x;
	          }
	          if (number$1(y)) {
	            pan.y += y;
	          }
	          this.emit('pan viewport');
	        }
	        break;
	      case 2:
	        // .panBy('x', 100)
	        dim = arg0;
	        val = arg1;
	        if ((dim === 'x' || dim === 'y') && number$1(val)) {
	          pan[dim] += val;
	        }
	        this.emit('pan viewport');
	        break;
	      // invalid
	    }

	    this.notify('viewport');
	    return this; // chaining
	  },

	  fit: function fit(elements, padding) {
	    var viewportState = this.getFitViewport(elements, padding);
	    if (viewportState) {
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;
	      this.emit('pan zoom viewport');
	      this.notify('viewport');
	    }
	    return this; // chaining
	  },

	  getFitViewport: function getFitViewport(elements, padding) {
	    if (number$1(elements) && padding === undefined) {
	      // elements is optional
	      padding = elements;
	      elements = undefined;
	    }
	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return;
	    }
	    var bb;
	    if (string(elements)) {
	      var sel = elements;
	      elements = this.$(sel);
	    } else if (boundingBox(elements)) {
	      // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };
	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;
	    } else if (!elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }
	    if (elementOrCollection(elements) && elements.empty()) {
	      return;
	    } // can't fit to nothing

	    bb = bb || elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    var zoom;
	    padding = number$1(padding) ? padding : 0;
	    if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
	      zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h);

	      // crop zoom
	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
	      var pan = {
	        // now pan to middle
	        x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	        y: (h - zoom * (bb.y1 + bb.y2)) / 2
	      };
	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }
	    return;
	  },
	  zoomRange: function zoomRange(min, max) {
	    var _p = this._private;
	    if (max == null) {
	      var opts = min;
	      min = opts.min;
	      max = opts.max;
	    }
	    if (number$1(min) && number$1(max) && min <= max) {
	      _p.minZoom = min;
	      _p.maxZoom = max;
	    } else if (number$1(min) && max === undefined && min <= _p.maxZoom) {
	      _p.minZoom = min;
	    } else if (number$1(max) && min === undefined && max >= _p.minZoom) {
	      _p.maxZoom = max;
	    }
	    return this;
	  },
	  minZoom: function minZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.minZoom;
	    } else {
	      return this.zoomRange({
	        min: zoom
	      });
	    }
	  },
	  maxZoom: function maxZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.maxZoom;
	    } else {
	      return this.zoomRange({
	        max: zoom
	      });
	    }
	  },
	  getZoomedViewport: function getZoomedViewport(params) {
	    var _p = this._private;
	    var currentPan = _p.pan;
	    var currentZoom = _p.zoom;
	    var pos; // in rendered px
	    var zoom;
	    var bail = false;
	    if (!_p.zoomingEnabled) {
	      // zooming disabled
	      bail = true;
	    }
	    if (number$1(params)) {
	      // then set the zoom
	      zoom = params;
	    } else if (plainObject(params)) {
	      // then zoom about a point
	      zoom = params.level;
	      if (params.position != null) {
	        pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
	      } else if (params.renderedPosition != null) {
	        pos = params.renderedPosition;
	      }
	      if (pos != null && !_p.panningEnabled) {
	        // panning disabled
	        bail = true;
	      }
	    }

	    // crop zoom
	    zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
	    zoom = zoom < _p.minZoom ? _p.minZoom : zoom;

	    // can't zoom with invalid params
	    if (bail || !number$1(zoom) || zoom === currentZoom || pos != null && (!number$1(pos.x) || !number$1(pos.y))) {
	      return null;
	    }
	    if (pos != null) {
	      // set zoom about position
	      var pan1 = currentPan;
	      var zoom1 = currentZoom;
	      var zoom2 = zoom;
	      var pan2 = {
	        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
	      };
	      return {
	        zoomed: true,
	        panned: true,
	        zoom: zoom2,
	        pan: pan2
	      };
	    } else {
	      // just set the zoom
	      return {
	        zoomed: true,
	        panned: false,
	        zoom: zoom,
	        pan: currentPan
	      };
	    }
	  },
	  zoom: function zoom(params) {
	    if (params === undefined) {
	      // get
	      return this._private.zoom;
	    } else {
	      // set
	      var vp = this.getZoomedViewport(params);
	      var _p = this._private;
	      if (vp == null || !vp.zoomed) {
	        return this;
	      }
	      _p.zoom = vp.zoom;
	      if (vp.panned) {
	        _p.pan.x = vp.pan.x;
	        _p.pan.y = vp.pan.y;
	      }
	      this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
	      this.notify('viewport');
	      return this; // chaining
	    }
	  },

	  viewport: function viewport(opts) {
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger
	    var zoomFailed = false;
	    var panFailed = false;
	    if (!opts) {
	      return this;
	    }
	    if (!number$1(opts.zoom)) {
	      zoomDefd = false;
	    }
	    if (!plainObject(opts.pan)) {
	      panDefd = false;
	    }
	    if (!zoomDefd && !panDefd) {
	      return this;
	    }
	    if (zoomDefd) {
	      var z = opts.zoom;
	      if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
	        zoomFailed = true;
	      } else {
	        _p.zoom = z;
	        events.push('zoom');
	      }
	    }
	    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
	      var p = opts.pan;
	      if (number$1(p.x)) {
	        _p.pan.x = p.x;
	        panFailed = false;
	      }
	      if (number$1(p.y)) {
	        _p.pan.y = p.y;
	        panFailed = false;
	      }
	      if (!panFailed) {
	        events.push('pan');
	      }
	    }
	    if (events.length > 0) {
	      events.push('viewport');
	      this.emit(events.join(' '));
	      this.notify('viewport');
	    }
	    return this; // chaining
	  },

	  center: function center(elements) {
	    var pan = this.getCenterPan(elements);
	    if (pan) {
	      this._private.pan = pan;
	      this.emit('pan viewport');
	      this.notify('viewport');
	    }
	    return this; // chaining
	  },

	  getCenterPan: function getCenterPan(elements, zoom) {
	    if (!this._private.panningEnabled) {
	      return;
	    }
	    if (string(elements)) {
	      var selector = elements;
	      elements = this.mutableElements().filter(selector);
	    } else if (!elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }
	    if (elements.length === 0) {
	      return;
	    } // can't centre pan to nothing

	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;
	    var pan = {
	      // middle
	      x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	      y: (h - zoom * (bb.y1 + bb.y2)) / 2
	    };
	    return pan;
	  },
	  reset: function reset() {
	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return this;
	    }
	    this.viewport({
	      pan: {
	        x: 0,
	        y: 0
	      },
	      zoom: 1
	    });
	    return this; // chaining
	  },

	  invalidateSize: function invalidateSize() {
	    this._private.sizeCache = null;
	  },
	  size: function size() {
	    var _p = this._private;
	    var container = _p.container;
	    var cy = this;
	    return _p.sizeCache = _p.sizeCache || (container ? function () {
	      var style = cy.window().getComputedStyle(container);
	      var val = function val(name) {
	        return parseFloat(style.getPropertyValue(name));
	      };
	      return {
	        width: container.clientWidth - val('padding-left') - val('padding-right'),
	        height: container.clientHeight - val('padding-top') - val('padding-bottom')
	      };
	    }() : {
	      // fallback if no container (not 0 b/c can be used for dividing etc)
	      width: 1,
	      height: 1
	    });
	  },
	  width: function width() {
	    return this.size().width;
	  },
	  height: function height() {
	    return this.size().height;
	  },
	  extent: function extent() {
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();
	    var b = {
	      x1: (rb.x1 - pan.x) / zoom,
	      x2: (rb.x2 - pan.x) / zoom,
	      y1: (rb.y1 - pan.y) / zoom,
	      y2: (rb.y2 - pan.y) / zoom
	    };
	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;
	    return b;
	  },
	  renderedExtent: function renderedExtent() {
	    var width = this.width();
	    var height = this.height();
	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  },
	  multiClickDebounceTime: function multiClickDebounceTime(_int) {
	    if (_int) this._private.multiClickDebounceTime = _int;else return this._private.multiClickDebounceTime;
	    return this; // chaining
	  }
	};

	// aliases
	corefn$1.centre = corefn$1.center;

	// backwards compatibility
	corefn$1.autolockNodes = corefn$1.autolock;
	corefn$1.autoungrabifyNodes = corefn$1.autoungrabify;

	var fn = {
	  data: define.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),
	  removeData: define.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),
	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),
	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  })
	};

	// aliases
	fn.attr = fn.data;
	fn.removeAttr = fn.removeData;

	var Core = function Core(opts) {
	  var cy = this;
	  opts = extend({}, opts);
	  var container = opts.container;

	  // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })
	  if (container && !htmlElement(container) && htmlElement(container[0])) {
	    container = container[0];
	  }
	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
	  reg = reg || {};
	  if (reg && reg.cy) {
	    reg.cy.destroy();
	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];
	  if (container) {
	    container._cyreg = reg;
	  } // make sure container assoc'd reg points to this cy
	  reg.cy = cy;
	  var head = _window !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = extend({
	    name: head ? 'grid' : 'null'
	  }, options.layout);
	  options.renderer = extend({
	    name: head ? 'canvas' : 'null'
	  }, options.renderer);
	  var defVal = function defVal(def, val, altVal) {
	    if (val !== undefined) {
	      return val;
	    } else if (altVal !== undefined) {
	      return altVal;
	    } else {
	      return def;
	    }
	  };
	  var _p = this._private = {
	    container: container,
	    // html dom ele container
	    ready: false,
	    // whether ready has been triggered
	    options: options,
	    // cached options
	    elements: new Collection(this),
	    // elements in the graph
	    listeners: [],
	    // list of listeners
	    aniEles: new Collection(this),
	    // elements being animated
	    data: options.data || {},
	    // data for the core
	    scratch: {},
	    // scratch object for core
	    layout: null,
	    renderer: null,
	    destroyed: false,
	    // whether destroy was called
	    notificationsEnabled: true,
	    // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal(true, options.zoomingEnabled),
	    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
	    panningEnabled: defVal(true, options.panningEnabled),
	    userPanningEnabled: defVal(true, options.userPanningEnabled),
	    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
	    autolock: defVal(false, options.autolock, options.autolockNodes),
	    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
	    autounselectify: defVal(false, options.autounselectify),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: number$1(options.zoom) ? options.zoom : 1,
	    pan: {
	      x: plainObject(options.pan) && number$1(options.pan.x) ? options.pan.x : 0,
	      y: plainObject(options.pan) && number$1(options.pan.y) ? options.pan.y : 0
	    },
	    animation: {
	      // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false,
	    multiClickDebounceTime: defVal(250, options.multiClickDebounceTime)
	  };
	  this.createEmitter();

	  // set selection type
	  this.selectionType(options.selectionType);

	  // init zoom bounds
	  this.zoomRange({
	    min: options.minZoom,
	    max: options.maxZoom
	  });
	  var loadExtData = function loadExtData(extData, next) {
	    var anyIsPromise = extData.some(promise);
	    if (anyIsPromise) {
	      return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
	    } else {
	      next(extData); // exec synchronously for convenience
	    }
	  };

	  // start with the default stylesheet so we have something before loading an external stylesheet
	  if (_p.styleEnabled) {
	    cy.setStyle([]);
	  }

	  // create the renderer
	  var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options
	  cy.initRenderer(rendererOptions);
	  var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
	    cy.notifications(false);

	    // remove old elements
	    var oldEles = cy.mutableElements();
	    if (oldEles.length > 0) {
	      oldEles.remove();
	    }
	    if (elements != null) {
	      if (plainObject(elements) || array(elements)) {
	        cy.add(elements);
	      }
	    }
	    cy.one('layoutready', function (e) {
	      cy.notifications(true);
	      cy.emit(e); // we missed this event by turning notifications off, so pass it on

	      cy.one('load', onload);
	      cy.emitAndNotify('load');
	    }).one('layoutstop', function () {
	      cy.one('done', ondone);
	      cy.emit('done');
	    });
	    var layoutOpts = extend({}, cy._private.options.layout);
	    layoutOpts.eles = cy.elements();
	    cy.layout(layoutOpts).run();
	  };
	  loadExtData([options.style, options.elements], function (thens) {
	    var initStyle = thens[0];
	    var initEles = thens[1];

	    // init style
	    if (_p.styleEnabled) {
	      cy.style().append(initStyle);
	    }

	    // initial load
	    setElesAndLayout(initEles, function () {
	      // onready
	      cy.startAnimationLoop();
	      _p.ready = true;

	      // if a ready callback is specified as an option, the bind it
	      if (fn$6(options.ready)) {
	        cy.on('ready', options.ready);
	      }

	      // bind all the ready handlers registered before creating this instance
	      for (var i = 0; i < readies.length; i++) {
	        var fn = readies[i];
	        cy.on('ready', fn);
	      }
	      if (reg) {
	        reg.readies = [];
	      } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

	      cy.emit('ready');
	    }, options.done);
	  });
	};
	var corefn = Core.prototype; // short alias

	extend(corefn, {
	  instanceString: function instanceString() {
	    return 'core';
	  },
	  isReady: function isReady() {
	    return this._private.ready;
	  },
	  destroyed: function destroyed() {
	    return this._private.destroyed;
	  },
	  ready: function ready(fn) {
	    if (this.isReady()) {
	      this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
	    } else {
	      this.on('ready', fn);
	    }
	    return this;
	  },
	  destroy: function destroy() {
	    var cy = this;
	    if (cy.destroyed()) return;
	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    this.emit('destroy');
	    cy._private.destroyed = true;
	    return cy;
	  },
	  hasElementWithId: function hasElementWithId(id) {
	    return this._private.elements.hasElementWithId(id);
	  },
	  getElementById: function getElementById(id) {
	    return this._private.elements.getElementById(id);
	  },
	  hasCompoundNodes: function hasCompoundNodes() {
	    return this._private.hasCompoundNodes;
	  },
	  headless: function headless() {
	    return this._private.renderer.isHeadless();
	  },
	  styleEnabled: function styleEnabled() {
	    return this._private.styleEnabled;
	  },
	  addToPool: function addToPool(eles) {
	    this._private.elements.merge(eles);
	    return this; // chaining
	  },

	  removeFromPool: function removeFromPool(eles) {
	    this._private.elements.unmerge(eles);
	    return this;
	  },
	  container: function container() {
	    return this._private.container || null;
	  },
	  window: function window() {
	    var container = this._private.container;
	    if (container == null) return _window;
	    var ownerDocument = this._private.container.ownerDocument;
	    if (ownerDocument === undefined || ownerDocument == null) {
	      return _window;
	    }
	    return ownerDocument.defaultView || _window;
	  },
	  mount: function mount(container) {
	    if (container == null) {
	      return;
	    }
	    var cy = this;
	    var _p = cy._private;
	    var options = _p.options;
	    if (!htmlElement(container) && htmlElement(container[0])) {
	      container = container[0];
	    }
	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    _p.container = container;
	    _p.styleEnabled = true;
	    cy.invalidateSize();
	    cy.initRenderer(extend({}, options, options.renderer, {
	      // allow custom renderer name to be re-used, otherwise use canvas
	      name: options.renderer.name === 'null' ? 'canvas' : options.renderer.name
	    }));
	    cy.startAnimationLoop();
	    cy.style(options.style);
	    cy.emit('mount');
	    return cy;
	  },
	  unmount: function unmount() {
	    var cy = this;
	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    cy.initRenderer({
	      name: 'null'
	    });
	    cy.emit('unmount');
	    return cy;
	  },
	  options: function options() {
	    return copy(this._private.options);
	  },
	  json: function json(obj) {
	    var cy = this;
	    var _p = cy._private;
	    var eles = cy.mutableElements();
	    var getFreshRef = function getFreshRef(ele) {
	      return cy.getElementById(ele.id());
	    };
	    if (plainObject(obj)) {
	      // set

	      cy.startBatch();
	      if (obj.elements) {
	        var idInJson = {};
	        var updateEles = function updateEles(jsons, gr) {
	          var toAdd = [];
	          var toMod = [];
	          for (var i = 0; i < jsons.length; i++) {
	            var json = jsons[i];
	            if (!json.data.id) {
	              warn('cy.json() cannot handle elements without an ID attribute');
	              continue;
	            }
	            var id = '' + json.data.id; // id must be string
	            var ele = cy.getElementById(id);
	            idInJson[id] = true;
	            if (ele.length !== 0) {
	              // existing element should be updated
	              toMod.push({
	                ele: ele,
	                json: json
	              });
	            } else {
	              // otherwise should be added
	              if (gr) {
	                json.group = gr;
	                toAdd.push(json);
	              } else {
	                toAdd.push(json);
	              }
	            }
	          }
	          cy.add(toAdd);
	          for (var _i = 0; _i < toMod.length; _i++) {
	            var _toMod$_i = toMod[_i],
	              _ele = _toMod$_i.ele,
	              _json = _toMod$_i.json;
	            _ele.json(_json);
	          }
	        };
	        if (array(obj.elements)) {
	          // elements: []
	          updateEles(obj.elements);
	        } else {
	          // elements: { nodes: [], edges: [] }
	          var grs = ['nodes', 'edges'];
	          for (var i = 0; i < grs.length; i++) {
	            var gr = grs[i];
	            var elements = obj.elements[gr];
	            if (array(elements)) {
	              updateEles(elements, gr);
	            }
	          }
	        }
	        var parentsToRemove = cy.collection();
	        eles.filter(function (ele) {
	          return !idInJson[ele.id()];
	        }).forEach(function (ele) {
	          if (ele.isParent()) {
	            parentsToRemove.merge(ele);
	          } else {
	            ele.remove();
	          }
	        });

	        // so that children are not removed w/parent
	        parentsToRemove.forEach(function (ele) {
	          return ele.children().move({
	            parent: null
	          });
	        });

	        // intermediate parents may be moved by prior line, so make sure we remove by fresh refs
	        parentsToRemove.forEach(function (ele) {
	          return getFreshRef(ele).remove();
	        });
	      }
	      if (obj.style) {
	        cy.style(obj.style);
	      }
	      if (obj.zoom != null && obj.zoom !== _p.zoom) {
	        cy.zoom(obj.zoom);
	      }
	      if (obj.pan) {
	        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
	          cy.pan(obj.pan);
	        }
	      }
	      if (obj.data) {
	        cy.data(obj.data);
	      }
	      var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify', 'multiClickDebounceTime'];
	      for (var _i2 = 0; _i2 < fields.length; _i2++) {
	        var f = fields[_i2];
	        if (obj[f] != null) {
	          cy[f](obj[f]);
	        }
	      }
	      cy.endBatch();
	      return this; // chaining
	    } else {
	      // get
	      var flat = !!obj;
	      var json = {};
	      if (flat) {
	        json.elements = this.elements().map(function (ele) {
	          return ele.json();
	        });
	      } else {
	        json.elements = {};
	        eles.forEach(function (ele) {
	          var group = ele.group();
	          if (!json.elements[group]) {
	            json.elements[group] = [];
	          }
	          json.elements[group].push(ele.json());
	        });
	      }
	      if (this._private.styleEnabled) {
	        json.style = cy.style().json();
	      }
	      json.data = copy(cy.data());
	      var options = _p.options;
	      json.zoomingEnabled = _p.zoomingEnabled;
	      json.userZoomingEnabled = _p.userZoomingEnabled;
	      json.zoom = _p.zoom;
	      json.minZoom = _p.minZoom;
	      json.maxZoom = _p.maxZoom;
	      json.panningEnabled = _p.panningEnabled;
	      json.userPanningEnabled = _p.userPanningEnabled;
	      json.pan = copy(_p.pan);
	      json.boxSelectionEnabled = _p.boxSelectionEnabled;
	      json.renderer = copy(options.renderer);
	      json.hideEdgesOnViewport = options.hideEdgesOnViewport;
	      json.textureOnViewport = options.textureOnViewport;
	      json.wheelSensitivity = options.wheelSensitivity;
	      json.motionBlur = options.motionBlur;
	      json.multiClickDebounceTime = options.multiClickDebounceTime;
	      return json;
	    }
	  }
	});
	corefn.$id = corefn.getElementById;
	[corefn$9, corefn$8, elesfn, corefn$7, corefn$6, corefn$5, corefn$4, corefn$3, corefn$2, corefn$1, fn].forEach(function (props) {
	  extend(corefn, props);
	});

	/* eslint-disable no-unused-vars */
	var defaults$7 = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  directed: false,
	  // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30,
	  // padding on fit
	  circle: false,
	  // put depths in concentric circles if true, put depths top down if false
	  grid: false,
	  // whether to create an even grid into which the DAG is placed (circle:false only)
	  spacingFactor: 1.75,
	  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  roots: undefined,
	  // the roots of the trees
	  depthSort: undefined,
	  // a sorting function to order nodes at equal depth. e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled,
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts
	};

	var deprecatedOptionDefaults = {
	  maximal: false,
	  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only); setting acyclic to true sets maximal to true also
	  acyclic: false // whether the tree is acyclic and thus a node could be shifted (due to the maximal option) multiple times without causing an infinite loop; setting to true sets maximal to true also; if you are uncertain whether a tree is acyclic, set to false to avoid potential infinite loops
	};

	/* eslint-enable */

	var getInfo = function getInfo(ele) {
	  return ele.scratch('breadthfirst');
	};
	var setInfo = function setInfo(ele, obj) {
	  return ele.scratch('breadthfirst', obj);
	};
	function BreadthFirstLayout(options) {
	  this.options = extend({}, defaults$7, deprecatedOptionDefaults, options);
	}
	BreadthFirstLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().filter(function (n) {
	    return !n.isParent();
	  });
	  var graph = eles;
	  var directed = options.directed;
	  var maximal = options.acyclic || options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code; also, setting acyclic to true sets maximal to true

	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var roots;
	  if (elementOrCollection(options.roots)) {
	    roots = options.roots;
	  } else if (array(options.roots)) {
	    var rootsArray = [];
	    for (var i = 0; i < options.roots.length; i++) {
	      var id = options.roots[i];
	      var ele = cy.getElementById(id);
	      rootsArray.push(ele);
	    }
	    roots = cy.collection(rootsArray);
	  } else if (string(options.roots)) {
	    roots = cy.$(options.roots);
	  } else {
	    if (directed) {
	      roots = nodes.roots();
	    } else {
	      var components = eles.components();
	      roots = cy.collection();
	      var _loop = function _loop(_i) {
	        var comp = components[_i];
	        var maxDegree = comp.maxDegree(false);
	        var compRoots = comp.filter(function (ele) {
	          return ele.degree(false) === maxDegree;
	        });
	        roots = roots.add(compRoots);
	      };
	      for (var _i = 0; _i < components.length; _i++) {
	        _loop(_i);
	      }
	    }
	  }
	  var depths = [];
	  var foundByBfs = {};
	  var addToDepth = function addToDepth(ele, d) {
	    if (depths[d] == null) {
	      depths[d] = [];
	    }
	    var i = depths[d].length;
	    depths[d].push(ele);
	    setInfo(ele, {
	      index: i,
	      depth: d
	    });
	  };
	  var changeDepth = function changeDepth(ele, newDepth) {
	    var _getInfo = getInfo(ele),
	      depth = _getInfo.depth,
	      index = _getInfo.index;
	    depths[depth][index] = null;
	    addToDepth(ele, newDepth);
	  };

	  // find the depths of the nodes
	  graph.bfs({
	    roots: roots,
	    directed: options.directed,
	    visit: function visit(node, edge, pNode, i, depth) {
	      var ele = node[0];
	      var id = ele.id();
	      addToDepth(ele, depth);
	      foundByBfs[id] = true;
	    }
	  });

	  // check for nodes not found by bfs
	  var orphanNodes = [];
	  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
	    var _ele = nodes[_i2];
	    if (foundByBfs[_ele.id()]) {
	      continue;
	    } else {
	      orphanNodes.push(_ele);
	    }
	  }

	  // assign the nodes a depth and index

	  var assignDepthsAt = function assignDepthsAt(i) {
	    var eles = depths[i];
	    for (var j = 0; j < eles.length; j++) {
	      var _ele2 = eles[j];
	      if (_ele2 == null) {
	        eles.splice(j, 1);
	        j--;
	        continue;
	      }
	      setInfo(_ele2, {
	        depth: i,
	        index: j
	      });
	    }
	  };
	  var assignDepths = function assignDepths() {
	    for (var _i3 = 0; _i3 < depths.length; _i3++) {
	      assignDepthsAt(_i3);
	    }
	  };
	  var adjustMaximally = function adjustMaximally(ele, shifted) {
	    var eInfo = getInfo(ele);
	    var incomers = ele.incomers().filter(function (el) {
	      return el.isNode() && eles.has(el);
	    });
	    var maxDepth = -1;
	    var id = ele.id();
	    for (var k = 0; k < incomers.length; k++) {
	      var incmr = incomers[k];
	      var iInfo = getInfo(incmr);
	      maxDepth = Math.max(maxDepth, iInfo.depth);
	    }
	    if (eInfo.depth <= maxDepth) {
	      if (!options.acyclic && shifted[id]) {
	        return null;
	      }
	      var newDepth = maxDepth + 1;
	      changeDepth(ele, newDepth);
	      shifted[id] = newDepth;
	      return true;
	    }
	    return false;
	  };

	  // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)
	  if (directed && maximal) {
	    var Q = [];
	    var shifted = {};
	    var enqueue = function enqueue(n) {
	      return Q.push(n);
	    };
	    var dequeue = function dequeue() {
	      return Q.shift();
	    };
	    nodes.forEach(function (n) {
	      return Q.push(n);
	    });
	    while (Q.length > 0) {
	      var _ele3 = dequeue();
	      var didShift = adjustMaximally(_ele3, shifted);
	      if (didShift) {
	        _ele3.outgoers().filter(function (el) {
	          return el.isNode() && eles.has(el);
	        }).forEach(enqueue);
	      } else if (didShift === null) {
	        warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
	        break; // exit on failure
	      }
	    }
	  }

	  assignDepths(); // clear holes

	  // find min distance we need to leave between nodes
	  var minDistance = 0;
	  if (options.avoidOverlap) {
	    for (var _i4 = 0; _i4 < nodes.length; _i4++) {
	      var n = nodes[_i4];
	      var nbb = n.layoutDimensions(options);
	      var w = nbb.w;
	      var h = nbb.h;
	      minDistance = Math.max(minDistance, w, h);
	    }
	  }

	  // get the weighted percent for an element based on its connectivity to other levels
	  var cachedWeightedPercent = {};
	  var getWeightedPercent = function getWeightedPercent(ele) {
	    if (cachedWeightedPercent[ele.id()]) {
	      return cachedWeightedPercent[ele.id()];
	    }
	    var eleDepth = getInfo(ele).depth;
	    var neighbors = ele.neighborhood();
	    var percent = 0;
	    var samples = 0;
	    for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
	      var neighbor = neighbors[_i5];
	      if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
	        continue;
	      }
	      var bf = getInfo(neighbor);
	      if (bf == null) {
	        continue;
	      }
	      var index = bf.index;
	      var depth = bf.depth;

	      // unassigned neighbours shouldn't affect the ordering
	      if (index == null || depth == null) {
	        continue;
	      }
	      var nDepth = depths[depth].length;
	      if (depth < eleDepth) {
	        // only get influenced by elements above
	        percent += index / nDepth;
	        samples++;
	      }
	    }
	    samples = Math.max(1, samples);
	    percent = percent / samples;
	    if (samples === 0) {
	      // put lone nodes at the start
	      percent = 0;
	    }
	    cachedWeightedPercent[ele.id()] = percent;
	    return percent;
	  };

	  // rearrange the indices in each depth level based on connectivity

	  var sortFn = function sortFn(a, b) {
	    var apct = getWeightedPercent(a);
	    var bpct = getWeightedPercent(b);
	    var diff = apct - bpct;
	    if (diff === 0) {
	      return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
	    } else {
	      return diff;
	    }
	  };
	  if (options.depthSort !== undefined) {
	    sortFn = options.depthSort;
	  }

	  // sort each level to make connected nodes closer
	  for (var _i6 = 0; _i6 < depths.length; _i6++) {
	    depths[_i6].sort(sortFn);
	    assignDepthsAt(_i6);
	  }

	  // assign orphan nodes to a new top-level depth
	  var orphanDepth = [];
	  for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
	    orphanDepth.push(orphanNodes[_i7]);
	  }
	  depths.unshift(orphanDepth);
	  assignDepths();
	  var biggestDepthSize = 0;
	  for (var _i8 = 0; _i8 < depths.length; _i8++) {
	    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
	  }
	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.x1 + bb.h / 2
	  };
	  var maxDepthSize = depths.reduce(function (max, eles) {
	    return Math.max(max, eles.length);
	  }, 0);
	  var getPosition = function getPosition(ele) {
	    var _getInfo2 = getInfo(ele),
	      depth = _getInfo2.depth,
	      index = _getInfo2.index;
	    var depthSize = depths[depth].length;
	    var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
	    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
	    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
	    radiusStepSize = Math.max(radiusStepSize, minDistance);
	    if (!options.circle) {
	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	        y: (depth + 1) * distanceY
	      };
	      return epos;
	    } else {
	      var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
	      var theta = 2 * Math.PI / depths[depth].length * index;
	      if (depth === 0 && depths[0].length === 1) {
	        radius = 1;
	      }
	      return {
	        x: center.x + radius * Math.cos(theta),
	        y: center.y + radius * Math.sin(theta)
	      };
	    }
	  };
	  eles.nodes().layoutPositions(this, options, getPosition);
	  return this; // chaining
	};

	var defaults$6 = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // the padding on fit
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox and radius if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  radius: undefined,
	  // the radius of the circle
	  startAngle: 3 / 2 * Math.PI,
	  // where nodes start in radians
	  sweep: undefined,
	  // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true,
	  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined,
	  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function CircleLayout(options) {
	  this.options = extend({}, defaults$6, options);
	}
	CircleLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
	  var nodes = eles.nodes().not(':parent');
	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };
	  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
	  var dTheta = sweep / Math.max(1, nodes.length - 1);
	  var r;
	  var minDistance = 0;
	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);
	    var w = nbb.w;
	    var h = nbb.h;
	    minDistance = Math.max(minDistance, w, h);
	  }
	  if (number$1(options.radius)) {
	    r = options.radius;
	  } else if (nodes.length <= 1) {
	    r = 0;
	  } else {
	    r = Math.min(bb.h, bb.w) / 2 - minDistance;
	  }

	  // calculate the radius
	  if (nodes.length > 1 && options.avoidOverlap) {
	    // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos(dTheta) - Math.cos(0);
	    var dsin = Math.sin(dTheta) - Math.sin(0);
	    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping
	    r = Math.max(rMin, r);
	  }
	  var getPos = function getPos(ele, i) {
	    var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
	    var rx = r * Math.cos(theta);
	    var ry = r * Math.sin(theta);
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };
	    return pos;
	  };
	  eles.nodes().layoutPositions(this, options, getPos);
	  return this; // chaining
	};

	var defaults$5 = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // the padding on fit
	  startAngle: 3 / 2 * Math.PI,
	  // where nodes start in radians
	  sweep: undefined,
	  // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true,
	  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false,
	  // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10,
	  // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  height: undefined,
	  // height of layout area (overrides container height)
	  width: undefined,
	  // width of layout area (overrides container width)
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  concentric: function concentric(node) {
	    // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function levelWidth(nodes) {
	    // the variation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts
	};

	function ConcentricLayout(options) {
	  this.options = extend({}, defaults$5, options);
	}
	ConcentricLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };
	  var nodeValues = []; // { node, value }
	  var maxNodeSize = 0;
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var value = void 0;

	    // calculate the node value
	    value = options.concentric(node);
	    nodeValues.push({
	      value: value,
	      node: node
	    });

	    // for style mapping
	    node._private.scratch.concentric = value;
	  }

	  // in case we used the `concentric` in style
	  nodes.updateStyle();

	  // calculate max size now based on potentially updated mappers
	  for (var _i = 0; _i < nodes.length; _i++) {
	    var _node = nodes[_i];
	    var nbb = _node.layoutDimensions(options);
	    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
	  }

	  // sort node values in descreasing order
	  nodeValues.sort(function (a, b) {
	    return b.value - a.value;
	  });
	  var levelWidth = options.levelWidth(nodes);

	  // put the values into levels
	  var levels = [[]];
	  var currentLevel = levels[0];
	  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
	    var val = nodeValues[_i2];
	    if (currentLevel.length > 0) {
	      var diff = Math.abs(currentLevel[0].value - val.value);
	      if (diff >= levelWidth) {
	        currentLevel = [];
	        levels.push(currentLevel);
	      }
	    }
	    currentLevel.push(val);
	  }

	  // create positions from levels

	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if (!options.avoidOverlap) {
	    // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
	    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
	    minDist = Math.min(minDist, rStep);
	  }

	  // find the metrics for each level
	  var r = 0;
	  for (var _i3 = 0; _i3 < levels.length; _i3++) {
	    var level = levels[_i3];
	    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);

	    // calculate the radius
	    if (level.length > 1 && options.avoidOverlap) {
	      // but only if more than one node (can't overlap)
	      var dcos = Math.cos(dTheta) - Math.cos(0);
	      var dsin = Math.sin(dTheta) - Math.sin(0);
	      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

	      r = Math.max(rMin, r);
	    }
	    level.r = r;
	    r += minDist;
	  }
	  if (options.equidistant) {
	    var rDeltaMax = 0;
	    var _r = 0;
	    for (var _i4 = 0; _i4 < levels.length; _i4++) {
	      var _level = levels[_i4];
	      var rDelta = _level.r - _r;
	      rDeltaMax = Math.max(rDeltaMax, rDelta);
	    }
	    _r = 0;
	    for (var _i5 = 0; _i5 < levels.length; _i5++) {
	      var _level2 = levels[_i5];
	      if (_i5 === 0) {
	        _r = _level2.r;
	      }
	      _level2.r = _r;
	      _r += rDeltaMax;
	    }
	  }

	  // calculate the node positions
	  var pos = {}; // id => position
	  for (var _i6 = 0; _i6 < levels.length; _i6++) {
	    var _level3 = levels[_i6];
	    var _dTheta = _level3.dTheta;
	    var _r2 = _level3.r;
	    for (var j = 0; j < _level3.length; j++) {
	      var _val = _level3[j];
	      var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
	      var p = {
	        x: center.x + _r2 * Math.cos(theta),
	        y: center.y + _r2 * Math.sin(theta)
	      };
	      pos[_val.node.id()] = p;
	    }
	  }

	  // position the nodes
	  eles.nodes().layoutPositions(this, options, function (ele) {
	    var id = ele.id();
	    return pos[id];
	  });
	  return this; // chaining
	};

	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/
	var DEBUG;

	/**
	 * @brief :  default layout options
	 */
	var defaults$4 = {
	  // Called on `layoutready`
	  ready: function ready() {},
	  // Called on `layoutstop`
	  stop: function stop() {},
	  // Whether to animate while running the layout
	  // true : Animate continuously as the layout is running
	  // false : Just show the end result
	  // 'end' : Animate with the end result, from the initial positions to the end positions
	  animate: true,
	  // Easing of the animation for animate:'end'
	  animationEasing: undefined,
	  // The duration of the animation for animate:'end'
	  animationDuration: undefined,
	  // A function that determines whether the node should be animated
	  // All nodes animated by default on animate enabled
	  // Non-animated nodes are positioned immediately when the layout starts
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // The layout animates only after this many milliseconds for animate:true
	  // (prevents flashing on fast runs)
	  animationThreshold: 250,
	  // Number of iterations between consecutive screen positions update
	  refresh: 20,
	  // Whether to fit the network view after when done
	  fit: true,
	  // Padding on fit
	  padding: 30,
	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox: undefined,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  nodeDimensionsIncludeLabels: false,
	  // Randomize the initial positions of the nodes (true) or use existing positions (false)
	  randomize: false,
	  // Extra spacing between components in non-compound graphs
	  componentSpacing: 40,
	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: function nodeRepulsion(node) {
	    return 2048;
	  },
	  // Node repulsion (overlapping) multiplier
	  nodeOverlap: 4,
	  // Ideal edge (non nested) length
	  idealEdgeLength: function idealEdgeLength(edge) {
	    return 32;
	  },
	  // Divisor to compute edge forces
	  edgeElasticity: function edgeElasticity(edge) {
	    return 32;
	  },
	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 1.2,
	  // Gravity force (constant)
	  gravity: 1,
	  // Maximum number of iterations to perform
	  numIter: 1000,
	  // Initial temperature (maximum node displacement)
	  initialTemp: 1000,
	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor: 0.99,
	  // Lower temperature threshold (below this point the layout will end)
	  minTemp: 1.0
	};

	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */
	function CoseLayout(options) {
	  this.options = extend({}, defaults$4, options);
	  this.options.layout = this;

	  // Exclude any edge that has a source or target node that is not in the set of passed-in nodes
	  var nodes = this.options.eles.nodes();
	  var edges = this.options.eles.edges();
	  var notEdges = edges.filter(function (e) {
	    var sourceId = e.source().data('id');
	    var targetId = e.target().data('id');
	    var hasSource = nodes.some(function (n) {
	      return n.data('id') === sourceId;
	    });
	    var hasTarget = nodes.some(function (n) {
	      return n.data('id') === targetId;
	    });
	    return !hasSource || !hasTarget;
	  });
	  this.options.eles = this.options.eles.not(notEdges);
	}

	/**
	 * @brief : runs the layout
	 */
	CoseLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var layout = this;
	  layout.stopped = false;
	  if (options.animate === true || options.animate === false) {
	    layout.emit({
	      type: 'layoutstart',
	      layout: layout
	    });
	  }

	  // Set DEBUG - Global variable
	  if (true === options.debug) {
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  }

	  // Initialize layout info
	  var layoutInfo = createLayoutInfo(cy, layout, options);

	  // Show LayoutInfo contents if debugging
	  if (DEBUG) {
	    printLayoutInfo(layoutInfo);
	  }

	  // If required, randomize node positions
	  if (options.randomize) {
	    randomizePositions(layoutInfo);
	  }
	  var startTime = performanceNow();
	  var refresh = function refresh() {
	    refreshPositions(layoutInfo, cy, options);

	    // Fit the graph if necessary
	    if (true === options.fit) {
	      cy.fit(options.padding);
	    }
	  };
	  var mainLoop = function mainLoop(i) {
	    if (layout.stopped || i >= options.numIter) {
	      // logDebug("Layout manually stopped. Stopping computation in step " + i);
	      return false;
	    }

	    // Do one step in the phisical simulation
	    step(layoutInfo, options);

	    // Update temperature
	    layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
	    // logDebug("New temperature: " + layoutInfo.temperature);

	    if (layoutInfo.temperature < options.minTemp) {
	      // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	      return false;
	    }
	    return true;
	  };
	  var done = function done() {
	    if (options.animate === true || options.animate === false) {
	      refresh();

	      // Layout has finished
	      layout.one('layoutstop', options.stop);
	      layout.emit({
	        type: 'layoutstop',
	        layout: layout
	      });
	    } else {
	      var nodes = options.eles.nodes();
	      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
	      nodes.layoutPositions(layout, options, getScaledPos);
	    }
	  };
	  var i = 0;
	  var loopRet = true;
	  if (options.animate === true) {
	    var frame = function frame() {
	      var f = 0;
	      while (loopRet && f < options.refresh) {
	        loopRet = mainLoop(i);
	        i++;
	        f++;
	      }
	      if (!loopRet) {
	        // it's done
	        separateComponents(layoutInfo, options);
	        done();
	      } else {
	        var now = performanceNow();
	        if (now - startTime >= options.animationThreshold) {
	          refresh();
	        }
	        requestAnimationFrame(frame);
	      }
	    };
	    frame();
	  } else {
	    while (loopRet) {
	      loopRet = mainLoop(i);
	      i++;
	    }
	    separateComponents(layoutInfo, options);
	    done();
	  }
	  return this; // chaining
	};

	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	CoseLayout.prototype.stop = function () {
	  this.stopped = true;
	  if (this.thread) {
	    this.thread.stop();
	  }
	  this.emit('layoutstop');
	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function () {
	  if (this.thread) {
	    this.thread.stop();
	  }
	  return this; // chaining
	};

	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */
	var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var layoutInfo = {
	    isCompound: cy.hasCompoundNodes(),
	    layoutNodes: [],
	    idToIndex: {},
	    nodeSize: nodes.size(),
	    graphSet: [],
	    indexToGraph: [],
	    layoutEdges: [],
	    edgeSize: edges.size(),
	    temperature: options.initialTemp,
	    clientWidth: bb.w,
	    clientHeight: bb.h,
	    boundingBox: bb
	  };
	  var components = options.eles.components();
	  var id2cmptId = {};
	  for (var i = 0; i < components.length; i++) {
	    var component = components[i];
	    for (var j = 0; j < component.length; j++) {
	      var node = component[j];
	      id2cmptId[node.id()] = i;
	    }
	  }

	  // Iterate over all nodes, creating layout nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);
	    var tempNode = {};
	    tempNode.isLocked = n.locked();
	    tempNode.id = n.data('id');
	    tempNode.parentId = n.data('parent');
	    tempNode.cmptId = id2cmptId[n.id()];
	    tempNode.children = [];
	    tempNode.positionX = n.position('x');
	    tempNode.positionY = n.position('y');
	    tempNode.offsetX = 0;
	    tempNode.offsetY = 0;
	    tempNode.height = nbb.w;
	    tempNode.width = nbb.h;
	    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
	    tempNode.minX = tempNode.positionX - tempNode.width / 2;
	    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft = parseFloat(n.style('padding'));
	    tempNode.padRight = parseFloat(n.style('padding'));
	    tempNode.padTop = parseFloat(n.style('padding'));
	    tempNode.padBottom = parseFloat(n.style('padding'));

	    // forces
	    tempNode.nodeRepulsion = fn$6(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion;

	    // Add new node
	    layoutInfo.layoutNodes.push(tempNode);
	    // Add entry to id-index map
	    layoutInfo.idToIndex[tempNode.id] = i;
	  }

	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0; // Points to the start the queue
	  var end = -1; // Points to the end of the queue

	  var tempGraph = [];

	  // Second pass to add child information and
	  // initialize queue for hierarchical traversal
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var p_id = n.parentId;
	    // Check if node n has a parent node
	    if (null != p_id) {
	      // Add node Id to parent's list of children
	      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
	    } else {
	      // If a node doesn't have a parent, then it's in the root graph
	      queue[++end] = n.id;
	      tempGraph.push(n.id);
	    }
	  }

	  // Add root graph to graphSet
	  layoutInfo.graphSet.push(tempGraph);

	  // Traverse the graph, level by level,
	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var node_id = queue[start++];
	    var node_ix = layoutInfo.idToIndex[node_id];
	    var node = layoutInfo.layoutNodes[node_ix];
	    var children = node.children;
	    if (children.length > 0) {
	      // Add children nodes as a new graph to graph set
	      layoutInfo.graphSet.push(children);
	      // Add children to que queue to be visited
	      for (var i = 0; i < children.length; i++) {
	        queue[++end] = children[i];
	      }
	    }
	  }

	  // Create indexToGraph map
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    for (var j = 0; j < graph.length; j++) {
	      var index = layoutInfo.idToIndex[graph[j]];
	      layoutInfo.indexToGraph[index] = i;
	    }
	  }

	  // Iterate over all edges, creating Layout Edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    var e = edges[i];
	    var tempEdge = {};
	    tempEdge.id = e.data('id');
	    tempEdge.sourceId = e.data('source');
	    tempEdge.targetId = e.data('target');

	    // Compute ideal length
	    var idealLength = fn$6(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
	    var elasticity = fn$6(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity;

	    // Check if it's an inter graph edge
	    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
	    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
	    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
	    var targetGraph = layoutInfo.indexToGraph[targetIx];
	    if (sourceGraph != targetGraph) {
	      // Find lowest common graph ancestor
	      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);

	      // Compute sum of node depths, relative to lca graph
	      var lcaGraph = layoutInfo.graphSet[lca];
	      var depth = 0;

	      // Source depth
	      var tempNode = layoutInfo.layoutNodes[sourceIx];
	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // Target depth
	      tempNode = layoutInfo.layoutNodes[targetIx];
	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	      //  ". Depth: " + depth);

	      // Update idealLength
	      idealLength *= depth * options.nestingFactor;
	    }
	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;
	    layoutInfo.layoutEdges.push(tempEdge);
	  }

	  // Finally, return layoutInfo object
	  return layoutInfo;
	};

	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */
	var findLCA = function findLCA(node1, node2, layoutInfo) {
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux(node1, node2, 0, layoutInfo);
	  if (2 > res.count) {
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};

	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancestors (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */
	var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
	  var graph = layoutInfo.graphSet[graphIx];
	  // If both nodes belongs to graphIx
	  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
	    return {
	      count: 2,
	      graph: graphIx
	    };
	  }

	  // Make recursive calls for all subgraphs
	  var c = 0;
	  for (var i = 0; i < graph.length; i++) {
	    var nodeId = graph[i];
	    var nodeIx = layoutInfo.idToIndex[nodeId];
	    var children = layoutInfo.layoutNodes[nodeIx].children;

	    // If the node has no child, skip it
	    if (0 === children.length) {
	      continue;
	    }
	    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
	    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);
	    if (0 === result.count) {
	      // Neither node1 nor node2 are present in this subgraph
	      continue;
	    } else if (1 === result.count) {
	      // One of (node1, node2) is present in this subgraph
	      c++;
	      if (2 === c) {
	        // We've already found both nodes, no need to keep searching
	        break;
	      }
	    } else {
	      // Both nodes are present in this subgraph
	      return result;
	    }
	  }
	  return {
	    count: c,
	    graph: graphIx
	  };
	};

	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */
	var printLayoutInfo; 

	/**
	 * @brief : Randomizes the position of all nodes
	 */
	var randomizePositions = function randomizePositions(layoutInfo, cy) {
	  var width = layoutInfo.clientWidth;
	  var height = layoutInfo.clientHeight;
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    // No need to randomize compound nodes or locked nodes
	    if (0 === n.children.length && !n.isLocked) {
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};
	var getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {
	  var bb = layoutInfo.boundingBox;
	  var coseBB = {
	    x1: Infinity,
	    x2: -Infinity,
	    y1: Infinity,
	    y2: -Infinity
	  };
	  if (options.boundingBox) {
	    nodes.forEach(function (node) {
	      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
	      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
	      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
	      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
	      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
	    });
	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }
	  return function (ele, i) {
	    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];
	    if (options.boundingBox) {
	      // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  };
	};

	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
	  // var s = 'Refreshing positions';
	  // logDebug(s);

	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
	  nodes.positions(getScaledPos);

	  // Trigger layoutReady only on first call
	  if (true !== layoutInfo.ready) {
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one('layoutready', options.ready);
	    layout.emit({
	      type: 'layoutready',
	      layout: this
	    });
	  }
	};

	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	/**
	 * @brief          : Performs one iteration of the physical simulation
	 * @arg layoutInfo : LayoutInfo object already initialized
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var step = function step(layoutInfo, options, _step) {
	  // var s = "\n\n###############################";
	  // s += "\nSTEP: " + step;
	  // s += "\n###############################\n";
	  // logDebug(s);

	  // Calculate node repulsions
	  calculateNodeForces(layoutInfo, options);
	  // Calculate edge forces
	  calculateEdgeForces(layoutInfo);
	  // Calculate gravity forces
	  calculateGravityForces(layoutInfo, options);
	  // Propagate forces from parent to child
	  propagateForces(layoutInfo);
	  // Update positions based on calculated forces
	  updatePositions(layoutInfo);
	};

	/**
	 * @brief : Computes the node repulsion forces
	 */
	var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
	  // Go through each of the graphs in graphSet
	  // Nodes only repel each other if they belong to the same graph
	  // var s = 'calculateNodeForces';
	  // logDebug(s);
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    var numNodes = graph.length;

	    // s = "Set: " + graph.toString();
	    // logDebug(s);

	    // Now get all the pairs of nodes
	    // Only get each pair once, (A, B) = (B, A)
	    for (var j = 0; j < numNodes; j++) {
	      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
	      for (var k = j + 1; k < numNodes; k++) {
	        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
	        nodeRepulsion(node1, node2, layoutInfo, options);
	      }
	    }
	  }
	};
	var randomDistance = function randomDistance(max) {
	  return -max + 2 * max * Math.random();
	};

	/**
	 * @brief : Compute the node repulsion forces between a pair of nodes
	 */
	var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
	  // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

	  var cmptId1 = node1.cmptId;
	  var cmptId2 = node2.cmptId;
	  if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
	    return;
	  }

	  // Get direction of line connecting both node centers
	  var directionX = node2.positionX - node1.positionX;
	  var directionY = node2.positionY - node1.positionY;
	  var maxRandDist = 1;
	  // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

	  // If both centers are the same, apply a random force
	  if (0 === directionX && 0 === directionY) {
	    directionX = randomDistance(maxRandDist);
	    directionY = randomDistance(maxRandDist);
	  }
	  var overlap = nodesOverlap(node1, node2, directionX, directionY);
	  if (overlap > 0) {
	    // s += "\nNodes DO overlap.";
	    // s += "\nOverlap: " + overlap;
	    // If nodes overlap, repulsion force is proportional
	    // to the overlap
	    var force = options.nodeOverlap * overlap;

	    // Compute the module and components of the force vector
	    var distance = Math.sqrt(directionX * directionX + directionY * directionY);
	    // s += "\nDistance: " + distance;
	    var forceX = force * directionX / distance;
	    var forceY = force * directionY / distance;
	  } else {
	    // s += "\nNodes do NOT overlap.";
	    // If there's no overlap, force is inversely proportional
	    // to squared distance

	    // Get clipping points for both nodes
	    var point1 = findClippingPoint(node1, directionX, directionY);
	    var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);

	    // Use clipping points to compute distance
	    var distanceX = point2.x - point1.x;
	    var distanceY = point2.y - point1.y;
	    var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	    var distance = Math.sqrt(distanceSqr);
	    // s += "\nDistance: " + distance;

	    // Compute the module and components of the force vector
	    var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
	    var forceX = force * distanceX / distance;
	    var forceY = force * distanceY / distance;
	  }

	  // Apply force
	  if (!node1.isLocked) {
	    node1.offsetX -= forceX;
	    node1.offsetY -= forceY;
	  }
	  if (!node2.isLocked) {
	    node2.offsetX += forceX;
	    node2.offsetY += forceY;
	  }

	  // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	  // logDebug(s);

	  return;
	};

	/**
	 * @brief  : Determines whether two nodes overlap or not
	 * @return : Amount of overlapping (0 => no overlap)
	 */
	var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
	  if (dX > 0) {
	    var overlapX = node1.maxX - node2.minX;
	  } else {
	    var overlapX = node2.maxX - node1.minX;
	  }
	  if (dY > 0) {
	    var overlapY = node1.maxY - node2.minY;
	  } else {
	    var overlapY = node2.maxY - node1.minY;
	  }
	  if (overlapX >= 0 && overlapY >= 0) {
	    return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
	  } else {
	    return 0;
	  }
	};

	/**
	 * @brief : Finds the point in which an edge (direction dX, dY) intersects
	 *          the rectangular bounding box of it's source/target node
	 */
	var findClippingPoint = function findClippingPoint(node, dX, dY) {
	  // Shorcuts
	  var X = node.positionX;
	  var Y = node.positionY;
	  var H = node.height || 1;
	  var W = node.width || 1;
	  var dirSlope = dY / dX;
	  var nodeSlope = H / W;

	  // var s = 'Computing clipping point of node ' + node.id +
	  //   " . Height:  " + H + ", Width: " + W +
	  //   "\nDirection " + dX + ", " + dY;
	  //
	  // Compute intersection
	  var res = {};

	  // Case: Vertical direction (up)
	  if (0 === dX && 0 < dY) {
	    res.x = X;
	    // s += "\nUp direction";
	    res.y = Y + H / 2;
	    return res;
	  }

	  // Case: Vertical direction (down)
	  if (0 === dX && 0 > dY) {
	    res.x = X;
	    res.y = Y + H / 2;
	    // s += "\nDown direction";

	    return res;
	  }

	  // Case: Intersects the right border
	  if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	    res.x = X + W / 2;
	    res.y = Y + W * dY / 2 / dX;
	    // s += "\nRightborder";

	    return res;
	  }

	  // Case: Intersects the left border
	  if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	    res.x = X - W / 2;
	    res.y = Y - W * dY / 2 / dX;
	    // s += "\nLeftborder";

	    return res;
	  }

	  // Case: Intersects the top border
	  if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	    res.x = X + H * dX / 2 / dY;
	    res.y = Y + H / 2;
	    // s += "\nTop border";

	    return res;
	  }

	  // Case: Intersects the bottom border
	  if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	    res.x = X - H * dX / 2 / dY;
	    res.y = Y - H / 2;
	    // s += "\nBottom border";

	    return res;
	  }

	  // s += "\nClipping point found at " + res.x + ", " + res.y;
	  // logDebug(s);
	  return res;
	};

	/**
	 * @brief : Calculates all edge forces
	 */
	var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
	  // Iterate over all edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    // Get edge, source & target nodes
	    var edge = layoutInfo.layoutEdges[i];
	    var sourceIx = layoutInfo.idToIndex[edge.sourceId];
	    var source = layoutInfo.layoutNodes[sourceIx];
	    var targetIx = layoutInfo.idToIndex[edge.targetId];
	    var target = layoutInfo.layoutNodes[targetIx];

	    // Get direction of line connecting both node centers
	    var directionX = target.positionX - source.positionX;
	    var directionY = target.positionY - source.positionY;

	    // If both centers are the same, do nothing.
	    // A random force has already been applied as node repulsion
	    if (0 === directionX && 0 === directionY) {
	      continue;
	    }

	    // Get clipping points for both nodes
	    var point1 = findClippingPoint(source, directionX, directionY);
	    var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
	    var lx = point2.x - point1.x;
	    var ly = point2.y - point1.y;
	    var l = Math.sqrt(lx * lx + ly * ly);
	    var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;
	    if (0 !== l) {
	      var forceX = force * lx / l;
	      var forceY = force * ly / l;
	    } else {
	      var forceX = 0;
	      var forceY = 0;
	    }

	    // Add this force to target and source nodes
	    if (!source.isLocked) {
	      source.offsetX += forceX;
	      source.offsetY += forceY;
	    }
	    if (!target.isLocked) {
	      target.offsetX -= forceX;
	      target.offsetY -= forceY;
	    }

	    // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	    // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	    // logDebug(s);
	  }
	};

	/**
	 * @brief : Computes gravity forces for all nodes
	 */
	var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
	  if (options.gravity === 0) {
	    return;
	  }
	  var distThreshold = 1;

	  // var s = 'calculateGravityForces';
	  // logDebug(s);
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    var numNodes = graph.length;

	    // s = "Set: " + graph.toString();
	    // logDebug(s);

	    // Compute graph center
	    if (0 === i) {
	      var centerX = layoutInfo.clientHeight / 2;
	      var centerY = layoutInfo.clientWidth / 2;
	    } else {
	      // Get Parent node for this graph, and use its position as center
	      var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
	      var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
	      var centerX = parent.positionX;
	      var centerY = parent.positionY;
	    }
	    // s = "Center found at: " + centerX + ", " + centerY;
	    // logDebug(s);

	    // Apply force to all nodes in graph
	    for (var j = 0; j < numNodes; j++) {
	      var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
	      // s = "Node: " + node.id;

	      if (node.isLocked) {
	        continue;
	      }
	      var dx = centerX - node.positionX;
	      var dy = centerY - node.positionY;
	      var d = Math.sqrt(dx * dx + dy * dy);
	      if (d > distThreshold) {
	        var fx = options.gravity * dx / d;
	        var fy = options.gravity * dy / d;
	        node.offsetX += fx;
	        node.offsetY += fy;
	        // s += ": Applied force: " + fx + ", " + fy;
	      }
	      // logDebug(s);
	    }
	  }
	};

	/**
	 * @brief          : This function propagates the existing offsets from
	 *                   parent nodes to its descendents.
	 * @arg layoutInfo : layoutInfo Object
	 * @arg cy         : cytoscape Object
	 * @arg options    : Layout options
	 */
	var propagateForces = function propagateForces(layoutInfo, options) {
	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0; // Points to the start the queue
	  var end = -1; // Points to the end of the queue

	  // logDebug('propagateForces');

	  // Start by visiting the nodes in the root graph
	  queue.push.apply(queue, layoutInfo.graphSet[0]);
	  end += layoutInfo.graphSet[0].length;

	  // Traverse the graph, level by level,
	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var nodeId = queue[start++];
	    var nodeIndex = layoutInfo.idToIndex[nodeId];
	    var node = layoutInfo.layoutNodes[nodeIndex];
	    var children = node.children;

	    // We only need to process the node if it's compound
	    if (0 < children.length && !node.isLocked) {
	      var offX = node.offsetX;
	      var offY = node.offsetY;

	      // var s = "Propagating offset from parent node : " + node.id +
	      //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	      // s += "\n Children: " + children.toString();
	      // logDebug(s);

	      for (var i = 0; i < children.length; i++) {
	        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];
	        // Propagate offset
	        childNode.offsetX += offX;
	        childNode.offsetY += offY;
	        // Add children to queue to be visited
	        queue[++end] = children[i];
	      }

	      // Reset parent offsets
	      node.offsetX = 0;
	      node.offsetY = 0;
	    }
	  }
	};

	/**
	 * @brief : Updates the layout model positions, based on
	 *          the accumulated forces
	 */
	var updatePositions = function updatePositions(layoutInfo, options) {
	  // var s = 'Updating positions';
	  // logDebug(s);

	  // Reset boundaries for compound nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    if (0 < n.children.length) {
	      // logDebug("Resetting boundaries of compound node: " + n.id);
	      n.maxX = undefined;
	      n.minX = undefined;
	      n.maxY = undefined;
	      n.minY = undefined;
	    }
	  }
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    if (0 < n.children.length || n.isLocked) {
	      // No need to set compound or locked node position
	      // logDebug("Skipping position update of node: " + n.id);
	      continue;
	    }
	    // s = "Node: " + n.id + " Previous position: (" +
	    // n.positionX + ", " + n.positionY + ").";

	    // Limit displacement in order to improve stability
	    var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
	    n.positionX += tempForce.x;
	    n.positionY += tempForce.y;
	    n.offsetX = 0;
	    n.offsetY = 0;
	    n.minX = n.positionX - n.width;
	    n.maxX = n.positionX + n.width;
	    n.minY = n.positionY - n.height;
	    n.maxY = n.positionY + n.height;
	    // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	    // logDebug(s);

	    // Update ancestry boudaries
	    updateAncestryBoundaries(n, layoutInfo);
	  }

	  // Update size, position of compund nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    if (0 < n.children.length && !n.isLocked) {
	      n.positionX = (n.maxX + n.minX) / 2;
	      n.positionY = (n.maxY + n.minY) / 2;
	      n.width = n.maxX - n.minX;
	      n.height = n.maxY - n.minY;
	      // s = "Updating position, size of compound node " + n.id;
	      // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	      // s += "\nWidth: " + n.width + ", Height: " + n.height;
	      // logDebug(s);
	    }
	  }
	};

	/**
	 * @brief : Limits a force (forceX, forceY) to be not
	 *          greater (in modulo) than max.
	 8          Preserves force direction.
	  */
	var limitForce = function limitForce(forceX, forceY, max) {
	  // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	  var force = Math.sqrt(forceX * forceX + forceY * forceY);
	  if (force > max) {
	    var res = {
	      x: max * forceX / force,
	      y: max * forceY / force
	    };
	  } else {
	    var res = {
	      x: forceX,
	      y: forceY
	    };
	  }

	  // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	  // logDebug(s);

	  return res;
	};

	/**
	 * @brief : Function used for keeping track of compound node
	 *          sizes, since they should bound all their subnodes.
	 */
	var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
	  // var s = "Propagating new position/size of node " + node.id;
	  var parentId = node.parentId;
	  if (null == parentId) {
	    // If there's no parent, we are done
	    // s += ". No parent node.";
	    // logDebug(s);
	    return;
	  }

	  // Get Parent Node
	  var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
	  var flag = false;

	  // MaxX
	  if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
	    p.maxX = node.maxX + p.padRight;
	    flag = true;
	    // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	  }

	  // MinX
	  if (null == p.minX || node.minX - p.padLeft < p.minX) {
	    p.minX = node.minX - p.padLeft;
	    flag = true;
	    // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	  }

	  // MaxY
	  if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
	    p.maxY = node.maxY + p.padBottom;
	    flag = true;
	    // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	  }

	  // MinY
	  if (null == p.minY || node.minY - p.padTop < p.minY) {
	    p.minY = node.minY - p.padTop;
	    flag = true;
	    // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	  }

	  // If updated boundaries, propagate changes upward
	  if (flag) {
	    // logDebug(s);
	    return updateAncestryBoundaries(p, layoutInfo);
	  }

	  // s += ". No changes in boundaries/position of parent node " + p.id;
	  // logDebug(s);
	  return;
	};
	var separateComponents = function separateComponents(layoutInfo, options) {
	  var nodes = layoutInfo.layoutNodes;
	  var components = [];
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var cid = node.cmptId;
	    var component = components[cid] = components[cid] || [];
	    component.push(node);
	  }
	  var totalA = 0;
	  for (var i = 0; i < components.length; i++) {
	    var c = components[i];
	    if (!c) {
	      continue;
	    }
	    c.x1 = Infinity;
	    c.x2 = -Infinity;
	    c.y1 = Infinity;
	    c.y2 = -Infinity;
	    for (var j = 0; j < c.length; j++) {
	      var n = c[j];
	      c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
	      c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
	      c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
	      c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
	    }
	    c.w = c.x2 - c.x1;
	    c.h = c.y2 - c.y1;
	    totalA += c.w * c.h;
	  }
	  components.sort(function (c1, c2) {
	    return c2.w * c2.h - c1.w * c1.h;
	  });
	  var x = 0;
	  var y = 0;
	  var usedW = 0;
	  var rowH = 0;
	  var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;
	  for (var i = 0; i < components.length; i++) {
	    var c = components[i];
	    if (!c) {
	      continue;
	    }
	    for (var j = 0; j < c.length; j++) {
	      var n = c[j];
	      if (!n.isLocked) {
	        n.positionX += x - c.x1;
	        n.positionY += y - c.y1;
	      }
	    }
	    x += c.w + options.componentSpacing;
	    usedW += c.w + options.componentSpacing;
	    rowH = Math.max(rowH, c.h);
	    if (usedW > maxRowW) {
	      y += rowH + options.componentSpacing;
	      x = 0;
	      usedW = 0;
	      rowH = 0;
	    }
	  }
	};

	var defaults$3 = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // padding used on fit
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10,
	  // extra spacing around nodes when avoidOverlap: true
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  condense: false,
	  // uses all available space on false, uses minimal space on true
	  rows: undefined,
	  // force num of rows in the grid
	  cols: undefined,
	  // force num of columns in the grid
	  position: function position(node) {},
	  // returns { row, col } for element
	  sort: undefined,
	  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function GridLayout(options) {
	  this.options = extend({}, defaults$3, options);
	}
	GridLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  if (bb.h === 0 || bb.w === 0) {
	    eles.nodes().layoutPositions(this, options, function (ele) {
	      return {
	        x: bb.x1,
	        y: bb.y1
	      };
	    });
	  } else {
	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt(cells * bb.h / bb.w);
	    var rows = Math.round(splits);
	    var cols = Math.round(bb.w / bb.h * splits);
	    var small = function small(val) {
	      if (val == null) {
	        return Math.min(rows, cols);
	      } else {
	        var min = Math.min(rows, cols);
	        if (min == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };
	    var large = function large(val) {
	      if (val == null) {
	        return Math.max(rows, cols);
	      } else {
	        var max = Math.max(rows, cols);
	        if (max == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };
	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns;

	    // if rows or columns were set in options, use those values
	    if (oRows != null && oCols != null) {
	      rows = oRows;
	      cols = oCols;
	    } else if (oRows != null && oCols == null) {
	      rows = oRows;
	      cols = Math.ceil(cells / rows);
	    } else if (oRows == null && oCols != null) {
	      cols = oCols;
	      rows = Math.ceil(cells / cols);
	    }

	    // otherwise use the automatic values and adjust accordingly

	    // if rounding was up, see if we can reduce rows or columns
	    else if (cols * rows > cells) {
	      var sm = small();
	      var lg = large();

	      // reducing the small side takes away the most cells, so try it first
	      if ((sm - 1) * lg >= cells) {
	        small(sm - 1);
	      } else if ((lg - 1) * sm >= cells) {
	        large(lg - 1);
	      }
	    } else {
	      // if rounding was too low, add rows or columns
	      while (cols * rows < cells) {
	        var _sm = small();
	        var _lg = large();

	        // try to add to larger side first (adds less in multiplication)
	        if ((_lg + 1) * _sm >= cells) {
	          large(_lg + 1);
	        } else {
	          small(_sm + 1);
	        }
	      }
	    }
	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;
	    if (options.condense) {
	      cellWidth = 0;
	      cellHeight = 0;
	    }
	    if (options.avoidOverlap) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = node._private.position;
	        if (pos.x == null || pos.y == null) {
	          // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }
	        var nbb = node.layoutDimensions(options);
	        var p = options.avoidOverlapPadding;
	        var w = nbb.w + p;
	        var h = nbb.h + p;
	        cellWidth = Math.max(cellWidth, w);
	        cellHeight = Math.max(cellHeight, h);
	      }
	    }
	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function used(row, col) {
	      return cellUsed['c-' + row + '-' + col] ? true : false;
	    };
	    var use = function use(row, col) {
	      cellUsed['c-' + row + '-' + col] = true;
	    };

	    // to keep track of current cell position
	    var row = 0;
	    var col = 0;
	    var moveToNextCell = function moveToNextCell() {
	      col++;
	      if (col >= cols) {
	        col = 0;
	        row++;
	      }
	    };

	    // get a cache of all the manual positions
	    var id2manPos = {};
	    for (var _i = 0; _i < nodes.length; _i++) {
	      var _node = nodes[_i];
	      var rcPos = options.position(_node);
	      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
	        // must have at least row or col def'd
	        var _pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };
	        if (_pos.col === undefined) {
	          // find unused col
	          _pos.col = 0;
	          while (used(_pos.row, _pos.col)) {
	            _pos.col++;
	          }
	        } else if (_pos.row === undefined) {
	          // find unused row
	          _pos.row = 0;
	          while (used(_pos.row, _pos.col)) {
	            _pos.row++;
	          }
	        }
	        id2manPos[_node.id()] = _pos;
	        use(_pos.row, _pos.col);
	      }
	    }
	    var getPos = function getPos(element, i) {
	      var x, y;
	      if (element.locked() || element.isParent()) {
	        return false;
	      }

	      // see if we have a manual position set
	      var rcPos = id2manPos[element.id()];
	      if (rcPos) {
	        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
	      } else {
	        // otherwise set automatically

	        while (used(row, col)) {
	          moveToNextCell();
	        }
	        x = col * cellWidth + cellWidth / 2 + bb.x1;
	        y = row * cellHeight + cellHeight / 2 + bb.y1;
	        use(row, col);
	        moveToNextCell();
	      }
	      return {
	        x: x,
	        y: y
	      };
	    };
	    nodes.layoutPositions(this, options, getPos);
	  }
	  return this; // chaining
	};

	// default layout options
	var defaults$2 = {
	  ready: function ready() {},
	  // on layoutready
	  stop: function stop() {} // on layoutstop
	};

	// constructor
	// options : object containing layout options
	function NullLayout(options) {
	  this.options = extend({}, defaults$2, options);
	}

	// runs the layout
	NullLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout
	  var layout = this;

	  // cy is automatically populated for us in the constructor
	  // (disable eslint for next line as this serves as example layout code to external developers)
	  // eslint-disable-next-line no-unused-vars
	  options.cy;
	  layout.emit('layoutstart');

	  // puts all nodes at (0, 0)
	  // n.b. most layouts would use layoutPositions(), instead of positions() and manual events
	  eles.nodes().positions(function () {
	    return {
	      x: 0,
	      y: 0
	    };
	  });

	  // trigger layoutready when each node has had its position set at least once
	  layout.one('layoutready', options.ready);
	  layout.emit('layoutready');

	  // trigger layoutstop when the layout stops (e.g. finishes)
	  layout.one('layoutstop', options.stop);
	  layout.emit('layoutstop');
	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	NullLayout.prototype.stop = function () {
	  return this; // chaining
	};

	var defaults$1 = {
	  positions: undefined,
	  // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined,
	  // the zoom level to set (prob want fit = false if set)
	  pan: undefined,
	  // the pan level to set (prob want fit = false if set)
	  fit: true,
	  // whether to fit to viewport
	  padding: 30,
	  // padding on fit
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts
	};

	function PresetLayout(options) {
	  this.options = extend({}, defaults$1, options);
	}
	PresetLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var posIsFn = fn$6(options.positions);
	  function getPosition(node) {
	    if (options.positions == null) {
	      return copyPosition(node.position());
	    }
	    if (posIsFn) {
	      return options.positions(node);
	    }
	    var pos = options.positions[node._private.data.id];
	    if (pos == null) {
	      return null;
	    }
	    return pos;
	  }
	  nodes.layoutPositions(this, options, function (node, i) {
	    var position = getPosition(node);
	    if (node.locked() || position == null) {
	      return false;
	    }
	    return position;
	  });
	  return this; // chaining
	};

	var defaults = {
	  fit: true,
	  // whether to fit to viewport
	  padding: 30,
	  // fit padding
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function RandomLayout(options) {
	  this.options = extend({}, defaults, options);
	}
	RandomLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var getPos = function getPos(node, i) {
	    return {
	      x: bb.x1 + Math.round(Math.random() * bb.w),
	      y: bb.y1 + Math.round(Math.random() * bb.h)
	    };
	  };
	  eles.nodes().layoutPositions(this, options, getPos);
	  return this; // chaining
	};

	var layout = [{
	  name: 'breadthfirst',
	  impl: BreadthFirstLayout
	}, {
	  name: 'circle',
	  impl: CircleLayout
	}, {
	  name: 'concentric',
	  impl: ConcentricLayout
	}, {
	  name: 'cose',
	  impl: CoseLayout
	}, {
	  name: 'grid',
	  impl: GridLayout
	}, {
	  name: 'null',
	  impl: NullLayout
	}, {
	  name: 'preset',
	  impl: PresetLayout
	}, {
	  name: 'random',
	  impl: RandomLayout
	}];

	function NullRenderer(options) {
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop = function noop() {};
	var throwImgErr = function throwImgErr() {
	  throw new Error('A headless instance can not render images');
	};
	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop,
	  notify: function notify() {
	    this.notifications++;
	  },
	  init: noop,
	  isHeadless: function isHeadless() {
	    return true;
	  },
	  png: throwImgErr,
	  jpg: throwImgErr
	};

	var BRp$f = {};
	BRp$f.arrowShapeWidth = 0.3;
	BRp$f.registerArrowShapes = function () {
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this;

	  // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
	    var x1 = translation.x - size / 2 - padding;
	    var x2 = translation.x + size / 2 + padding;
	    var y1 = translation.y - size / 2 - padding;
	    var y2 = translation.y + size / 2 + padding;
	    var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
	    return inside;
	  };
	  var transform = function transform(x, y, size, angle, translation) {
	    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
	    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;
	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;
	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };
	  var transformPoints = function transformPoints(pts, size, angle, translation) {
	    var retPts = [];
	    for (var i = 0; i < pts.length; i += 2) {
	      var x = pts[i];
	      var y = pts[i + 1];
	      retPts.push(transform(x, y, size, angle, translation));
	    }
	    return retPts;
	  };
	  var pointsToArr = function pointsToArr(pts) {
	    var ret = [];
	    for (var i = 0; i < pts.length; i++) {
	      var p = pts[i];
	      ret.push(p.x, p.y);
	    }
	    return ret;
	  };
	  var standardGap = function standardGap(edge) {
	    return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
	  };
	  var defineArrowShape = function defineArrowShape(name, defn) {
	    if (string(defn)) {
	      defn = arrowShapes[defn];
	    }
	    arrowShapes[name] = extend({
	      name: name,
	      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
	      collide: function collide(x, y, size, angle, translation, padding) {
	        var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	        var inside = pointInsidePolygonPoints(x, y, points);
	        return inside;
	      },
	      roughCollide: bbCollide,
	      draw: function draw(context, size, angle, translation) {
	        var points = transformPoints(this.points, size, angle, translation);
	        renderer.arrowShapeImpl('polygon')(context, points);
	      },
	      spacing: function spacing(edge) {
	        return 0;
	      },
	      gap: standardGap
	    }, defn);
	  };
	  defineArrowShape('none', {
	    collide: falsify,
	    roughCollide: falsify,
	    draw: noop$1,
	    spacing: zeroify,
	    gap: zeroify
	  });
	  defineArrowShape('triangle', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
	  });
	  defineArrowShape('arrow', 'triangle');
	  defineArrowShape('triangle-backcurve', {
	    points: arrowShapes['triangle'].points,
	    controlPoint: [0, -0.15],
	    roughCollide: bbCollide,
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var ptsTrans = transformPoints(this.points, size, angle, translation);
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
	    },
	    gap: function gap(edge) {
	      return standardGap(edge) * 0.8;
	    }
	  });
	  defineArrowShape('triangle-tee', {
	    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
	    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
	      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var teePts = transformPoints(this.pointsTee, size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
	    }
	  });
	  defineArrowShape('circle-triangle', {
	    radius: 0.15,
	    pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var t = translation;
	      var circleInside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      return pointInsidePolygonPoints(x, y, triPts) || circleInside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.pointsTr, size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size);
	    },
	    spacing: function spacing(edge) {
	      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
	    }
	  });
	  defineArrowShape('triangle-cross', {
	    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
	    baseCrossLinePts: [-0.15, -0.4,
	    // first half of the rectangle
	    -0.15, -0.4, 0.15, -0.4,
	    // second half of the rectangle
	    0.15, -0.4],
	    crossLinePts: function crossLinePts(size, edgeWidth) {
	      // shift points so that the distance between the cross points matches edge width
	      var p = this.baseCrossLinePts.slice();
	      var shiftFactor = edgeWidth / size;
	      var y0 = 3;
	      var y1 = 5;
	      p[y0] = p[y0] - shiftFactor;
	      p[y1] = p[y1] - shiftFactor;
	      return p;
	    },
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
	      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
	    }
	  });
	  defineArrowShape('vee', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
	    gap: function gap(edge) {
	      return standardGap(edge) * 0.525;
	    }
	  });
	  defineArrowShape('circle', {
	    radius: 0.15,
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var t = translation;
	      var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
	    },
	    spacing: function spacing(edge) {
	      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
	    }
	  });
	  defineArrowShape('tee', {
	    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
	    spacing: function spacing(edge) {
	      return 1;
	    },
	    gap: function gap(edge) {
	      return 1;
	    }
	  });
	  defineArrowShape('square', {
	    points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
	  });
	  defineArrowShape('diamond', {
	    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
	    gap: function gap(edge) {
	      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
	    }
	  });
	  defineArrowShape('chevron', {
	    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
	    gap: function gap(edge) {
	      return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
	    }
	  });
	};

	var BRp$e = {};

	// Project mouse
	BRp$e.projectIntoViewport = function (clientX, clientY) {
	  var cy = this.cy;
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];
	  var scale = offsets[4];
	  var pan = cy.pan();
	  var zoom = cy.zoom();
	  var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
	  var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
	  return [x, y];
	};
	BRp$e.findContainerClientCoords = function () {
	  if (this.containerBB) {
	    return this.containerBB;
	  }
	  var container = this.container;
	  var rect = container.getBoundingClientRect();
	  var style = this.cy.window().getComputedStyle(container);
	  var styleValue = function styleValue(name) {
	    return parseFloat(style.getPropertyValue(name));
	  };
	  var padding = {
	    left: styleValue('padding-left'),
	    right: styleValue('padding-right'),
	    top: styleValue('padding-top'),
	    bottom: styleValue('padding-bottom')
	  };
	  var border = {
	    left: styleValue('border-left-width'),
	    right: styleValue('border-right-width'),
	    top: styleValue('border-top-width'),
	    bottom: styleValue('border-bottom-width')
	  };
	  var clientWidth = container.clientWidth;
	  var clientHeight = container.clientHeight;
	  var paddingHor = padding.left + padding.right;
	  var paddingVer = padding.top + padding.bottom;
	  var borderHor = border.left + border.right;
	  var scale = rect.width / (clientWidth + borderHor);
	  var unscaledW = clientWidth - paddingHor;
	  var unscaledH = clientHeight - paddingVer;
	  var left = rect.left + padding.left + border.left;
	  var top = rect.top + padding.top + border.top;
	  return this.containerBB = [left, top, unscaledW, unscaledH, scale];
	};
	BRp$e.invalidateContainerClientCoordsCache = function () {
	  this.containerBB = null;
	};
	BRp$e.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
	  return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
	};
	BRp$e.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = []; // 1 node max, 1 edge max
	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;
	  var minSqDist = Infinity;
	  var nearEdge;
	  var nearNode;
	  if (interactiveElementsOnly) {
	    eles = eles.interactive;
	  }
	  function addEle(ele, sqDist) {
	    if (ele.isNode()) {
	      if (nearNode) {
	        return; // can't replace node
	      } else {
	        nearNode = ele;
	        near.push(ele);
	      }
	    }
	    if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
	      if (nearEdge) {
	        // then replace existing edge
	        // can replace only if same z-index
	        if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
	          for (var i = 0; i < near.length; i++) {
	            if (near[i].isEdge()) {
	              near[i] = ele;
	              nearEdge = ele;
	              minSqDist = sqDist != null ? sqDist : minSqDist;
	              break;
	            }
	          }
	        }
	      } else {
	        near.push(ele);
	        nearEdge = ele;
	        minSqDist = sqDist != null ? sqDist : minSqDist;
	      }
	    }
	  }
	  function checkNode(node) {
	    var width = node.outerWidth() + 2 * nodeThreshold;
	    var height = node.outerHeight() + 2 * nodeThreshold;
	    var hw = width / 2;
	    var hh = height / 2;
	    var pos = node.position();
	    var cornerRadius = node.pstyle('corner-radius').value === 'auto' ? 'auto' : node.pstyle('corner-radius').pfValue;
	    var rs = node._private.rscratch;
	    if (pos.x - hw <= x && x <= pos.x + hw // bb check x
	    && pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ) {
	      var shape = r.nodeShapes[self.getNodeShape(node)];
	      if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y, cornerRadius, rs)) {
	        addEle(node, 0);
	        return true;
	      }
	    }
	  }
	  function checkEdge(edge) {
	    var _p = edge._private;
	    var rs = _p.rscratch;
	    var styleWidth = edge.pstyle('width').pfValue;
	    var scale = edge.pstyle('arrow-scale').value;
	    var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre
	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var sqDist;
	    if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
	      var pts = rs.allpts;
	      for (var i = 0; i + 3 < pts.length; i += 2) {
	        if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	      var pts = rs.allpts;
	      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	        if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    }

	    // if we're close to the edge but didn't hit it, maybe we hit its arrows

	    var src = src || _p.source;
	    var tgt = tgt || _p.target;
	    var arSize = self.getArrowWidth(styleWidth, scale);
	    var arrows = [{
	      name: 'source',
	      x: rs.arrowStartX,
	      y: rs.arrowStartY,
	      angle: rs.srcArrowAngle
	    }, {
	      name: 'target',
	      x: rs.arrowEndX,
	      y: rs.arrowEndY,
	      angle: rs.tgtArrowAngle
	    }, {
	      name: 'mid-source',
	      x: rs.midX,
	      y: rs.midY,
	      angle: rs.midsrcArrowAngle
	    }, {
	      name: 'mid-target',
	      x: rs.midX,
	      y: rs.midY,
	      angle: rs.midtgtArrowAngle
	    }];
	    for (var i = 0; i < arrows.length; i++) {
	      var ar = arrows[i];
	      var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
	      var edgeWidth = edge.pstyle('width').pfValue;
	      if (shape.roughCollide(x, y, arSize, ar.angle, {
	        x: ar.x,
	        y: ar.y
	      }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
	        x: ar.x,
	        y: ar.y
	      }, edgeWidth, edgeThreshold)) {
	        addEle(edge);
	        return true;
	      }
	    }

	    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
	    if (hasCompounds && near.length > 0) {
	      checkNode(src);
	      checkNode(tgt);
	    }
	  }
	  function preprop(obj, name, pre) {
	    return getPrefixedProperty(obj, name, pre);
	  }
	  function checkLabel(ele, prefix) {
	    var _p = ele._private;
	    var th = labelThreshold;
	    var prefixDash;
	    if (prefix) {
	      prefixDash = prefix + '-';
	    } else {
	      prefixDash = '';
	    }
	    ele.boundingBox();
	    var bb = _p.labelBounds[prefix || 'main'];
	    var text = ele.pstyle(prefixDash + 'label').value;
	    var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';
	    if (!eventsEnabled || !text) {
	      return;
	    }
	    var lx = preprop(_p.rscratch, 'labelX', prefix);
	    var ly = preprop(_p.rscratch, 'labelY', prefix);
	    var theta = preprop(_p.rscratch, 'labelAngle', prefix);
	    var ox = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
	    var oy = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
	    var lx1 = bb.x1 - th - ox; // (-ox, -oy) as bb already includes margin
	    var lx2 = bb.x2 + th - ox; // and rotation is about (lx, ly)
	    var ly1 = bb.y1 - th - oy;
	    var ly2 = bb.y2 + th - oy;
	    if (theta) {
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta);
	      var rotate = function rotate(x, y) {
	        x = x - lx;
	        y = y - ly;
	        return {
	          x: x * cos - y * sin + lx,
	          y: x * sin + y * cos + ly
	        };
	      };
	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);
	      var points = [
	      // with the margin added after the rotation is applied
	      px1y1.x + ox, px1y1.y + oy, px2y1.x + ox, px2y1.y + oy, px2y2.x + ox, px2y2.y + oy, px1y2.x + ox, px1y2.y + oy];
	      if (pointInsidePolygonPoints(x, y, points)) {
	        addEle(ele);
	        return true;
	      }
	    } else {
	      // do a cheaper bb check
	      if (inBoundingBox(bb, x, y)) {
	        addEle(ele);
	        return true;
	      }
	    }
	  }
	  for (var i = eles.length - 1; i >= 0; i--) {
	    // reverse order for precedence
	    var ele = eles[i];
	    if (ele.isNode()) {
	      checkNode(ele) || checkLabel(ele);
	    } else {
	      // then edge
	      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
	    }
	  }
	  return near;
	};

	// 'Give me everything from this box'
	BRp$e.getAllInBox = function (x1, y1, x2, y2) {
	  var eles = this.getCachedZSortedEles().interactive;
	  var box = [];
	  var x1c = Math.min(x1, x2);
	  var x2c = Math.max(x1, x2);
	  var y1c = Math.min(y1, y2);
	  var y2c = Math.max(y1, y2);
	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;
	  var boxBb = makeBoundingBox({
	    x1: x1,
	    y1: y1,
	    x2: x2,
	    y2: y2
	  });
	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];
	    if (ele.isNode()) {
	      var node = ele;
	      var nodeBb = node.boundingBox({
	        includeNodes: true,
	        includeEdges: false,
	        includeLabels: false
	      });
	      if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
	        box.push(node);
	      }
	    } else {
	      var edge = ele;
	      var _p = edge._private;
	      var rs = _p.rscratch;
	      if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
	        continue;
	      }
	      if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
	        continue;
	      }
	      if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
	        var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	        var allInside = true;
	        for (var i = 0; i < pts.length; i++) {
	          if (!pointInBoundingBox(boxBb, pts[i])) {
	            allInside = false;
	            break;
	          }
	        }
	        if (allInside) {
	          box.push(edge);
	        }
	      } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
	        box.push(edge);
	      }
	    }
	  }
	  return box;
	};

	var BRp$d = {};
	BRp$d.calculateArrowAngles = function (edge) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isBezier = rs.edgeType === 'bezier';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self';

	  // Displacement gives direction for arrowhead orientation
	  var dispX, dispY;
	  var startX, startY, endX, endY, midX, midY;
	  if (isHaystack) {
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }
	  midX = rs.midX;
	  midY = rs.midY;

	  // source
	  //

	  if (isSegments) {
	    dispX = startX - rs.segpts[0];
	    dispY = startY - rs.segpts[1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
	    var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
	    dispX = startX - bX;
	    dispY = startY - bY;
	  } else {
	    dispX = startX - midX;
	    dispY = startY - midY;
	  }
	  rs.srcArrowAngle = getAngleFromDisp(dispX, dispY);

	  // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;
	  if (isHaystack) {
	    midX = (startX + endX) / 2;
	    midY = (startY + endY) / 2;
	  }
	  dispX = endX - startX;
	  dispY = endY - startY;
	  if (isSegments) {
	    var pts = rs.allpts;
	    if (pts.length / 2 % 2 === 0) {
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;
	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    } else if (rs.isRound) {
	      dispX = rs.midVector[1];
	      dispY = -rs.midVector[0];
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    }
	  } else if (isMultibezier || isCompound || isSelf) {
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;
	    if (cpts.length / 2 % 2 === 0) {
	      var p0 = pts.length / 2 - 1; // startpt
	      var ic = p0 + 2;
	      var p1 = ic + 2;
	      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
	      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
	      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
	      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt
	      var p0 = ic - 2; // startpt
	      var p1 = ic + 2; // endpt

	      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
	      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
	      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
	      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
	    }
	    dispX = bp1x - bp0x;
	    dispY = bp1y - bp0y;
	  }
	  rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
	  rs.midDispX = dispX;
	  rs.midDispY = dispY;

	  // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;
	  if (isSegments) {
	    var pts = rs.allpts;
	    if (pts.length / 2 % 2 === 0) ; else if (!rs.isRound) {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;
	      dispX = -(pts[i3] - pts[i2]);
	      dispY = -(pts[i3 + 1] - pts[i2 + 1]);
	    }
	  }
	  rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY);

	  // target
	  //

	  if (isSegments) {
	    dispX = endX - rs.segpts[rs.segpts.length - 2];
	    dispY = endY - rs.segpts[rs.segpts.length - 1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var l = pts.length;
	    var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
	    var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
	    dispX = endX - bX;
	    dispY = endY - bY;
	  } else {
	    dispX = endX - midX;
	    dispY = endY - midY;
	  }
	  rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
	};
	BRp$d.getArrowWidth = BRp$d.getArrowHeight = function (edgeWidth, scale) {
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};
	  var cachedVal = cache[edgeWidth + ', ' + scale];
	  if (cachedVal) {
	    return cachedVal;
	  }
	  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
	  cache[edgeWidth + ', ' + scale] = cachedVal;
	  return cachedVal;
	};

	/**
	 * Explained by Blindman67 at https://stackoverflow.com/a/44856925/11028828
	 */

	// Declare reused variable to avoid reallocating variables every time the function is called
	var x,
	  y,
	  v1 = {},
	  v2 = {},
	  sinA,
	  sinA90,
	  radDirection,
	  drawDirection,
	  angle,
	  halfAngle,
	  cRadius,
	  lenOut,
	  radius,
	  limit;
	var startX, startY, stopX, stopY;
	var lastPoint;

	// convert 2 points into vector form, polar form, and normalised
	var asVec = function asVec(p, pp, v) {
	  v.x = pp.x - p.x;
	  v.y = pp.y - p.y;
	  v.len = Math.sqrt(v.x * v.x + v.y * v.y);
	  v.nx = v.x / v.len;
	  v.ny = v.y / v.len;
	  v.ang = Math.atan2(v.ny, v.nx);
	};
	var invertVec = function invertVec(originalV, invertedV) {
	  invertedV.x = originalV.x * -1;
	  invertedV.y = originalV.y * -1;
	  invertedV.nx = originalV.nx * -1;
	  invertedV.ny = originalV.ny * -1;
	  invertedV.ang = originalV.ang > 0 ? -(Math.PI - originalV.ang) : Math.PI + originalV.ang;
	};
	var calcCornerArc = function calcCornerArc(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius) {
	  //-----------------------------------------
	  // Part 1
	  previousPoint !== lastPoint ? asVec(currentPoint, previousPoint, v1) : invertVec(v2, v1); // Avoid recalculating vec if it is the invert of the last one calculated
	  asVec(currentPoint, nextPoint, v2);
	  sinA = v1.nx * v2.ny - v1.ny * v2.nx;
	  sinA90 = v1.nx * v2.nx - v1.ny * -v2.ny;
	  angle = Math.asin(Math.max(-1, Math.min(1, sinA)));
	  if (Math.abs(angle) < 1e-6) {
	    x = currentPoint.x;
	    y = currentPoint.y;
	    cRadius = radius = 0;
	    return;
	  }
	  //-----------------------------------------
	  radDirection = 1;
	  drawDirection = false;
	  if (sinA90 < 0) {
	    if (angle < 0) {
	      angle = Math.PI + angle;
	    } else {
	      angle = Math.PI - angle;
	      radDirection = -1;
	      drawDirection = true;
	    }
	  } else {
	    if (angle > 0) {
	      radDirection = -1;
	      drawDirection = true;
	    }
	  }
	  if (currentPoint.radius !== undefined) {
	    radius = currentPoint.radius;
	  } else {
	    radius = radiusMax;
	  }
	  //-----------------------------------------
	  // Part 2
	  halfAngle = angle / 2;
	  //-----------------------------------------

	  limit = Math.min(v1.len / 2, v2.len / 2);
	  if (isArcRadius) {
	    //-----------------------------------------
	    // Part 3
	    lenOut = Math.abs(Math.cos(halfAngle) * radius / Math.sin(halfAngle));

	    //-----------------------------------------
	    // Special part A
	    if (lenOut > limit) {
	      lenOut = limit;
	      cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));
	    } else {
	      cRadius = radius;
	    }
	  } else {
	    lenOut = Math.min(limit, radius);
	    cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));
	  }
	  //-----------------------------------------

	  //-----------------------------------------
	  // Part 4
	  stopX = currentPoint.x + v2.nx * lenOut;
	  stopY = currentPoint.y + v2.ny * lenOut;
	  //-----------------------------------------
	  // Part 5
	  x = stopX - v2.ny * cRadius * radDirection;
	  y = stopY + v2.nx * cRadius * radDirection;
	  //-----------------------------------------
	  // Additional Part : calculate start point E
	  startX = currentPoint.x + v1.nx * lenOut;
	  startY = currentPoint.y + v1.ny * lenOut;

	  // Save last point to avoid recalculating vector when not needed
	  lastPoint = currentPoint;
	};

	/**
	 * Draw corner provided by {@link getRoundCorner}
	 *
	 * @param ctx :CanvasRenderingContext2D
	 * @param roundCorner {{cx:number, cy:number, radius:number, endAngle: number, startAngle: number, counterClockwise: boolean}}
	 */
	function drawPreparedRoundCorner(ctx, roundCorner) {
	  if (roundCorner.radius === 0) ctx.lineTo(roundCorner.cx, roundCorner.cy);else ctx.arc(roundCorner.cx, roundCorner.cy, roundCorner.radius, roundCorner.startAngle, roundCorner.endAngle, roundCorner.counterClockwise);
	}

	/**
	 * Get round corner from a point and its previous and next neighbours in a path
	 *
	 * @param previousPoint {{x: number, y:number, radius: number?}}
	 * @param currentPoint {{x: number, y:number, radius: number?}}
	 * @param nextPoint {{x: number, y:number, radius: number?}}
	 * @param radiusMax :number
	 * @param isArcRadius :boolean
	 * @return {{
	 * cx:number, cy:number, radius:number,
	 * startX:number, startY:number,
	 * stopX:number, stopY: number,
	 * endAngle: number, startAngle: number, counterClockwise: boolean
	 * }}
	 */
	function getRoundCorner(previousPoint, currentPoint, nextPoint, radiusMax) {
	  var isArcRadius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  if (radiusMax === 0 || currentPoint.radius === 0) return {
	    cx: currentPoint.x,
	    cy: currentPoint.y,
	    radius: 0,
	    startX: currentPoint.x,
	    startY: currentPoint.y,
	    stopX: currentPoint.x,
	    stopY: currentPoint.y,
	    startAngle: undefined,
	    endAngle: undefined,
	    counterClockwise: undefined
	  };
	  calcCornerArc(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius);
	  return {
	    cx: x,
	    cy: y,
	    radius: cRadius,
	    startX: startX,
	    startY: startY,
	    stopX: stopX,
	    stopY: stopY,
	    startAngle: v1.ang + Math.PI / 2 * radDirection,
	    endAngle: v2.ang - Math.PI / 2 * radDirection,
	    counterClockwise: drawDirection
	  };
	}

	var BRp$c = {};
	BRp$c.findMidptPtsEtc = function (edge, pairInfo) {
	  var posPts = pairInfo.posPts,
	    intersectionPts = pairInfo.intersectionPts,
	    vectorNormInverse = pairInfo.vectorNormInverse;
	  var midptPts;

	  // n.b. assumes all edges in bezier bundle have same endpoints specified
	  var srcManEndpt = edge.pstyle('source-endpoint');
	  var tgtManEndpt = edge.pstyle('target-endpoint');
	  var haveManualEndPts = srcManEndpt.units != null && tgtManEndpt.units != null;
	  var recalcVectorNormInverse = function recalcVectorNormInverse(x1, y1, x2, y2) {
	    var dy = y2 - y1;
	    var dx = x2 - x1;
	    var l = Math.sqrt(dx * dx + dy * dy);
	    return {
	      x: -dy / l,
	      y: dx / l
	    };
	  };
	  var edgeDistances = edge.pstyle('edge-distances').value;
	  switch (edgeDistances) {
	    case 'node-position':
	      midptPts = posPts;
	      break;
	    case 'intersection':
	      midptPts = intersectionPts;
	      break;
	    case 'endpoints':
	      {
	        if (haveManualEndPts) {
	          var _this$manualEndptToPx = this.manualEndptToPx(edge.source()[0], srcManEndpt),
	            _this$manualEndptToPx2 = _slicedToArray(_this$manualEndptToPx, 2),
	            x1 = _this$manualEndptToPx2[0],
	            y1 = _this$manualEndptToPx2[1];
	          var _this$manualEndptToPx3 = this.manualEndptToPx(edge.target()[0], tgtManEndpt),
	            _this$manualEndptToPx4 = _slicedToArray(_this$manualEndptToPx3, 2),
	            x2 = _this$manualEndptToPx4[0],
	            y2 = _this$manualEndptToPx4[1];
	          var endPts = {
	            x1: x1,
	            y1: y1,
	            x2: x2,
	            y2: y2
	          };
	          vectorNormInverse = recalcVectorNormInverse(x1, y1, x2, y2);
	          midptPts = endPts;
	        } else {
	          warn("Edge ".concat(edge.id(), " has edge-distances:endpoints specified without manual endpoints specified via source-endpoint and target-endpoint.  Falling back on edge-distances:intersection (default)."));
	          midptPts = intersectionPts; // back to default
	        }

	        break;
	      }
	  }
	  return {
	    midptPts: midptPts,
	    vectorNormInverse: vectorNormInverse
	  };
	};
	BRp$c.findHaystackPoints = function (edges) {
	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var _p = edge._private;
	    var rs = _p.rscratch;
	    if (!rs.haystack) {
	      var angle = Math.random() * 2 * Math.PI;
	      rs.source = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };
	      angle = Math.random() * 2 * Math.PI;
	      rs.target = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };
	    }
	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src.position();
	    var tgtPos = tgt.position();
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = edge.pstyle('haystack-radius').value;
	    var halfRadius = radius / 2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
	    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;

	    // always override as haystack in case set to different type previously
	    rs.edgeType = 'haystack';
	    rs.haystack = true;
	    this.storeEdgeProjections(edge);
	    this.calculateArrowAngles(edge);
	    this.recalculateEdgeLabelProjections(edge);
	    this.calculateLabelAngles(edge);
	  }
	};
	BRp$c.findSegmentsPoints = function (edge, pairInfo) {
	  // Segments (multiple straight lines)

	  var rs = edge._private.rscratch;
	  var segmentWs = edge.pstyle('segment-weights');
	  var segmentDs = edge.pstyle('segment-distances');
	  var segmentRs = edge.pstyle('segment-radii');
	  var segmentTs = edge.pstyle('radius-type');
	  var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
	  var lastRadius = segmentRs.pfValue[segmentRs.pfValue.length - 1];
	  var lastRadiusType = segmentTs.pfValue[segmentTs.pfValue.length - 1];
	  rs.edgeType = 'segments';
	  rs.segpts = [];
	  rs.radii = [];
	  rs.isArcRadius = [];
	  for (var s = 0; s < segmentsN; s++) {
	    var w = segmentWs.pfValue[s];
	    var d = segmentDs.pfValue[s];
	    var w1 = 1 - w;
	    var w2 = w;
	    var _this$findMidptPtsEtc = this.findMidptPtsEtc(edge, pairInfo),
	      midptPts = _this$findMidptPtsEtc.midptPts,
	      vectorNormInverse = _this$findMidptPtsEtc.vectorNormInverse;
	    var adjustedMidpt = {
	      x: midptPts.x1 * w1 + midptPts.x2 * w2,
	      y: midptPts.y1 * w1 + midptPts.y2 * w2
	    };
	    rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
	    rs.radii.push(segmentRs.pfValue[s] !== undefined ? segmentRs.pfValue[s] : lastRadius);
	    rs.isArcRadius.push((segmentTs.pfValue[s] !== undefined ? segmentTs.pfValue[s] : lastRadiusType) === 'arc-radius');
	  }
	};
	BRp$c.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
	  // Self-edge

	  var rs = edge._private.rscratch;
	  var dirCounts = pairInfo.dirCounts,
	    srcPos = pairInfo.srcPos;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var loopDir = edge.pstyle('loop-direction').pfValue;
	  var loopSwp = edge.pstyle('loop-sweep').pfValue;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  rs.edgeType = 'self';
	  var j = i;
	  var loopDist = stepSize;
	  if (edgeIsUnbundled) {
	    j = 0;
	    loopDist = ctrlptDist;
	  }
	  var loopAngle = loopDir - Math.PI / 2;
	  var outAngle = loopAngle - loopSwp / 2;
	  var inAngle = loopAngle + loopSwp / 2;

	  // increase by step size for overlapping loops, keyed on direction and sweep values
	  var dc = String(loopDir + '_' + loopSwp);
	  j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
	  rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
	};
	BRp$c.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
	  // Compound edge

	  var rs = edge._private.rscratch;
	  rs.edgeType = 'compound';
	  var srcPos = pairInfo.srcPos,
	    tgtPos = pairInfo.tgtPos,
	    srcW = pairInfo.srcW,
	    srcH = pairInfo.srcH,
	    tgtW = pairInfo.tgtW,
	    tgtH = pairInfo.tgtH;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var j = i;
	  var loopDist = stepSize;
	  if (edgeIsUnbundled) {
	    j = 0;
	    loopDist = ctrlptDist;
	  }
	  var loopW = 50;
	  var loopaPos = {
	    x: srcPos.x - srcW / 2,
	    y: srcPos.y - srcH / 2
	  };
	  var loopbPos = {
	    x: tgtPos.x - tgtW / 2,
	    y: tgtPos.y - tgtH / 2
	  };
	  var loopPos = {
	    x: Math.min(loopaPos.x, loopbPos.x),
	    y: Math.min(loopaPos.y, loopbPos.y)
	  };

	  // avoids cases with impossible beziers
	  var minCompoundStretch = 0.5;
	  var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
	  var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
	  rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
	};
	BRp$c.findStraightEdgePoints = function (edge) {
	  // Straight edge within bundle

	  edge._private.rscratch.edgeType = 'straight';
	};
	BRp$c.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {
	  var rs = edge._private.rscratch;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptWs = edge.pstyle('control-point-weights');
	  var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var ctrlptWeight = ctrlptWs.value[0];

	  // (Multi)bezier

	  var multi = edgeIsUnbundled;
	  rs.edgeType = multi ? 'multibezier' : 'bezier';
	  rs.ctrlpts = [];
	  for (var b = 0; b < bezierN; b++) {
	    var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);
	    var manctrlptDist = void 0;
	    var sign = signum(normctrlptDist);
	    if (multi) {
	      ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size
	      ctrlptWeight = ctrlptWs.value[b];
	    }
	    if (edgeIsUnbundled) {
	      // multi or single unbundled
	      manctrlptDist = ctrlptDist;
	    } else {
	      manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	    }
	    var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
	    var w1 = 1 - ctrlptWeight;
	    var w2 = ctrlptWeight;
	    var _this$findMidptPtsEtc2 = this.findMidptPtsEtc(edge, pairInfo),
	      midptPts = _this$findMidptPtsEtc2.midptPts,
	      vectorNormInverse = _this$findMidptPtsEtc2.vectorNormInverse;
	    var adjustedMidpt = {
	      x: midptPts.x1 * w1 + midptPts.x2 * w2,
	      y: midptPts.y1 * w1 + midptPts.y2 * w2
	    };
	    rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
	  }
	};
	BRp$c.findTaxiPoints = function (edge, pairInfo) {
	  // Taxicab geometry with two turns maximum

	  var rs = edge._private.rscratch;
	  rs.edgeType = 'segments';
	  var VERTICAL = 'vertical';
	  var HORIZONTAL = 'horizontal';
	  var LEFTWARD = 'leftward';
	  var RIGHTWARD = 'rightward';
	  var DOWNWARD = 'downward';
	  var UPWARD = 'upward';
	  var AUTO = 'auto';
	  var posPts = pairInfo.posPts,
	    srcW = pairInfo.srcW,
	    srcH = pairInfo.srcH,
	    tgtW = pairInfo.tgtW,
	    tgtH = pairInfo.tgtH;
	  var edgeDistances = edge.pstyle('edge-distances').value;
	  var dIncludesNodeBody = edgeDistances !== 'node-position';
	  var taxiDir = edge.pstyle('taxi-direction').value;
	  var rawTaxiDir = taxiDir; // unprocessed value
	  var taxiTurn = edge.pstyle('taxi-turn');
	  var turnIsPercent = taxiTurn.units === '%';
	  var taxiTurnPfVal = taxiTurn.pfValue;
	  var turnIsNegative = taxiTurnPfVal < 0; // i.e. from target side
	  var minD = edge.pstyle('taxi-turn-min-distance').pfValue;
	  var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
	  var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
	  var pdx = posPts.x2 - posPts.x1;
	  var pdy = posPts.y2 - posPts.y1;

	  // take away the effective w/h from the magnitude of the delta value
	  var subDWH = function subDWH(dxy, dwh) {
	    if (dxy > 0) {
	      return Math.max(dxy - dwh, 0);
	    } else {
	      return Math.min(dxy + dwh, 0);
	    }
	  };
	  var dx = subDWH(pdx, dw);
	  var dy = subDWH(pdy, dh);
	  var isExplicitDir = false;
	  if (rawTaxiDir === AUTO) {
	    taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
	  } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {
	    taxiDir = VERTICAL;
	    isExplicitDir = true;
	  } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {
	    taxiDir = HORIZONTAL;
	    isExplicitDir = true;
	  }
	  var isVert = taxiDir === VERTICAL;
	  var l = isVert ? dy : dx;
	  var pl = isVert ? pdy : pdx;
	  var sgnL = signum(pl);
	  var forcedDir = false;
	  if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) // forcing in this case would cause weird growing in the opposite direction
	  && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
	    sgnL *= -1;
	    l = sgnL * Math.abs(l);
	    forcedDir = true;
	  }
	  var d;
	  if (turnIsPercent) {
	    var p = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;
	    d = p * l;
	  } else {
	    var k = taxiTurnPfVal < 0 ? l : 0;
	    d = k + taxiTurnPfVal * sgnL;
	  }
	  var getIsTooClose = function getIsTooClose(d) {
	    return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);
	  };
	  var isTooCloseSrc = getIsTooClose(d);
	  var isTooCloseTgt = getIsTooClose(Math.abs(l) - Math.abs(d));
	  var isTooClose = isTooCloseSrc || isTooCloseTgt;
	  if (isTooClose && !forcedDir) {
	    // non-ideal routing
	    if (isVert) {
	      // vertical fallbacks
	      var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
	      var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;
	      if (lShapeInsideSrc) {
	        // horizontal Z-shape (direction not respected)
	        var x = (posPts.x1 + posPts.x2) / 2;
	        var y1 = posPts.y1,
	          y2 = posPts.y2;
	        rs.segpts = [x, y1, x, y2];
	      } else if (lShapeInsideTgt) {
	        // vertical Z-shape (distance not respected)
	        var y = (posPts.y1 + posPts.y2) / 2;
	        var x1 = posPts.x1,
	          x2 = posPts.x2;
	        rs.segpts = [x1, y, x2, y];
	      } else {
	        // L-shape fallback (turn distance not respected, but works well with tree siblings)
	        rs.segpts = [posPts.x1, posPts.y2];
	      }
	    } else {
	      // horizontal fallbacks
	      var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;
	      var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;
	      if (_lShapeInsideSrc) {
	        // vertical Z-shape (direction not respected)
	        var _y = (posPts.y1 + posPts.y2) / 2;
	        var _x = posPts.x1,
	          _x2 = posPts.x2;
	        rs.segpts = [_x, _y, _x2, _y];
	      } else if (_lShapeInsideTgt) {
	        // horizontal Z-shape (turn distance not respected)
	        var _x3 = (posPts.x1 + posPts.x2) / 2;
	        var _y2 = posPts.y1,
	          _y3 = posPts.y2;
	        rs.segpts = [_x3, _y2, _x3, _y3];
	      } else {
	        // L-shape (turn distance not respected, but works well for tree siblings)
	        rs.segpts = [posPts.x2, posPts.y1];
	      }
	    }
	  } else {
	    // ideal routing
	    if (isVert) {
	      var _y4 = posPts.y1 + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);
	      var _x4 = posPts.x1,
	        _x5 = posPts.x2;
	      rs.segpts = [_x4, _y4, _x5, _y4];
	    } else {
	      // horizontal
	      var _x6 = posPts.x1 + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);
	      var _y5 = posPts.y1,
	        _y6 = posPts.y2;
	      rs.segpts = [_x6, _y5, _x6, _y6];
	    }
	  }
	  if (rs.isRound) {
	    var radius = edge.pstyle('taxi-radius').value;
	    var isArcRadius = edge.pstyle('radius-type').value[0] === 'arc-radius';
	    rs.radii = new Array(rs.segpts.length / 2).fill(radius);
	    rs.isArcRadius = new Array(rs.segpts.length / 2).fill(isArcRadius);
	  }
	};
	BRp$c.tryToCorrectInvalidPoints = function (edge, pairInfo) {
	  var rs = edge._private.rscratch;

	  // can only correct beziers for now...
	  if (rs.edgeType === 'bezier') {
	    var srcPos = pairInfo.srcPos,
	      tgtPos = pairInfo.tgtPos,
	      srcW = pairInfo.srcW,
	      srcH = pairInfo.srcH,
	      tgtW = pairInfo.tgtW,
	      tgtH = pairInfo.tgtH,
	      srcShape = pairInfo.srcShape,
	      tgtShape = pairInfo.tgtShape,
	      srcCornerRadius = pairInfo.srcCornerRadius,
	      tgtCornerRadius = pairInfo.tgtCornerRadius,
	      srcRs = pairInfo.srcRs,
	      tgtRs = pairInfo.tgtRs;
	    var badStart = !number$1(rs.startX) || !number$1(rs.startY);
	    var badAStart = !number$1(rs.arrowStartX) || !number$1(rs.arrowStartY);
	    var badEnd = !number$1(rs.endX) || !number$1(rs.endY);
	    var badAEnd = !number$1(rs.arrowEndX) || !number$1(rs.arrowEndY);
	    var minCpADistFactor = 3;
	    var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	    var minCpADist = minCpADistFactor * arrowW;
	    var startACpDist = dist({
	      x: rs.ctrlpts[0],
	      y: rs.ctrlpts[1]
	    }, {
	      x: rs.startX,
	      y: rs.startY
	    });
	    var closeStartACp = startACpDist < minCpADist;
	    var endACpDist = dist({
	      x: rs.ctrlpts[0],
	      y: rs.ctrlpts[1]
	    }, {
	      x: rs.endX,
	      y: rs.endY
	    });
	    var closeEndACp = endACpDist < minCpADist;
	    var overlapping = false;
	    if (badStart || badAStart || closeStartACp) {
	      overlapping = true;

	      // project control point along line from src centre to outside the src shape
	      // (otherwise intersection will yield nothing)
	      var cpD = {
	        // delta
	        x: rs.ctrlpts[0] - srcPos.x,
	        y: rs.ctrlpts[1] - srcPos.y
	      };
	      var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line
	      var cpM = {
	        // normalised delta
	        x: cpD.x / cpL,
	        y: cpD.y / cpL
	      };
	      var radius = Math.max(srcW, srcH);
	      var cpProj = {
	        // *2 radius guarantees outside shape
	        x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	        y: rs.ctrlpts[1] + cpM.y * 2 * radius
	      };
	      var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0, srcCornerRadius, srcRs);
	      if (closeStartACp) {
	        rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	        rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	      } else {
	        rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	        rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	      }
	    }
	    if (badEnd || badAEnd || closeEndACp) {
	      overlapping = true;

	      // project control point along line from tgt centre to outside the tgt shape
	      // (otherwise intersection will yield nothing)
	      var _cpD = {
	        // delta
	        x: rs.ctrlpts[0] - tgtPos.x,
	        y: rs.ctrlpts[1] - tgtPos.y
	      };
	      var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line
	      var _cpM = {
	        // normalised delta
	        x: _cpD.x / _cpL,
	        y: _cpD.y / _cpL
	      };
	      var _radius = Math.max(srcW, srcH);
	      var _cpProj = {
	        // *2 radius guarantees outside shape
	        x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
	        y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
	      };
	      var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0, tgtCornerRadius, tgtRs);
	      if (closeEndACp) {
	        rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
	        rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
	      } else {
	        rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
	        rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
	      }
	    }
	    if (overlapping) {
	      // recalc endpts
	      this.findEndpoints(edge);
	    }
	  }
	};
	BRp$c.storeAllpts = function (edge) {
	  var rs = edge._private.rscratch;
	  if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	    rs.allpts = [];
	    rs.allpts.push(rs.startX, rs.startY);
	    for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
	      // ctrl pt itself
	      rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]);

	      // the midpt between ctrlpts as intermediate destination pts
	      if (b + 3 < rs.ctrlpts.length) {
	        rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
	      }
	    }
	    rs.allpts.push(rs.endX, rs.endY);
	    var m, mt;
	    if (rs.ctrlpts.length / 2 % 2 === 0) {
	      m = rs.allpts.length / 2 - 1;
	      rs.midX = rs.allpts[m];
	      rs.midY = rs.allpts[m + 1];
	    } else {
	      m = rs.allpts.length / 2 - 3;
	      mt = 0.5;
	      rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
	      rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
	    }
	  } else if (rs.edgeType === 'straight') {
	    // need to calc these after endpts
	    rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];

	    // default midpt for labels etc
	    rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
	    rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
	  } else if (rs.edgeType === 'segments') {
	    rs.allpts = [];
	    rs.allpts.push(rs.startX, rs.startY);
	    rs.allpts.push.apply(rs.allpts, rs.segpts);
	    rs.allpts.push(rs.endX, rs.endY);
	    if (rs.isRound) {
	      rs.roundCorners = [];
	      for (var i = 2; i + 3 < rs.allpts.length; i += 2) {
	        var radius = rs.radii[i / 2 - 1];
	        var isArcRadius = rs.isArcRadius[i / 2 - 1];
	        rs.roundCorners.push(getRoundCorner({
	          x: rs.allpts[i - 2],
	          y: rs.allpts[i - 1]
	        }, {
	          x: rs.allpts[i],
	          y: rs.allpts[i + 1],
	          radius: radius
	        }, {
	          x: rs.allpts[i + 2],
	          y: rs.allpts[i + 3]
	        }, radius, isArcRadius));
	      }
	    }
	    if (rs.segpts.length % 4 === 0) {
	      var i2 = rs.segpts.length / 2;
	      var i1 = i2 - 2;
	      rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
	      rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
	    } else {
	      var _i = rs.segpts.length / 2 - 1;
	      if (!rs.isRound) {
	        rs.midX = rs.segpts[_i];
	        rs.midY = rs.segpts[_i + 1];
	      } else {
	        var point = {
	          x: rs.segpts[_i],
	          y: rs.segpts[_i + 1]
	        };
	        var corner = rs.roundCorners[_i / 2];
	        var v = [point.x - corner.cx, point.y - corner.cy];
	        var factor = corner.radius / Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
	        v = v.map(function (c) {
	          return c * factor;
	        });
	        rs.midX = corner.cx + v[0];
	        rs.midY = corner.cy + v[1];
	        rs.midVector = v;
	      }
	    }
	  }
	};
	BRp$c.checkForInvalidEdgeWarning = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  if (rs.nodesOverlap || number$1(rs.startX) && number$1(rs.startY) && number$1(rs.endX) && number$1(rs.endY)) {
	    rs.loggedErr = false;
	  } else {
	    if (!rs.loggedErr) {
	      rs.loggedErr = true;
	      warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
	    }
	  }
	};
	BRp$c.findEdgeControlPoints = function (edges) {
	  var _this = this;
	  if (!edges || edges.length === 0) {
	    return;
	  }
	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {
	    map: new Map$2(),
	    get: function get(pairId) {
	      var map2 = this.map.get(pairId[0]);
	      if (map2 != null) {
	        return map2.get(pairId[1]);
	      } else {
	        return null;
	      }
	    },
	    set: function set(pairId, val) {
	      var map2 = this.map.get(pairId[0]);
	      if (map2 == null) {
	        map2 = new Map$2();
	        this.map.set(pairId[0], map2);
	      }
	      map2.set(pairId[1], val);
	    }
	  };
	  var pairIds = [];
	  var haystackEdges = [];

	  // create a table of edge (src, tgt) => list of edges between them
	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var _p = edge._private;
	    var curveStyle = edge.pstyle('curve-style').value;

	    // ignore edges who are not to be displayed
	    // they shouldn't take up space
	    if (edge.removed() || !edge.takesUpSpace()) {
	      continue;
	    }
	    if (curveStyle === 'haystack') {
	      haystackEdges.push(edge);
	      continue;
	    }
	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle.endsWith('segments') || curveStyle === 'straight' || curveStyle === 'straight-triangle' || curveStyle.endsWith('taxi');
	    var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';
	    var src = _p.source;
	    var tgt = _p.target;
	    var srcIndex = src.poolIndex();
	    var tgtIndex = tgt.poolIndex();
	    var pairId = [srcIndex, tgtIndex].sort();
	    var tableEntry = hashTable.get(pairId);
	    if (tableEntry == null) {
	      tableEntry = {
	        eles: []
	      };
	      hashTable.set(pairId, tableEntry);
	      pairIds.push(pairId);
	    }
	    tableEntry.eles.push(edge);
	    if (edgeIsUnbundled) {
	      tableEntry.hasUnbundled = true;
	    }
	    if (edgeIsBezier) {
	      tableEntry.hasBezier = true;
	    }
	  }

	  // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount
	  var _loop = function _loop(p) {
	    var pairId = pairIds[p];
	    var pairInfo = hashTable.get(pairId);
	    var swappedpairInfo = void 0;
	    if (!pairInfo.hasUnbundled) {
	      var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {
	        return e.isBundledBezier();
	      });
	      clearArray(pairInfo.eles);
	      pllEdges.forEach(function (edge) {
	        return pairInfo.eles.push(edge);
	      });

	      // for each pair id, the edges should be sorted by index
	      pairInfo.eles.sort(function (edge1, edge2) {
	        return edge1.poolIndex() - edge2.poolIndex();
	      });
	    }
	    var firstEdge = pairInfo.eles[0];
	    var src = firstEdge.source();
	    var tgt = firstEdge.target();

	    // make sure src/tgt distinction is consistent w.r.t. pairId
	    if (src.poolIndex() > tgt.poolIndex()) {
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }
	    var srcPos = pairInfo.srcPos = src.position();
	    var tgtPos = pairInfo.tgtPos = tgt.position();
	    var srcW = pairInfo.srcW = src.outerWidth();
	    var srcH = pairInfo.srcH = src.outerHeight();
	    var tgtW = pairInfo.tgtW = tgt.outerWidth();
	    var tgtH = pairInfo.tgtH = tgt.outerHeight();
	    var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];
	    var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];
	    var srcCornerRadius = pairInfo.srcCornerRadius = src.pstyle('corner-radius').value === 'auto' ? 'auto' : src.pstyle('corner-radius').pfValue;
	    var tgtCornerRadius = pairInfo.tgtCornerRadius = tgt.pstyle('corner-radius').value === 'auto' ? 'auto' : tgt.pstyle('corner-radius').pfValue;
	    var tgtRs = pairInfo.tgtRs = tgt._private.rscratch;
	    var srcRs = pairInfo.srcRs = src._private.rscratch;
	    pairInfo.dirCounts = {
	      'north': 0,
	      'west': 0,
	      'south': 0,
	      'east': 0,
	      'northwest': 0,
	      'southwest': 0,
	      'northeast': 0,
	      'southeast': 0
	    };
	    for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
	      var _edge = pairInfo.eles[_i2];
	      var rs = _edge[0]._private.rscratch;
	      var _curveStyle = _edge.pstyle('curve-style').value;
	      var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle.endsWith('segments') || _curveStyle.endsWith('taxi');

	      // whether the normalised pair order is the reverse of the edge's src-tgt order
	      var edgeIsSwapped = !src.same(_edge.source());
	      if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
	        pairInfo.calculatedIntersection = true;

	        // pt outside src shape to calc distance/displacement from src to tgt
	        var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0, srcCornerRadius, srcRs);
	        var srcIntn = pairInfo.srcIntn = srcOutside;

	        // pt outside tgt shape to calc distance/displacement from src to tgt
	        var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0, tgtCornerRadius, tgtRs);
	        var tgtIntn = pairInfo.tgtIntn = tgtOutside;
	        var intersectionPts = pairInfo.intersectionPts = {
	          x1: srcOutside[0],
	          x2: tgtOutside[0],
	          y1: srcOutside[1],
	          y2: tgtOutside[1]
	        };
	        var posPts = pairInfo.posPts = {
	          x1: srcPos.x,
	          x2: tgtPos.x,
	          y1: srcPos.y,
	          y2: tgtPos.y
	        };
	        var dy = tgtOutside[1] - srcOutside[1];
	        var dx = tgtOutside[0] - srcOutside[0];
	        var l = Math.sqrt(dx * dx + dy * dy);
	        var vector = pairInfo.vector = {
	          x: dx,
	          y: dy
	        };
	        var vectorNorm = pairInfo.vectorNorm = {
	          x: vector.x / l,
	          y: vector.y / l
	        };
	        var vectorNormInverse = {
	          x: -vectorNorm.y,
	          y: vectorNorm.x
	        };

	        // if node shapes overlap, then no ctrl pts to draw
	        pairInfo.nodesOverlap = !number$1(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y, tgtCornerRadius, tgtRs) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y, srcCornerRadius, srcRs);
	        pairInfo.vectorNormInverse = vectorNormInverse;
	        swappedpairInfo = {
	          nodesOverlap: pairInfo.nodesOverlap,
	          dirCounts: pairInfo.dirCounts,
	          calculatedIntersection: true,
	          hasBezier: pairInfo.hasBezier,
	          hasUnbundled: pairInfo.hasUnbundled,
	          eles: pairInfo.eles,
	          srcPos: tgtPos,
	          tgtPos: srcPos,
	          srcW: tgtW,
	          srcH: tgtH,
	          tgtW: srcW,
	          tgtH: srcH,
	          srcIntn: tgtIntn,
	          tgtIntn: srcIntn,
	          srcShape: tgtShape,
	          tgtShape: srcShape,
	          posPts: {
	            x1: posPts.x2,
	            y1: posPts.y2,
	            x2: posPts.x1,
	            y2: posPts.y1
	          },
	          intersectionPts: {
	            x1: intersectionPts.x2,
	            y1: intersectionPts.y2,
	            x2: intersectionPts.x1,
	            y2: intersectionPts.y1
	          },
	          vector: {
	            x: -vector.x,
	            y: -vector.y
	          },
	          vectorNorm: {
	            x: -vectorNorm.x,
	            y: -vectorNorm.y
	          },
	          vectorNormInverse: {
	            x: -vectorNormInverse.x,
	            y: -vectorNormInverse.y
	          }
	        };
	      }
	      var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
	      rs.nodesOverlap = passedPairInfo.nodesOverlap;
	      rs.srcIntn = passedPairInfo.srcIntn;
	      rs.tgtIntn = passedPairInfo.tgtIntn;
	      rs.isRound = _curveStyle.startsWith('round');
	      if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt) && src.isParent())) {
	        _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
	      } else if (src === tgt) {
	        _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
	      } else if (_curveStyle.endsWith('segments')) {
	        _this.findSegmentsPoints(_edge, passedPairInfo);
	      } else if (_curveStyle.endsWith('taxi')) {
	        _this.findTaxiPoints(_edge, passedPairInfo);
	      } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
	        _this.findStraightEdgePoints(_edge);
	      } else {
	        _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
	      }
	      _this.findEndpoints(_edge);
	      _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);
	      _this.checkForInvalidEdgeWarning(_edge);
	      _this.storeAllpts(_edge);
	      _this.storeEdgeProjections(_edge);
	      _this.calculateArrowAngles(_edge);
	      _this.recalculateEdgeLabelProjections(_edge);
	      _this.calculateLabelAngles(_edge);
	    } // for pair edges
	  };
	  for (var p = 0; p < pairIds.length; p++) {
	    _loop(p);
	  } // for pair ids

	  // haystacks avoid the expense of pairInfo stuff (intersections etc.)
	  this.findHaystackPoints(haystackEdges);
	};
	function getPts(pts) {
	  var retPts = [];
	  if (pts == null) {
	    return;
	  }
	  for (var i = 0; i < pts.length; i += 2) {
	    var x = pts[i];
	    var y = pts[i + 1];
	    retPts.push({
	      x: x,
	      y: y
	    });
	  }
	  return retPts;
	}
	BRp$c.getSegmentPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;
	  if (type === 'segments') {
	    this.recalculateRenderedStyle(edge);
	    return getPts(rs.segpts);
	  }
	};
	BRp$c.getControlPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;
	  if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
	    this.recalculateRenderedStyle(edge);
	    return getPts(rs.ctrlpts);
	  }
	};
	BRp$c.getEdgeMidpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);
	  return {
	    x: rs.midX,
	    y: rs.midY
	  };
	};

	var BRp$b = {};
	BRp$b.manualEndptToPx = function (node, prop) {
	  var r = this;
	  var npos = node.position();
	  var w = node.outerWidth();
	  var h = node.outerHeight();
	  var rs = node._private.rscratch;
	  if (prop.value.length === 2) {
	    var p = [prop.pfValue[0], prop.pfValue[1]];
	    if (prop.units[0] === '%') {
	      p[0] = p[0] * w;
	    }
	    if (prop.units[1] === '%') {
	      p[1] = p[1] * h;
	    }
	    p[0] += npos.x;
	    p[1] += npos.y;
	    return p;
	  } else {
	    var angle = prop.pfValue[0];
	    angle = -Math.PI / 2 + angle; // start at 12 o'clock

	    var l = 2 * Math.max(w, h);
	    var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
	    return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0, node.pstyle('corner-radius').value === 'auto' ? 'auto' : node.pstyle('corner-radius').pfValue, rs);
	  }
	};
	BRp$b.findEndpoints = function (edge) {
	  var r = this;
	  var intersect;
	  var source = edge.source()[0];
	  var target = edge.target()[0];
	  var srcPos = source.position();
	  var tgtPos = target.position();
	  var tgtArShape = edge.pstyle('target-arrow-shape').value;
	  var srcArShape = edge.pstyle('source-arrow-shape').value;
	  var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
	  var srcDist = edge.pstyle('source-distance-from-node').pfValue;
	  var srcRs = source._private.rscratch;
	  var tgtRs = target._private.rscratch;
	  var curveStyle = edge.pstyle('curve-style').value;
	  var rs = edge._private.rscratch;
	  var et = rs.edgeType;
	  var taxi = curveStyle === 'taxi';
	  var self = et === 'self' || et === 'compound';
	  var bezier = et === 'bezier' || et === 'multibezier' || self;
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';
	  var hasEndpts = bezier || multi || lines;
	  var overrideEndpts = self || taxi;
	  var srcManEndpt = edge.pstyle('source-endpoint');
	  var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;
	  var srcCornerRadius = source.pstyle('corner-radius').value === 'auto' ? 'auto' : source.pstyle('corner-radius').pfValue;
	  var tgtManEndpt = edge.pstyle('target-endpoint');
	  var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;
	  var tgtCornerRadius = target.pstyle('corner-radius').value === 'auto' ? 'auto' : target.pstyle('corner-radius').pfValue;
	  rs.srcManEndpt = srcManEndpt;
	  rs.tgtManEndpt = tgtManEndpt;
	  var p1; // last known point of edge on target side
	  var p2; // last known point of edge on source side

	  var p1_i; // point to intersect with target shape
	  var p2_i; // point to intersect with source shape

	  if (bezier) {
	    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
	    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if (lines) {
	    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
	    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }
	  if (tgtManEndptVal === 'inside-to-node') {
	    intersect = [tgtPos.x, tgtPos.y];
	  } else if (tgtManEndpt.units) {
	    intersect = this.manualEndptToPx(target, tgtManEndpt);
	  } else if (tgtManEndptVal === 'outside-to-line') {
	    intersect = rs.tgtIntn; // use cached value from ctrlpt calc
	  } else {
	    if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
	      p1_i = p1;
	    } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
	      p1_i = [srcPos.x, srcPos.y];
	    }
	    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0, tgtCornerRadius, tgtRs);
	    if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
	      var trs = target._private.rscratch;
	      var lw = trs.labelWidth;
	      var lh = trs.labelHeight;
	      var lx = trs.labelX;
	      var ly = trs.labelY;
	      var lw2 = lw / 2;
	      var lh2 = lh / 2;
	      var va = target.pstyle('text-valign').value;
	      if (va === 'top') {
	        ly -= lh2;
	      } else if (va === 'bottom') {
	        ly += lh2;
	      }
	      var ha = target.pstyle('text-halign').value;
	      if (ha === 'left') {
	        lx -= lw2;
	      } else if (ha === 'right') {
	        lx += lw2;
	      }
	      var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);
	      if (labelIntersect.length > 0) {
	        var refPt = srcPos;
	        var intSqdist = sqdist(refPt, array2point(intersect));
	        var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
	        var minSqDist = intSqdist;
	        if (labIntSqdist < intSqdist) {
	          intersect = labelIntersect;
	          minSqDist = labIntSqdist;
	        }
	        if (labelIntersect.length > 2) {
	          var labInt2SqDist = sqdist(refPt, {
	            x: labelIntersect[2],
	            y: labelIntersect[3]
	          });
	          if (labInt2SqDist < minSqDist) {
	            intersect = [labelIntersect[2], labelIntersect[3]];
	          }
	        }
	      }
	    }
	  }
	  var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
	  var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];
	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];
	  if (srcManEndptVal === 'inside-to-node') {
	    intersect = [srcPos.x, srcPos.y];
	  } else if (srcManEndpt.units) {
	    intersect = this.manualEndptToPx(source, srcManEndpt);
	  } else if (srcManEndptVal === 'outside-to-line') {
	    intersect = rs.srcIntn; // use cached value from ctrlpt calc
	  } else {
	    if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
	      p2_i = p2;
	    } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
	      p2_i = [tgtPos.x, tgtPos.y];
	    }
	    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0, srcCornerRadius, srcRs);
	    if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
	      var srs = source._private.rscratch;
	      var _lw = srs.labelWidth;
	      var _lh = srs.labelHeight;
	      var _lx = srs.labelX;
	      var _ly = srs.labelY;
	      var _lw2 = _lw / 2;
	      var _lh2 = _lh / 2;
	      var _va = source.pstyle('text-valign').value;
	      if (_va === 'top') {
	        _ly -= _lh2;
	      } else if (_va === 'bottom') {
	        _ly += _lh2;
	      }
	      var _ha = source.pstyle('text-halign').value;
	      if (_ha === 'left') {
	        _lx -= _lw2;
	      } else if (_ha === 'right') {
	        _lx += _lw2;
	      }
	      var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);
	      if (_labelIntersect.length > 0) {
	        var _refPt = tgtPos;
	        var _intSqdist = sqdist(_refPt, array2point(intersect));
	        var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));
	        var _minSqDist = _intSqdist;
	        if (_labIntSqdist < _intSqdist) {
	          intersect = [_labelIntersect[0], _labelIntersect[1]];
	          _minSqDist = _labIntSqdist;
	        }
	        if (_labelIntersect.length > 2) {
	          var _labInt2SqDist = sqdist(_refPt, {
	            x: _labelIntersect[2],
	            y: _labelIntersect[3]
	          });
	          if (_labInt2SqDist < _minSqDist) {
	            intersect = [_labelIntersect[2], _labelIntersect[3]];
	          }
	        }
	      }
	    }
	  }
	  var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
	  var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];
	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];
	  if (hasEndpts) {
	    if (!number$1(rs.startX) || !number$1(rs.startY) || !number$1(rs.endX) || !number$1(rs.endY)) {
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};
	BRp$b.getSourceEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);
	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[0],
	        y: rs.haystackPts[1]
	      };
	    default:
	      return {
	        x: rs.arrowStartX,
	        y: rs.arrowStartY
	      };
	  }
	};
	BRp$b.getTargetEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);
	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[2],
	        y: rs.haystackPts[3]
	      };
	    default:
	      return {
	        x: rs.arrowEndX,
	        y: rs.arrowEndY
	      };
	  }
	};

	var BRp$a = {};
	function pushBezierPts(r, edge, pts) {
	  var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {
	    return qbezierAt(p1, p2, p3, t);
	  };
	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;
	  for (var i = 0; i < r.bezierProjPcts.length; i++) {
	    var p = r.bezierProjPcts[i];
	    bpts.push({
	      x: qbezierAt$1(pts[0], pts[2], pts[4], p),
	      y: qbezierAt$1(pts[1], pts[3], pts[5], p)
	    });
	  }
	}
	BRp$a.storeEdgeProjections = function (edge) {
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType;

	  // clear the cached points state
	  _p.rstyle.bezierPts = null;
	  _p.rstyle.linePts = null;
	  _p.rstyle.haystackPts = null;
	  if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
	    _p.rstyle.bezierPts = [];
	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
	    }
	  } else if (et === 'segments') {
	    var lpts = _p.rstyle.linePts = [];
	    for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
	      lpts.push({
	        x: rs.allpts[i],
	        y: rs.allpts[i + 1]
	      });
	    }
	  } else if (et === 'haystack') {
	    var hpts = rs.haystackPts;
	    _p.rstyle.haystackPts = [{
	      x: hpts[0],
	      y: hpts[1]
	    }, {
	      x: hpts[2],
	      y: hpts[3]
	    }];
	  }
	  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	};
	BRp$a.recalculateEdgeProjections = function (edges) {
	  this.findEdgeControlPoints(edges);
	};

	/* global document */

	var BRp$9 = {};
	BRp$9.recalculateNodeLabelProjection = function (node) {
	  var content = node.pstyle('label').strValue;
	  if (emptyString(content)) {
	    return;
	  }
	  var textX, textY;
	  var _p = node._private;
	  var nodeWidth = node.width();
	  var nodeHeight = node.height();
	  var padding = node.padding();
	  var nodePos = node.position();
	  var textHalign = node.pstyle('text-halign').strValue;
	  var textValign = node.pstyle('text-valign').strValue;
	  var rs = _p.rscratch;
	  var rstyle = _p.rstyle;
	  switch (textHalign) {
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2 - padding;
	      break;
	    case 'right':
	      textX = nodePos.x + nodeWidth / 2 + padding;
	      break;
	    default:
	      // e.g. center
	      textX = nodePos.x;
	  }
	  switch (textValign) {
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2 - padding;
	      break;
	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2 + padding;
	      break;
	    default:
	      // e.g. middle
	      textY = nodePos.y;
	  }
	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;
	  this.calculateLabelAngles(node);
	  this.applyLabelDimensions(node);
	};
	var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
	  var angle = Math.atan(dy / dx);
	  if (dx === 0 && angle < 0) {
	    angle = angle * -1;
	  }
	  return angle;
	};
	var lineAngle = function lineAngle(p0, p1) {
	  var dx = p1.x - p0.x;
	  var dy = p1.y - p0.y;
	  return lineAngleFromDelta(dx, dy);
	};
	var bezierAngle = function bezierAngle(p0, p1, p2, t) {
	  var t0 = bound(0, t - 0.001, 1);
	  var t1 = bound(0, t + 0.001, 1);
	  var lp0 = qbezierPtAt(p0, p1, p2, t0);
	  var lp1 = qbezierPtAt(p0, p1, p2, t1);
	  return lineAngle(lp0, lp1);
	};
	BRp$9.recalculateEdgeLabelProjections = function (edge) {
	  var p;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var r = this;
	  var content = {
	    mid: edge.pstyle('label').strValue,
	    source: edge.pstyle('source-label').strValue,
	    target: edge.pstyle('target-label').strValue
	  };
	  if (content.mid || content.source || content.target) ; else {
	    return; // no labels => no calcs
	  }

	  // add center point to style so bounding box calculations can use it
	  //
	  p = {
	    x: rs.midX,
	    y: rs.midY
	  };
	  var setRs = function setRs(propName, prefix, value) {
	    setPrefixedProperty(_p.rscratch, propName, prefix, value);
	    setPrefixedProperty(_p.rstyle, propName, prefix, value);
	  };
	  setRs('labelX', null, p.x);
	  setRs('labelY', null, p.y);
	  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
	  setRs('labelAutoAngle', null, midAngle);
	  var createControlPointInfo = function createControlPointInfo() {
	    if (createControlPointInfo.cache) {
	      return createControlPointInfo.cache;
	    } // use cache so only 1x per edge

	    var ctrlpts = [];

	    // store each ctrlpt info init
	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      var p0 = {
	        x: rs.allpts[i],
	        y: rs.allpts[i + 1]
	      };
	      var p1 = {
	        x: rs.allpts[i + 2],
	        y: rs.allpts[i + 3]
	      }; // ctrlpt
	      var p2 = {
	        x: rs.allpts[i + 4],
	        y: rs.allpts[i + 5]
	      };
	      ctrlpts.push({
	        p0: p0,
	        p1: p1,
	        p2: p2,
	        startDist: 0,
	        length: 0,
	        segments: []
	      });
	    }
	    var bpts = _p.rstyle.bezierPts;
	    var nProjs = r.bezierProjPcts.length;
	    function addSegment(cp, p0, p1, t0, t1) {
	      var length = dist(p0, p1);
	      var prevSegment = cp.segments[cp.segments.length - 1];
	      var segment = {
	        p0: p0,
	        p1: p1,
	        t0: t0,
	        t1: t1,
	        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
	        length: length
	      };
	      cp.segments.push(segment);
	      cp.length += length;
	    }

	    // update each ctrlpt with segment info
	    for (var _i = 0; _i < ctrlpts.length; _i++) {
	      var cp = ctrlpts[_i];
	      var prevCp = ctrlpts[_i - 1];
	      if (prevCp) {
	        cp.startDist = prevCp.startDist + prevCp.length;
	      }
	      addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]); // first

	      for (var j = 0; j < nProjs - 1; j++) {
	        addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
	      }
	      addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
	    }

	    return createControlPointInfo.cache = ctrlpts;
	  };
	  var calculateEndProjection = function calculateEndProjection(prefix) {
	    var angle;
	    var isSrc = prefix === 'source';
	    if (!content[prefix]) {
	      return;
	    }
	    var offset = edge.pstyle(prefix + '-text-offset').pfValue;
	    switch (rs.edgeType) {
	      case 'self':
	      case 'compound':
	      case 'bezier':
	      case 'multibezier':
	        {
	          var cps = createControlPointInfo();
	          var selected;
	          var startDist = 0;
	          var totalDist = 0;

	          // find the segment we're on
	          for (var i = 0; i < cps.length; i++) {
	            var _cp = cps[isSrc ? i : cps.length - 1 - i];
	            for (var j = 0; j < _cp.segments.length; j++) {
	              var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];
	              var lastSeg = i === cps.length - 1 && j === _cp.segments.length - 1;
	              startDist = totalDist;
	              totalDist += _seg.length;
	              if (totalDist >= offset || lastSeg) {
	                selected = {
	                  cp: _cp,
	                  segment: _seg
	                };
	                break;
	              }
	            }
	            if (selected) {
	              break;
	            }
	          }
	          var cp = selected.cp;
	          var seg = selected.segment;
	          var tSegment = (offset - startDist) / seg.length;
	          var segDt = seg.t1 - seg.t0;
	          var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
	          t = bound(0, t, 1);
	          p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
	          angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
	          break;
	        }
	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        {
	          var d = 0,
	            di,
	            d0;
	          var p0, p1;
	          var l = rs.allpts.length;
	          for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {
	            if (isSrc) {
	              p0 = {
	                x: rs.allpts[_i2],
	                y: rs.allpts[_i2 + 1]
	              };
	              p1 = {
	                x: rs.allpts[_i2 + 2],
	                y: rs.allpts[_i2 + 3]
	              };
	            } else {
	              p0 = {
	                x: rs.allpts[l - 2 - _i2],
	                y: rs.allpts[l - 1 - _i2]
	              };
	              p1 = {
	                x: rs.allpts[l - 4 - _i2],
	                y: rs.allpts[l - 3 - _i2]
	              };
	            }
	            di = dist(p0, p1);
	            d0 = d;
	            d += di;
	            if (d >= offset) {
	              break;
	            }
	          }
	          var pD = offset - d0;
	          var _t = pD / di;
	          _t = bound(0, _t, 1);
	          p = lineAt(p0, p1, _t);
	          angle = lineAngle(p0, p1);
	          break;
	        }
	    }
	    setRs('labelX', prefix, p.x);
	    setRs('labelY', prefix, p.y);
	    setRs('labelAutoAngle', prefix, angle);
	  };
	  calculateEndProjection('source');
	  calculateEndProjection('target');
	  this.applyLabelDimensions(edge);
	};
	BRp$9.applyLabelDimensions = function (ele) {
	  this.applyPrefixedLabelDimensions(ele);
	  if (ele.isEdge()) {
	    this.applyPrefixedLabelDimensions(ele, 'source');
	    this.applyPrefixedLabelDimensions(ele, 'target');
	  }
	};
	BRp$9.applyPrefixedLabelDimensions = function (ele, prefix) {
	  var _p = ele._private;
	  var text = this.getLabelText(ele, prefix);
	  var labelDims = this.calculateLabelDimensions(ele, text);
	  var lineHeight = ele.pstyle('line-height').pfValue;
	  var textWrap = ele.pstyle('text-wrap').strValue;
	  var lines = getPrefixedProperty(_p.rscratch, 'labelWrapCachedLines', prefix) || [];
	  var numLines = textWrap !== 'wrap' ? 1 : Math.max(lines.length, 1);
	  var normPerLineHeight = labelDims.height / numLines;
	  var labelLineHeight = normPerLineHeight * lineHeight;
	  var width = labelDims.width;
	  var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
	  setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, width);
	  setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, width);
	  setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, height);
	  setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, height);
	  setPrefixedProperty(_p.rscratch, 'labelLineHeight', prefix, labelLineHeight);
	};
	BRp$9.getLabelText = function (ele, prefix) {
	  var _p = ele._private;
	  var pfd = prefix ? prefix + '-' : '';
	  var text = ele.pstyle(pfd + 'label').strValue;
	  var textTransform = ele.pstyle('text-transform').value;
	  var rscratch = function rscratch(propName, value) {
	    if (value) {
	      setPrefixedProperty(_p.rscratch, propName, prefix, value);
	      return value;
	    } else {
	      return getPrefixedProperty(_p.rscratch, propName, prefix);
	    }
	  };

	  // for empty text, skip all processing
	  if (!text) {
	    return '';
	  }
	  if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
	    text = text.toUpperCase();
	  } else if (textTransform == 'lowercase') {
	    text = text.toLowerCase();
	  }
	  var wrapStyle = ele.pstyle('text-wrap').value;
	  if (wrapStyle === 'wrap') {
	    var labelKey = rscratch('labelKey');

	    // save recalc if the label is the same as before
	    if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
	      return rscratch('labelWrapCachedText');
	    }
	    var zwsp = "\u200B";
	    var lines = text.split('\n');
	    var maxW = ele.pstyle('text-max-width').pfValue;
	    var overflow = ele.pstyle('text-overflow-wrap').value;
	    var overflowAny = overflow === 'anywhere';
	    var wrappedLines = [];
	    var wordsRegex = /[\s\u200b]+/;
	    var wordSeparator = overflowAny ? '' : ' ';
	    for (var l = 0; l < lines.length; l++) {
	      var line = lines[l];
	      var lineDims = this.calculateLabelDimensions(ele, line);
	      var lineW = lineDims.width;
	      if (overflowAny) {
	        var processedLine = line.split('').join(zwsp);
	        line = processedLine;
	      }
	      if (lineW > maxW) {
	        // line is too long
	        var words = line.split(wordsRegex);
	        var subline = '';
	        for (var w = 0; w < words.length; w++) {
	          var word = words[w];
	          var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
	          var testDims = this.calculateLabelDimensions(ele, testLine);
	          var testW = testDims.width;
	          if (testW <= maxW) {
	            // word fits on current line
	            subline += word + wordSeparator;
	          } else {
	            // word starts new line
	            if (subline) {
	              wrappedLines.push(subline);
	            }
	            subline = word + wordSeparator;
	          }
	        }

	        // if there's remaining text, put it in a wrapped line
	        if (!subline.match(/^[\s\u200b]+$/)) {
	          wrappedLines.push(subline);
	        }
	      } else {
	        // line is already short enough
	        wrappedLines.push(line);
	      }
	    } // for

	    rscratch('labelWrapCachedLines', wrappedLines);
	    text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
	    rscratch('labelWrapKey', labelKey);
	  } else if (wrapStyle === 'ellipsis') {
	    var _maxW = ele.pstyle('text-max-width').pfValue;
	    var ellipsized = '';
	    var ellipsis = "\u2026";
	    var incLastCh = false;
	    if (this.calculateLabelDimensions(ele, text).width < _maxW) {
	      // the label already fits
	      return text;
	    }
	    for (var i = 0; i < text.length; i++) {
	      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;
	      if (widthWithNextCh > _maxW) {
	        break;
	      }
	      ellipsized += text[i];
	      if (i === text.length - 1) {
	        incLastCh = true;
	      }
	    }
	    if (!incLastCh) {
	      ellipsized += ellipsis;
	    }
	    return ellipsized;
	  } // if ellipsize

	  return text;
	};
	BRp$9.getLabelJustification = function (ele) {
	  var justification = ele.pstyle('text-justification').strValue;
	  var textHalign = ele.pstyle('text-halign').strValue;
	  if (justification === 'auto') {
	    if (ele.isNode()) {
	      switch (textHalign) {
	        case 'left':
	          return 'right';
	        case 'right':
	          return 'left';
	        default:
	          return 'center';
	      }
	    } else {
	      return 'center';
	    }
	  } else {
	    return justification;
	  }
	};
	BRp$9.calculateLabelDimensions = function (ele, text) {
	  var r = this;
	  var cacheKey = hashString(text, ele._private.labelDimsKey);
	  var cache = r.labelDimCache || (r.labelDimCache = []);
	  var existingVal = cache[cacheKey];
	  if (existingVal != null) {
	    return existingVal;
	  }
	  var padding = 0; // add padding around text dims, as the measurement isn't that accurate
	  var fStyle = ele.pstyle('font-style').strValue;
	  var size = ele.pstyle('font-size').pfValue;
	  var family = ele.pstyle('font-family').strValue;
	  var weight = ele.pstyle('font-weight').strValue;
	  var canvas = this.labelCalcCanvas;
	  var c2d = this.labelCalcCanvasContext;
	  if (!canvas) {
	    canvas = this.labelCalcCanvas = document.createElement('canvas');
	    c2d = this.labelCalcCanvasContext = canvas.getContext('2d');
	    var ds = canvas.style;
	    ds.position = 'absolute';
	    ds.left = '-9999px';
	    ds.top = '-9999px';
	    ds.zIndex = '-1';
	    ds.visibility = 'hidden';
	    ds.pointerEvents = 'none';
	  }
	  c2d.font = "".concat(fStyle, " ").concat(weight, " ").concat(size, "px ").concat(family);
	  var width = 0;
	  var height = 0;
	  var lines = text.split('\n');
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	    var metrics = c2d.measureText(line);
	    var w = Math.ceil(metrics.width);
	    var h = size;
	    width = Math.max(w, width);
	    height += h;
	  }
	  width += padding;
	  height += padding;
	  return cache[cacheKey] = {
	    width: width,
	    height: height
	  };
	};
	BRp$9.calculateLabelAngle = function (ele, prefix) {
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  var isEdge = ele.isEdge();
	  var prefixDash = prefix ? prefix + '-' : '';
	  var rot = ele.pstyle(prefixDash + 'text-rotation');
	  var rotStr = rot.strValue;
	  if (rotStr === 'none') {
	    return 0;
	  } else if (isEdge && rotStr === 'autorotate') {
	    return rs.labelAutoAngle;
	  } else if (rotStr === 'autorotate') {
	    return 0;
	  } else {
	    return rot.pfValue;
	  }
	};
	BRp$9.calculateLabelAngles = function (ele) {
	  var r = this;
	  var isEdge = ele.isEdge();
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  rs.labelAngle = r.calculateLabelAngle(ele);
	  if (isEdge) {
	    rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
	    rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
	  }
	};

	var BRp$8 = {};
	var TOO_SMALL_CUT_RECT = 28;
	var warnedCutRect = false;
	BRp$8.getNodeShape = function (node) {
	  var r = this;
	  var shape = node.pstyle('shape').value;
	  if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
	    if (!warnedCutRect) {
	      warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
	      warnedCutRect = true;
	    }
	    return 'rectangle';
	  }
	  if (node.isParent()) {
	    if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'round-rectangle' || shape === 'cutrectangle' || shape === 'cut-rectangle' || shape === 'barrel') {
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }
	  if (shape === 'polygon') {
	    var points = node.pstyle('shape-polygon-points').value;
	    return r.nodeShapes.makePolygon(points).name;
	  }
	  return shape;
	};

	var BRp$7 = {};
	BRp$7.registerCalculationListeners = function () {
	  var cy = this.cy;
	  var elesToUpdate = cy.collection();
	  var r = this;
	  var enqueue = function enqueue(eles) {
	    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    elesToUpdate.merge(eles);
	    if (dirtyStyleCaches) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var _p = ele._private;
	        var rstyle = _p.rstyle;
	        rstyle.clean = false;
	        rstyle.cleanConnected = false;
	      }
	    }
	  };
	  r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
	    var ele = e.target;
	    enqueue(ele);
	  }).on('style.* background.*', function onDirtyStyle(e) {
	    var ele = e.target;
	    enqueue(ele, false);
	  });
	  var updateEleCalcs = function updateEleCalcs(willDraw) {
	    if (willDraw) {
	      var fns = r.onUpdateEleCalcsFns;

	      // because we need to have up-to-date style (e.g. stylesheet mappers)
	      // before calculating rendered style (and pstyle might not be called yet)
	      elesToUpdate.cleanStyle();
	      for (var i = 0; i < elesToUpdate.length; i++) {
	        var ele = elesToUpdate[i];
	        var rstyle = ele._private.rstyle;
	        if (ele.isNode() && !rstyle.cleanConnected) {
	          enqueue(ele.connectedEdges());
	          rstyle.cleanConnected = true;
	        }
	      }
	      if (fns) {
	        for (var _i = 0; _i < fns.length; _i++) {
	          var fn = fns[_i];
	          fn(willDraw, elesToUpdate);
	        }
	      }
	      r.recalculateRenderedStyle(elesToUpdate);
	      elesToUpdate = cy.collection();
	    }
	  };
	  r.flushRenderedStyleQueue = function () {
	    updateEleCalcs(true);
	  };
	  r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
	};
	BRp$7.onUpdateEleCalcs = function (fn) {
	  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
	  fns.push(fn);
	};
	BRp$7.recalculateRenderedStyle = function (eles, useCache) {
	  var isCleanConnected = function isCleanConnected(ele) {
	    return ele._private.rstyle.cleanConnected;
	  };
	  var edges = [];
	  var nodes = [];

	  // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()
	  if (this.destroyed) {
	    return;
	  }

	  // use cache by default for perf
	  if (useCache === undefined) {
	    useCache = true;
	  }
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;

	    // an edge may be implicitly dirty b/c of one of its connected nodes
	    // (and a request for recalc may come in between frames)
	    if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
	      rstyle.clean = false;
	    }

	    // only update if dirty and in graph
	    if (useCache && rstyle.clean || ele.removed()) {
	      continue;
	    }

	    // only update if not display: none
	    if (ele.pstyle('display').value === 'none') {
	      continue;
	    }
	    if (_p.group === 'nodes') {
	      nodes.push(ele);
	    } else {
	      // edges
	      edges.push(ele);
	    }
	    rstyle.clean = true;
	  }

	  // update node data from projections
	  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
	    var _ele = nodes[_i2];
	    var _p2 = _ele._private;
	    var _rstyle = _p2.rstyle;
	    var pos = _ele.position();
	    this.recalculateNodeLabelProjection(_ele);
	    _rstyle.nodeX = pos.x;
	    _rstyle.nodeY = pos.y;
	    _rstyle.nodeW = _ele.pstyle('width').pfValue;
	    _rstyle.nodeH = _ele.pstyle('height').pfValue;
	  }
	  this.recalculateEdgeProjections(edges);

	  // update edge data from projections
	  for (var _i3 = 0; _i3 < edges.length; _i3++) {
	    var _ele2 = edges[_i3];
	    var _p3 = _ele2._private;
	    var _rstyle2 = _p3.rstyle;
	    var rs = _p3.rscratch;

	    // update rstyle positions
	    _rstyle2.srcX = rs.arrowStartX;
	    _rstyle2.srcY = rs.arrowStartY;
	    _rstyle2.tgtX = rs.arrowEndX;
	    _rstyle2.tgtY = rs.arrowEndY;
	    _rstyle2.midX = rs.midX;
	    _rstyle2.midY = rs.midY;
	    _rstyle2.labelAngle = rs.labelAngle;
	    _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
	    _rstyle2.targetLabelAngle = rs.targetLabelAngle;
	  }
	};

	var BRp$6 = {};
	BRp$6.updateCachedGrabbedEles = function () {
	  var eles = this.cachedZSortedEles;
	  if (!eles) {
	    // just let this be recalculated on the next z sort tick
	    return;
	  }
	  eles.drag = [];
	  eles.nondrag = [];
	  var grabTargets = [];
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;
	    if (ele.grabbed() && !ele.isParent()) {
	      grabTargets.push(ele);
	    } else if (rs.inDragLayer) {
	      eles.drag.push(ele);
	    } else {
	      eles.nondrag.push(ele);
	    }
	  }

	  // put the grab target nodes last so it's on top of its neighbourhood
	  for (var i = 0; i < grabTargets.length; i++) {
	    var ele = grabTargets[i];
	    eles.drag.push(ele);
	  }
	};
	BRp$6.invalidateCachedZSortedEles = function () {
	  this.cachedZSortedEles = null;
	};
	BRp$6.getCachedZSortedEles = function (forceRecalc) {
	  if (forceRecalc || !this.cachedZSortedEles) {
	    var eles = this.cy.mutableElements().toArray();
	    eles.sort(zIndexSort);
	    eles.interactive = eles.filter(function (ele) {
	      return ele.interactive();
	    });
	    this.cachedZSortedEles = eles;
	    this.updateCachedGrabbedEles();
	  } else {
	    eles = this.cachedZSortedEles;
	  }
	  return eles;
	};

	var BRp$5 = {};
	[BRp$e, BRp$d, BRp$c, BRp$b, BRp$a, BRp$9, BRp$8, BRp$7, BRp$6].forEach(function (props) {
	  extend(BRp$5, props);
	});

	var BRp$4 = {};
	BRp$4.getCachedImage = function (url, crossOrigin, onLoad) {
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};
	  var cache = imageCache[url];
	  if (cache) {
	    if (!cache.image.complete) {
	      cache.image.addEventListener('load', onLoad);
	    }
	    return cache.image;
	  } else {
	    cache = imageCache[url] = imageCache[url] || {};
	    var image = cache.image = new Image(); // eslint-disable-line no-undef

	    image.addEventListener('load', onLoad);
	    image.addEventListener('error', function () {
	      image.error = true;
	    });

	    // #1582 safari doesn't load data uris with crossOrigin properly
	    // https://bugs.webkit.org/show_bug.cgi?id=123978
	    var dataUriPrefix = 'data:';
	    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
	    if (!isDataUri) {
	      // if crossorigin is 'null'(stringified), then manually set it to null 
	      crossOrigin = crossOrigin === 'null' ? null : crossOrigin;
	      image.crossOrigin = crossOrigin; // prevent tainted canvas
	    }

	    image.src = url;
	    return image;
	  }
	};

	var BRp$3 = {};

	/* global document, window, ResizeObserver, MutationObserver */

	BRp$3.registerBinding = function (target, event, handler, useCapture) {
	  // eslint-disable-line no-unused-vars
	  var args = Array.prototype.slice.apply(arguments, [1]); // copy
	  var b = this.binder(target);
	  return b.on.apply(b, args);
	};
	BRp$3.binder = function (tgt) {
	  var r = this;
	  var containerWindow = r.cy.window();
	  var tgtIsDom = tgt === containerWindow || tgt === containerWindow.document || tgt === containerWindow.document.body || domElement(tgt);
	  if (r.supportsPassiveEvents == null) {
	    // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
	    var supportsPassive = false;
	    try {
	      var opts = Object.defineProperty({}, 'passive', {
	        get: function get() {
	          supportsPassive = true;
	          return true;
	        }
	      });
	      containerWindow.addEventListener('test', null, opts);
	    } catch (err) {
	      // not supported
	    }
	    r.supportsPassiveEvents = supportsPassive;
	  }
	  var on = function on(event, handler, useCapture) {
	    var args = Array.prototype.slice.call(arguments);
	    if (tgtIsDom && r.supportsPassiveEvents) {
	      // replace useCapture w/ opts obj
	      args[2] = {
	        capture: useCapture != null ? useCapture : false,
	        passive: false,
	        once: false
	      };
	    }
	    r.bindings.push({
	      target: tgt,
	      args: args
	    });
	    (tgt.addEventListener || tgt.on).apply(tgt, args);
	    return this;
	  };
	  return {
	    on: on,
	    addEventListener: on,
	    addListener: on,
	    bind: on
	  };
	};
	BRp$3.nodeIsDraggable = function (node) {
	  return node && node.isNode() && !node.locked() && node.grabbable();
	};
	BRp$3.nodeIsGrabbable = function (node) {
	  return this.nodeIsDraggable(node) && node.interactive();
	};
	BRp$3.load = function () {
	  var r = this;
	  var containerWindow = r.cy.window();
	  var isSelected = function isSelected(ele) {
	    return ele.selected();
	  };
	  var triggerEvents = function triggerEvents(target, names, e, position) {
	    if (target == null) {
	      target = r.cy;
	    }
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      target.emit({
	        originalEvent: e,
	        type: name,
	        position: position
	      });
	    }
	  };
	  var isMultSelKeyDown = function isMultSelKeyDown(e) {
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
	    var allowPassthrough = true;
	    if (r.cy.hasCompoundNodes() && down && down.pannable()) {
	      // a grabbable compound node below the ele => no passthrough panning
	      for (var i = 0; downs && i < downs.length; i++) {
	        var down = downs[i];

	        //if any parent node in event hierarchy isn't pannable, reject passthrough
	        if (down.isNode() && down.isParent() && !down.pannable()) {
	          allowPassthrough = false;
	          break;
	        }
	      }
	    } else {
	      allowPassthrough = true;
	    }
	    return allowPassthrough;
	  };
	  var setGrabbed = function setGrabbed(ele) {
	    ele[0]._private.grabbed = true;
	  };
	  var setFreed = function setFreed(ele) {
	    ele[0]._private.grabbed = false;
	  };
	  var setInDragLayer = function setInDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = true;
	  };
	  var setOutDragLayer = function setOutDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = false;
	  };
	  var setGrabTarget = function setGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = true;
	  };
	  var removeGrabTarget = function removeGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = false;
	  };
	  var addToDragList = function addToDragList(ele, opts) {
	    var list = opts.addToList;
	    var listHasEle = list.has(ele);
	    if (!listHasEle && ele.grabbable() && !ele.locked()) {
	      list.merge(ele);
	      setGrabbed(ele);
	    }
	  };

	  // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes
	  var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    }
	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do

	    var innerNodes = node.descendants();
	    if (opts.inDragLayer) {
	      innerNodes.forEach(setInDragLayer);
	      innerNodes.connectedEdges().forEach(setInDragLayer);
	    }
	    if (opts.addToList) {
	      addToDragList(innerNodes, opts);
	    }
	  };

	  // adds the given nodes and its neighbourhood to the drag layer
	  var addNodesToDrag = function addNodesToDrag(nodes, opts) {
	    opts = opts || {};
	    var hasCompoundNodes = nodes.cy().hasCompoundNodes();
	    if (opts.inDragLayer) {
	      nodes.forEach(setInDragLayer);
	      nodes.neighborhood().stdFilter(function (ele) {
	        return !hasCompoundNodes || ele.isEdge();
	      }).forEach(setInDragLayer);
	    }
	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }
	    addDescendantsToDrag(nodes, opts); // always add to drag

	    // also add nodes and edges related to the topmost ancestor
	    updateAncestorsInDragLayer(nodes, {
	      inDragLayer: opts.inDragLayer
	    });
	    r.updateCachedGrabbedEles();
	  };
	  var addNodeToDrag = addNodesToDrag;
	  var freeDraggedElements = function freeDraggedElements(grabbedEles) {
	    if (!grabbedEles) {
	      return;
	    }

	    // just go over all elements rather than doing a bunch of (possibly expensive) traversals
	    r.getCachedZSortedEles().forEach(function (ele) {
	      setFreed(ele);
	      setOutDragLayer(ele);
	      removeGrabTarget(ele);
	    });
	    r.updateCachedGrabbedEles();
	  };

	  // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).
	  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do

	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    }

	    // find top-level parent
	    var parent = node.ancestors().orphans();

	    // no parent node: no nodes to add to the drag layer
	    if (parent.same(node)) {
	      return;
	    }
	    var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
	    var edges = nodes.connectedEdges();
	    if (opts.inDragLayer) {
	      edges.forEach(setInDragLayer);
	      nodes.forEach(setInDragLayer);
	    }
	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }
	  };
	  var blurActiveDomElement = function blurActiveDomElement() {
	    if (document.activeElement != null && document.activeElement.blur != null) {
	      document.activeElement.blur();
	    }
	  };
	  var haveMutationsApi = typeof MutationObserver !== 'undefined';
	  var haveResizeObserverApi = typeof ResizeObserver !== 'undefined';

	  // watch for when the cy container is removed from the dom
	  if (haveMutationsApi) {
	    r.removeObserver = new MutationObserver(function (mutns) {
	      // eslint-disable-line no-undef
	      for (var i = 0; i < mutns.length; i++) {
	        var mutn = mutns[i];
	        var rNodes = mutn.removedNodes;
	        if (rNodes) {
	          for (var j = 0; j < rNodes.length; j++) {
	            var rNode = rNodes[j];
	            if (rNode === r.container) {
	              r.destroy();
	              break;
	            }
	          }
	        }
	      }
	    });
	    if (r.container.parentNode) {
	      r.removeObserver.observe(r.container.parentNode, {
	        childList: true
	      });
	    }
	  } else {
	    r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
	      // eslint-disable-line no-unused-vars
	      r.destroy();
	    });
	  }
	  var onResize = debounce_1(function () {
	    r.cy.resize();
	  }, 100);
	  if (haveMutationsApi) {
	    r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

	    r.styleObserver.observe(r.container, {
	      attributes: true
	    });
	  }

	  // auto resize
	  r.registerBinding(containerWindow, 'resize', onResize); // eslint-disable-line no-undef

	  if (haveResizeObserverApi) {
	    r.resizeObserver = new ResizeObserver(onResize); // eslint-disable-line no-undef

	    r.resizeObserver.observe(r.container);
	  }
	  var forEachUp = function forEachUp(domEle, fn) {
	    while (domEle != null) {
	      fn(domEle);
	      domEle = domEle.parentNode;
	    }
	  };
	  var invalidateCoords = function invalidateCoords() {
	    r.invalidateContainerClientCoordsCache();
	  };
	  forEachUp(r.container, function (domEle) {
	    r.registerBinding(domEle, 'transitionend', invalidateCoords);
	    r.registerBinding(domEle, 'animationend', invalidateCoords);
	    r.registerBinding(domEle, 'scroll', invalidateCoords);
	  });

	  // stop right click menu from appearing on cy
	  r.registerBinding(r.container, 'contextmenu', function (e) {
	    e.preventDefault();
	  });
	  var inBoxSelection = function inBoxSelection() {
	    return r.selection[4] !== 0;
	  };
	  var eventInContainer = function eventInContainer(e) {
	    // save cycles if mouse events aren't to be captured
	    var containerPageCoords = r.findContainerClientCoords();
	    var x = containerPageCoords[0];
	    var y = containerPageCoords[1];
	    var width = containerPageCoords[2];
	    var height = containerPageCoords[3];
	    var positions = e.touches ? e.touches : [e];
	    var atLeastOnePosInside = false;
	    for (var i = 0; i < positions.length; i++) {
	      var p = positions[i];
	      if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
	        atLeastOnePosInside = true;
	        break;
	      }
	    }
	    if (!atLeastOnePosInside) {
	      return false;
	    }
	    var container = r.container;
	    var target = e.target;
	    var tParent = target.parentNode;
	    var containerIsTarget = false;
	    while (tParent) {
	      if (tParent === container) {
	        containerIsTarget = true;
	        break;
	      }
	      tParent = tParent.parentNode;
	    }
	    if (!containerIsTarget) {
	      return false;
	    } // if target is outisde cy container, then this event is not for us

	    return true;
	  };

	  // Primary key
	  r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
	    if (!eventInContainer(e)) {
	      return;
	    }
	    e.preventDefault();
	    blurActiveDomElement();
	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;
	    var cy = r.cy;
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var select = r.selection;
	    var nears = r.findNearestElements(pos[0], pos[1], true, false);
	    var near = nears[0];
	    var draggedElements = r.dragData.possibleDragElements;
	    r.hoverData.mdownPos = pos;
	    r.hoverData.mdownGPos = gpos;
	    var checkForTaphold = function checkForTaphold() {
	      r.hoverData.tapholdCancelled = false;
	      clearTimeout(r.hoverData.tapholdTimeout);
	      r.hoverData.tapholdTimeout = setTimeout(function () {
	        if (r.hoverData.tapholdCancelled) {
	          return;
	        } else {
	          var ele = r.hoverData.down;
	          if (ele) {
	            ele.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          } else {
	            cy.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }
	        }
	      }, r.tapholdDuration);
	    };

	    // Right click button
	    if (e.which == 3) {
	      r.hoverData.cxtStarted = true;
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapstart',
	        position: {
	          x: pos[0],
	          y: pos[1]
	        }
	      };
	      if (near) {
	        near.activate();
	        near.emit(cxtEvt);
	        r.hoverData.down = near;
	      } else {
	        cy.emit(cxtEvt);
	      }
	      r.hoverData.downTime = new Date().getTime();
	      r.hoverData.cxtDragged = false;

	      // Primary button
	    } else if (e.which == 1) {
	      if (near) {
	        near.activate();
	      }

	      // Element dragging
	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if (near != null) {
	          if (r.nodeIsGrabbable(near)) {
	            var makeEvent = function makeEvent(type) {
	              return {
	                originalEvent: e,
	                type: type,
	                position: {
	                  x: pos[0],
	                  y: pos[1]
	                }
	              };
	            };
	            var triggerGrab = function triggerGrab(ele) {
	              ele.emit(makeEvent('grab'));
	            };
	            setGrabTarget(near);
	            if (!near.selected()) {
	              draggedElements = r.dragData.possibleDragElements = cy.collection();
	              addNodeToDrag(near, {
	                addToList: draggedElements
	              });
	              near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
	            } else {
	              draggedElements = r.dragData.possibleDragElements = cy.collection();
	              var selectedNodes = cy.$(function (ele) {
	                return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
	              });
	              addNodesToDrag(selectedNodes, {
	                addToList: draggedElements
	              });
	              near.emit(makeEvent('grabon'));
	              selectedNodes.forEach(triggerGrab);
	            }
	            r.redrawHint('eles', true);
	            r.redrawHint('drag', true);
	          }
	        }
	        r.hoverData.down = near;
	        r.hoverData.downs = nears;
	        r.hoverData.downTime = new Date().getTime();
	      }
	      triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
	        x: pos[0],
	        y: pos[1]
	      });
	      if (near == null) {
	        select[4] = 1;
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };
	        r.redrawHint('select', true);
	        r.redraw();
	      } else if (near.pannable()) {
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();
	    }

	    // Initialize selection box coordinates
	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];
	  }, false);
	  r.registerBinding(containerWindow, 'mousemove', function mousemoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;
	    if (!capture && !eventInContainer(e)) {
	      return;
	    }
	    var preventDefault = false;
	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var mdownPos = r.hoverData.mdownPos;
	    var mdownGPos = r.hoverData.mdownGPos;
	    var select = r.selection;
	    var near = null;
	    if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
	      near = r.findNearestElement(pos[0], pos[1], true, false);
	    }
	    var last = r.hoverData.last;
	    var down = r.hoverData.down;
	    var disp = [pos[0] - select[2], pos[1] - select[3]];
	    var draggedElements = r.dragData.possibleDragElements;
	    var isOverThresholdDrag;
	    if (mdownGPos) {
	      var dx = gpos[0] - mdownGPos[0];
	      var dx2 = dx * dx;
	      var dy = gpos[1] - mdownGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
	    }
	    var multSelKeyDown = isMultSelKeyDown(e);
	    if (isOverThresholdDrag) {
	      r.hoverData.tapholdCancelled = true;
	    }
	    var updateDragDelta = function updateDragDelta() {
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];
	      if (dragDelta.length === 0) {
	        dragDelta.push(disp[0]);
	        dragDelta.push(disp[1]);
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };
	    preventDefault = true;
	    triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
	      x: pos[0],
	      y: pos[1]
	    });
	    var goIntoBoxMode = function goIntoBoxMode() {
	      r.data.bgActivePosistion = undefined;
	      if (!r.hoverData.selecting) {
	        cy.emit({
	          originalEvent: e,
	          type: 'boxstart',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        });
	      }
	      select[4] = 1;
	      r.hoverData.selecting = true;
	      r.redrawHint('select', true);
	      r.redraw();
	    };

	    // trigger context drag if rmouse down
	    if (r.hoverData.which === 3) {
	      // but only if over threshold
	      if (isOverThresholdDrag) {
	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxtdrag',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        };
	        if (down) {
	          down.emit(cxtEvt);
	        } else {
	          cy.emit(cxtEvt);
	        }
	        r.hoverData.cxtDragged = true;
	        if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
	          if (r.hoverData.cxtOver) {
	            r.hoverData.cxtOver.emit({
	              originalEvent: e,
	              type: 'cxtdragout',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }
	          r.hoverData.cxtOver = near;
	          if (near) {
	            near.emit({
	              originalEvent: e,
	              type: 'cxtdragover',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }
	        }
	      }

	      // Check if we are drag panning the entire graph
	    } else if (r.hoverData.dragging) {
	      preventDefault = true;
	      if (cy.panningEnabled() && cy.userPanningEnabled()) {
	        var deltaP;
	        if (r.hoverData.justStartedPan) {
	          var mdPos = r.hoverData.mdownPos;
	          deltaP = {
	            x: (pos[0] - mdPos[0]) * zoom,
	            y: (pos[1] - mdPos[1]) * zoom
	          };
	          r.hoverData.justStartedPan = false;
	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };
	        }
	        cy.panBy(deltaP);
	        cy.emit('dragpan');
	        r.hoverData.dragged = true;
	      }

	      // Needs reproject due to pan changing viewport
	      pos = r.projectIntoViewport(e.clientX, e.clientY);

	      // Checks primary button down & out of time & mouse not moved much
	    } else if (select[4] == 1 && (down == null || down.pannable())) {
	      if (isOverThresholdDrag) {
	        if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
	          goIntoBoxMode();
	        } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
	          var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);
	          if (allowPassthrough) {
	            r.hoverData.dragging = true;
	            r.hoverData.justStartedPan = true;
	            select[4] = 0;
	            r.data.bgActivePosistion = array2point(mdownPos);
	            r.redrawHint('select', true);
	            r.redraw();
	          }
	        }
	        if (down && down.pannable() && down.active()) {
	          down.unactivate();
	        }
	      }
	    } else {
	      if (down && down.pannable() && down.active()) {
	        down.unactivate();
	      }
	      if ((!down || !down.grabbed()) && near != last) {
	        if (last) {
	          triggerEvents(last, ['mouseout', 'tapdragout'], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        }
	        if (near) {
	          triggerEvents(near, ['mouseover', 'tapdragover'], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        }
	        r.hoverData.last = near;
	      }
	      if (down) {
	        if (isOverThresholdDrag) {
	          // then we can take action

	          if (cy.boxSelectionEnabled() && multSelKeyDown) {
	            // then selection overrides
	            if (down && down.grabbed()) {
	              freeDraggedElements(draggedElements);
	              down.emit('freeon');
	              draggedElements.emit('free');
	              if (r.dragData.didDrag) {
	                down.emit('dragfreeon');
	                draggedElements.emit('dragfree');
	              }
	            }
	            goIntoBoxMode();
	          } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
	            // drag node
	            var justStartedDrag = !r.dragData.didDrag;
	            if (justStartedDrag) {
	              r.redrawHint('eles', true);
	            }
	            r.dragData.didDrag = true; // indicate that we actually did drag the node

	            // now, add the elements to the drag layer if not done already
	            if (!r.hoverData.draggingEles) {
	              addNodesToDrag(draggedElements, {
	                inDragLayer: true
	              });
	            }
	            var totalShift = {
	              x: 0,
	              y: 0
	            };
	            if (number$1(disp[0]) && number$1(disp[1])) {
	              totalShift.x += disp[0];
	              totalShift.y += disp[1];
	              if (justStartedDrag) {
	                var dragDelta = r.hoverData.dragDelta;
	                if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
	                  totalShift.x += dragDelta[0];
	                  totalShift.y += dragDelta[1];
	                }
	              }
	            }
	            r.hoverData.draggingEles = true;
	            draggedElements.silentShift(totalShift).emit('position drag');
	            r.redrawHint('drag', true);
	            r.redraw();
	          }
	        } else {
	          // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      }

	      // prevent the dragging from triggering text selection on the page
	      preventDefault = true;
	    }
	    select[2] = pos[0];
	    select[3] = pos[1];
	    if (preventDefault) {
	      if (e.stopPropagation) e.stopPropagation();
	      if (e.preventDefault) e.preventDefault();
	      return false;
	    }
	  }, false);
	  var clickTimeout, didDoubleClick, prevClickTimeStamp;
	  r.registerBinding(containerWindow, 'mouseup', function mouseupHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;
	    if (!capture) {
	      return;
	    }
	    r.hoverData.capture = false;
	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements;
	    var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown(e);
	    if (r.data.bgActivePosistion) {
	      r.redrawHint('select', true);
	      r.redraw();
	    }
	    r.hoverData.tapholdCancelled = true;
	    r.data.bgActivePosistion = undefined; // not active bg now

	    if (down) {
	      down.unactivate();
	    }
	    if (r.hoverData.which === 3) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: {
	          x: pos[0],
	          y: pos[1]
	        }
	      };
	      if (down) {
	        down.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }
	      if (!r.hoverData.cxtDragged) {
	        var cxtTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        };
	        if (down) {
	          down.emit(cxtTap);
	        } else {
	          cy.emit(cxtTap);
	        }
	      }
	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;
	    } else if (r.hoverData.which === 1) {
	      triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
	        x: pos[0],
	        y: pos[1]
	      });
	      if (!r.dragData.didDrag &&
	      // didn't move a node around
	      !r.hoverData.dragged &&
	      // didn't pan
	      !r.hoverData.selecting &&
	      // not box selection
	      !r.hoverData.isOverThresholdDrag // didn't move too much
	      ) {
	        triggerEvents(down, ["click", "tap", "vclick"], e, {
	          x: pos[0],
	          y: pos[1]
	        });
	        didDoubleClick = false;
	        if (e.timeStamp - prevClickTimeStamp <= cy.multiClickDebounceTime()) {
	          clickTimeout && clearTimeout(clickTimeout);
	          didDoubleClick = true;
	          prevClickTimeStamp = null;
	          triggerEvents(down, ["dblclick", "dbltap", "vdblclick"], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        } else {
	          clickTimeout = setTimeout(function () {
	            if (didDoubleClick) return;
	            triggerEvents(down, ["oneclick", "onetap", "voneclick"], e, {
	              x: pos[0],
	              y: pos[1]
	            });
	          }, cy.multiClickDebounceTime());
	          prevClickTimeStamp = e.timeStamp;
	        }
	      }

	      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
	      if (down == null // not mousedown on node
	      && !r.dragData.didDrag // didn't move the node around
	      && !r.hoverData.selecting // not box selection
	      && !r.hoverData.dragged // didn't pan
	      && !isMultSelKeyDown(e)) {
	        cy.$(isSelected).unselect(['tapunselect']);
	        if (draggedElements.length > 0) {
	          r.redrawHint('eles', true);
	        }
	        r.dragData.possibleDragElements = draggedElements = cy.collection();
	      }

	      // Single selection
	      if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
	        if (near != null && near._private.selectable) {
	          if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
	            if (near.selected()) {
	              near.unselect(['tapunselect']);
	            } else {
	              near.select(['tapselect']);
	            }
	          } else {
	            if (!multSelKeyDown) {
	              cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
	              near.select(['tapselect']);
	            }
	          }
	          r.redrawHint('eles', true);
	        }
	      }
	      if (r.hoverData.selecting) {
	        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
	        r.redrawHint('select', true);
	        if (box.length > 0) {
	          r.redrawHint('eles', true);
	        }
	        cy.emit({
	          type: 'boxend',
	          originalEvent: e,
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        });
	        var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	          return ele.selectable() && !ele.selected();
	        };
	        if (cy.selectionType() === 'additive') {
	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        } else {
	          if (!multSelKeyDown) {
	            cy.$(isSelected).unmerge(box).unselect();
	          }
	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        }

	        // always need redraw in case eles unselectable
	        r.redraw();
	      }

	      // Cancel drag pan
	      if (r.hoverData.dragging) {
	        r.hoverData.dragging = false;
	        r.redrawHint('select', true);
	        r.redrawHint('eles', true);
	        r.redraw();
	      }
	      if (!select[4]) {
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);
	        var downWasGrabbed = down && down.grabbed();
	        freeDraggedElements(draggedElements);
	        if (downWasGrabbed) {
	          down.emit('freeon');
	          draggedElements.emit('free');
	          if (r.dragData.didDrag) {
	            down.emit('dragfreeon');
	            draggedElements.emit('dragfree');
	          }
	        }
	      }
	    } // else not right mouse

	    select[4] = 0;
	    r.hoverData.down = null;
	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.hoverData.isOverThresholdDrag = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];
	    r.hoverData.mdownPos = null;
	    r.hoverData.mdownGPos = null;
	  }, false);
	  var wheelHandler = function wheelHandler(e) {
	    if (r.scrollingPage) {
	      return;
	    } // while scrolling, ignore wheel-to-zoom

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var rpos = [pos[0] * zoom + pan.x, pos[1] * zoom + pan.y];
	    if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
	      // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }
	    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
	      e.preventDefault();
	      r.data.wheelZooming = true;
	      clearTimeout(r.data.wheelTimeout);
	      r.data.wheelTimeout = setTimeout(function () {
	        r.data.wheelZooming = false;
	        r.redrawHint('eles', true);
	        r.redraw();
	      }, 150);
	      var diff;
	      if (e.deltaY != null) {
	        diff = e.deltaY / -250;
	      } else if (e.wheelDeltaY != null) {
	        diff = e.wheelDeltaY / 1000;
	      } else {
	        diff = e.wheelDelta / 1000;
	      }
	      diff = diff * r.wheelSensitivity;
	      var needsWheelFix = e.deltaMode === 1;
	      if (needsWheelFix) {
	        // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }
	      var newZoom = cy.zoom() * Math.pow(10, diff);
	      if (e.type === 'gesturechange') {
	        newZoom = r.gestureStartZoom * e.scale;
	      }
	      cy.zoom({
	        level: newZoom,
	        renderedPosition: {
	          x: rpos[0],
	          y: rpos[1]
	        }
	      });
	      cy.emit(e.type === 'gesturechange' ? 'pinchzoom' : 'scrollzoom');
	    }
	  };

	  // Functions to help with whether mouse wheel should trigger zooming
	  // --
	  r.registerBinding(r.container, 'wheel', wheelHandler, true);

	  // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding(containerWindow, 'scroll', function scrollHandler(e) {
	    // eslint-disable-line no-unused-vars
	    r.scrollingPage = true;
	    clearTimeout(r.scrollingPageTimeout);
	    r.scrollingPageTimeout = setTimeout(function () {
	      r.scrollingPage = false;
	    }, 250);
	  }, true);

	  // desktop safari pinch to zoom start
	  r.registerBinding(r.container, 'gesturestart', function gestureStartHandler(e) {
	    r.gestureStartZoom = r.cy.zoom();
	    if (!r.hasTouchStarted) {
	      // don't affect touch devices like iphone
	      e.preventDefault();
	    }
	  }, true);
	  r.registerBinding(r.container, 'gesturechange', function (e) {
	    if (!r.hasTouchStarted) {
	      // don't affect touch devices like iphone
	      wheelHandler(e);
	    }
	  }, true);

	  // Functions to help with handling mouseout/mouseover on the Cytoscape container
	  // Handle mouseout on Cytoscape container
	  r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseout',
	      position: {
	        x: pos[0],
	        y: pos[1]
	      }
	    });
	  }, false);
	  r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseover',
	      position: {
	        x: pos[0],
	        y: pos[1]
	      }
	    });
	  }, false);
	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
	  var center1, modelCenter1; // center point on start pinch to zoom
	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;
	  var distance = function distance(x1, y1, x2, y2) {
	    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	  };
	  var distanceSq = function distanceSq(x1, y1, x2, y2) {
	    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
	  };
	  var touchstartHandler;
	  r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
	    r.hasTouchStarted = true;
	    if (!eventInContainer(e)) {
	      return;
	    }
	    blurActiveDomElement();
	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    }

	    // record starting points for pinch-to-zoom
	    if (e.touches[1]) {
	      r.touchData.singleTouchMoved = true;
	      freeDraggedElements(r.dragData.touchDragEles);
	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];
	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;
	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;
	      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
	      var pan = cy.pan();
	      var zoom = cy.zoom();
	      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
	      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
	      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
	      modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom];

	      // consider context tap
	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
	      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
	        var near1 = r.findNearestElement(now[0], now[1], true, true);
	        var near2 = r.findNearestElement(now[2], now[3], true, true);
	        if (near1 && near1.isNode()) {
	          near1.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	          r.touchData.start = near1;
	        } else if (near2 && near2.isNode()) {
	          near2.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	          r.touchData.start = near2;
	        } else {
	          cy.emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }
	        if (r.touchData.start) {
	          r.touchData.start._private.grabbed = false;
	        }
	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;
	        r.redraw();
	        return;
	      }
	    }
	    if (e.touches[2]) {
	      // ignore

	      // safari on ios pans the page otherwise (normally you should be able to preventdefault on touchmove...)
	      if (cy.boxSelectionEnabled()) {
	        e.preventDefault();
	      }
	    } else if (e.touches[1]) ; else if (e.touches[0]) {
	      var nears = r.findNearestElements(now[0], now[1], true, true);
	      var near = nears[0];
	      if (near != null) {
	        near.activate();
	        r.touchData.start = near;
	        r.touchData.starts = nears;
	        if (r.nodeIsGrabbable(near)) {
	          var draggedEles = r.dragData.touchDragEles = cy.collection();
	          var selectedNodes = null;
	          r.redrawHint('eles', true);
	          r.redrawHint('drag', true);
	          if (near.selected()) {
	            // reset drag elements, since near will be added again

	            selectedNodes = cy.$(function (ele) {
	              return ele.selected() && r.nodeIsGrabbable(ele);
	            });
	            addNodesToDrag(selectedNodes, {
	              addToList: draggedEles
	            });
	          } else {
	            addNodeToDrag(near, {
	              addToList: draggedEles
	            });
	          }
	          setGrabTarget(near);
	          var makeEvent = function makeEvent(type) {
	            return {
	              originalEvent: e,
	              type: type,
	              position: {
	                x: now[0],
	                y: now[1]
	              }
	            };
	          };
	          near.emit(makeEvent('grabon'));
	          if (selectedNodes) {
	            selectedNodes.forEach(function (n) {
	              n.emit(makeEvent('grab'));
	            });
	          } else {
	            near.emit(makeEvent('grab'));
	          }
	        }
	      }
	      triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
	        x: now[0],
	        y: now[1]
	      });
	      if (near == null) {
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };
	        r.redrawHint('select', true);
	        r.redraw();
	      }

	      // Tap, taphold
	      // -----

	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();
	      clearTimeout(r.touchData.tapholdTimeout);
	      r.touchData.tapholdTimeout = setTimeout(function () {
	        if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	        && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ) {
	          triggerEvents(r.touchData.start, ['taphold'], e, {
	            x: now[0],
	            y: now[1]
	          });
	        }
	      }, r.tapholdDuration);
	    }
	    if (e.touches.length >= 1) {
	      var sPos = r.touchData.startPosition = [null, null, null, null, null, null];
	      for (var i = 0; i < now.length; i++) {
	        sPos[i] = earlier[i] = now[i];
	      }
	      var touch0 = e.touches[0];
	      r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
	    }
	  }, false);
	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.touchData.capture;
	    if (!capture && !eventInContainer(e)) {
	      return;
	    }
	    var select = r.selection;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();
	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    }
	    var startGPos = r.touchData.startGPosition;
	    var isOverThresholdDrag;
	    if (capture && e.touches[0] && startGPos) {
	      var disp = [];
	      for (var j = 0; j < now.length; j++) {
	        disp[j] = now[j] - earlier[j];
	      }
	      var dx = e.touches[0].clientX - startGPos[0];
	      var dx2 = dx * dx;
	      var dy = e.touches[0].clientY - startGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
	    }

	    // context swipe cancelling
	    if (capture && r.touchData.cxt) {
	      e.preventDefault();
	      var f1x2 = e.touches[0].clientX - offsetLeft,
	        f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	        f2y2 = e.touches[1].clientY - offsetTop;
	      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
	      var factorSq = distance2Sq / distance1Sq;
	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold;

	      // cancel ctx gestures if the distance b/t the fingers increases
	      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
	        r.touchData.cxt = false;
	        r.data.bgActivePosistion = undefined;
	        r.redrawHint('select', true);
	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxttapend',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        };
	        if (r.touchData.start) {
	          r.touchData.start.unactivate().emit(cxtEvt);
	          r.touchData.start = null;
	        } else {
	          cy.emit(cxtEvt);
	        }
	      }
	    }

	    // context swipe
	    if (capture && r.touchData.cxt) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxtdrag',
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      };
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      if (r.touchData.start) {
	        r.touchData.start.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }
	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }
	      r.touchData.cxtDragged = true;
	      var near = r.findNearestElement(now[0], now[1], true, true);
	      if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
	        if (r.touchData.cxtOver) {
	          r.touchData.cxtOver.emit({
	            originalEvent: e,
	            type: 'cxtdragout',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }
	        r.touchData.cxtOver = near;
	        if (near) {
	          near.emit({
	            originalEvent: e,
	            type: 'cxtdragover',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }
	      }

	      // box selection
	    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
	      e.preventDefault();
	      r.data.bgActivePosistion = undefined;
	      this.lastThreeTouch = +new Date();
	      if (!r.touchData.selecting) {
	        cy.emit({
	          originalEvent: e,
	          type: 'boxstart',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        });
	      }
	      r.touchData.selecting = true;
	      r.touchData.didSelect = true;
	      select[4] = 1;
	      if (!select || select.length === 0 || select[0] === undefined) {
	        select[0] = (now[0] + now[2] + now[4]) / 3;
	        select[1] = (now[1] + now[3] + now[5]) / 3;
	        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
	        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4]) / 3;
	        select[3] = (now[1] + now[3] + now[5]) / 3;
	      }
	      r.redrawHint('select', true);
	      r.redraw();

	      // pinch to zoom
	    } else if (capture && e.touches[1] && !r.touchData.didSelect // don't allow box selection to degrade to pinch-to-zoom
	    && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
	      // two fingers => pinch to zoom
	      e.preventDefault();
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      var draggedEles = r.dragData.touchDragEles;
	      if (draggedEles) {
	        r.redrawHint('drag', true);
	        for (var i = 0; i < draggedEles.length; i++) {
	          var de_p = draggedEles[i]._private;
	          de_p.grabbed = false;
	          de_p.rscratch.inDragLayer = false;
	        }
	      }
	      var _start = r.touchData.start;

	      // (x2, y2) for fingers 1 and 2
	      var f1x2 = e.touches[0].clientX - offsetLeft,
	        f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	        f2y2 = e.touches[1].clientY - offsetTop;
	      var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
	      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
	      var factor = distance2 / distance1;
	      if (twoFingersStartInside) {
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1;

	        // delta finger 2
	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1;

	        // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans
	        var tx = (df1x + df2x) / 2;
	        var ty = (df1y + df2y) / 2;

	        // now calculate the zoom
	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan();

	        // the model center point converted to the current rendered pos
	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;
	        var pan2 = {
	          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
	        };

	        // remove dragged eles
	        if (_start && _start.active()) {
	          var draggedEles = r.dragData.touchDragEles;
	          freeDraggedElements(draggedEles);
	          r.redrawHint('drag', true);
	          r.redrawHint('eles', true);
	          _start.unactivate().emit('freeon');
	          draggedEles.emit('free');
	          if (r.dragData.didDrag) {
	            _start.emit('dragfreeon');
	            draggedEles.emit('dragfree');
	          }
	        }
	        cy.viewport({
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        });
	        cy.emit('pinchzoom');
	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;
	        r.pinching = true;
	      }

	      // Re-project
	      if (e.touches[0]) {
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0];
	        now[1] = pos[1];
	      }
	      if (e.touches[1]) {
	        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	        now[2] = pos[0];
	        now[3] = pos[1];
	      }
	      if (e.touches[2]) {
	        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	        now[4] = pos[0];
	        now[5] = pos[1];
	      }
	    } else if (e.touches[0] && !r.touchData.didSelect // don't allow box selection to degrade to single finger events like panning
	    ) {
	      var start = r.touchData.start;
	      var last = r.touchData.last;
	      var near;
	      if (!r.hoverData.draggingEles && !r.swipePanning) {
	        near = r.findNearestElement(now[0], now[1], true, true);
	      }
	      if (capture && start != null) {
	        e.preventDefault();
	      }

	      // dragging nodes
	      if (capture && start != null && r.nodeIsDraggable(start)) {
	        if (isOverThresholdDrag) {
	          // then dragging can happen
	          var draggedEles = r.dragData.touchDragEles;
	          var justStartedDrag = !r.dragData.didDrag;
	          if (justStartedDrag) {
	            addNodesToDrag(draggedEles, {
	              inDragLayer: true
	            });
	          }
	          r.dragData.didDrag = true;
	          var totalShift = {
	            x: 0,
	            y: 0
	          };
	          if (number$1(disp[0]) && number$1(disp[1])) {
	            totalShift.x += disp[0];
	            totalShift.y += disp[1];
	            if (justStartedDrag) {
	              r.redrawHint('eles', true);
	              var dragDelta = r.touchData.dragDelta;
	              if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
	                totalShift.x += dragDelta[0];
	                totalShift.y += dragDelta[1];
	              }
	            }
	          }
	          r.hoverData.draggingEles = true;
	          draggedEles.silentShift(totalShift).emit('position drag');
	          r.redrawHint('drag', true);
	          if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
	            r.redrawHint('eles', true);
	          }
	          r.redraw();
	        } else {
	          // otherwise keep track of drag delta for later
	          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];
	          if (dragDelta.length === 0) {
	            dragDelta.push(disp[0]);
	            dragDelta.push(disp[1]);
	          } else {
	            dragDelta[0] += disp[0];
	            dragDelta[1] += disp[1];
	          }
	        }
	      }

	      // touchmove
	      {
	        triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
	          x: now[0],
	          y: now[1]
	        });
	        if ((!start || !start.grabbed()) && near != last) {
	          if (last) {
	            last.emit({
	              originalEvent: e,
	              type: 'tapdragout',
	              position: {
	                x: now[0],
	                y: now[1]
	              }
	            });
	          }
	          if (near) {
	            near.emit({
	              originalEvent: e,
	              type: 'tapdragover',
	              position: {
	                x: now[0],
	                y: now[1]
	              }
	            });
	          }
	        }
	        r.touchData.last = near;
	      }

	      // check to cancel taphold
	      if (capture) {
	        for (var i = 0; i < now.length; i++) {
	          if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
	            r.touchData.singleTouchMoved = true;
	          }
	        }
	      }

	      // panning
	      if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
	        var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);
	        if (allowPassthrough) {
	          e.preventDefault();
	          if (!r.data.bgActivePosistion) {
	            r.data.bgActivePosistion = array2point(r.touchData.startPosition);
	          }
	          if (r.swipePanning) {
	            cy.panBy({
	              x: disp[0] * zoom,
	              y: disp[1] * zoom
	            });
	            cy.emit('dragpan');
	          } else if (isOverThresholdDrag) {
	            r.swipePanning = true;
	            cy.panBy({
	              x: dx * zoom,
	              y: dy * zoom
	            });
	            cy.emit('dragpan');
	            if (start) {
	              start.unactivate();
	              r.redrawHint('select', true);
	              r.touchData.start = null;
	            }
	          }
	        }

	        // Re-project
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0];
	        now[1] = pos[1];
	      }
	    }
	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    }

	    // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning
	    if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      r.redraw();
	    }
	  }, false);
	  var touchcancelHandler;
	  r.registerBinding(containerWindow, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
	    // eslint-disable-line no-unused-vars
	    var start = r.touchData.start;
	    r.touchData.capture = false;
	    if (start) {
	      start.unactivate();
	    }
	  });
	  var touchendHandler, didDoubleTouch, touchTimeout, prevTouchTimeStamp;
	  r.registerBinding(containerWindow, 'touchend', touchendHandler = function touchendHandler(e) {
	    // eslint-disable-line no-unused-vars
	    var start = r.touchData.start;
	    var capture = r.touchData.capture;
	    if (capture) {
	      if (e.touches.length === 0) {
	        r.touchData.capture = false;
	      }
	      e.preventDefault();
	    } else {
	      return;
	    }
	    var select = r.selection;
	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;
	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    }
	    if (start) {
	      start.unactivate();
	    }
	    var ctxTapend;
	    if (r.touchData.cxt) {
	      ctxTapend = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      };
	      if (start) {
	        start.emit(ctxTapend);
	      } else {
	        cy.emit(ctxTapend);
	      }
	      if (!r.touchData.cxtDragged) {
	        var ctxTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        };
	        if (start) {
	          start.emit(ctxTap);
	        } else {
	          cy.emit(ctxTap);
	        }
	      }
	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }
	      r.touchData.cxt = false;
	      r.touchData.start = null;
	      r.redraw();
	      return;
	    }

	    // no more box selection if we don't have three fingers
	    if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
	      r.touchData.selecting = false;
	      var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;
	      r.redrawHint('select', true);
	      cy.emit({
	        type: 'boxend',
	        originalEvent: e,
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      });
	      var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	        return ele.selectable() && !ele.selected();
	      };
	      box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	      if (box.nonempty()) {
	        r.redrawHint('eles', true);
	      }
	      r.redraw();
	    }
	    if (start != null) {
	      start.unactivate();
	    }
	    if (e.touches[2]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	    } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      var draggedEles = r.dragData.touchDragEles;
	      if (start != null) {
	        var startWasGrabbed = start._private.grabbed;
	        freeDraggedElements(draggedEles);
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);
	        if (startWasGrabbed) {
	          start.emit('freeon');
	          draggedEles.emit('free');
	          if (r.dragData.didDrag) {
	            start.emit('dragfreeon');
	            draggedEles.emit('dragfree');
	          }
	        }
	        triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          x: now[0],
	          y: now[1]
	        });
	        start.unactivate();
	        r.touchData.start = null;
	      } else {
	        var near = r.findNearestElement(now[0], now[1], true, true);
	        triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          x: now[0],
	          y: now[1]
	        });
	      }
	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom;

	      // Tap event, roughly same as mouse click event for touch
	      if (!r.touchData.singleTouchMoved) {
	        if (!start) {
	          cy.$(':selected').unselect(['tapunselect']);
	        }
	        triggerEvents(start, ['tap', 'vclick'], e, {
	          x: now[0],
	          y: now[1]
	        });
	        didDoubleTouch = false;
	        if (e.timeStamp - prevTouchTimeStamp <= cy.multiClickDebounceTime()) {
	          touchTimeout && clearTimeout(touchTimeout);
	          didDoubleTouch = true;
	          prevTouchTimeStamp = null;
	          triggerEvents(start, ['dbltap', 'vdblclick'], e, {
	            x: now[0],
	            y: now[1]
	          });
	        } else {
	          touchTimeout = setTimeout(function () {
	            if (didDoubleTouch) return;
	            triggerEvents(start, ['onetap', 'voneclick'], e, {
	              x: now[0],
	              y: now[1]
	            });
	          }, cy.multiClickDebounceTime());
	          prevTouchTimeStamp = e.timeStamp;
	        }
	      }

	      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
	      if (start != null && !r.dragData.didDrag // didn't drag nodes around
	      && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
	      ) {
	        if (cy.selectionType() === 'single') {
	          cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
	          start.select(['tapselect']);
	        } else {
	          if (start.selected()) {
	            start.unselect(['tapunselect']);
	          } else {
	            start.select(['tapselect']);
	          }
	        }
	        r.redrawHint('eles', true);
	      }
	      r.touchData.singleTouchMoved = true;
	    }
	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    }
	    r.dragData.didDrag = false; // reset for next touchstart

	    if (e.touches.length === 0) {
	      r.touchData.dragDelta = [];
	      r.touchData.startPosition = [null, null, null, null, null, null];
	      r.touchData.startGPosition = null;
	      r.touchData.didSelect = false;
	    }
	    if (e.touches.length < 2) {
	      if (e.touches.length === 1) {
	        // the old start global pos'n may not be the same finger that remains
	        r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
	      }
	      r.pinching = false;
	      r.redrawHint('eles', true);
	      r.redraw();
	    }

	    //r.redraw();
	  }, false);

	  // fallback compatibility layer for ms pointer events
	  if (typeof TouchEvent === 'undefined') {
	    var pointers = [];
	    var makeTouch = function makeTouch(e) {
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width / 2,
	        radiusY: e.height / 2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };
	    var makePointer = function makePointer(e) {
	      return {
	        event: e,
	        touch: makeTouch(e)
	      };
	    };
	    var addPointer = function addPointer(e) {
	      pointers.push(makePointer(e));
	    };
	    var removePointer = function removePointer(e) {
	      for (var i = 0; i < pointers.length; i++) {
	        var p = pointers[i];
	        if (p.event.pointerId === e.pointerId) {
	          pointers.splice(i, 1);
	          return;
	        }
	      }
	    };
	    var updatePointer = function updatePointer(e) {
	      var p = pointers.filter(function (p) {
	        return p.event.pointerId === e.pointerId;
	      })[0];
	      p.event = e;
	      p.touch = makeTouch(e);
	    };
	    var addTouchesToEvent = function addTouchesToEvent(e) {
	      e.touches = pointers.map(function (p) {
	        return p.touch;
	      });
	    };
	    var pointerIsMouse = function pointerIsMouse(e) {
	      return e.pointerType === 'mouse' || e.pointerType === 4;
	    };
	    r.registerBinding(r.container, 'pointerdown', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      e.preventDefault();
	      addPointer(e);
	      addTouchesToEvent(e);
	      touchstartHandler(e);
	    });
	    r.registerBinding(r.container, 'pointerup', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      removePointer(e);
	      addTouchesToEvent(e);
	      touchendHandler(e);
	    });
	    r.registerBinding(r.container, 'pointercancel', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      removePointer(e);
	      addTouchesToEvent(e);
	      touchcancelHandler(e);
	    });
	    r.registerBinding(r.container, 'pointermove', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      e.preventDefault();
	      updatePointer(e);
	      addTouchesToEvent(e);
	      touchmoveHandler(e);
	    });
	  }
	};

	var BRp$2 = {};
	BRp$2.generatePolygon = function (name, points) {
	  return this.nodeShapes[name] = {
	    renderer: this,
	    name: name,
	    points: points,
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
	    }
	  };
	};
	BRp$2.generateEllipse = function () {
	  return this.nodeShapes['ellipse'] = {
	    renderer: this,
	    name: 'ellipse',
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      return checkInEllipse(x, y, width, height, centerX, centerY, padding);
	    }
	  };
	};
	BRp$2.generateRoundPolygon = function (name, points) {
	  return this.nodeShapes[name] = {
	    renderer: this,
	    name: name,
	    points: points,
	    getOrCreateCorners: function getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, field) {
	      if (rs[field] !== undefined && rs[field + '-cx'] === centerX && rs[field + '-cy'] === centerY) {
	        return rs[field];
	      }
	      rs[field] = new Array(points.length / 2);
	      rs[field + '-cx'] = centerX;
	      rs[field + '-cy'] = centerY;
	      var halfW = width / 2;
	      var halfH = height / 2;
	      cornerRadius = cornerRadius === 'auto' ? getRoundPolygonRadius(width, height) : cornerRadius;
	      var p = new Array(points.length / 2);
	      for (var _i = 0; _i < points.length / 2; _i++) {
	        p[_i] = {
	          x: centerX + halfW * points[_i * 2],
	          y: centerY + halfH * points[_i * 2 + 1]
	        };
	      }
	      var i,
	        p1,
	        p2,
	        p3,
	        len = p.length;
	      p1 = p[len - 1];
	      // for each point
	      for (i = 0; i < len; i++) {
	        p2 = p[i % len];
	        p3 = p[(i + 1) % len];
	        rs[field][i] = getRoundCorner(p1, p2, p3, cornerRadius);
	        p1 = p2;
	        p2 = p3;
	      }
	      return rs[field];
	    },
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius, rs) {
	      this.renderer.nodeShapeImpl('round-polygon', context, centerX, centerY, width, height, this.points, this.getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, 'drawCorners'));
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius, rs) {
	      return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height, padding, this.getOrCreateCorners(nodeX, nodeY, width, height, cornerRadius, rs, 'corners'));
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius, rs) {
	      return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height, this.getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, 'corners'));
	    }
	  };
	};
	BRp$2.generateRoundRectangle = function () {
	  return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
	    renderer: this,
	    name: 'round-rectangle',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, this.points, cornerRadius);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding, cornerRadius);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      var halfWidth = width / 2;
	      var halfHeight = height / 2;
	      cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(width, height) : cornerRadius;
	      cornerRadius = Math.min(halfWidth, halfHeight, cornerRadius);
	      var diam = cornerRadius * 2;

	      // Check hBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      }

	      // Check top left quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX - halfWidth + cornerRadius, centerY - halfHeight + cornerRadius, padding)) {
	        return true;
	      }

	      // Check top right quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX + halfWidth - cornerRadius, centerY - halfHeight + cornerRadius, padding)) {
	        return true;
	      }

	      // Check bottom right quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX + halfWidth - cornerRadius, centerY + halfHeight - cornerRadius, padding)) {
	        return true;
	      }

	      // Check bottom left quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX - halfWidth + cornerRadius, centerY + halfHeight - cornerRadius, padding)) {
	        return true;
	      }
	      return false;
	    }
	  };
	};
	BRp$2.generateCutRectangle = function () {
	  return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
	    renderer: this,
	    name: 'cut-rectangle',
	    cornerLength: getCutRectangleCornerLength(),
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, null, cornerRadius);
	    },
	    generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY, cornerRadius) {
	      var cl = cornerRadius === 'auto' ? this.cornerLength : cornerRadius;
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh;

	      // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]
	      return {
	        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
	        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
	        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
	        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
	      };
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY, cornerRadius);
	      var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
	      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      var cl = cornerRadius === 'auto' ? this.cornerLength : cornerRadius;
	      // Check hBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * cl, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * cl, height, [0, -1], padding)) {
	        return true;
	      }
	      var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
	      return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
	    }
	  };
	};
	BRp$2.generateBarrel = function () {
	  return this.nodeShapes['barrel'] = {
	    renderer: this,
	    name: 'barrel',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      // use two fixed t values for the bezier curve approximation

	      var t0 = 0.15;
	      var t1 = 0.5;
	      var t2 = 0.85;
	      var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
	      var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
	        // approximate curve pts based on the two t values
	        var m0 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t0);
	        var m1 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t1);
	        var m2 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t2);
	        return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
	      };
	      var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
	      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },
	    generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh;
	      var curveConstants = getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset;
	      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width;

	      // points are in clockwise order, inner (imaginary) control pt on [4, 5]
	      var pts = {
	        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
	        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
	        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
	        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
	      };
	      pts.topLeft.isTop = true;
	      pts.topRight.isTop = true;
	      pts.bottomLeft.isBottom = true;
	      pts.bottomRight.isBottom = true;
	      return pts;
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      var curveConstants = getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset;

	      // Check hBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
	        return true;
	      }
	      var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);
	      var getCurveT = function getCurveT(x, y, curvePts) {
	        var x0 = curvePts[4];
	        var x1 = curvePts[2];
	        var x2 = curvePts[0];
	        var y0 = curvePts[5];
	        // var y1 = curvePts[ 3 ];
	        var y2 = curvePts[1];
	        var xMin = Math.min(x0, x2);
	        var xMax = Math.max(x0, x2);
	        var yMin = Math.min(y0, y2);
	        var yMax = Math.max(y0, y2);
	        if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
	          var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
	          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
	          var validRoots = roots.filter(function (r) {
	            return 0 <= r && r <= 1;
	          });
	          if (validRoots.length > 0) {
	            return validRoots[0];
	          }
	        }
	        return null;
	      };
	      var curveRegions = Object.keys(barrelCurvePts);
	      for (var i = 0; i < curveRegions.length; i++) {
	        var corner = curveRegions[i];
	        var cornerPts = barrelCurvePts[corner];
	        var t = getCurveT(x, y, cornerPts);
	        if (t == null) {
	          continue;
	        }
	        var y0 = cornerPts[5];
	        var y1 = cornerPts[3];
	        var y2 = cornerPts[1];
	        var bezY = qbezierAt(y0, y1, y2, t);
	        if (cornerPts.isTop && bezY <= y) {
	          return true;
	        }
	        if (cornerPts.isBottom && y <= bezY) {
	          return true;
	        }
	      }
	      return false;
	    }
	  };
	};
	BRp$2.generateBottomRoundrectangle = function () {
	  return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
	    renderer: this,
	    name: 'bottom-round-rectangle',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, this.points, cornerRadius);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {
	      var topStartX = nodeX - (width / 2 + padding);
	      var topStartY = nodeY - (height / 2 + padding);
	      var topEndY = topStartY;
	      var topEndX = nodeX + (width / 2 + padding);
	      var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
	      if (topIntersections.length > 0) {
	        return topIntersections;
	      }
	      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding, cornerRadius);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {
	      cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(width, height) : cornerRadius;
	      var diam = 2 * cornerRadius;

	      // Check hBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      }

	      // check non-rounded top side
	      var outerWidth = width / 2 + 2 * padding;
	      var outerHeight = height / 2 + 2 * padding;
	      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
	      if (pointInsidePolygonPoints(x, y, points)) {
	        return true;
	      }

	      // Check bottom right quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      }

	      // Check bottom left quarter circle
	      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      }
	      return false;
	    }
	  };
	};
	BRp$2.registerNodeShapes = function () {
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;
	  this.generateEllipse();
	  this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
	  this.generateRoundPolygon('round-triangle', generateUnitNgonPointsFitToSquare(3, 0));
	  this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
	  nodeShapes['square'] = nodeShapes['rectangle'];
	  this.generateRoundRectangle();
	  this.generateCutRectangle();
	  this.generateBarrel();
	  this.generateBottomRoundrectangle();
	  {
	    var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
	    this.generatePolygon('diamond', diamondPoints);
	    this.generateRoundPolygon('round-diamond', diamondPoints);
	  }
	  this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
	  this.generateRoundPolygon('round-pentagon', generateUnitNgonPointsFitToSquare(5, 0));
	  this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
	  this.generateRoundPolygon('round-hexagon', generateUnitNgonPointsFitToSquare(6, 0));
	  this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
	  this.generateRoundPolygon('round-heptagon', generateUnitNgonPointsFitToSquare(7, 0));
	  this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
	  this.generateRoundPolygon('round-octagon', generateUnitNgonPointsFitToSquare(8, 0));
	  var star5Points = new Array(20);
	  {
	    var outerPoints = generateUnitNgonPoints(5, 0);
	    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5);

	    // Outer radius is 1; inner radius of star is smaller
	    var innerRadius = 0.5 * (3 - Math.sqrt(5));
	    innerRadius *= 1.57;
	    for (var i = 0; i < innerPoints.length / 2; i++) {
	      innerPoints[i * 2] *= innerRadius;
	      innerPoints[i * 2 + 1] *= innerRadius;
	    }
	    for (var i = 0; i < 20 / 4; i++) {
	      star5Points[i * 4] = outerPoints[i * 2];
	      star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
	      star5Points[i * 4 + 2] = innerPoints[i * 2];
	      star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
	    }
	  }
	  star5Points = fitPolygonToSquare(star5Points);
	  this.generatePolygon('star', star5Points);
	  this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
	  this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
	  this.generatePolygon('right-rhomboid', [-0.333, -1, 1, -1, 0.333, 1, -1, 1]);
	  this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
	  {
	    var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
	    this.generatePolygon('tag', tagPoints);
	    this.generateRoundPolygon('round-tag', tagPoints);
	  }
	  nodeShapes.makePolygon = function (points) {
	    // use caching on user-specified polygons so they are as fast as native shapes

	    var key = points.join('$');
	    var name = 'polygon-' + key;
	    var shape;
	    if (shape = this[name]) {
	      // got cached shape
	      return shape;
	    }

	    // create and cache new shape
	    return renderer.generatePolygon(name, points);
	  };
	};

	var BRp$1 = {};
	BRp$1.timeToRender = function () {
	  return this.redrawTotalTime / this.redrawCount;
	};
	BRp$1.redraw = function (options) {
	  options = options || staticEmptyObject();
	  var r = this;
	  if (r.averageRedrawTime === undefined) {
	    r.averageRedrawTime = 0;
	  }
	  if (r.lastRedrawTime === undefined) {
	    r.lastRedrawTime = 0;
	  }
	  if (r.lastDrawTime === undefined) {
	    r.lastDrawTime = 0;
	  }
	  r.requestedFrame = true;
	  r.renderOptions = options;
	};
	BRp$1.beforeRender = function (fn, priority) {
	  // the renderer can't add tick callbacks when destroyed
	  if (this.destroyed) {
	    return;
	  }
	  if (priority == null) {
	    error('Priority is not optional for beforeRender');
	  }
	  var cbs = this.beforeRenderCallbacks;
	  cbs.push({
	    fn: fn,
	    priority: priority
	  });

	  // higher priority callbacks executed first
	  cbs.sort(function (a, b) {
	    return b.priority - a.priority;
	  });
	};
	var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
	  var cbs = r.beforeRenderCallbacks;
	  for (var i = 0; i < cbs.length; i++) {
	    cbs[i].fn(willDraw, startTime);
	  }
	};
	BRp$1.startRenderLoop = function () {
	  var r = this;
	  var cy = r.cy;
	  if (r.renderLoopStarted) {
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }
	  var renderFn = function renderFn(requestTime) {
	    if (r.destroyed) {
	      return;
	    }
	    if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {
	      beforeRenderCallbacks(r, true, requestTime);
	      var startTime = performanceNow();
	      r.render(r.renderOptions);
	      var endTime = r.lastDrawTime = performanceNow();
	      if (r.averageRedrawTime === undefined) {
	        r.averageRedrawTime = endTime - startTime;
	      }
	      if (r.redrawCount === undefined) {
	        r.redrawCount = 0;
	      }
	      r.redrawCount++;
	      if (r.redrawTotalTime === undefined) {
	        r.redrawTotalTime = 0;
	      }
	      var duration = endTime - startTime;
	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration;

	      // use a weighted average with a bias from the previous average so we don't spike so easily
	      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
	      r.requestedFrame = false;
	    } else {
	      beforeRenderCallbacks(r, false, requestTime);
	    }
	    r.skipFrame = false;
	    requestAnimationFrame(renderFn);
	  };
	  requestAnimationFrame(renderFn);
	};

	var BaseRenderer = function BaseRenderer(options) {
	  this.init(options);
	};
	var BR = BaseRenderer;
	var BRp = BR.prototype;
	BRp.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];
	BRp.init = function (options) {
	  var r = this;
	  r.options = options;
	  r.cy = options.cy;
	  var ctr = r.container = options.cy.container();
	  var containerWindow = r.cy.window();

	  // prepend a stylesheet in the head such that
	  if (containerWindow) {
	    var document = containerWindow.document;
	    var head = document.head;
	    var stylesheetId = '__________cytoscape_stylesheet';
	    var className = '__________cytoscape_container';
	    var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;
	    if (ctr.className.indexOf(className) < 0) {
	      ctr.className = (ctr.className || '') + ' ' + className;
	    }
	    if (!stylesheetAlreadyExists) {
	      var stylesheet = document.createElement('style');
	      stylesheet.id = stylesheetId;
	      stylesheet.textContent = '.' + className + ' { position: relative; }';
	      head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
	    }

	    var computedStyle = containerWindow.getComputedStyle(ctr);
	    var position = computedStyle.getPropertyValue('position');
	    if (position === 'static') {
	      warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
	    }
	  }
	  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];

	  //--Pointer-related data
	  r.hoverData = {
	    down: null,
	    last: null,
	    downTime: null,
	    triggerMode: null,
	    dragging: false,
	    initialPan: [null, null],
	    capture: false
	  };
	  r.dragData = {
	    possibleDragElements: []
	  };
	  r.touchData = {
	    start: null,
	    capture: false,
	    // These 3 fields related to tap, taphold events
	    startPosition: [null, null, null, null, null, null],
	    singleTouchStartTime: null,
	    singleTouchMoved: true,
	    now: [null, null, null, null, null, null],
	    earlier: [null, null, null, null, null, null]
	  };
	  r.redraws = 0;
	  r.showFps = options.showFps;
	  r.debug = options.debug;
	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default
	  r.forcedPixelRatio = number$1(options.pixelRatio) ? options.pixelRatio : null;
	  r.motionBlur = options.motionBlur; // for initial kick off
	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;
	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;
	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.beforeRenderPriorities = {
	    // higher priority execs before lower one
	    animations: 400,
	    eleCalcs: 300,
	    eleTxrDeq: 200,
	    lyrTxrDeq: 150,
	    lyrTxrSkip: 100
	  };
	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.registerCalculationListeners();
	};
	BRp.notify = function (eventName, eles) {
	  var r = this;
	  var cy = r.cy;

	  // the renderer can't be notified after it's destroyed
	  if (this.destroyed) {
	    return;
	  }
	  if (eventName === 'init') {
	    r.load();
	    return;
	  }
	  if (eventName === 'destroy') {
	    r.destroy();
	    return;
	  }
	  if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
	    r.invalidateCachedZSortedEles();
	  }
	  if (eventName === 'viewport') {
	    r.redrawHint('select', true);
	  }
	  if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
	    r.invalidateContainerClientCoordsCache();
	    r.matchCanvasSize(r.container);
	  }
	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);
	  this.startRenderLoop();
	  this.redraw();
	};
	BRp.destroy = function () {
	  var r = this;
	  r.destroyed = true;
	  r.cy.stopAnimationLoop();
	  for (var i = 0; i < r.bindings.length; i++) {
	    var binding = r.bindings[i];
	    var b = binding;
	    var tgt = b.target;
	    (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
	  }
	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.onUpdateEleCalcsFns = [];
	  if (r.removeObserver) {
	    r.removeObserver.disconnect();
	  }
	  if (r.styleObserver) {
	    r.styleObserver.disconnect();
	  }
	  if (r.resizeObserver) {
	    r.resizeObserver.disconnect();
	  }
	  if (r.labelCalcDiv) {
	    try {
	      document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
	    } catch (e) {
	      // ie10 issue #1014
	    }
	  }
	};
	BRp.isHeadless = function () {
	  return false;
	};
	[BRp$f, BRp$5, BRp$4, BRp$3, BRp$2, BRp$1].forEach(function (props) {
	  extend(BRp, props);
	});

	var fullFpsTime = 1000 / 60; // assume 60 frames per second

	var defs = {
	  setupDequeueing: function setupDequeueing(opts) {
	    return function setupDequeueingImpl() {
	      var self = this;
	      var r = this.renderer;
	      if (self.dequeueingSetup) {
	        return;
	      } else {
	        self.dequeueingSetup = true;
	      }
	      var queueRedraw = debounce_1(function () {
	        r.redrawHint('eles', true);
	        r.redrawHint('drag', true);
	        r.redraw();
	      }, opts.deqRedrawThreshold);
	      var dequeue = function dequeue(willDraw, frameStartTime) {
	        var startTime = performanceNow();
	        var avgRenderTime = r.averageRedrawTime;
	        var renderTime = r.lastRedrawTime;
	        var deqd = [];
	        var extent = r.cy.extent();
	        var pixelRatio = r.getPixelRatio();

	        // if we aren't in a tick that causes a draw, then the rendered style
	        // queue won't automatically be flushed before dequeueing starts
	        if (!willDraw) {
	          r.flushRenderedStyleQueue();
	        }
	        while (true) {
	          // eslint-disable-line no-constant-condition
	          var now = performanceNow();
	          var duration = now - startTime;
	          var frameDuration = now - frameStartTime;
	          if (renderTime < fullFpsTime) {
	            // if we're rendering faster than the ideal fps, then do dequeueing
	            // during all of the remaining frame time

	            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);
	            if (frameDuration >= opts.deqFastCost * timeAvailable) {
	              break;
	            }
	          } else {
	            if (willDraw) {
	              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
	                break;
	              }
	            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
	              break;
	            }
	          }
	          var thisDeqd = opts.deq(self, pixelRatio, extent);
	          if (thisDeqd.length > 0) {
	            for (var i = 0; i < thisDeqd.length; i++) {
	              deqd.push(thisDeqd[i]);
	            }
	          } else {
	            break;
	          }
	        }

	        // callbacks on dequeue
	        if (deqd.length > 0) {
	          opts.onDeqd(self, deqd);
	          if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
	            queueRedraw();
	          }
	        }
	      };
	      var priority = opts.priority || noop$1;
	      r.beforeRender(dequeue, priority(self));
	    };
	  }
	};

	// Allows lookups for (ele, lvl) => cache.
	// Uses keys so elements may share the same cache.
	var ElementTextureCacheLookup = /*#__PURE__*/function () {
	  function ElementTextureCacheLookup(getKey) {
	    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;
	    _classCallCheck(this, ElementTextureCacheLookup);
	    this.idsByKey = new Map$2();
	    this.keyForId = new Map$2();
	    this.cachesByLvl = new Map$2();
	    this.lvls = [];
	    this.getKey = getKey;
	    this.doesEleInvalidateKey = doesEleInvalidateKey;
	  }
	  _createClass(ElementTextureCacheLookup, [{
	    key: "getIdsFor",
	    value: function getIdsFor(key) {
	      if (key == null) {
	        error("Can not get id list for null key");
	      }
	      var idsByKey = this.idsByKey;
	      var ids = this.idsByKey.get(key);
	      if (!ids) {
	        ids = new Set$1();
	        idsByKey.set(key, ids);
	      }
	      return ids;
	    }
	  }, {
	    key: "addIdForKey",
	    value: function addIdForKey(key, id) {
	      if (key != null) {
	        this.getIdsFor(key).add(id);
	      }
	    }
	  }, {
	    key: "deleteIdForKey",
	    value: function deleteIdForKey(key, id) {
	      if (key != null) {
	        this.getIdsFor(key)["delete"](id);
	      }
	    }
	  }, {
	    key: "getNumberOfIdsForKey",
	    value: function getNumberOfIdsForKey(key) {
	      if (key == null) {
	        return 0;
	      } else {
	        return this.getIdsFor(key).size;
	      }
	    }
	  }, {
	    key: "updateKeyMappingFor",
	    value: function updateKeyMappingFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      var currKey = this.getKey(ele);
	      this.deleteIdForKey(prevKey, id);
	      this.addIdForKey(currKey, id);
	      this.keyForId.set(id, currKey);
	    }
	  }, {
	    key: "deleteKeyMappingFor",
	    value: function deleteKeyMappingFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      this.deleteIdForKey(prevKey, id);
	      this.keyForId["delete"](id);
	    }
	  }, {
	    key: "keyHasChangedFor",
	    value: function keyHasChangedFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      var newKey = this.getKey(ele);
	      return prevKey !== newKey;
	    }
	  }, {
	    key: "isInvalid",
	    value: function isInvalid(ele) {
	      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
	    }
	  }, {
	    key: "getCachesAt",
	    value: function getCachesAt(lvl) {
	      var cachesByLvl = this.cachesByLvl,
	        lvls = this.lvls;
	      var caches = cachesByLvl.get(lvl);
	      if (!caches) {
	        caches = new Map$2();
	        cachesByLvl.set(lvl, caches);
	        lvls.push(lvl);
	      }
	      return caches;
	    }
	  }, {
	    key: "getCache",
	    value: function getCache(key, lvl) {
	      return this.getCachesAt(lvl).get(key);
	    }
	  }, {
	    key: "get",
	    value: function get(ele, lvl) {
	      var key = this.getKey(ele);
	      var cache = this.getCache(key, lvl);

	      // getting for an element may need to add to the id list b/c eles can share keys
	      if (cache != null) {
	        this.updateKeyMappingFor(ele);
	      }
	      return cache;
	    }
	  }, {
	    key: "getForCachedKey",
	    value: function getForCachedKey(ele, lvl) {
	      var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key
	      var cache = this.getCache(key, lvl);
	      return cache;
	    }
	  }, {
	    key: "hasCache",
	    value: function hasCache(key, lvl) {
	      return this.getCachesAt(lvl).has(key);
	    }
	  }, {
	    key: "has",
	    value: function has(ele, lvl) {
	      var key = this.getKey(ele);
	      return this.hasCache(key, lvl);
	    }
	  }, {
	    key: "setCache",
	    value: function setCache(key, lvl, cache) {
	      cache.key = key;
	      this.getCachesAt(lvl).set(key, cache);
	    }
	  }, {
	    key: "set",
	    value: function set(ele, lvl, cache) {
	      var key = this.getKey(ele);
	      this.setCache(key, lvl, cache);
	      this.updateKeyMappingFor(ele);
	    }
	  }, {
	    key: "deleteCache",
	    value: function deleteCache(key, lvl) {
	      this.getCachesAt(lvl)["delete"](key);
	    }
	  }, {
	    key: "delete",
	    value: function _delete(ele, lvl) {
	      var key = this.getKey(ele);
	      this.deleteCache(key, lvl);
	    }
	  }, {
	    key: "invalidateKey",
	    value: function invalidateKey(key) {
	      var _this = this;
	      this.lvls.forEach(function (lvl) {
	        return _this.deleteCache(key, lvl);
	      });
	    }

	    // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)
	  }, {
	    key: "invalidate",
	    value: function invalidate(ele) {
	      var id = ele.id();
	      var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

	      this.deleteKeyMappingFor(ele);
	      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);
	      if (entireKeyInvalidated) {
	        // clear mapping for current key
	        this.invalidateKey(key);
	      }
	      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
	    }
	  }]);
	  return ElementTextureCacheLookup;
	}();

	var minTxrH = 25; // the size of the texture cache for small height eles (special case)
	var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up
	var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl$1 = 3; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom$1 = 7.99; // beyond this zoom level, layered textures are not used
	var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps
	var defTxrWidth = 1024; // default/minimum texture width
	var maxTxrW = 1024; // the maximum width of a texture
	var maxTxrH = 1024; // the maximum height of a texture
	var minUtility = 0.2; // if usage of texture is less than this, it is retired
	var maxFullness = 0.8; // fullness of texture after which queue removal is checked
	var maxFullnessChecks = 10; // dequeued after this many checks
	var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps
	var deqRedrawThreshold$1 = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

	var getTxrReasons = {
	  dequeue: 'dequeue',
	  downscale: 'downscale',
	  highQuality: 'highQuality'
	};
	var initDefaults = defaults$g({
	  getKey: null,
	  doesEleInvalidateKey: falsify,
	  drawElement: null,
	  getBoundingBox: null,
	  getRotationPoint: null,
	  getRotationOffset: null,
	  isVisible: trueify,
	  allowEdgeTxrCaching: true,
	  allowParentTxrCaching: true
	});
	var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
	  var self = this;
	  self.renderer = renderer;
	  self.onDequeues = [];
	  var opts = initDefaults(initOptions);
	  extend(self, opts);
	  self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
	  self.setupDequeueing();
	};
	var ETCp = ElementTextureCache.prototype;
	ETCp.reasons = getTxrReasons;

	// the list of textures in which new subtextures for elements can be placed
	ETCp.getTextureQueue = function (txrH) {
	  var self = this;
	  self.eleImgCaches = self.eleImgCaches || {};
	  return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
	};

	// the list of usused textures which can be recycled (in use in texture queue)
	ETCp.getRetiredTextureQueue = function (txrH) {
	  var self = this;
	  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
	  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
	  return rtxtrQ;
	};

	// queue of element draw requests at different scale levels
	ETCp.getElementQueue = function () {
	  var self = this;
	  var q = self.eleCacheQueue = self.eleCacheQueue || new heap(function (a, b) {
	    return b.reqs - a.reqs;
	  });
	  return q;
	};

	// queue of element draw requests at different scale levels (element id lookup)
	ETCp.getElementKeyToQueue = function () {
	  var self = this;
	  var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
	  return k2q;
	};
	ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
	  var self = this;
	  var r = this.renderer;
	  var zoom = r.cy.zoom();
	  var lookup = this.lookup;
	  if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {
	    return null;
	  }
	  if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
	    return null;
	  }
	  if (lvl == null) {
	    lvl = Math.ceil(log2(zoom * pxRatio));
	  }
	  if (lvl < minLvl$1) {
	    lvl = minLvl$1;
	  } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
	    return null;
	  }
	  var scale = Math.pow(2, lvl);
	  var eleScaledH = bb.h * scale;
	  var eleScaledW = bb.w * scale;
	  var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);
	  if (!this.isVisible(ele, scaledLabelShown)) {
	    return null;
	  }
	  var eleCache = lookup.get(ele, lvl);

	  // if this get was on an unused/invalidated cache, then restore the texture usage metric
	  if (eleCache && eleCache.invalidated) {
	    eleCache.invalidated = false;
	    eleCache.texture.invalidatedWidth -= eleCache.width;
	  }
	  if (eleCache) {
	    return eleCache;
	  }
	  var txrH; // which texture height this ele belongs to

	  if (eleScaledH <= minTxrH) {
	    txrH = minTxrH;
	  } else if (eleScaledH <= txrStepH) {
	    txrH = txrStepH;
	  } else {
	    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
	  }
	  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
	    return null; // caching large elements is not efficient
	  }

	  var txrQ = self.getTextureQueue(txrH);

	  // first try the second last one in case it has space at the end
	  var txr = txrQ[txrQ.length - 2];
	  var addNewTxr = function addNewTxr() {
	    return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
	  };

	  // try the last one if there is no second last one
	  if (!txr) {
	    txr = txrQ[txrQ.length - 1];
	  }

	  // if the last one doesn't exist, we need a first one
	  if (!txr) {
	    txr = addNewTxr();
	  }

	  // if there's no room in the current texture, we need a new one
	  if (txr.width - txr.usedWidth < eleScaledW) {
	    txr = addNewTxr();
	  }
	  var scalableFrom = function scalableFrom(otherCache) {
	    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
	  };
	  var deqing = reason && reason === getTxrReasons.dequeue;
	  var highQualityReq = reason && reason === getTxrReasons.highQuality;
	  var downscaleReq = reason && reason === getTxrReasons.downscale;
	  var higherCache; // the nearest cache with a higher level
	  for (var l = lvl + 1; l <= maxLvl$1; l++) {
	    var c = lookup.get(ele, l);
	    if (c) {
	      higherCache = c;
	      break;
	    }
	  }
	  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;
	  var downscale = function downscale() {
	    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
	  };

	  // reset ele area in texture
	  txr.context.setTransform(1, 0, 0, 1, 0, 0);
	  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);
	  if (scalableFrom(oneUpCache)) {
	    // then we can relatively cheaply rescale the existing image w/o rerendering
	    downscale();
	  } else if (scalableFrom(higherCache)) {
	    // then use the higher cache for now and queue the next level down
	    // to cheaply scale towards the smaller level

	    if (highQualityReq) {
	      for (var _l = higherCache.level; _l > lvl; _l--) {
	        oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
	      }
	      downscale();
	    } else {
	      self.queueElement(ele, higherCache.level - 1);
	      return higherCache;
	    }
	  } else {
	    var lowerCache; // the nearest cache with a lower level
	    if (!deqing && !highQualityReq && !downscaleReq) {
	      for (var _l2 = lvl - 1; _l2 >= minLvl$1; _l2--) {
	        var _c = lookup.get(ele, _l2);
	        if (_c) {
	          lowerCache = _c;
	          break;
	        }
	      }
	    }
	    if (scalableFrom(lowerCache)) {
	      // then use the lower quality cache for now and queue the better one for later

	      self.queueElement(ele, lvl);
	      return lowerCache;
	    }
	    txr.context.translate(txr.usedWidth, 0);
	    txr.context.scale(scale, scale);
	    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
	    txr.context.scale(1 / scale, 1 / scale);
	    txr.context.translate(-txr.usedWidth, 0);
	  }
	  eleCache = {
	    x: txr.usedWidth,
	    texture: txr,
	    level: lvl,
	    scale: scale,
	    width: eleScaledW,
	    height: eleScaledH,
	    scaledLabelShown: scaledLabelShown
	  };
	  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
	  txr.eleCaches.push(eleCache);
	  lookup.set(ele, lvl, eleCache);
	  self.checkTextureFullness(txr);
	  return eleCache;
	};
	ETCp.invalidateElements = function (eles) {
	  for (var i = 0; i < eles.length; i++) {
	    this.invalidateElement(eles[i]);
	  }
	};
	ETCp.invalidateElement = function (ele) {
	  var self = this;
	  var lookup = self.lookup;
	  var caches = [];
	  var invalid = lookup.isInvalid(ele);
	  if (!invalid) {
	    return; // override the invalidation request if the element key has not changed
	  }

	  for (var lvl = minLvl$1; lvl <= maxLvl$1; lvl++) {
	    var cache = lookup.getForCachedKey(ele, lvl);
	    if (cache) {
	      caches.push(cache);
	    }
	  }
	  var noOtherElesUseCache = lookup.invalidate(ele);
	  if (noOtherElesUseCache) {
	    for (var i = 0; i < caches.length; i++) {
	      var _cache = caches[i];
	      var txr = _cache.texture;

	      // remove space from the texture it belongs to
	      txr.invalidatedWidth += _cache.width;

	      // mark the cache as invalidated
	      _cache.invalidated = true;

	      // retire the texture if its utility is low
	      self.checkTextureUtility(txr);
	    }
	  }

	  // remove from queue since the old req was for the old state
	  self.removeFromQueue(ele);
	};
	ETCp.checkTextureUtility = function (txr) {
	  // invalidate all entries in the cache if the cache size is small
	  if (txr.invalidatedWidth >= minUtility * txr.width) {
	    this.retireTexture(txr);
	  }
	};
	ETCp.checkTextureFullness = function (txr) {
	  // if texture has been mostly filled and passed over several times, remove
	  // it from the queue so we don't need to waste time looking at it to put new things

	  var self = this;
	  var txrQ = self.getTextureQueue(txr.height);
	  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
	    removeFromArray(txrQ, txr);
	  } else {
	    txr.fullnessChecks++;
	  }
	};
	ETCp.retireTexture = function (txr) {
	  var self = this;
	  var txrH = txr.height;
	  var txrQ = self.getTextureQueue(txrH);
	  var lookup = this.lookup;

	  // retire the texture from the active / searchable queue:

	  removeFromArray(txrQ, txr);
	  txr.retired = true;

	  // remove the refs from the eles to the caches:

	  var eleCaches = txr.eleCaches;
	  for (var i = 0; i < eleCaches.length; i++) {
	    var eleCache = eleCaches[i];
	    lookup.deleteCache(eleCache.key, eleCache.level);
	  }
	  clearArray(eleCaches);

	  // add the texture to a retired queue so it can be recycled in future:

	  var rtxtrQ = self.getRetiredTextureQueue(txrH);
	  rtxtrQ.push(txr);
	};
	ETCp.addTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var txr = {};
	  txrQ.push(txr);
	  txr.eleCaches = [];
	  txr.height = txrH;
	  txr.width = Math.max(defTxrWidth, minW);
	  txr.usedWidth = 0;
	  txr.invalidatedWidth = 0;
	  txr.fullnessChecks = 0;
	  txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
	  txr.context = txr.canvas.getContext('2d');
	  return txr;
	};
	ETCp.recycleTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var rtxtrQ = self.getRetiredTextureQueue(txrH);
	  for (var i = 0; i < rtxtrQ.length; i++) {
	    var txr = rtxtrQ[i];
	    if (txr.width >= minW) {
	      txr.retired = false;
	      txr.usedWidth = 0;
	      txr.invalidatedWidth = 0;
	      txr.fullnessChecks = 0;
	      clearArray(txr.eleCaches);
	      txr.context.setTransform(1, 0, 0, 1, 0, 0);
	      txr.context.clearRect(0, 0, txr.width, txr.height);
	      removeFromArray(rtxtrQ, txr);
	      txrQ.push(txr);
	      return txr;
	    }
	  }
	};
	ETCp.queueElement = function (ele, lvl) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var key = this.getKey(ele);
	  var existingReq = k2q[key];
	  if (existingReq) {
	    // use the max lvl b/c in between lvls are cheap to make
	    existingReq.level = Math.max(existingReq.level, lvl);
	    existingReq.eles.merge(ele);
	    existingReq.reqs++;
	    q.updateItem(existingReq);
	  } else {
	    var req = {
	      eles: ele.spawn().merge(ele),
	      level: lvl,
	      reqs: 1,
	      key: key
	    };
	    q.push(req);
	    k2q[key] = req;
	  }
	};
	ETCp.dequeue = function (pxRatio /*, extent*/) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var dequeued = [];
	  var lookup = self.lookup;
	  for (var i = 0; i < maxDeqSize$1; i++) {
	    if (q.size() > 0) {
	      var req = q.pop();
	      var key = req.key;
	      var ele = req.eles[0]; // all eles have the same key
	      var cacheExists = lookup.hasCache(ele, req.level);

	      // clear out the key to req lookup
	      k2q[key] = null;

	      // dequeueing isn't necessary with an existing cache
	      if (cacheExists) {
	        continue;
	      }
	      dequeued.push(req);
	      var bb = self.getBoundingBox(ele);
	      self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
	    } else {
	      break;
	    }
	  }
	  return dequeued;
	};
	ETCp.removeFromQueue = function (ele) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var key = this.getKey(ele);
	  var req = k2q[key];
	  if (req != null) {
	    if (req.eles.length === 1) {
	      // remove if last ele in the req
	      // bring to front of queue
	      req.reqs = MAX_INT$1;
	      q.updateItem(req);
	      q.pop(); // remove from queue

	      k2q[key] = null; // remove from lookup map
	    } else {
	      // otherwise just remove ele from req
	      req.eles.unmerge(ele);
	    }
	  }
	};
	ETCp.onDequeue = function (fn) {
	  this.onDequeues.push(fn);
	};
	ETCp.offDequeue = function (fn) {
	  removeFromArray(this.onDequeues, fn);
	};
	ETCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold$1,
	  deqCost: deqCost$1,
	  deqAvgCost: deqAvgCost$1,
	  deqNoDrawCost: deqNoDrawCost$1,
	  deqFastCost: deqFastCost$1,
	  deq: function deq(self, pxRatio, extent) {
	    return self.dequeue(pxRatio, extent);
	  },
	  onDeqd: function onDeqd(self, deqd) {
	    for (var i = 0; i < self.onDequeues.length; i++) {
	      var fn = self.onDequeues[i];
	      fn(deqd);
	    }
	  },
	  shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
	    for (var i = 0; i < deqd.length; i++) {
	      var eles = deqd[i].eles;
	      for (var j = 0; j < eles.length; j++) {
	        var bb = eles[j].boundingBox();
	        if (boundingBoxesIntersect(bb, extent)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  },
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.eleTxrDeq;
	  }
	});

	var defNumLayers = 1; // default number of layers to use
	var minLvl = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
	var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates
	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost = 0.9; // % of frame time to be used when >60fps
	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch
	var invalidThreshold = 250; // time threshold for disabling b/c of invalidations
	var maxLayerArea = 4000 * 4000; // layers can't be bigger than this
	var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)

	// var log = function(){ console.log.apply( console, arguments ); };

	var LayeredTextureCache = function LayeredTextureCache(renderer) {
	  var self = this;
	  var r = self.renderer = renderer;
	  var cy = r.cy;
	  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

	  self.firstGet = true;
	  self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
	  self.skipping = false;
	  self.eleTxrDeqs = cy.collection();
	  self.scheduleElementRefinement = debounce_1(function () {
	    self.refineElementTextures(self.eleTxrDeqs);
	    self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
	  }, refineEleDebounceTime);
	  r.beforeRender(function (willDraw, now) {
	    if (now - self.lastInvalidationTime <= invalidThreshold) {
	      self.skipping = true;
	    } else {
	      self.skipping = false;
	    }
	  }, r.beforeRenderPriorities.lyrTxrSkip);
	  var qSort = function qSort(a, b) {
	    return b.reqs - a.reqs;
	  };
	  self.layersQueue = new heap(qSort);
	  self.setupDequeueing();
	};
	var LTCp = LayeredTextureCache.prototype;
	var layerIdPool = 0;
	var MAX_INT = Math.pow(2, 53) - 1;
	LTCp.makeLayer = function (bb, lvl) {
	  var scale = Math.pow(2, lvl);
	  var w = Math.ceil(bb.w * scale);
	  var h = Math.ceil(bb.h * scale);
	  var canvas = this.renderer.makeOffscreenCanvas(w, h);
	  var layer = {
	    id: layerIdPool = ++layerIdPool % MAX_INT,
	    bb: bb,
	    level: lvl,
	    width: w,
	    height: h,
	    canvas: canvas,
	    context: canvas.getContext('2d'),
	    eles: [],
	    elesQueue: [],
	    reqs: 0
	  };

	  // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

	  var cxt = layer.context;
	  var dx = -layer.bb.x1;
	  var dy = -layer.bb.y1;

	  // do the transform on creation to save cycles (it's the same for all eles)
	  cxt.scale(scale, scale);
	  cxt.translate(dx, dy);
	  return layer;
	};
	LTCp.getLayers = function (eles, pxRatio, lvl) {
	  var self = this;
	  var r = self.renderer;
	  var cy = r.cy;
	  var zoom = cy.zoom();
	  var firstGet = self.firstGet;
	  self.firstGet = false;

	  // log('--\nget layers with %s eles', eles.length);
	  //log eles.map(function(ele){ return ele.id() }) );

	  if (lvl == null) {
	    lvl = Math.ceil(log2(zoom * pxRatio));
	    if (lvl < minLvl) {
	      lvl = minLvl;
	    } else if (zoom >= maxZoom || lvl > maxLvl) {
	      return null;
	    }
	  }
	  self.validateLayersElesOrdering(lvl, eles);
	  var layersByLvl = self.layersByLevel;
	  var scale = Math.pow(2, lvl);
	  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
	  var bb;
	  var lvlComplete = self.levelIsComplete(lvl, eles);
	  var tmpLayers;
	  var checkTempLevels = function checkTempLevels() {
	    var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
	      self.validateLayersElesOrdering(l, eles);
	      if (self.levelIsComplete(l, eles)) {
	        tmpLayers = layersByLvl[l];
	        return true;
	      }
	    };
	    var checkLvls = function checkLvls(dir) {
	      if (tmpLayers) {
	        return;
	      }
	      for (var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir) {
	        if (canUseAsTmpLvl(l)) {
	          break;
	        }
	      }
	    };
	    checkLvls(+1);
	    checkLvls(-1);

	    // remove the invalid layers; they will be replaced as needed later in this function
	    for (var i = layers.length - 1; i >= 0; i--) {
	      var layer = layers[i];
	      if (layer.invalid) {
	        removeFromArray(layers, layer);
	      }
	    }
	  };
	  if (!lvlComplete) {
	    // if the current level is incomplete, then use the closest, best quality layerset temporarily
	    // and later queue the current layerset so we can get the proper quality level soon

	    checkTempLevels();
	  } else {
	    // log('level complete, using existing layers\n--');
	    return layers;
	  }
	  var getBb = function getBb() {
	    if (!bb) {
	      bb = makeBoundingBox();
	      for (var i = 0; i < eles.length; i++) {
	        updateBoundingBox(bb, eles[i].boundingBox());
	      }
	    }
	    return bb;
	  };
	  var makeLayer = function makeLayer(opts) {
	    opts = opts || {};
	    var after = opts.after;
	    getBb();
	    var area = bb.w * scale * (bb.h * scale);
	    if (area > maxLayerArea) {
	      return null;
	    }
	    var layer = self.makeLayer(bb, lvl);
	    if (after != null) {
	      var index = layers.indexOf(after) + 1;
	      layers.splice(index, 0, layer);
	    } else if (opts.insert === undefined || opts.insert) {
	      // no after specified => first layer made so put at start
	      layers.unshift(layer);
	    }

	    // if( tmpLayers ){
	    //self.queueLayer( layer );
	    // }

	    return layer;
	  };
	  if (self.skipping && !firstGet) {
	    // log('skip layers');
	    return null;
	  }

	  // log('do layers');

	  var layer = null;
	  var maxElesPerLayer = eles.length / defNumLayers;
	  var allowLazyQueueing = !firstGet;
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    // log('look at ele', ele.id());

	    var existingLayer = caches[lvl];
	    if (existingLayer) {
	      // reuse layer for later eles
	      // log('reuse layer for', ele.id());
	      layer = existingLayer;
	      continue;
	    }
	    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
	      // log('make new layer for ele %s', ele.id());

	      layer = makeLayer({
	        insert: true,
	        after: layer
	      });

	      // if now layer can be built then we can't use layers at this level
	      if (!layer) {
	        return null;
	      }

	      // log('new layer with id %s', layer.id);
	    }

	    if (tmpLayers || allowLazyQueueing) {
	      // log('queue ele %s in layer %s', ele.id(), layer.id);
	      self.queueLayer(layer, ele);
	    } else {
	      // log('draw ele %s in layer %s', ele.id(), layer.id);
	      self.drawEleInLayer(layer, ele, lvl, pxRatio);
	    }
	    layer.eles.push(ele);
	    caches[lvl] = layer;
	  }

	  // log('--');

	  if (tmpLayers) {
	    // then we only queued the current layerset and can't draw it yet
	    return tmpLayers;
	  }
	  if (allowLazyQueueing) {
	    // log('lazy queue level', lvl);
	    return null;
	  }
	  return layers;
	};

	// a layer may want to use an ele cache of a higher level to avoid blurriness
	// so the layer level might not equal the ele level
	LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
	  return lvl;
	};
	LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
	  var self = this;
	  var r = this.renderer;
	  var context = layer.context;
	  var bb = ele.boundingBox();
	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return;
	  }
	  lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);
	  {
	    r.setImgSmoothing(context, false);
	  }
	  {
	    r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
	  }
	  {
	    r.setImgSmoothing(context, true);
	  }
	};
	LTCp.levelIsComplete = function (lvl, eles) {
	  var self = this;
	  var layers = self.layersByLevel[lvl];
	  if (!layers || layers.length === 0) {
	    return false;
	  }
	  var numElesInLayers = 0;
	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i];

	    // if there are any eles needed to be drawn yet, the level is not complete
	    if (layer.reqs > 0) {
	      return false;
	    }

	    // if the layer is invalid, the level is not complete
	    if (layer.invalid) {
	      return false;
	    }
	    numElesInLayers += layer.eles.length;
	  }

	  // we should have exactly the number of eles passed in to be complete
	  if (numElesInLayers !== eles.length) {
	    return false;
	  }
	  return true;
	};
	LTCp.validateLayersElesOrdering = function (lvl, eles) {
	  var layers = this.layersByLevel[lvl];
	  if (!layers) {
	    return;
	  }

	  // if in a layer the eles are not in the same order, then the layer is invalid
	  // (i.e. there is an ele in between the eles in the layer)

	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i];
	    var offset = -1;

	    // find the offset
	    for (var j = 0; j < eles.length; j++) {
	      if (layer.eles[0] === eles[j]) {
	        offset = j;
	        break;
	      }
	    }
	    if (offset < 0) {
	      // then the layer has nonexistent elements and is invalid
	      this.invalidateLayer(layer);
	      continue;
	    }

	    // the eles in the layer must be in the same continuous order, else the layer is invalid

	    var o = offset;
	    for (var j = 0; j < layer.eles.length; j++) {
	      if (layer.eles[j] !== eles[o + j]) {
	        // log('invalidate based on ordering', layer.id);

	        this.invalidateLayer(layer);
	        break;
	      }
	    }
	  }
	};
	LTCp.updateElementsInLayers = function (eles, update) {
	  var self = this;
	  var isEles = element(eles[0]);

	  // collect udpated elements (cascaded from the layers) and update each
	  // layer itself along the way
	  for (var i = 0; i < eles.length; i++) {
	    var req = isEles ? null : eles[i];
	    var ele = isEles ? eles[i] : eles[i].ele;
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};
	    for (var l = minLvl; l <= maxLvl; l++) {
	      var layer = caches[l];
	      if (!layer) {
	        continue;
	      }

	      // if update is a request from the ele cache, then it affects only
	      // the matching level
	      if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
	        continue;
	      }
	      update(layer, ele, req);
	    }
	  }
	};
	LTCp.haveLayers = function () {
	  var self = this;
	  var haveLayers = false;
	  for (var l = minLvl; l <= maxLvl; l++) {
	    var layers = self.layersByLevel[l];
	    if (layers && layers.length > 0) {
	      haveLayers = true;
	      break;
	    }
	  }
	  return haveLayers;
	};
	LTCp.invalidateElements = function (eles) {
	  var self = this;
	  if (eles.length === 0) {
	    return;
	  }
	  self.lastInvalidationTime = performanceNow();

	  // log('update invalidate layer time from eles');

	  if (eles.length === 0 || !self.haveLayers()) {
	    return;
	  }
	  self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
	    self.invalidateLayer(layer);
	  });
	};
	LTCp.invalidateLayer = function (layer) {
	  // log('update invalidate layer time');

	  this.lastInvalidationTime = performanceNow();
	  if (layer.invalid) {
	    return;
	  } // save cycles

	  var lvl = layer.level;
	  var eles = layer.eles;
	  var layers = this.layersByLevel[lvl];

	  // log('invalidate layer', layer.id );

	  removeFromArray(layers, layer);
	  // layer.eles = [];

	  layer.elesQueue = [];
	  layer.invalid = true;
	  if (layer.replacement) {
	    layer.replacement.invalid = true;
	  }
	  for (var i = 0; i < eles.length; i++) {
	    var caches = eles[i]._private.rscratch.imgLayerCaches;
	    if (caches) {
	      caches[lvl] = null;
	    }
	  }
	};
	LTCp.refineElementTextures = function (eles) {
	  var self = this;

	  // log('refine', eles.length);

	  self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
	    var rLyr = layer.replacement;
	    if (!rLyr) {
	      rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
	      rLyr.replaces = layer;
	      rLyr.eles = layer.eles;

	      // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
	    }

	    if (!rLyr.reqs) {
	      for (var i = 0; i < rLyr.eles.length; i++) {
	        self.queueLayer(rLyr, rLyr.eles[i]);
	      }

	      // log('queue replacement layer refinement', rLyr.id);
	    }
	  });
	};

	LTCp.enqueueElementRefinement = function (ele) {
	  this.eleTxrDeqs.merge(ele);
	  this.scheduleElementRefinement();
	};
	LTCp.queueLayer = function (layer, ele) {
	  var self = this;
	  var q = self.layersQueue;
	  var elesQ = layer.elesQueue;
	  var hasId = elesQ.hasId = elesQ.hasId || {};

	  // if a layer is going to be replaced, queuing is a waste of time
	  if (layer.replacement) {
	    return;
	  }
	  if (ele) {
	    if (hasId[ele.id()]) {
	      return;
	    }
	    elesQ.push(ele);
	    hasId[ele.id()] = true;
	  }
	  if (layer.reqs) {
	    layer.reqs++;
	    q.updateItem(layer);
	  } else {
	    layer.reqs = 1;
	    q.push(layer);
	  }
	};
	LTCp.dequeue = function (pxRatio) {
	  var self = this;
	  var q = self.layersQueue;
	  var deqd = [];
	  var eleDeqs = 0;
	  while (eleDeqs < maxDeqSize) {
	    if (q.size() === 0) {
	      break;
	    }
	    var layer = q.peek();

	    // if a layer has been or will be replaced, then don't waste time with it
	    if (layer.replacement) {
	      // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
	      q.pop();
	      continue;
	    }

	    // if this is a replacement layer that has been superceded, then forget it
	    if (layer.replaces && layer !== layer.replaces.replacement) {
	      // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
	      q.pop();
	      continue;
	    }
	    if (layer.invalid) {
	      // log('replacement layer %s is invalid; dequeued', layer.id);
	      q.pop();
	      continue;
	    }
	    var ele = layer.elesQueue.shift();
	    if (ele) {
	      // log('dequeue layer %s', layer.id);

	      self.drawEleInLayer(layer, ele, layer.level, pxRatio);
	      eleDeqs++;
	    }
	    if (deqd.length === 0) {
	      // we need only one entry in deqd to queue redrawing etc
	      deqd.push(true);
	    }

	    // if the layer has all its eles done, then remove from the queue
	    if (layer.elesQueue.length === 0) {
	      q.pop();
	      layer.reqs = 0;

	      // log('dequeue of layer %s complete', layer.id);

	      // when a replacement layer is dequeued, it replaces the old layer in the level
	      if (layer.replaces) {
	        self.applyLayerReplacement(layer);
	      }
	      self.requestRedraw();
	    }
	  }
	  return deqd;
	};
	LTCp.applyLayerReplacement = function (layer) {
	  var self = this;
	  var layersInLevel = self.layersByLevel[layer.level];
	  var replaced = layer.replaces;
	  var index = layersInLevel.indexOf(replaced);

	  // if the replaced layer is not in the active list for the level, then replacing
	  // refs would be a mistake (i.e. overwriting the true active layer)
	  if (index < 0 || replaced.invalid) {
	    // log('replacement layer would have no effect', layer.id);
	    return;
	  }
	  layersInLevel[index] = layer; // replace level ref

	  // replace refs in eles
	  for (var i = 0; i < layer.eles.length; i++) {
	    var _p = layer.eles[i]._private;
	    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};
	    if (cache) {
	      cache[layer.level] = layer;
	    }
	  }

	  // log('apply replacement layer %s over %s', layer.id, replaced.id);

	  self.requestRedraw();
	};
	LTCp.requestRedraw = debounce_1(function () {
	  var r = this.renderer;
	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);
	  r.redraw();
	}, 100);
	LTCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function deq(self, pxRatio) {
	    return self.dequeue(pxRatio);
	  },
	  onDeqd: noop$1,
	  shouldRedraw: trueify,
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
	  }
	});

	var CRp$a = {};
	var impl;
	function polygon(context, points) {
	  for (var i = 0; i < points.length; i++) {
	    var pt = points[i];
	    context.lineTo(pt.x, pt.y);
	  }
	}
	function triangleBackcurve(context, points, controlPoint) {
	  var firstPt;
	  for (var i = 0; i < points.length; i++) {
	    var pt = points[i];
	    if (i === 0) {
	      firstPt = pt;
	    }
	    context.lineTo(pt.x, pt.y);
	  }
	  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
	}
	function triangleTee(context, trianglePoints, teePoints) {
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  var triPts = trianglePoints;
	  for (var i = 0; i < triPts.length; i++) {
	    var pt = triPts[i];
	    context.lineTo(pt.x, pt.y);
	  }
	  var teePts = teePoints;
	  var firstTeePt = teePoints[0];
	  context.moveTo(firstTeePt.x, firstTeePt.y);
	  for (var i = 1; i < teePts.length; i++) {
	    var pt = teePts[i];
	    context.lineTo(pt.x, pt.y);
	  }
	  if (context.closePath) {
	    context.closePath();
	  }
	}
	function circleTriangle(context, trianglePoints, rx, ry, r) {
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  context.arc(rx, ry, r, 0, Math.PI * 2, false);
	  var triPts = trianglePoints;
	  var firstTrPt = triPts[0];
	  context.moveTo(firstTrPt.x, firstTrPt.y);
	  for (var i = 0; i < triPts.length; i++) {
	    var pt = triPts[i];
	    context.lineTo(pt.x, pt.y);
	  }
	  if (context.closePath) {
	    context.closePath();
	  }
	}
	function circle(context, rx, ry, r) {
	  context.arc(rx, ry, r, 0, Math.PI * 2, false);
	}
	CRp$a.arrowShapeImpl = function (name) {
	  return (impl || (impl = {
	    'polygon': polygon,
	    'triangle-backcurve': triangleBackcurve,
	    'triangle-tee': triangleTee,
	    'circle-triangle': circleTriangle,
	    'triangle-cross': triangleTee,
	    'circle': circle
	  }))[name];
	};

	var CRp$9 = {};
	CRp$9.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
	  var r = this;
	  if (ele.isNode()) {
	    r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
	  } else {
	    r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
	  }
	};
	CRp$9.drawElementOverlay = function (context, ele) {
	  var r = this;
	  if (ele.isNode()) {
	    r.drawNodeOverlay(context, ele);
	  } else {
	    r.drawEdgeOverlay(context, ele);
	  }
	};
	CRp$9.drawElementUnderlay = function (context, ele) {
	  var r = this;
	  if (ele.isNode()) {
	    r.drawNodeUnderlay(context, ele);
	  } else {
	    r.drawEdgeUnderlay(context, ele);
	  }
	};
	CRp$9.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity) {
	  var r = this;
	  var bb = eleTxrCache.getBoundingBox(ele);
	  if (bb.w === 0 || bb.h === 0) {
	    return;
	  } // ignore zero size case

	  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);
	  if (eleCache != null) {
	    var opacity = getOpacity(r, ele);
	    if (opacity === 0) {
	      return;
	    }
	    var theta = getRotation(r, ele);
	    var x1 = bb.x1,
	      y1 = bb.y1,
	      w = bb.w,
	      h = bb.h;
	    var x, y, sx, sy, smooth;
	    if (theta !== 0) {
	      var rotPt = eleTxrCache.getRotationPoint(ele);
	      sx = rotPt.x;
	      sy = rotPt.y;
	      context.translate(sx, sy);
	      context.rotate(theta);
	      smooth = r.getImgSmoothing(context);
	      if (!smooth) {
	        r.setImgSmoothing(context, true);
	      }
	      var off = eleTxrCache.getRotationOffset(ele);
	      x = off.x;
	      y = off.y;
	    } else {
	      x = x1;
	      y = y1;
	    }
	    var oldGlobalAlpha;
	    if (opacity !== 1) {
	      oldGlobalAlpha = context.globalAlpha;
	      context.globalAlpha = oldGlobalAlpha * opacity;
	    }
	    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);
	    if (opacity !== 1) {
	      context.globalAlpha = oldGlobalAlpha;
	    }
	    if (theta !== 0) {
	      context.rotate(-theta);
	      context.translate(-sx, -sy);
	      if (!smooth) {
	        r.setImgSmoothing(context, false);
	      }
	    }
	  } else {
	    eleTxrCache.drawElement(context, ele); // direct draw fallback
	  }
	};

	var getZeroRotation = function getZeroRotation() {
	  return 0;
	};
	var getLabelRotation = function getLabelRotation(r, ele) {
	  return r.getTextAngle(ele, null);
	};
	var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
	  return r.getTextAngle(ele, 'source');
	};
	var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
	  return r.getTextAngle(ele, 'target');
	};
	var getOpacity = function getOpacity(r, ele) {
	  return ele.effectiveOpacity();
	};
	var getTextOpacity = function getTextOpacity(e, ele) {
	  return ele.pstyle('text-opacity').pfValue * ele.effectiveOpacity();
	};
	CRp$9.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
	  var r = this;
	  var _r$data = r.data,
	    eleTxrCache = _r$data.eleTxrCache,
	    lblTxrCache = _r$data.lblTxrCache,
	    slbTxrCache = _r$data.slbTxrCache,
	    tlbTxrCache = _r$data.tlbTxrCache;
	  var bb = ele.boundingBox();
	  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;
	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return;
	  }
	  if (!extent || boundingBoxesIntersect(bb, extent)) {
	    var isEdge = ele.isEdge();
	    var badLine = ele.element()._private.rscratch.badLine;
	    r.drawElementUnderlay(context, ele);
	    r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);
	    if (!isEdge || !badLine) {
	      r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
	    }
	    if (isEdge && !badLine) {
	      r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
	      r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
	    }
	    r.drawElementOverlay(context, ele);
	  }
	};
	CRp$9.drawElements = function (context, eles) {
	  var r = this;
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    r.drawElement(context, ele);
	  }
	};
	CRp$9.drawCachedElements = function (context, eles, pxRatio, extent) {
	  var r = this;
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};
	CRp$9.drawCachedNodes = function (context, eles, pxRatio, extent) {
	  var r = this;
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    if (!ele.isNode()) {
	      continue;
	    }
	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};
	CRp$9.drawLayeredElements = function (context, eles, pxRatio, extent) {
	  var r = this;
	  var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);
	  if (layers) {
	    for (var i = 0; i < layers.length; i++) {
	      var layer = layers[i];
	      var bb = layer.bb;
	      if (bb.w === 0 || bb.h === 0) {
	        continue;
	      }
	      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
	    }
	  } else {
	    // fall back on plain caching if no layers
	    r.drawCachedElements(context, eles, pxRatio, extent);
	  }
	};

	var CRp$8 = {};
	CRp$8.drawEdge = function (context, edge, shiftToOriginWithBb) {
	  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;
	  var rs = edge._private.rscratch;
	  if (shouldDrawOpacity && !edge.visible()) {
	    return;
	  }

	  // if bezier ctrl pts can not be calculated, then die
	  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
	    // isNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }
	  var bb;
	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  }
	  var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
	  var lineOpacity = shouldDrawOpacity ? edge.pstyle('line-opacity').value : 1;
	  var curveStyle = edge.pstyle('curve-style').value;
	  var lineStyle = edge.pstyle('line-style').value;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  var lineCap = edge.pstyle('line-cap').value;
	  var effectiveLineOpacity = opacity * lineOpacity;
	  // separate arrow opacity would require arrow-opacity property
	  var effectiveArrowOpacity = opacity * lineOpacity;
	  var drawLine = function drawLine() {
	    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveLineOpacity;
	    if (curveStyle === 'straight-triangle') {
	      r.eleStrokeStyle(context, edge, strokeOpacity);
	      r.drawEdgeTrianglePath(edge, context, rs.allpts);
	    } else {
	      context.lineWidth = edgeWidth;
	      context.lineCap = lineCap;
	      r.eleStrokeStyle(context, edge, strokeOpacity);
	      r.drawEdgePath(edge, context, rs.allpts, lineStyle);
	      context.lineCap = 'butt'; // reset for other drawing functions
	    }
	  };

	  var drawOverlay = function drawOverlay() {
	    if (!shouldDrawOverlay) {
	      return;
	    }
	    r.drawEdgeOverlay(context, edge);
	  };
	  var drawUnderlay = function drawUnderlay() {
	    if (!shouldDrawOverlay) {
	      return;
	    }
	    r.drawEdgeUnderlay(context, edge);
	  };
	  var drawArrows = function drawArrows() {
	    var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveArrowOpacity;
	    r.drawArrowheads(context, edge, arrowOpacity);
	  };
	  var drawText = function drawText() {
	    r.drawElementText(context, edge, null, drawLabel);
	  };
	  context.lineJoin = 'round';
	  var ghost = edge.pstyle('ghost').value === 'yes';
	  if (ghost) {
	    var gx = edge.pstyle('ghost-offset-x').pfValue;
	    var gy = edge.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = edge.pstyle('ghost-opacity').value;
	    var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;
	    context.translate(gx, gy);
	    drawLine(effectiveGhostOpacity);
	    drawArrows(effectiveGhostOpacity);
	    context.translate(-gx, -gy);
	  }
	  drawUnderlay();
	  drawLine();
	  drawArrows();
	  drawOverlay();
	  drawText();
	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};
	var drawEdgeOverlayUnderlay = function drawEdgeOverlayUnderlay(overlayOrUnderlay) {
	  if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {
	    throw new Error('Invalid state');
	  }
	  return function (context, edge) {
	    if (!edge.visible()) {
	      return;
	    }
	    var opacity = edge.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
	    if (opacity === 0) {
	      return;
	    }
	    var r = this;
	    var usePaths = r.usePaths();
	    var rs = edge._private.rscratch;
	    var padding = edge.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
	    var width = 2 * padding;
	    var color = edge.pstyle("".concat(overlayOrUnderlay, "-color")).value;
	    context.lineWidth = width;
	    if (rs.edgeType === 'self' && !usePaths) {
	      context.lineCap = 'butt';
	    } else {
	      context.lineCap = 'round';
	    }
	    r.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
	    r.drawEdgePath(edge, context, rs.allpts, 'solid');
	  };
	};
	CRp$8.drawEdgeOverlay = drawEdgeOverlayUnderlay('overlay');
	CRp$8.drawEdgeUnderlay = drawEdgeOverlayUnderlay('underlay');
	CRp$8.drawEdgePath = function (edge, context, pts, type) {
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();
	  var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
	  var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;
	  if (usePaths) {
	    var pathCacheKey = pts.join('$');
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;
	    if (keyMatches) {
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }
	  if (canvasCxt.setLineDash) {
	    // for very outofdate browsers
	    switch (type) {
	      case 'dotted':
	        canvasCxt.setLineDash([1, 1]);
	        break;
	      case 'dashed':
	        canvasCxt.setLineDash(lineDashPattern);
	        canvasCxt.lineDashOffset = lineDashOffset;
	        break;
	      case 'solid':
	        canvasCxt.setLineDash([]);
	        break;
	    }
	  }
	  if (!pathCacheHit && !rs.badLine) {
	    if (context.beginPath) {
	      context.beginPath();
	    }
	    context.moveTo(pts[0], pts[1]);
	    switch (rs.edgeType) {
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        for (var i = 2; i + 3 < pts.length; i += 4) {
	          context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
	        }
	        break;
	      case 'straight':
	      case 'haystack':
	        for (var _i = 2; _i + 1 < pts.length; _i += 2) {
	          context.lineTo(pts[_i], pts[_i + 1]);
	        }
	        break;
	      case 'segments':
	        if (rs.isRound) {
	          var _iterator = _createForOfIteratorHelper(rs.roundCorners),
	            _step;
	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var corner = _step.value;
	              drawPreparedRoundCorner(context, corner);
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }
	          context.lineTo(pts[pts.length - 2], pts[pts.length - 1]);
	        } else {
	          for (var _i2 = 2; _i2 + 1 < pts.length; _i2 += 2) {
	            context.lineTo(pts[_i2], pts[_i2 + 1]);
	          }
	        }
	        break;
	    }
	  }
	  context = canvasCxt;
	  if (usePaths) {
	    context.stroke(path);
	  } else {
	    context.stroke();
	  }

	  // reset any line dashes
	  if (context.setLineDash) {
	    // for very outofdate browsers
	    context.setLineDash([]);
	  }
	};
	CRp$8.drawEdgeTrianglePath = function (edge, context, pts) {
	  // use line stroke style for triangle fill style
	  context.fillStyle = context.strokeStyle;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  for (var i = 0; i + 1 < pts.length; i += 2) {
	    var vector = [pts[i + 2] - pts[i], pts[i + 3] - pts[i + 1]];
	    var length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
	    var normal = [vector[1] / length, -vector[0] / length];
	    var triangleHead = [normal[0] * edgeWidth / 2, normal[1] * edgeWidth / 2];
	    context.beginPath();
	    context.moveTo(pts[i] - triangleHead[0], pts[i + 1] - triangleHead[1]);
	    context.lineTo(pts[i] + triangleHead[0], pts[i + 1] + triangleHead[1]);
	    context.lineTo(pts[i + 2], pts[i + 3]);
	    context.closePath();
	    context.fill();
	  }
	};
	CRp$8.drawArrowheads = function (context, edge, opacity) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
	  }
	  this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
	  this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);
	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
	  }
	};
	CRp$8.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
	  if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
	    return;
	  }
	  var self = this;
	  var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;
	  if (arrowShape === 'none') {
	    return;
	  }
	  var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  var pArrowWidth = edge.pstyle(prefix + '-arrow-width');
	  var arrowWidth = pArrowWidth.value === 'match-line' ? edgeWidth : pArrowWidth.pfValue;
	  if (pArrowWidth.units === '%') arrowWidth *= edgeWidth;
	  var edgeOpacity = edge.pstyle('opacity').value;
	  if (opacity === undefined) {
	    opacity = edgeOpacity;
	  }
	  var gco = context.globalCompositeOperation;
	  if (opacity !== 1 || arrowFill === 'hollow') {
	    // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';
	    self.colorFillStyle(context, 255, 255, 255, 1);
	    self.colorStrokeStyle(context, 255, 255, 255, 1);
	    self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, arrowWidth, x, y, angle);
	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)

	  var color = edge.pstyle(prefix + '-arrow-color').value;
	  self.colorFillStyle(context, color[0], color[1], color[2], opacity);
	  self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
	  self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, arrowWidth, x, y, angle);
	};
	CRp$8.drawArrowShape = function (edge, context, fill, edgeWidth, shape, shapeWidth, x, y, angle) {
	  var r = this;
	  var usePaths = this.usePaths() && shape !== 'triangle-cross';
	  var pathCacheHit = false;
	  var path;
	  var canvasContext = context;
	  var translation = {
	    x: x,
	    y: y
	  };
	  var scale = edge.pstyle('arrow-scale').value;
	  var size = this.getArrowWidth(edgeWidth, scale);
	  var shapeImpl = r.arrowShapes[shape];
	  if (usePaths) {
	    var cache = r.arrowPathCache = r.arrowPathCache || [];
	    var key = hashString(shape);
	    var cachedPath = cache[key];
	    if (cachedPath != null) {
	      path = context = cachedPath;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      cache[key] = path;
	    }
	  }
	  if (!pathCacheHit) {
	    if (context.beginPath) {
	      context.beginPath();
	    }
	    if (usePaths) {
	      // store in the path cache with values easily manipulated later
	      shapeImpl.draw(context, 1, 0, {
	        x: 0,
	        y: 0
	      }, 1);
	    } else {
	      shapeImpl.draw(context, size, angle, translation, edgeWidth);
	    }
	    if (context.closePath) {
	      context.closePath();
	    }
	  }
	  context = canvasContext;
	  if (usePaths) {
	    // set transform to arrow position/orientation
	    context.translate(x, y);
	    context.rotate(angle);
	    context.scale(size, size);
	  }
	  if (fill === 'filled' || fill === 'both') {
	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  }
	  if (fill === 'hollow' || fill === 'both') {
	    context.lineWidth = shapeWidth / (usePaths ? size : 1);
	    context.lineJoin = 'miter';
	    if (usePaths) {
	      context.stroke(path);
	    } else {
	      context.stroke();
	    }
	  }
	  if (usePaths) {
	    // reset transform by applying inverse
	    context.scale(1 / size, 1 / size);
	    context.rotate(-angle);
	    context.translate(-x, -y);
	  }
	};

	var CRp$7 = {};
	CRp$7.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
	  // detect problematic cases for old browsers with bad images (cheaper than try-catch)
	  if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
	    return;
	  }
	  try {
	    context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
	  } catch (e) {
	    warn(e);
	  }
	};
	CRp$7.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
	  var r = this;
	  var pos = node.position();
	  var nodeX = pos.x;
	  var nodeY = pos.y;
	  var styleObj = node.cy().style();
	  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
	  var fit = getIndexedStyle(node, 'background-fit', 'value', index);
	  var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var paddingX2 = node.padding() * 2;
	  var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var rs = node._private.rscratch;
	  var clip = getIndexedStyle(node, 'background-clip', 'value', index);
	  var shouldClip = clip === 'node';
	  var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
	  var smooth = getIndexedStyle(node, 'background-image-smoothing', 'value', index);
	  var cornerRadius = node.pstyle('corner-radius').value;
	  if (cornerRadius !== 'auto') cornerRadius = node.pstyle('corner-radius').pfValue;
	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH;

	  // workaround for broken browsers like ie
	  if (null == imgW || null == imgH) {
	    document.body.appendChild(img); // eslint-disable-line no-undef

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;
	    document.body.removeChild(img); // eslint-disable-line no-undef
	  }

	  var w = imgW;
	  var h = imgH;
	  if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
	    } else {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index);
	    }
	  }
	  if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
	    } else {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index);
	    }
	  }
	  if (w === 0 || h === 0) {
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if (fit === 'contain') {
	    var scale = Math.min(nodeTW / w, nodeTH / h);
	    w *= scale;
	    h *= scale;
	  } else if (fit === 'cover') {
	    var scale = Math.max(nodeTW / w, nodeTH / h);
	    w *= scale;
	    h *= scale;
	  }
	  var x = nodeX - nodeTW / 2; // left
	  var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
	  var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);
	  if (posXUnits === '%') {
	    x += (nodeTW - w) * posXPfVal;
	  } else {
	    x += posXPfVal;
	  }
	  var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
	  var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);
	  if (offXUnits === '%') {
	    x += (nodeTW - w) * offXPfVal;
	  } else {
	    x += offXPfVal;
	  }
	  var y = nodeY - nodeTH / 2; // top
	  var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
	  var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);
	  if (posYUnits === '%') {
	    y += (nodeTH - h) * posYPfVal;
	  } else {
	    y += posYPfVal;
	  }
	  var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
	  var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);
	  if (offYUnits === '%') {
	    y += (nodeTH - h) * offYPfVal;
	  } else {
	    y += offYPfVal;
	  }
	  if (rs.pathCache) {
	    x -= nodeX;
	    y -= nodeY;
	    nodeX = 0;
	    nodeY = 0;
	  }
	  var gAlpha = context.globalAlpha;
	  context.globalAlpha = imgOpacity;
	  var smoothingEnabled = r.getImgSmoothing(context);
	  var isSmoothingSwitched = false;
	  if (smooth === 'no' && smoothingEnabled) {
	    r.setImgSmoothing(context, false);
	    isSmoothingSwitched = true;
	  } else if (smooth === 'yes' && !smoothingEnabled) {
	    r.setImgSmoothing(context, true);
	    isSmoothingSwitched = true;
	  }
	  if (repeat === 'no-repeat') {
	    if (shouldClip) {
	      context.save();
	      if (rs.pathCache) {
	        context.clip(rs.pathCache);
	      } else {
	        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs);
	        context.clip();
	      }
	    }
	    r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);
	    if (shouldClip) {
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern(img, repeat);
	    context.fillStyle = pattern;
	    r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs);
	    context.translate(x, y);
	    context.fill();
	    context.translate(-x, -y);
	  }
	  context.globalAlpha = gAlpha;
	  if (isSmoothingSwitched) {
	    r.setImgSmoothing(context, smoothingEnabled);
	  }
	};

	var CRp$6 = {};
	CRp$6.eleTextBiggerThanMin = function (ele, scale) {
	  if (!scale) {
	    var zoom = ele.cy().zoom();
	    var pxRatio = this.getPixelRatio();
	    var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

	    scale = Math.pow(2, lvl);
	  }
	  var computedSize = ele.pstyle('font-size').pfValue * scale;
	  var minSize = ele.pstyle('min-zoomed-font-size').pfValue;
	  if (computedSize < minSize) {
	    return false;
	  }
	  return true;
	};
	CRp$6.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
	  var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;
	  if (force == null) {
	    if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {
	      return;
	    }
	  } else if (force === false) {
	    return;
	  }
	  if (ele.isNode()) {
	    var label = ele.pstyle('label');
	    if (!label || !label.value) {
	      return;
	    }
	    var justification = r.getLabelJustification(ele);
	    context.textAlign = justification;
	    context.textBaseline = 'bottom';
	  } else {
	    var badLine = ele.element()._private.rscratch.badLine;
	    var _label = ele.pstyle('label');
	    var srcLabel = ele.pstyle('source-label');
	    var tgtLabel = ele.pstyle('target-label');
	    if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
	      return;
	    }
	    context.textAlign = 'center';
	    context.textBaseline = 'bottom';
	  }
	  var applyRotation = !shiftToOriginWithBb;
	  var bb;
	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  }
	  if (prefix == null) {
	    r.drawText(context, ele, null, applyRotation, useEleOpacity);
	    if (ele.isEdge()) {
	      r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
	      r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
	    }
	  } else {
	    r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
	  }
	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};
	CRp$6.getFontCache = function (context) {
	  var cache;
	  this.fontCaches = this.fontCaches || [];
	  for (var i = 0; i < this.fontCaches.length; i++) {
	    cache = this.fontCaches[i];
	    if (cache.context === context) {
	      return cache;
	    }
	  }
	  cache = {
	    context: context
	  };
	  this.fontCaches.push(cache);
	  return cache;
	};

	// set up canvas context with font
	// returns transformed text string
	CRp$6.setupTextStyle = function (context, ele) {
	  var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  // Font style
	  var labelStyle = ele.pstyle('font-style').strValue;
	  var labelSize = ele.pstyle('font-size').pfValue + 'px';
	  var labelFamily = ele.pstyle('font-family').strValue;
	  var labelWeight = ele.pstyle('font-weight').strValue;
	  var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle('text-opacity').value : 1;
	  var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
	  var color = ele.pstyle('color').value;
	  var outlineColor = ele.pstyle('text-outline-color').value;
	  context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
	  context.lineJoin = 'round'; // so text outlines aren't jagged

	  this.colorFillStyle(context, color[0], color[1], color[2], opacity);
	  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
	};

	// TODO ensure re-used
	function roundRect(ctx, x, y, width, height) {
	  var radius = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;
	  var stroke = arguments.length > 6 ? arguments[6] : undefined;
	  ctx.beginPath();
	  ctx.moveTo(x + radius, y);
	  ctx.lineTo(x + width - radius, y);
	  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  ctx.lineTo(x + width, y + height - radius);
	  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  ctx.lineTo(x + radius, y + height);
	  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  ctx.lineTo(x, y + radius);
	  ctx.quadraticCurveTo(x, y, x + radius, y);
	  ctx.closePath();
	  if (stroke) ctx.stroke();else ctx.fill();
	}
	CRp$6.getTextAngle = function (ele, prefix) {
	  var theta;
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var pdash = prefix ? prefix + '-' : '';
	  var rotation = ele.pstyle(pdash + 'text-rotation');
	  var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);
	  if (rotation.strValue === 'autorotate') {
	    theta = ele.isEdge() ? textAngle : 0;
	  } else if (rotation.strValue === 'none') {
	    theta = 0;
	  } else {
	    theta = rotation.pfValue;
	  }
	  return theta;
	};
	CRp$6.drawText = function (context, ele, prefix) {
	  var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;
	  if (useEleOpacity && (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0)) {
	    return;
	  }

	  // use 'main' as an alias for the main label (i.e. null prefix)
	  if (prefix === 'main') {
	    prefix = null;
	  }
	  var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
	  var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
	  var orgTextX, orgTextY; // used for rotation
	  var text = this.getLabelText(ele, prefix);
	  if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
	    this.setupTextStyle(context, ele, useEleOpacity);
	    var pdash = prefix ? prefix + '-' : '';
	    var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
	    var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
	    var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
	    var isEdge = ele.isEdge();
	    var halign = ele.pstyle('text-halign').value;
	    var valign = ele.pstyle('text-valign').value;
	    if (isEdge) {
	      halign = 'center';
	      valign = 'center';
	    }
	    textX += marginX;
	    textY += marginY;
	    var theta;
	    if (!applyRotation) {
	      theta = 0;
	    } else {
	      theta = this.getTextAngle(ele, prefix);
	    }
	    if (theta !== 0) {
	      orgTextX = textX;
	      orgTextY = textY;
	      context.translate(orgTextX, orgTextY);
	      context.rotate(theta);
	      textX = 0;
	      textY = 0;
	    }
	    switch (valign) {
	      case 'top':
	        break;
	      case 'center':
	        textY += textH / 2;
	        break;
	      case 'bottom':
	        textY += textH;
	        break;
	    }
	    var backgroundOpacity = ele.pstyle('text-background-opacity').value;
	    var borderOpacity = ele.pstyle('text-border-opacity').value;
	    var textBorderWidth = ele.pstyle('text-border-width').pfValue;
	    var backgroundPadding = ele.pstyle('text-background-padding').pfValue;
	    var styleShape = ele.pstyle('text-background-shape').strValue;
	    var rounded = styleShape.indexOf('round') === 0;
	    var roundRadius = 2;
	    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
	      var bgX = textX - backgroundPadding;
	      switch (halign) {
	        case 'left':
	          bgX -= textW;
	          break;
	        case 'center':
	          bgX -= textW / 2;
	          break;
	      }
	      var bgY = textY - textH - backgroundPadding;
	      var bgW = textW + 2 * backgroundPadding;
	      var bgH = textH + 2 * backgroundPadding;
	      if (backgroundOpacity > 0) {
	        var textFill = context.fillStyle;
	        var textBackgroundColor = ele.pstyle('text-background-color').value;
	        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
	        if (rounded) {
	          roundRect(context, bgX, bgY, bgW, bgH, roundRadius);
	        } else {
	          context.fillRect(bgX, bgY, bgW, bgH);
	        }
	        context.fillStyle = textFill;
	      }
	      if (textBorderWidth > 0 && borderOpacity > 0) {
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = ele.pstyle('text-border-color').value;
	        var textBorderStyle = ele.pstyle('text-border-style').value;
	        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;
	        if (context.setLineDash) {
	          // for very outofdate browsers
	          switch (textBorderStyle) {
	            case 'dotted':
	              context.setLineDash([1, 1]);
	              break;
	            case 'dashed':
	              context.setLineDash([4, 2]);
	              break;
	            case 'double':
	              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders
	              context.setLineDash([]);
	              break;
	            case 'solid':
	              context.setLineDash([]);
	              break;
	          }
	        }
	        if (rounded) {
	          roundRect(context, bgX, bgY, bgW, bgH, roundRadius, 'stroke');
	        } else {
	          context.strokeRect(bgX, bgY, bgW, bgH);
	        }
	        if (textBorderStyle === 'double') {
	          var whiteWidth = textBorderWidth / 2;
	          if (rounded) {
	            roundRect(context, bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2, roundRadius, 'stroke');
	          } else {
	            context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
	          }
	        }
	        if (context.setLineDash) {
	          // for very outofdate browsers
	          context.setLineDash([]);
	        }
	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }
	    }
	    var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if (lineWidth > 0) {
	      context.lineWidth = lineWidth;
	    }
	    if (ele.pstyle('text-wrap').value === 'wrap') {
	      var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
	      var lineHeight = getPrefixedProperty(rscratch, 'labelLineHeight', prefix);
	      var halfTextW = textW / 2;
	      var justification = this.getLabelJustification(ele);
	      if (justification === 'auto') ; else if (halign === 'left') {
	        // auto justification : right
	        if (justification === 'left') {
	          textX += -textW;
	        } else if (justification === 'center') {
	          textX += -halfTextW;
	        } // else same as auto
	      } else if (halign === 'center') {
	        // auto justfication : center
	        if (justification === 'left') {
	          textX += -halfTextW;
	        } else if (justification === 'right') {
	          textX += halfTextW;
	        } // else same as auto
	      } else if (halign === 'right') {
	        // auto justification : left
	        if (justification === 'center') {
	          textX += halfTextW;
	        } else if (justification === 'right') {
	          textX += textW;
	        } // else same as auto
	      }

	      switch (valign) {
	        case 'top':
	          textY -= (lines.length - 1) * lineHeight;
	          break;
	        case 'center':
	        case 'bottom':
	          textY -= (lines.length - 1) * lineHeight;
	          break;
	      }
	      for (var l = 0; l < lines.length; l++) {
	        if (lineWidth > 0) {
	          context.strokeText(lines[l], textX, textY);
	        }
	        context.fillText(lines[l], textX, textY);
	        textY += lineHeight;
	      }
	    } else {
	      if (lineWidth > 0) {
	        context.strokeText(text, textX, textY);
	      }
	      context.fillText(text, textX, textY);
	    }
	    if (theta !== 0) {
	      context.rotate(-theta);
	      context.translate(-orgTextX, -orgTextY);
	    }
	  }
	};

	/* global Path2D */
	var CRp$5 = {};
	CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
	  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;
	  var nodeWidth, nodeHeight;
	  var _p = node._private;
	  var rs = _p.rscratch;
	  var pos = node.position();
	  if (!number$1(pos.x) || !number$1(pos.y)) {
	    return; // can't draw node with undefined position
	  }

	  if (shouldDrawOpacity && !node.visible()) {
	    return;
	  }
	  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
	  var usePaths = r.usePaths();
	  var path;
	  var pathCacheHit = false;
	  var padding = node.padding();
	  nodeWidth = node.width() + 2 * padding;
	  nodeHeight = node.height() + 2 * padding;

	  //
	  // setup shift

	  var bb;
	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  }

	  //
	  // load bg image

	  var bgImgProp = node.pstyle('background-image');
	  var urls = bgImgProp.value;
	  var urlDefined = new Array(urls.length);
	  var image = new Array(urls.length);
	  var numImages = 0;
	  for (var i = 0; i < urls.length; i++) {
	    var url = urls[i];
	    var defd = urlDefined[i] = url != null && url !== 'none';
	    if (defd) {
	      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
	      numImages++;

	      // get image, and if not loaded then ask to redraw when later loaded
	      image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
	        _p.backgroundTimestamp = Date.now();
	        node.emitAndNotify('background');
	      });
	    }
	  }

	  //
	  // setup styles

	  var darkness = node.pstyle('background-blacken').value;
	  var borderWidth = node.pstyle('border-width').pfValue;
	  var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
	  var borderColor = node.pstyle('border-color').value;
	  var borderStyle = node.pstyle('border-style').value;
	  var borderJoin = node.pstyle('border-join').value;
	  var borderCap = node.pstyle('border-cap').value;
	  var borderPosition = node.pstyle('border-position').value;
	  var borderPattern = node.pstyle('border-dash-pattern').pfValue;
	  var borderOffset = node.pstyle('border-dash-offset').pfValue;
	  var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
	  var outlineWidth = node.pstyle('outline-width').pfValue;
	  var outlineColor = node.pstyle('outline-color').value;
	  var outlineStyle = node.pstyle('outline-style').value;
	  var outlineOpacity = node.pstyle('outline-opacity').value * eleOpacity;
	  var outlineOffset = node.pstyle('outline-offset').value;
	  var cornerRadius = node.pstyle('corner-radius').value;
	  if (cornerRadius !== 'auto') cornerRadius = node.pstyle('corner-radius').pfValue;
	  var setupShapeColor = function setupShapeColor() {
	    var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
	    r.eleFillStyle(context, node, bgOpy);
	  };
	  var setupBorderColor = function setupBorderColor() {
	    var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
	    r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
	  };
	  var setupOutlineColor = function setupOutlineColor() {
	    var otlnOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : outlineOpacity;
	    r.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], otlnOpy);
	  };

	  //
	  // setup shape

	  var getPath = function getPath(width, height, shape, points) {
	    var pathCache = r.nodePathCache = r.nodePathCache || [];
	    var key = hashStrings(shape === 'polygon' ? shape + ',' + points.join(',') : shape, '' + height, '' + width, '' + cornerRadius);
	    var cachedPath = pathCache[key];
	    var path;
	    var cacheHit = false;
	    if (cachedPath != null) {
	      path = cachedPath;
	      cacheHit = true;
	      rs.pathCache = path;
	    } else {
	      path = new Path2D();
	      pathCache[key] = rs.pathCache = path;
	    }
	    return {
	      path: path,
	      cacheHit: cacheHit
	    };
	  };
	  var styleShape = node.pstyle('shape').strValue;
	  var shapePts = node.pstyle('shape-polygon-points').pfValue;
	  if (usePaths) {
	    context.translate(pos.x, pos.y);
	    var shapePath = getPath(nodeWidth, nodeHeight, styleShape, shapePts);
	    path = shapePath.path;
	    pathCacheHit = shapePath.cacheHit;
	  }
	  var drawShape = function drawShape() {
	    if (!pathCacheHit) {
	      var npos = pos;
	      if (usePaths) {
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }
	      r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight, cornerRadius, rs);
	    }
	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  };
	  var drawImages = function drawImages() {
	    var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
	    var inside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    var prevBging = _p.backgrounding;
	    var totalCompleted = 0;
	    for (var _i = 0; _i < image.length; _i++) {
	      var bgContainment = node.cy().style().getIndexedStyle(node, 'background-image-containment', 'value', _i);
	      if (inside && bgContainment === 'over' || !inside && bgContainment === 'inside') {
	        totalCompleted++;
	        continue;
	      }
	      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
	        totalCompleted++;
	        r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
	      }
	    }
	    _p.backgrounding = !(totalCompleted === numImages);
	    if (prevBging !== _p.backgrounding) {
	      // update style b/c :backgrounding state changed
	      node.updateStyle(false);
	    }
	  };
	  var drawPie = function drawPie() {
	    var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;
	    if (r.hasPie(node)) {
	      r.drawPie(context, node, pieOpacity);

	      // redraw/restore path if steps after pie need it
	      if (redrawShape) {
	        if (!usePaths) {
	          r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight, cornerRadius, rs);
	        }
	      }
	    }
	  };
	  var darken = function darken() {
	    var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
	    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
	    var c = darkness > 0 ? 0 : 255;
	    if (darkness !== 0) {
	      r.colorFillStyle(context, c, c, c, opacity);
	      if (usePaths) {
	        context.fill(path);
	      } else {
	        context.fill();
	      }
	    }
	  };
	  var drawBorder = function drawBorder() {
	    if (borderWidth > 0) {
	      context.lineWidth = borderWidth;
	      context.lineCap = borderCap;
	      context.lineJoin = borderJoin;
	      if (context.setLineDash) {
	        // for very outofdate browsers
	        switch (borderStyle) {
	          case 'dotted':
	            context.setLineDash([1, 1]);
	            break;
	          case 'dashed':
	            context.setLineDash(borderPattern);
	            context.lineDashOffset = borderOffset;
	            break;
	          case 'solid':
	          case 'double':
	            context.setLineDash([]);
	            break;
	        }
	      }
	      if (borderPosition !== 'center') {
	        context.save();
	        context.lineWidth *= 2;
	        if (borderPosition === 'inside') {
	          usePaths ? context.clip(path) : context.clip();
	        } else {
	          var region = new Path2D();
	          region.rect(-nodeWidth / 2 - borderWidth, -nodeHeight / 2 - borderWidth, nodeWidth + 2 * borderWidth, nodeHeight + 2 * borderWidth);
	          region.addPath(path);
	          context.clip(region, 'evenodd');
	        }
	        usePaths ? context.stroke(path) : context.stroke();
	        context.restore();
	      } else {
	        usePaths ? context.stroke(path) : context.stroke();
	      }
	      if (borderStyle === 'double') {
	        context.lineWidth = borderWidth / 3;
	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';
	        if (usePaths) {
	          context.stroke(path);
	        } else {
	          context.stroke();
	        }
	        context.globalCompositeOperation = gco;
	      }

	      // reset in case we changed the border style
	      if (context.setLineDash) {
	        // for very outofdate browsers
	        context.setLineDash([]);
	      }
	    }
	  };
	  var drawOutline = function drawOutline() {
	    if (outlineWidth > 0) {
	      context.lineWidth = outlineWidth;
	      context.lineCap = 'butt';
	      if (context.setLineDash) {
	        // for very outofdate browsers
	        switch (outlineStyle) {
	          case 'dotted':
	            context.setLineDash([1, 1]);
	            break;
	          case 'dashed':
	            context.setLineDash([4, 2]);
	            break;
	          case 'solid':
	          case 'double':
	            context.setLineDash([]);
	            break;
	        }
	      }
	      var npos = pos;
	      if (usePaths) {
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }
	      var shape = r.getNodeShape(node);
	      var bWidth = borderWidth;
	      if (borderPosition === 'inside') bWidth = 0;
	      if (borderPosition === 'outside') bWidth *= 2;
	      var scaleX = (nodeWidth + bWidth + (outlineWidth + outlineOffset)) / nodeWidth;
	      var scaleY = (nodeHeight + bWidth + (outlineWidth + outlineOffset)) / nodeHeight;
	      var sWidth = nodeWidth * scaleX;
	      var sHeight = nodeHeight * scaleY;
	      var points = r.nodeShapes[shape].points;
	      var _path;
	      if (usePaths) {
	        var outlinePath = getPath(sWidth, sHeight, shape, points);
	        _path = outlinePath.path;
	      }

	      // draw the outline path, either by using expanded points or by scaling 
	      // the dimensions, depending on shape
	      if (shape === "ellipse") {
	        r.drawEllipsePath(_path || context, npos.x, npos.y, sWidth, sHeight);
	      } else if (['round-diamond', 'round-heptagon', 'round-hexagon', 'round-octagon', 'round-pentagon', 'round-polygon', 'round-triangle', 'round-tag'].includes(shape)) {
	        var sMult = 0;
	        var offsetX = 0;
	        var offsetY = 0;
	        if (shape === 'round-diamond') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * 1.4;
	        } else if (shape === 'round-heptagon') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * 1.075;
	          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 35;
	        } else if (shape === 'round-hexagon') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;
	        } else if (shape === 'round-pentagon') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * 1.13;
	          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 15;
	        } else if (shape === 'round-tag') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;
	          offsetX = (bWidth / 2 + outlineWidth + outlineOffset) * .07;
	        } else if (shape === 'round-triangle') {
	          sMult = (bWidth + outlineOffset + outlineWidth) * (Math.PI / 2);
	          offsetY = -(bWidth + outlineOffset / 2 + outlineWidth) / Math.PI;
	        }
	        if (sMult !== 0) {
	          scaleX = (nodeWidth + sMult) / nodeWidth;
	          sWidth = nodeWidth * scaleX;
	          if (!['round-hexagon', 'round-tag'].includes(shape)) {
	            scaleY = (nodeHeight + sMult) / nodeHeight;
	            sHeight = nodeHeight * scaleY;
	          }
	        }
	        cornerRadius = cornerRadius === 'auto' ? getRoundPolygonRadius(sWidth, sHeight) : cornerRadius;
	        var halfW = sWidth / 2;
	        var halfH = sHeight / 2;
	        var radius = cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2;
	        var p = new Array(points.length / 2);
	        var corners = new Array(points.length / 2);
	        for (var _i3 = 0; _i3 < points.length / 2; _i3++) {
	          p[_i3] = {
	            x: npos.x + offsetX + halfW * points[_i3 * 2],
	            y: npos.y + offsetY + halfH * points[_i3 * 2 + 1]
	          };
	        }
	        var _i2,
	          p1,
	          p2,
	          p3,
	          len = p.length;
	        p1 = p[len - 1];
	        // for each point
	        for (_i2 = 0; _i2 < len; _i2++) {
	          p2 = p[_i2 % len];
	          p3 = p[(_i2 + 1) % len];
	          corners[_i2] = getRoundCorner(p1, p2, p3, radius);
	          p1 = p2;
	          p2 = p3;
	        }
	        r.drawRoundPolygonPath(_path || context, npos.x + offsetX, npos.y + offsetY, nodeWidth * scaleX, nodeHeight * scaleY, points, corners);
	      } else if (['roundrectangle', 'round-rectangle'].includes(shape)) {
	        cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;
	        r.drawRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);
	      } else if (['cutrectangle', 'cut-rectangle'].includes(shape)) {
	        cornerRadius = cornerRadius === 'auto' ? getCutRectangleCornerLength() : cornerRadius;
	        r.drawCutRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, null, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 4);
	      } else if (['bottomroundrectangle', 'bottom-round-rectangle'].includes(shape)) {
	        cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;
	        r.drawBottomRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);
	      } else if (shape === "barrel") {
	        r.drawBarrelPath(_path || context, npos.x, npos.y, sWidth, sHeight);
	      } else if (shape.startsWith("polygon") || ['rhomboid', 'right-rhomboid', 'round-tag', 'tag', 'vee'].includes(shape)) {
	        var pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;
	        points = joinLines(expandPolygon(points, pad));
	        r.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);
	      } else {
	        var _pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;
	        points = joinLines(expandPolygon(points, -_pad));
	        r.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);
	      }
	      if (usePaths) {
	        context.stroke(_path);
	      } else {
	        context.stroke();
	      }
	      if (outlineStyle === 'double') {
	        context.lineWidth = bWidth / 3;
	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';
	        if (usePaths) {
	          context.stroke(_path);
	        } else {
	          context.stroke();
	        }
	        context.globalCompositeOperation = gco;
	      }

	      // reset in case we changed the border style
	      if (context.setLineDash) {
	        // for very outofdate browsers
	        context.setLineDash([]);
	      }
	    }
	  };
	  var drawOverlay = function drawOverlay() {
	    if (shouldDrawOverlay) {
	      r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
	    }
	  };
	  var drawUnderlay = function drawUnderlay() {
	    if (shouldDrawOverlay) {
	      r.drawNodeUnderlay(context, node, pos, nodeWidth, nodeHeight);
	    }
	  };
	  var drawText = function drawText() {
	    r.drawElementText(context, node, null, drawLabel);
	  };
	  var ghost = node.pstyle('ghost').value === 'yes';
	  if (ghost) {
	    var gx = node.pstyle('ghost-offset-x').pfValue;
	    var gy = node.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = node.pstyle('ghost-opacity').value;
	    var effGhostOpacity = ghostOpacity * eleOpacity;
	    context.translate(gx, gy);
	    setupOutlineColor();
	    drawOutline();
	    setupShapeColor(ghostOpacity * bgOpacity);
	    drawShape();
	    drawImages(effGhostOpacity, true);
	    setupBorderColor(ghostOpacity * borderOpacity);
	    drawBorder();
	    drawPie(darkness !== 0 || borderWidth !== 0);
	    drawImages(effGhostOpacity, false);
	    darken(effGhostOpacity);
	    context.translate(-gx, -gy);
	  }
	  if (usePaths) {
	    context.translate(-pos.x, -pos.y);
	  }
	  drawUnderlay();
	  if (usePaths) {
	    context.translate(pos.x, pos.y);
	  }
	  setupOutlineColor();
	  drawOutline();
	  setupShapeColor();
	  drawShape();
	  drawImages(eleOpacity, true);
	  setupBorderColor();
	  drawBorder();
	  drawPie(darkness !== 0 || borderWidth !== 0);
	  drawImages(eleOpacity, false);
	  darken();
	  if (usePaths) {
	    context.translate(-pos.x, -pos.y);
	  }
	  drawText();
	  drawOverlay();

	  //
	  // clean up shift

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};
	var drawNodeOverlayUnderlay = function drawNodeOverlayUnderlay(overlayOrUnderlay) {
	  if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {
	    throw new Error('Invalid state');
	  }
	  return function (context, node, pos, nodeWidth, nodeHeight) {
	    var r = this;
	    if (!node.visible()) {
	      return;
	    }
	    var padding = node.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
	    var opacity = node.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
	    var color = node.pstyle("".concat(overlayOrUnderlay, "-color")).value;
	    var shape = node.pstyle("".concat(overlayOrUnderlay, "-shape")).value;
	    var radius = node.pstyle("".concat(overlayOrUnderlay, "-corner-radius")).value;
	    if (opacity > 0) {
	      pos = pos || node.position();
	      if (nodeWidth == null || nodeHeight == null) {
	        var _padding = node.padding();
	        nodeWidth = node.width() + 2 * _padding;
	        nodeHeight = node.height() + 2 * _padding;
	      }
	      r.colorFillStyle(context, color[0], color[1], color[2], opacity);
	      r.nodeShapes[shape].draw(context, pos.x, pos.y, nodeWidth + padding * 2, nodeHeight + padding * 2, radius);
	      context.fill();
	    }
	  };
	};
	CRp$5.drawNodeOverlay = drawNodeOverlayUnderlay('overlay');
	CRp$5.drawNodeUnderlay = drawNodeOverlayUnderlay('underlay');

	// does the node have at least one pie piece?
	CRp$5.hasPie = function (node) {
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};
	CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
	  node = node[0]; // ensure ele ref
	  pos = pos || node.position();
	  var cyStyle = node.cy().style();
	  var pieSize = node.pstyle('pie-size');
	  var x = pos.x;
	  var y = pos.y;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var radius = Math.min(nodeW, nodeH) / 2; // must fit in node
	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
	  var usePaths = this.usePaths();
	  if (usePaths) {
	    x = 0;
	    y = 0;
	  }
	  if (pieSize.units === '%') {
	    radius = radius * pieSize.pfValue;
	  } else if (pieSize.pfValue !== undefined) {
	    radius = pieSize.pfValue / 2;
	  }
	  for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
	    // 1..N
	    var size = node.pstyle('pie-' + i + '-background-size').value;
	    var color = node.pstyle('pie-' + i + '-background-color').value;
	    var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]

	    // percent can't push beyond 1
	    if (percent + lastPercent > 1) {
	      percent = 1 - lastPercent;
	    }
	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta;

	    // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle
	    if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
	      continue;
	    }
	    context.beginPath();
	    context.moveTo(x, y);
	    context.arc(x, y, radius, angleStart, angleEnd);
	    context.closePath();
	    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
	    context.fill();
	    lastPercent += percent;
	  }
	};

	var CRp$4 = {};
	var motionBlurDelay = 100;

	// var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp$4.getPixelRatio = function () {
	  var context = this.data.contexts[0];
	  if (this.forcedPixelRatio != null) {
	    return this.forcedPixelRatio;
	  }
	  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
	  return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
	};

	CRp$4.paintCache = function (context) {
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;
	  for (var i = 0; i < caches.length; i++) {
	    cache = caches[i];
	    if (cache.context === context) {
	      needToCreateCache = false;
	      break;
	    }
	  }
	  if (needToCreateCache) {
	    cache = {
	      context: context
	    };
	    caches.push(cache);
	  }
	  return cache;
	};
	CRp$4.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
	  var gradientStyle;
	  var usePaths = this.usePaths();
	  var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
	    positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;
	  if (fill === 'radial-gradient') {
	    if (ele.isEdge()) {
	      var start = ele.sourceEndpoint(),
	        end = ele.targetEndpoint(),
	        mid = ele.midpoint();
	      var d1 = dist(start, mid);
	      var d2 = dist(end, mid);
	      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
	    } else {
	      var pos = usePaths ? {
	          x: 0,
	          y: 0
	        } : ele.position(),
	        width = ele.paddedWidth(),
	        height = ele.paddedHeight();
	      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
	    }
	  } else {
	    if (ele.isEdge()) {
	      var _start = ele.sourceEndpoint(),
	        _end = ele.targetEndpoint();
	      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
	    } else {
	      var _pos = usePaths ? {
	          x: 0,
	          y: 0
	        } : ele.position(),
	        _width = ele.paddedWidth(),
	        _height = ele.paddedHeight(),
	        halfWidth = _width / 2,
	        halfHeight = _height / 2;
	      var direction = ele.pstyle('background-gradient-direction').value;
	      switch (direction) {
	        case 'to-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
	          break;
	        case 'to-top':
	          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
	          break;
	        case 'to-left':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
	          break;
	        case 'to-right':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
	          break;
	        case 'to-bottom-right':
	        case 'to-right-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
	          break;
	        case 'to-top-right':
	        case 'to-right-top':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
	          break;
	        case 'to-bottom-left':
	        case 'to-left-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
	          break;
	        case 'to-top-left':
	        case 'to-left-top':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
	          break;
	      }
	    }
	  }
	  if (!gradientStyle) return null; // invalid gradient style

	  var hasPositions = positions.length === colors.length;
	  var length = colors.length;
	  for (var i = 0; i < length; i++) {
	    gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');
	  }
	  return gradientStyle;
	};
	CRp$4.gradientFillStyle = function (context, ele, fill, opacity) {
	  var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
	  if (!gradientStyle) return null; // error
	  context.fillStyle = gradientStyle;
	};
	CRp$4.colorFillStyle = function (context, r, g, b, a) {
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp$4.eleFillStyle = function (context, ele, opacity) {
	  var backgroundFill = ele.pstyle('background-fill').value;
	  if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
	    this.gradientFillStyle(context, ele, backgroundFill, opacity);
	  } else {
	    var backgroundColor = ele.pstyle('background-color').value;
	    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
	  }
	};
	CRp$4.gradientStrokeStyle = function (context, ele, fill, opacity) {
	  var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
	  if (!gradientStyle) return null; // error
	  context.strokeStyle = gradientStyle;
	};
	CRp$4.colorStrokeStyle = function (context, r, g, b, a) {
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	CRp$4.eleStrokeStyle = function (context, ele, opacity) {
	  var lineFill = ele.pstyle('line-fill').value;
	  if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
	    this.gradientStrokeStyle(context, ele, lineFill, opacity);
	  } else {
	    var lineColor = ele.pstyle('line-color').value;
	    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
	  }
	};

	// Resize canvas
	CRp$4.matchCanvasSize = function (container) {
	  var r = this;
	  var data = r.data;
	  var bb = r.findContainerClientCoords();
	  var width = bb[2];
	  var height = bb[3];
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;
	  if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
	    pixelRatio = mbPxRatio;
	  }
	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;
	  if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';
	  for (var i = 0; i < r.CANVAS_LAYERS; i++) {
	    canvas = data.canvases[i];
	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;
	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }
	  for (var i = 0; i < r.BUFFER_COUNT; i++) {
	    canvas = data.bufferCanvases[i];
	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;
	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }
	  r.textureMult = 1;
	  if (pixelRatio <= 1) {
	    canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }
	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;
	};
	CRp$4.renderTo = function (cxt, zoom, pan, pxRatio) {
	  this.render({
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  });
	};
	CRp$4.render = function (options) {
	  options = options || staticEmptyObject();
	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy;
	  var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;
	  if (!forcedContext) {
	    if (r.prevPxRatio !== pixelRatio) {
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize(r.container);
	      r.redrawHint('eles', true);
	      r.redrawHint('drag', true);
	    }
	    r.prevPxRatio = pixelRatio;
	  }
	  if (!forcedContext && r.motionBlurTimeout) {
	    clearTimeout(r.motionBlurTimeout);
	  }
	  if (motionBlur) {
	    if (r.mbFrames == null) {
	      r.mbFrames = 0;
	    }
	    r.mbFrames++;
	    if (r.mbFrames < 3) {
	      // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    }

	    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
	    if (r.mbFrames > r.minMbLowQualFrames) {
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }
	  if (r.clearingMotionBlur) {
	    r.motionBlurPxRatio = 1;
	  }

	  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw
	  if (r.textureDrawLastFrame && !textureDraw) {
	    needDraw[r.NODE] = true;
	    needDraw[r.SELECT_BOX] = true;
	  }
	  var style = cy.style();
	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };
	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

	  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
	  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
	    r.motionBlurPxRatio = 1;
	  }
	  if (forcedPan) {
	    effectivePan = forcedPan;
	  }

	  // apply pixel ratio

	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;
	  var eles = r.getCachedZSortedEles();
	  function mbclear(context, x, y, w, h) {
	    var gco = context.globalCompositeOperation;
	    context.globalCompositeOperation = 'destination-out';
	    r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
	    context.fillRect(x, y, w, h);
	    context.globalCompositeOperation = gco;
	  }
	  function setContextTransform(context, clear) {
	    var ePan, eZoom, w, h;
	    if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };
	      eZoom = zoom * mbPxRatio;
	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;
	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }
	    context.setTransform(1, 0, 0, 1, 0, 0);
	    if (clear === 'motionBlur') {
	      mbclear(context, 0, 0, w, h);
	    } else if (!forcedContext && (clear === undefined || clear)) {
	      context.clearRect(0, 0, w, h);
	    }
	    if (!drawAllLayers) {
	      context.translate(ePan.x, ePan.y);
	      context.scale(eZoom, eZoom);
	    }
	    if (forcedPan) {
	      context.translate(forcedPan.x, forcedPan.y);
	    }
	    if (forcedZoom) {
	      context.scale(forcedZoom, forcedZoom);
	    }
	  }
	  if (!textureDraw) {
	    r.textureDrawLastFrame = false;
	  }
	  if (textureDraw) {
	    r.textureDrawLastFrame = true;
	    if (!r.textureCache) {
	      r.textureCache = {};
	      r.textureCache.bb = cy.mutableElements().boundingBox();
	      r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
	      var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
	      r.render({
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      });
	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };
	      vp.mpan = {
	        x: (0 - vp.pan.x) / vp.zoom,
	        y: (0 - vp.pan.y) / vp.zoom
	      };
	    }
	    needDraw[r.DRAG] = false;
	    needDraw[r.NODE] = false;
	    var context = data.contexts[r.NODE];
	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    context.setTransform(1, 0, 0, 1, 0, 0);
	    if (motionBlur) {
	      mbclear(context, 0, 0, vp.width, vp.height);
	    } else {
	      context.clearRect(0, 0, vp.width, vp.height);
	    }
	    var outsideBgColor = style.core('outside-texture-bg-color').value;
	    var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
	    r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
	    context.fillRect(0, 0, vp.width, vp.height);
	    var zoom = cy.zoom();
	    setContextTransform(context, false);
	    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	  } else if (r.textureOnViewport && !forcedContext) {
	    // clear the cache since we don't need it
	    r.textureCache = null;
	  }
	  var extent = cy.extent();
	  var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();
	  var hideEdges = r.hideEdgesOnViewport && vpManip;
	  var needMbClear = [];
	  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
	  if (needMbClear[r.NODE]) {
	    r.clearedForMotionBlur[r.NODE] = true;
	  }
	  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
	  if (needMbClear[r.DRAG]) {
	    r.clearedForMotionBlur[r.DRAG] = true;
	  }
	  if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
	    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
	    setContextTransform(context, clear);
	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
	    } else {
	      r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
	    }
	    if (r.debug) {
	      r.drawDebugPoints(context, eles.nondrag);
	    }
	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.NODE] = false;
	    }
	  }
	  if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
	    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
	    setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);
	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
	    } else {
	      r.drawCachedElements(context, eles.drag, pixelRatio, extent);
	    }
	    if (r.debug) {
	      r.drawDebugPoints(context, eles.drag);
	    }
	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.DRAG] = false;
	    }
	  }
	  if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
	    var context = forcedContext || data.contexts[r.SELECT_BOX];
	    setContextTransform(context);
	    if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
	      var zoom = r.cy.zoom();
	      var borderWidth = style.core('selection-box-border-width').value / zoom;
	      context.lineWidth = borderWidth;
	      context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
	      context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
	      if (borderWidth > 0) {
	        context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
	        context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
	      }
	    }
	    if (data.bgActivePosistion && !r.hoverData.selecting) {
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;
	      context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
	      context.beginPath();
	      context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
	      context.fill();
	    }
	    var timeToRender = r.lastRedrawTime;
	    if (r.showFps && timeToRender) {
	      timeToRender = Math.round(timeToRender);
	      var fps = Math.round(1000 / timeToRender);
	      context.setTransform(1, 0, 0, 1, 0, 0);
	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
	      var maxFps = 60;
	      context.strokeRect(0, 30, 250, 20);
	      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
	    }
	    if (!drawAllLayers) {
	      needDraw[r.SELECT_BOX] = false;
	    }
	  }

	  // motionblur: blit rendered blurry frames
	  if (motionBlur && mbPxRatio !== 1) {
	    var cxtNode = data.contexts[r.NODE];
	    var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
	    var cxtDrag = data.contexts[r.DRAG];
	    var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];
	    var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      if (needClear || !motionBlurFadeEffect) {
	        cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
	      } else {
	        mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
	      }
	      var pxr = mbPxRatio;
	      cxt.drawImage(txt,
	      // img
	      0, 0,
	      // sx, sy
	      r.canvasWidth * pxr, r.canvasHeight * pxr,
	      // sw, sh
	      0, 0,
	      // x, y
	      r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if (needDraw[r.NODE] || needMbClear[r.NODE]) {
	      drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
	      needDraw[r.NODE] = false;
	    }
	    if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
	      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
	      needDraw[r.DRAG] = false;
	    }
	  }
	  r.prevViewport = vp;
	  if (r.clearingMotionBlur) {
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }
	  if (motionBlur) {
	    r.motionBlurTimeout = setTimeout(function () {
	      r.motionBlurTimeout = null;
	      r.clearedForMotionBlur[r.NODE] = false;
	      r.clearedForMotionBlur[r.DRAG] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;
	      needDraw[r.NODE] = true;
	      needDraw[r.DRAG] = true;
	      r.redraw();
	    }, motionBlurDelay);
	  }
	  if (!forcedContext) {
	    cy.emit('render');
	  }
	};

	var CRp$3 = {};

	// @O Polygon drawing
	CRp$3.drawPolygonPath = function (context, x, y, width, height, points) {
	  var halfW = width / 2;
	  var halfH = height / 2;
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  context.moveTo(x + halfW * points[0], y + halfH * points[1]);
	  for (var i = 1; i < points.length / 2; i++) {
	    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
	  }
	  context.closePath();
	};
	CRp$3.drawRoundPolygonPath = function (context, x, y, width, height, points, corners) {
	  corners.forEach(function (corner) {
	    return drawPreparedRoundCorner(context, corner);
	  });
	  context.closePath();
	};

	// Round rectangle drawing
	CRp$3.drawRoundRectanglePath = function (context, x, y, width, height, radius) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : Math.min(radius, halfHeight, halfWidth);
	  if (context.beginPath) {
	    context.beginPath();
	  }

	  // Start at top middle
	  context.moveTo(x, y - halfHeight);
	  // Arc from middle top to right side
	  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
	  // Arc from right side to bottom
	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	  // Arc from bottom to left side
	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	  // Arc from left side to topBorder
	  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
	  // Join line
	  context.lineTo(x, y - halfHeight);
	  context.closePath();
	};
	CRp$3.drawBottomRoundRectanglePath = function (context, x, y, width, height, radius) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : radius;
	  if (context.beginPath) {
	    context.beginPath();
	  }

	  // Start at top middle
	  context.moveTo(x, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight);
	  context.lineTo(x + halfWidth, y);
	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	  context.lineTo(x - halfWidth, y - halfHeight);
	  context.lineTo(x, y - halfHeight);
	  context.closePath();
	};
	CRp$3.drawCutRectanglePath = function (context, x, y, width, height, points, corners) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerLength = corners === 'auto' ? getCutRectangleCornerLength() : corners;
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
	  context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
	  context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
	  context.closePath();
	};
	CRp$3.drawBarrelPath = function (context, x, y, width, height) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var xBegin = x - halfWidth;
	  var xEnd = x + halfWidth;
	  var yBegin = y - halfHeight;
	  var yEnd = y + halfHeight;
	  var barrelCurveConstants = getBarrelCurveConstants(width, height);
	  var wOffset = barrelCurveConstants.widthOffset;
	  var hOffset = barrelCurveConstants.heightOffset;
	  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  context.moveTo(xBegin, yBegin + hOffset);
	  context.lineTo(xBegin, yEnd - hOffset);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
	  context.lineTo(xEnd - wOffset, yEnd);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
	  context.lineTo(xEnd, yBegin + hOffset);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
	  context.lineTo(xBegin + wOffset, yBegin);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
	  context.closePath();
	};
	var sin0 = Math.sin(0);
	var cos0 = Math.cos(0);
	var sin = {};
	var cos = {};
	var ellipseStepSize = Math.PI / 40;
	for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	  sin[i] = Math.sin(i);
	  cos[i] = Math.cos(i);
	}
	CRp$3.drawEllipsePath = function (context, centerX, centerY, width, height) {
	  if (context.beginPath) {
	    context.beginPath();
	  }
	  if (context.ellipse) {
	    context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
	  } else {
	    var xPos, yPos;
	    var rw = width / 2;
	    var rh = height / 2;
	    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	      xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
	      yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;
	      if (i === 0) {
	        context.moveTo(xPos, yPos);
	      } else {
	        context.lineTo(xPos, yPos);
	      }
	    }
	  }
	  context.closePath();
	};

	/* global atob, ArrayBuffer, Uint8Array, Blob */
	var CRp$2 = {};
	CRp$2.createBuffer = function (w, h) {
	  var buffer = document.createElement('canvas'); // eslint-disable-line no-undef
	  buffer.width = w;
	  buffer.height = h;
	  return [buffer, buffer.getContext('2d')];
	};
	CRp$2.bufferCanvasImage = function (options) {
	  var cy = this.cy;
	  var eles = cy.mutableElements();
	  var bb = eles.boundingBox();
	  var ctrRect = this.findContainerClientCoords();
	  var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
	  var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
	  var specdMaxDims = number$1(options.maxWidth) || number$1(options.maxHeight);
	  var pxRatio = this.getPixelRatio();
	  var scale = 1;
	  if (options.scale !== undefined) {
	    width *= options.scale;
	    height *= options.scale;
	    scale = options.scale;
	  } else if (specdMaxDims) {
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;
	    if (number$1(options.maxWidth)) {
	      maxScaleW = scale * options.maxWidth / width;
	    }
	    if (number$1(options.maxHeight)) {
	      maxScaleH = scale * options.maxHeight / height;
	    }
	    scale = Math.min(maxScaleW, maxScaleH);
	    width *= scale;
	    height *= scale;
	  }
	  if (!specdMaxDims) {
	    width *= pxRatio;
	    height *= pxRatio;
	    scale *= pxRatio;
	  }
	  var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

	  buffCanvas.width = width;
	  buffCanvas.height = height;
	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';
	  var buffCxt = buffCanvas.getContext('2d');

	  // Rasterize the layers, but only if container has nonzero size
	  if (width > 0 && height > 0) {
	    buffCxt.clearRect(0, 0, width, height);
	    buffCxt.globalCompositeOperation = 'source-over';
	    var zsortedEles = this.getCachedZSortedEles();
	    if (options.full) {
	      // draw the full bounds of the graph
	      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
	      buffCxt.scale(scale, scale);
	      this.drawElements(buffCxt, zsortedEles);
	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
	    } else {
	      // draw the current view
	      var pan = cy.pan();
	      var translation = {
	        x: pan.x * scale,
	        y: pan.y * scale
	      };
	      scale *= cy.zoom();
	      buffCxt.translate(translation.x, translation.y);
	      buffCxt.scale(scale, scale);
	      this.drawElements(buffCxt, zsortedEles);
	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(-translation.x, -translation.y);
	    }

	    // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs
	    if (options.bg) {
	      buffCxt.globalCompositeOperation = 'destination-over';
	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect(0, 0, width, height);
	      buffCxt.fill();
	    }
	  }
	  return buffCanvas;
	};
	function b64ToBlob(b64, mimeType) {
	  var bytes = atob(b64);
	  var buff = new ArrayBuffer(bytes.length);
	  var buffUint8 = new Uint8Array(buff);
	  for (var i = 0; i < bytes.length; i++) {
	    buffUint8[i] = bytes.charCodeAt(i);
	  }
	  return new Blob([buff], {
	    type: mimeType
	  });
	}
	function b64UriToB64(b64uri) {
	  var i = b64uri.indexOf(',');
	  return b64uri.substr(i + 1);
	}
	function output(options, canvas, mimeType) {
	  var getB64Uri = function getB64Uri() {
	    return canvas.toDataURL(mimeType, options.quality);
	  };
	  switch (options.output) {
	    case 'blob-promise':
	      return new Promise$1(function (resolve, reject) {
	        try {
	          canvas.toBlob(function (blob) {
	            if (blob != null) {
	              resolve(blob);
	            } else {
	              reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
	            }
	          }, mimeType, options.quality);
	        } catch (err) {
	          reject(err);
	        }
	      });
	    case 'blob':
	      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);
	    case 'base64':
	      return b64UriToB64(getB64Uri());
	    case 'base64uri':
	    default:
	      return getB64Uri();
	  }
	}
	CRp$2.png = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/png');
	};
	CRp$2.jpg = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/jpeg');
	};

	var CRp$1 = {};
	CRp$1.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points, corners) {
	  switch (name) {
	    case 'ellipse':
	      return this.drawEllipsePath(context, centerX, centerY, width, height);
	    case 'polygon':
	      return this.drawPolygonPath(context, centerX, centerY, width, height, points);
	    case 'round-polygon':
	      return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points, corners);
	    case 'roundrectangle':
	    case 'round-rectangle':
	      return this.drawRoundRectanglePath(context, centerX, centerY, width, height, corners);
	    case 'cutrectangle':
	    case 'cut-rectangle':
	      return this.drawCutRectanglePath(context, centerX, centerY, width, height, points, corners);
	    case 'bottomroundrectangle':
	    case 'bottom-round-rectangle':
	      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height, corners);
	    case 'barrel':
	      return this.drawBarrelPath(context, centerX, centerY, width, height);
	  }
	};

	var CR = CanvasRenderer;
	var CRp = CanvasRenderer.prototype;
	CRp.CANVAS_LAYERS = 3;
	//
	CRp.SELECT_BOX = 0;
	CRp.DRAG = 1;
	CRp.NODE = 2;
	CRp.BUFFER_COUNT = 3;
	//
	CRp.TEXTURE_BUFFER = 0;
	CRp.MOTIONBLUR_BUFFER_NODE = 1;
	CRp.MOTIONBLUR_BUFFER_DRAG = 2;
	function CanvasRenderer(options) {
	  var r = this;
	  r.data = {
	    canvases: new Array(CRp.CANVAS_LAYERS),
	    contexts: new Array(CRp.CANVAS_LAYERS),
	    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),
	    bufferCanvases: new Array(CRp.BUFFER_COUNT),
	    bufferContexts: new Array(CRp.CANVAS_LAYERS)
	  };
	  var tapHlOffAttr = '-webkit-tap-highlight-color';
	  var tapHlOffStyle = 'rgba(0,0,0,0)';
	  r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef
	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';
	  var container = options.cy.container();
	  container.appendChild(r.data.canvasContainer);
	  container.style[tapHlOffAttr] = tapHlOffStyle;
	  var styleMap = {
	    '-webkit-user-select': 'none',
	    '-moz-user-select': '-moz-none',
	    'user-select': 'none',
	    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',
	    'outline-style': 'none'
	  };
	  if (ms()) {
	    styleMap['-ms-touch-action'] = 'none';
	    styleMap['touch-action'] = 'none';
	  }
	  for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {
	    var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
	    r.data.contexts[i] = canvas.getContext('2d');
	    Object.keys(styleMap).forEach(function (k) {
	      canvas.style[k] = styleMap[k];
	    });
	    canvas.style.position = 'absolute';
	    canvas.setAttribute('data-id', 'layer' + i);
	    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);
	    r.data.canvasContainer.appendChild(canvas);
	    r.data.canvasNeedsRedraw[i] = false;
	  }
	  r.data.topCanvas = r.data.canvases[0];
	  r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');
	  r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');
	  r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');
	  for (var i = 0; i < CRp.BUFFER_COUNT; i++) {
	    r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
	    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
	    r.data.bufferCanvases[i].style.position = 'absolute';
	    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
	    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
	    r.data.bufferCanvases[i].style.visibility = 'hidden';
	    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;
	  var emptyBb = makeBoundingBox();
	  var getBoxCenter = function getBoxCenter(bb) {
	    return {
	      x: (bb.x1 + bb.x2) / 2,
	      y: (bb.y1 + bb.y2) / 2
	    };
	  };
	  var getCenterOffset = function getCenterOffset(bb) {
	    return {
	      x: -bb.w / 2,
	      y: -bb.h / 2
	    };
	  };
	  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
	    var _p = ele[0]._private;
	    var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
	    return !same;
	  };
	  var getStyleKey = function getStyleKey(ele) {
	    return ele[0]._private.nodeKey;
	  };
	  var getLabelKey = function getLabelKey(ele) {
	    return ele[0]._private.labelStyleKey;
	  };
	  var getSourceLabelKey = function getSourceLabelKey(ele) {
	    return ele[0]._private.sourceLabelStyleKey;
	  };
	  var getTargetLabelKey = function getTargetLabelKey(ele) {
	    return ele[0]._private.targetLabelStyleKey;
	  };
	  var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElement(context, ele, bb, false, false, useEleOpacity);
	  };
	  var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
	  };
	  var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
	  };
	  var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
	  };
	  var getElementBox = function getElementBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.bodyBounds;
	  };
	  var getLabelBox = function getLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.main || emptyBb;
	  };
	  var getSourceLabelBox = function getSourceLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.source || emptyBb;
	  };
	  var getTargetLabelBox = function getTargetLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.target || emptyBb;
	  };
	  var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
	    return scaledLabelShown;
	  };
	  var getElementRotationPoint = function getElementRotationPoint(ele) {
	    return getBoxCenter(getElementBox(ele));
	  };
	  var addTextMargin = function addTextMargin(prefix, pt, ele) {
	    var pre = prefix ? prefix + '-' : '';
	    return {
	      x: pt.x + ele.pstyle(pre + 'text-margin-x').pfValue,
	      y: pt.y + ele.pstyle(pre + 'text-margin-y').pfValue
	    };
	  };
	  var getRsPt = function getRsPt(ele, x, y) {
	    var rs = ele[0]._private.rscratch;
	    return {
	      x: rs[x],
	      y: rs[y]
	    };
	  };
	  var getLabelRotationPoint = function getLabelRotationPoint(ele) {
	    return addTextMargin('', getRsPt(ele, 'labelX', 'labelY'), ele);
	  };
	  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
	    return addTextMargin('source', getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
	  };
	  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
	    return addTextMargin('target', getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
	  };
	  var getElementRotationOffset = function getElementRotationOffset(ele) {
	    return getCenterOffset(getElementBox(ele));
	  };
	  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
	    return getCenterOffset(getSourceLabelBox(ele));
	  };
	  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
	    return getCenterOffset(getTargetLabelBox(ele));
	  };
	  var getLabelRotationOffset = function getLabelRotationOffset(ele) {
	    var bb = getLabelBox(ele);
	    var p = getCenterOffset(getLabelBox(ele));
	    if (ele.isNode()) {
	      switch (ele.pstyle('text-halign').value) {
	        case 'left':
	          p.x = -bb.w;
	          break;
	        case 'right':
	          p.x = 0;
	          break;
	      }
	      switch (ele.pstyle('text-valign').value) {
	        case 'top':
	          p.y = -bb.h;
	          break;
	        case 'bottom':
	          p.y = 0;
	          break;
	      }
	    }
	    return p;
	  };
	  var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
	    getKey: getStyleKey,
	    doesEleInvalidateKey: backgroundTimestampHasChanged,
	    drawElement: drawElement,
	    getBoundingBox: getElementBox,
	    getRotationPoint: getElementRotationPoint,
	    getRotationOffset: getElementRotationOffset,
	    allowEdgeTxrCaching: false,
	    allowParentTxrCaching: false
	  });
	  var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
	    getKey: getLabelKey,
	    drawElement: drawLabel,
	    getBoundingBox: getLabelBox,
	    getRotationPoint: getLabelRotationPoint,
	    getRotationOffset: getLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
	    getKey: getSourceLabelKey,
	    drawElement: drawSourceLabel,
	    getBoundingBox: getSourceLabelBox,
	    getRotationPoint: getSourceLabelRotationPoint,
	    getRotationOffset: getSourceLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
	    getKey: getTargetLabelKey,
	    drawElement: drawTargetLabel,
	    getBoundingBox: getTargetLabelBox,
	    getRotationPoint: getTargetLabelRotationPoint,
	    getRotationOffset: getTargetLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
	  r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
	    // each cache should check for sub-key diff to see that the update affects that cache particularly
	    eleTxrCache.invalidateElements(eles);
	    lblTxrCache.invalidateElements(eles);
	    slbTxrCache.invalidateElements(eles);
	    tlbTxrCache.invalidateElements(eles);

	    // any change invalidates the layers
	    lyrTxrCache.invalidateElements(eles);

	    // update the old bg timestamp so diffs can be done in the ele txr caches
	    for (var _i = 0; _i < eles.length; _i++) {
	      var _p = eles[_i]._private;
	      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
	    }
	  });
	  var refineInLayers = function refineInLayers(reqs) {
	    for (var i = 0; i < reqs.length; i++) {
	      lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
	    }
	  };
	  eleTxrCache.onDequeue(refineInLayers);
	  lblTxrCache.onDequeue(refineInLayers);
	  slbTxrCache.onDequeue(refineInLayers);
	  tlbTxrCache.onDequeue(refineInLayers);
	}
	CRp.redrawHint = function (group, bool) {
	  var r = this;
	  switch (group) {
	    case 'eles':
	      r.data.canvasNeedsRedraw[CRp.NODE] = bool;
	      break;
	    case 'drag':
	      r.data.canvasNeedsRedraw[CRp.DRAG] = bool;
	      break;
	    case 'select':
	      r.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;
	      break;
	  }
	};

	// whether to use Path2D caching for drawing
	var pathsImpld = typeof Path2D !== 'undefined';
	CRp.path2dEnabled = function (on) {
	  if (on === undefined) {
	    return this.pathsEnabled;
	  }
	  this.pathsEnabled = on ? true : false;
	};
	CRp.usePaths = function () {
	  return pathsImpld && this.pathsEnabled;
	};
	CRp.setImgSmoothing = function (context, bool) {
	  if (context.imageSmoothingEnabled != null) {
	    context.imageSmoothingEnabled = bool;
	  } else {
	    context.webkitImageSmoothingEnabled = bool;
	    context.mozImageSmoothingEnabled = bool;
	    context.msImageSmoothingEnabled = bool;
	  }
	};
	CRp.getImgSmoothing = function (context) {
	  if (context.imageSmoothingEnabled != null) {
	    return context.imageSmoothingEnabled;
	  } else {
	    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
	  }
	};
	CRp.makeOffscreenCanvas = function (width, height) {
	  var canvas;
	  if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== ("undefined" )) {
	    canvas = new OffscreenCanvas(width, height);
	  } else {
	    canvas = document.createElement('canvas'); // eslint-disable-line no-undef
	    canvas.width = width;
	    canvas.height = height;
	  }
	  return canvas;
	};
	[CRp$a, CRp$9, CRp$8, CRp$7, CRp$6, CRp$5, CRp$4, CRp$3, CRp$2, CRp$1].forEach(function (props) {
	  extend(CRp, props);
	});

	var renderer = [{
	  name: 'null',
	  impl: NullRenderer
	}, {
	  name: 'base',
	  impl: BR
	}, {
	  name: 'canvas',
	  impl: CR
	}];

	var incExts = [{
	  type: 'layout',
	  extensions: layout
	}, {
	  type: 'renderer',
	  extensions: renderer
	}];

	// registered extensions to cytoscape, indexed by name
	var extensions = {};

	// registered modules for extensions, indexed by name
	var modules = {};
	function setExtension(type, name, registrant) {
	  var ext = registrant;
	  var overrideErr = function overrideErr(field) {
	    warn('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
	  };
	  if (type === 'core') {
	    if (Core.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Core.prototype[name] = registrant;
	    }
	  } else if (type === 'collection') {
	    if (Collection.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Collection.prototype[name] = registrant;
	    }
	  } else if (type === 'layout') {
	    // fill in missing layout functions in the prototype

	    var Layout = function Layout(options) {
	      this.options = options;
	      registrant.call(this, options);

	      // make sure layout has _private for use w/ std apis like .on()
	      if (!plainObject(this._private)) {
	        this._private = {};
	      }
	      this._private.cy = options.cy;
	      this._private.listeners = [];
	      this.createEmitter();
	    };
	    var layoutProto = Layout.prototype = Object.create(registrant.prototype);
	    var optLayoutFns = [];
	    for (var i = 0; i < optLayoutFns.length; i++) {
	      var fnName = optLayoutFns[i];
	      layoutProto[fnName] = layoutProto[fnName] || function () {
	        return this;
	      };
	    }

	    // either .start() or .run() is defined, so autogen the other
	    if (layoutProto.start && !layoutProto.run) {
	      layoutProto.run = function () {
	        this.start();
	        return this;
	      };
	    } else if (!layoutProto.start && layoutProto.run) {
	      layoutProto.start = function () {
	        this.run();
	        return this;
	      };
	    }
	    var regStop = registrant.prototype.stop;
	    layoutProto.stop = function () {
	      var opts = this.options;
	      if (opts && opts.animate) {
	        var anis = this.animations;
	        if (anis) {
	          for (var _i = 0; _i < anis.length; _i++) {
	            anis[_i].stop();
	          }
	        }
	      }
	      if (regStop) {
	        regStop.call(this);
	      } else {
	        this.emit('layoutstop');
	      }
	      return this;
	    };
	    if (!layoutProto.destroy) {
	      layoutProto.destroy = function () {
	        return this;
	      };
	    }
	    layoutProto.cy = function () {
	      return this._private.cy;
	    };
	    var getCy = function getCy(layout) {
	      return layout._private.cy;
	    };
	    var emitterOpts = {
	      addEventFields: function addEventFields(layout, evt) {
	        evt.layout = layout;
	        evt.cy = getCy(layout);
	        evt.target = layout;
	      },
	      bubble: function bubble() {
	        return true;
	      },
	      parent: function parent(layout) {
	        return getCy(layout);
	      }
	    };
	    extend(layoutProto, {
	      createEmitter: function createEmitter() {
	        this._private.emitter = new Emitter(emitterOpts, this);
	        return this;
	      },
	      emitter: function emitter() {
	        return this._private.emitter;
	      },
	      on: function on(evt, cb) {
	        this.emitter().on(evt, cb);
	        return this;
	      },
	      one: function one(evt, cb) {
	        this.emitter().one(evt, cb);
	        return this;
	      },
	      once: function once(evt, cb) {
	        this.emitter().one(evt, cb);
	        return this;
	      },
	      removeListener: function removeListener(evt, cb) {
	        this.emitter().removeListener(evt, cb);
	        return this;
	      },
	      removeAllListeners: function removeAllListeners() {
	        this.emitter().removeAllListeners();
	        return this;
	      },
	      emit: function emit(evt, params) {
	        this.emitter().emit(evt, params);
	        return this;
	      }
	    });
	    define.eventAliasesOn(layoutProto);
	    ext = Layout; // replace with our wrapped layout
	  } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
	    // user registered renderers inherit from base

	    var BaseRenderer = getExtension('renderer', 'base');
	    var bProto = BaseRenderer.prototype;
	    var RegistrantRenderer = registrant;
	    var rProto = registrant.prototype;
	    var Renderer = function Renderer() {
	      BaseRenderer.apply(this, arguments);
	      RegistrantRenderer.apply(this, arguments);
	    };
	    var proto = Renderer.prototype;
	    for (var pName in bProto) {
	      var pVal = bProto[pName];
	      var existsInR = rProto[pName] != null;
	      if (existsInR) {
	        return overrideErr(pName);
	      }
	      proto[pName] = pVal; // take impl from base
	    }

	    for (var _pName in rProto) {
	      proto[_pName] = rProto[_pName]; // take impl from registrant
	    }

	    bProto.clientFunctions.forEach(function (name) {
	      proto[name] = proto[name] || function () {
	        error('Renderer does not implement `renderer.' + name + '()` on its prototype');
	      };
	    });
	    ext = Renderer;
	  } else if (type === '__proto__' || type === 'constructor' || type === 'prototype') {
	    // to avoid potential prototype pollution
	    return error(type + ' is an illegal type to be registered, possibly lead to prototype pollutions');
	  }
	  return setMap({
	    map: extensions,
	    keys: [type, name],
	    value: ext
	  });
	}
	function getExtension(type, name) {
	  return getMap({
	    map: extensions,
	    keys: [type, name]
	  });
	}
	function setModule(type, name, moduleType, moduleName, registrant) {
	  return setMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName],
	    value: registrant
	  });
	}
	function getModule(type, name, moduleType, moduleName) {
	  return getMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName]
	  });
	}
	var extension = function extension() {
	  // e.g. extension('renderer', 'svg')
	  if (arguments.length === 2) {
	    return getExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', { ... })
	  else if (arguments.length === 3) {
	    return setExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	  else if (arguments.length === 4) {
	    return getModule.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	  else if (arguments.length === 5) {
	    return setModule.apply(null, arguments);
	  } else {
	    error('Invalid extension access syntax');
	  }
	};

	// allows a core instance to access extensions internally
	Core.prototype.extension = extension;

	// included extensions
	incExts.forEach(function (group) {
	  group.extensions.forEach(function (ext) {
	    setExtension(group.type, ext.name, ext.impl);
	  });
	});

	// a dummy stylesheet object that doesn't need a reference to the core
	// (useful for init)
	var Stylesheet = function Stylesheet() {
	  if (!(this instanceof Stylesheet)) {
	    return new Stylesheet();
	  }
	  this.length = 0;
	};
	var sheetfn = Stylesheet.prototype;
	sheetfn.instanceString = function () {
	  return 'stylesheet';
	};

	// just store the selector to be parsed later
	sheetfn.selector = function (selector) {
	  var i = this.length++;
	  this[i] = {
	    selector: selector,
	    properties: []
	  };
	  return this; // chaining
	};

	// just store the property to be parsed later
	sheetfn.css = function (name, value) {
	  var i = this.length - 1;
	  if (string(name)) {
	    this[i].properties.push({
	      name: name,
	      value: value
	    });
	  } else if (plainObject(name)) {
	    var map = name;
	    var propNames = Object.keys(map);
	    for (var j = 0; j < propNames.length; j++) {
	      var key = propNames[j];
	      var mapVal = map[key];
	      if (mapVal == null) {
	        continue;
	      }
	      var prop = Style.properties[key] || Style.properties[dash2camel(key)];
	      if (prop == null) {
	        continue;
	      }
	      var _name = prop.name;
	      var _value = mapVal;
	      this[i].properties.push({
	        name: _name,
	        value: _value
	      });
	    }
	  }
	  return this; // chaining
	};

	sheetfn.style = sheetfn.css;

	// generate a real style object from the dummy stylesheet
	sheetfn.generateStyle = function (cy) {
	  var style = new Style(cy);
	  return this.appendToStyle(style);
	};

	// append a dummy stylesheet object on a real style object
	sheetfn.appendToStyle = function (style) {
	  for (var i = 0; i < this.length; i++) {
	    var context = this[i];
	    var selector = context.selector;
	    var props = context.properties;
	    style.selector(selector); // apply selector

	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];
	      style.css(prop.name, prop.value); // apply property
	    }
	  }

	  return style;
	};

	var version = "3.29.2";

	var cytoscape$1 = function cytoscape(options) {
	  // if no options specified, use default
	  if (options === undefined) {
	    options = {};
	  }

	  // create instance
	  if (plainObject(options)) {
	    return new Core(options);
	  }

	  // allow for registration of extensions
	  else if (string(options)) {
	    return extension.apply(extension, arguments);
	  }
	};

	// e.g. cytoscape.use( require('cytoscape-foo'), bar )
	cytoscape$1.use = function (ext) {
	  var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

	  args.unshift(cytoscape$1); // cytoscape is first arg to ext

	  ext.apply(null, args);
	  return this;
	};
	cytoscape$1.warnings = function (bool) {
	  return warnings(bool);
	};

	// replaced by build system
	cytoscape$1.version = version;

	// expose public apis (mostly for extensions)
	cytoscape$1.stylesheet = cytoscape$1.Stylesheet = Stylesheet;

	var cytoscapeHtmlLabel = {exports: {}};

	(function (module) {
		(function () {
		    var $$find = function (arr, predicate) {
		        if (typeof predicate !== "function") {
		            throw new TypeError("predicate must be a function");
		        }
		        var length = arr.length >>> 0;
		        var thisArg = arguments[1];
		        var value;
		        for (var i = 0; i < length; i++) {
		            value = arr[i];
		            if (predicate.call(thisArg, value, i, arr)) {
		                return value;
		            }
		        }
		        return undefined;
		    };
		    var LabelElement = (function () {
		        function LabelElement(_a, params) {
		            var node = _a.node, _b = _a.position, position = _b === void 0 ? null : _b, _c = _a.data, data = _c === void 0 ? null : _c;
		            this.updateParams(params);
		            this._node = node;
		            this.initStyles(params.cssClass);
		            if (data) {
		                this.updateData(data);
		            }
		            if (position) {
		                this.updatePosition(position);
		            }
		        }
		        LabelElement.prototype.updateParams = function (_a) {
		            var _b = _a.tpl, tpl = _b === void 0 ? function () { return ""; } : _b; _a.cssClass; var _d = _a.halign, halign = _d === void 0 ? "center" : _d, _e = _a.valign, valign = _e === void 0 ? "center" : _e; _a.ealign; var _g = _a.halignBox, halignBox = _g === void 0 ? "center" : _g, _h = _a.valignBox, valignBox = _h === void 0 ? "center" : _h;
		            var _align = {
		                "top": -.5,
		                "left": -.5,
		                "center": 0,
		                "right": .5,
		                "bottom": .5
		            };
		            this._align = [
		                _align[halign],
		                _align[valign],
		                100 * (_align[halignBox] - 0.5),
		                100 * (_align[valignBox] - 0.5)
		            ];
		            this.tpl = tpl;
		        };
		        LabelElement.prototype.updateData = function (data) {
		            try {
		                this._node.innerHTML = this.tpl(data);
		            }
		            catch (err) {
		                console.error(err);
		            }
		        };
		        LabelElement.prototype.getNode = function () {
		            return this._node;
		        };
		        LabelElement.prototype.updatePosition = function (pos) {
		            this._renderPosition(pos);
		        };
		        LabelElement.prototype.initStyles = function (cssClass) {
		            var stl = this._node.style;
		            stl.position = 'absolute';
		            if (cssClass && cssClass.length) {
		                this._node.classList.add(cssClass);
		            }
		        };
		        LabelElement.prototype._renderPosition = function (position) {
		            var prev = this._position;
		            var x = position.x + this._align[0] * position.w;
		            var y = position.y + this._align[1] * position.h;
		            var a = position.a;
		            if (!prev || prev[0] !== x || prev[1] !== y) {
		                this._position = [x, y];
		                var valRel = "translate(" + this._align[2] + "%," + this._align[3] + "%) ";
		                var valAbs = "translate(" + x.toFixed(2) + "px," + y.toFixed(2) + "px) ";
		                var val = valRel + valAbs;
		                var stl = this._node.style;
		                if (a) {
		                    val += "rotate(" + a.toFixed(2) + "deg)";
		                    var xo = Math.abs(this._align[2]);
		                    var yo = Math.abs(this._align[3]);
		                    stl.transformOrigin = xo + "% " + yo + "% 0px";
		                }
		                stl.webkitTransform = val;
		                stl.msTransform = val;
		                stl.transform = val;
		            }
		        };
		        return LabelElement;
		    }());
		    var LabelContainer = (function () {
		        function LabelContainer(node) {
		            this._node = node;
		            this._elements = {};
		        }
		        LabelContainer.prototype.addOrUpdateElem = function (id, param, payload) {
		            if (payload === void 0) { payload = {}; }
		            var cur = this._elements[id];
		            if (cur) {
		                cur.updateParams(param);
		                cur.updateData(payload.data);
		                cur.updatePosition(payload.position);
		            }
		            else {
		                var nodeElem = document.createElement("div");
		                this._node.appendChild(nodeElem);
		                this._elements[id] = new LabelElement({
		                    node: nodeElem,
		                    data: payload.data,
		                    position: payload.position
		                }, param);
		            }
		        };
		        LabelContainer.prototype.removeElemById = function (id) {
		            if (this._elements[id]) {
		                this._node.removeChild(this._elements[id].getNode());
		                delete this._elements[id];
		            }
		        };
		        LabelContainer.prototype.updateElemPosition = function (id, position) {
		            var ele = this._elements[id];
		            if (ele) {
		                ele.updatePosition(position);
		            }
		        };
		        LabelContainer.prototype.updatePanZoom = function (_a) {
		            var pan = _a.pan, zoom = _a.zoom;
		            var val = "translate(" + pan.x + "px," + pan.y + "px) scale(" + zoom + ")";
		            var stl = this._node.style;
		            var origin = "top left";
		            stl.webkitTransform = val;
		            stl.msTransform = val;
		            stl.transform = val;
		            stl.webkitTransformOrigin = origin;
		            stl.msTransformOrigin = origin;
		            stl.transformOrigin = origin;
		        };
		        LabelContainer.prototype.has = function (id) {
		            return this._elements[id] !== undefined;
		        };
		        return LabelContainer;
		    }());
		    function cyHtmlLabel(_cy, params) {
		        var _params = (!params || typeof params !== "object") ? [] : params;
		        var _lc = createLabelContainer();
		        _cy.one("render", function (e) {
		            createCyHandler(e);
		            wrapCyHandler(e);
		        });
		        _cy.on("add", addCyHandler);
		        _cy.on("layoutstop", layoutstopHandler);
		        _cy.on("remove", removeCyHandler);
		        _cy.on("data", updateDataCyHandler);
		        _cy.on("pan zoom", wrapCyHandler);
		        _cy.on("position bounds", moveCyHandler);
		        return _cy;
		        function createLabelContainer() {
		            var _cyContainer = _cy.container();
		            var _titlesContainer = document.createElement("div");
		            var _cyCanvas = _cyContainer.querySelector("canvas");
		            var cur = _cyContainer.querySelector("[class^='cy-html']");
		            if (cur) {
		                _cyCanvas.parentNode.removeChild(cur);
		            }
		            var stl = _titlesContainer.style;
		            stl.position = 'absolute';
		            stl['z-index'] = 10;
		            stl.width = '500px';
		            stl['pointer-events'] = 'none';
		            stl.margin = '0px';
		            stl.padding = '0px';
		            stl.border = '0px';
		            stl.outline = '0px';
		            stl.outline = '0px';
		            _cyCanvas.parentNode.appendChild(_titlesContainer);
		            return new LabelContainer(_titlesContainer);
		        }
		        function createCyHandler(_a) {
		            var cy = _a.cy;
		            _params.forEach(function (x) {
		                cy.elements(x.query).forEach(function (d) {
		                    _lc.addOrUpdateElem(d.id(), x, {
		                        position: getPosition(d),
		                        data: d.data()
		                    });
		                });
		            });
		        }
		        function addCyHandler(ev) {
		            var target = ev.target;
		            var param = $$find(_params.slice().reverse(), function (x) { return target.is(x.query); });
		            if (param) {
		                _lc.addOrUpdateElem(target.id(), param, {
		                    position: getPosition(target),
		                    data: target.data()
		                });
		            }
		        }
		        function layoutstopHandler(_a) {
		            var cy = _a.cy;
		            _params.forEach(function (x) {
		                cy.elements(x.query).forEach(function (d) {
		                    _lc.updateElemPosition(d.id(), getPosition(d));
		                });
		            });
		        }
		        function removeCyHandler(ev) {
		            _lc.removeElemById(ev.target.id());
		        }
		        function moveCyHandler(ev) {
		            if (_lc.has(ev.target.id()) ||
		                ev.target.connectedEdges(function (ele) { return _lc.has(ele.id()); }).size()) {
		                _lc.updateElemPosition(ev.target.id(), getPosition(ev.target));
		                ev.target.connectedEdges().forEach(function (el) {
		                    _lc.updateElemPosition(el.id(), getPosition(el));
		                });
		            }
		        }
		        function updateDataCyHandler(ev) {
		            setTimeout(function () {
		                var target = ev.target;
		                var param = $$find(_params.slice().reverse(), function (x) { return target.is(x.query); });
		                if (param) {
		                    _lc.addOrUpdateElem(target.id(), param, {
		                        position: getPosition(target),
		                        data: target.data()
		                    });
		                }
		                else {
		                    _lc.removeElemById(target.id());
		                }
		            }, 0);
		        }
		        function wrapCyHandler(_a) {
		            var cy = _a.cy;
		            _lc.updatePanZoom({
		                pan: cy.pan(),
		                zoom: cy.zoom()
		            });
		        }
		        function lineAngle(p0, p1) {
		            var dx = p1.x - p0.x;
		            var dy = p1.y - p0.y;
		            var angle = Math.atan(dy / dx);
		            if (dx === 0 && angle < 0) {
		                angle = angle * -1;
		            }
		            return angle * 180 / Math.PI;
		        }
		        function getPosition(el) {
		            if (el.isNode()) {
		                return {
		                    w: el.width(),
		                    h: el.height(),
		                    x: el.position("x"),
		                    y: el.position("y"),
		                    a: 0
		                };
		            }
		            else if (el.isEdge()) {
		                var param = $$find(_params.slice().reverse(), function (x) { return el.is(x.query); });
		                if (param) {
		                    var pos = void 0, angle = 0;
		                    if (param.ealign === 'source') {
		                        pos = el.sourceEndpoint();
		                    }
		                    else if (param.ealign === 'target') {
		                        pos = el.targetEndpoint();
		                    }
		                    else {
		                        pos = el.midpoint();
		                    }
		                    if (param.autorotate || el.data('label_autorotate')) {
		                        angle = lineAngle(el.sourceEndpoint(), el.targetEndpoint());
		                    }
		                    return {
		                        w: 0,
		                        h: 0,
		                        x: pos.x,
		                        y: pos.y,
		                        a: angle
		                    };
		                }
		            }
		        }
		    }
		    var register = function (cy) {
		        if (!cy) {
		            return;
		        }
		        cy("core", "htmlLabel", function (optArr) {
		            return cyHtmlLabel(this, optArr);
		        });
		    };
		    if (module.exports) {
		        module.exports = function (cy) {
		            register(cy);
		        };
		    }
		    if (typeof cytoscape !== "undefined") {
		        register(cytoscape);
		    }
		}());
		
	} (cytoscapeHtmlLabel));

	var cytoscapeHtmlLabelExports = cytoscapeHtmlLabel.exports;
	var htmlLabel = /*@__PURE__*/getDefaultExportFromCjs(cytoscapeHtmlLabelExports);

	htmlLabel(cytoscape$1);
	class Structure extends RNA {
	  /**
	   * Create Drawing from ebi basepair interaction json
	   * @param {int} n - RNA length
	   * @param {json} data - basepair interaction produced by FR3D
	   * @param {string} seq - sequence
	   */
	  static fromEBIJson(n, data, seq = "") {
	    let v = super.fromDBN(" ".repeat(n), seq);
	    data["annotations"].forEach(bp => {
	      if (bp['crossing'] == 0) {
	        v.addBPNow(parseInt(bp['seq_id1'], 10) - 1, parseInt(bp['seq_id2'], 10) - 1);
	      } else {
	        let type = bp["bp"];
	        v.addBP(parseInt(bp['seq_id1'], 10) - 1, parseInt(bp['seq_id2'], 10) - 1, {
	          noplanar: true,
	          stericity: type[0],
	          edge5: type[1],
	          edge3: type[2],
	          color: "green"
	        });
	      }
	    });
	    return v;
	  }

	  /**
	   *	Create cytoscape drawing
	   *	@param {DOM element} container - where to draw cytoscape
	   */
	  createCy(container) {
	    this.cfg;
	    let cyDist = this.createCyFormat();
	    cyDist["container"] = container;
	    var cy = cytoscape$1(cyDist);
	    this.cy = cy;

	    // HTML label
	    let baseNumLabel = this.cyOfBaseNum();
	    let htmlLabel = [...baseNumLabel];
	    if (htmlLabel.length != 0) {
	      cy.htmlLabel([...baseNumLabel]);
	    }
	  }
	}

	/**
	 * Motif configuration extended from default config
	 */
	class MotifConfig extends VARNAConfig {
	  baseNumPeriod = 0;
	  rootBaseStyle = new ModelBaseStyle({
	    baseInnerColor: "#606060",
	    baseOutlineColor: "white"
	  });
	  dummyBaseStyle = new ModelBaseStyle({
	    baseInnerColor: "#DDDDDD",
	    baseOutlineColor: "white"
	  });
	  rootBPStyle = {
	    color: "black",
	    thickness: 2
	  };
	  dummyBPStyle = {
	    color: "#DDDDDD"
	  };
	  constructor(opt = {}) {
	    super();
	    Object.assign(this, opt);
	  }
	}

	/**
	 * Motif drawing class
	 */
	class Motif extends Structure {
	  cfg = new MotifConfig();
	  static fromDBN(dbn, seq = "") {
	    let newSeq = seq.length == 0 ? "" : seq.split("&").map(x => " " + x + " ").join("*");
	    let newdbn = "(";
	    let offset = 1;
	    // Base number list for new dbn
	    let baseNumLst = [null];
	    let dummyBPLst = [];
	    for (let i = 0; i < dbn.length; i++) {
	      if (dbn[i] == '*') {
	        newdbn += "(&)";
	        dummyBPLst.push([offset + i, offset + i + 1]);
	        offset += 1;
	        baseNumLst.push(null, null);
	      } else {
	        newdbn += dbn[i];
	        baseNumLst.push(i - offset + 2);
	      }
	    }
	    // Complete the rest
	    newdbn += ")";
	    baseNumLst.push(null);
	    let motif = super.fromDBN(newdbn, newSeq);
	    dummyBPLst.push([0, motif.baseList.length - 1]);
	    // Set dummy
	    _.flatten(dummyBPLst).forEach(i => motif.baseList[i].addCustomClass("dummy"));
	    dummyBPLst.forEach(bp => motif.baseList[bp[0]].getBP().setStyle(motif.cfg.dummyBPStyle));
	    // Set root
	    motif.baseList[1].addCustomClass("root");
	    motif.baseList[1].getBP().setStyle(motif.cfg.rootBPStyle);
	    motif.baseList[motif.baseList.length - 2].addCustomClass("root");
	    // Set base number
	    _.zip(motif.baseList, baseNumLst).forEach(([base, num]) => base.setBaseNum(num));
	    return motif;
	  }
	  customStyle() {
	    let dummy = this.cfg.dummyBaseStyle.toCyStyleInList(this.getSelector(`node.dummy`));
	    let root = this.cfg.rootBaseStyle.toCyStyleInList(this.getSelector(`node.root`));
	    return [...dummy, ...root];
	  }
	}

	/**
	 * Genreal Multi RNA Draw class
	 */
	class MultiDraw {
	  rnaList = [];
	  rnaLimit = null;
	  constructor() {}

	  /**
	   * Add RNA into draw
	   * @param {RNA} rna - RNA to add
	   */
	  addRNA(rna) {
	    if (!rna instanceof RNA) {
	      throw new Error("Input is not an instance of RNA");
	    }
	    if (this.rnaLimit !== null && this.rnaLimit <= this.rnaList.length) {
	      // RNA limit reached, reject require of adding
	      // TODO: add warning
	      return -1;
	    }
	    this.rnaList.push(rna);
	    return this.getRNACount() - 1;
	  }

	  /**
	   * Get RNA in the draw by given index
	   */
	  getRNA(ind) {
	    return this.rnaList[ind];
	  }

	  /**
	   * Return RNA number in the draw
	   */
	  getRNACount() {
	    return this.rnaList.length;
	  }

	  /**
	   * @abstract
	   */
	  createCy(container) {
	    throw new Error("Method 'createCy(container)' must be implemented.");
	  }
	}

	class PlaneCompare extends MultiDraw {
	  rnaLimit = 2;
	  constructor(rna1, rna2) {
	    super();
	    this.addRNA(rna1);
	    this.addRNA(rna2);
	  }
	  createCy(container) {
	    let rna1 = this.getRNA(0);
	    let rna2 = this.getRNA(1);
	    // Force RNA1 is in upper plane and RNA2 in lower plane
	    rna1.cfg.set({
	      bpLowerPlane: false,
	      layout: Layouts.LINE
	    });
	    rna2.cfg.set({
	      bpLowerPlane: true,
	      layout: Layouts.LINE
	    });
	    // Set RNA name if not set yet
	    if (rna1.name === null) {
	      rna1.name = "rnaupper";
	    }
	    if (rna2.name === null) {
	      rna2.name = "rnalower";
	    }
	    let cyBase = rna1.createCyFormat();
	    cyBase["container"] = container;
	    // We only need bp from the second RNA and need to modify source and target
	    let rna2BP = rna2.cyOfBPs();
	    rna2BP.el.forEach(bp => {
	      bp.data.source = bp.data.source.replace(rna2.name, rna1.name);
	      bp.data.target = bp.data.target.replace(rna2.name, rna1.name);
	    });
	    cyBase.elements.push(...rna2BP.el);
	    cyBase.style.push(...rna2BP.style);
	    var cy = cytoscape$1(cyBase);
	    this.cy = cy;
	  }
	}

	/**
	 * Basic RNA draw function
	 *
	 * @param {string} dbn - RNA in dot-bracket notation (dbn)
	 * @param {Element} container - HTML element to draw RNA
	 * @param {VARNAConfig} varnaCfg - VARNA configuration to draw
	 */
	function drawRNA(container, dbn, seq = "", varnaCfg = new VARNAConfig()) {
	  let v = Structure.fromDBN(dbn, seq);
	  v.setConfig(varnaCfg);
	  v.createCy(container);
	  return v;
	}

	exports.Layouts = Layouts;
	exports.ModelBP = ModelBP;
	exports.ModelBase = ModelBase;
	exports.ModelBaseStyle = ModelBaseStyle;
	exports.Motif = Motif;
	exports.MotifConfig = MotifConfig;
	exports.PlaneCompare = PlaneCompare;
	exports.Puzzler = Puzzler;
	exports.RNA = RNA;
	exports.Structure = Structure;
	exports.VARNAConfig = VARNAConfig;
	exports.drawRNA = drawRNA;

}));
